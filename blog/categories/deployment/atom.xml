<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: deployment | Artsy Engineering]]></title>
  <link href="https://artsy.github.io/blog/categories/deployment/atom.xml" rel="self"/>
  <link href="https://artsy.github.io/"/>
  <updated>2024-08-06T19:48:16+00:00</updated>
  <id>https://artsy.github.io/</id>
  <author>
    <name><![CDATA[]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[iOS Deploys: Super Weird And Totally Normal]]></title>
    <link href="https://artsy.github.io/blog/2020/03/02/ios-deploys-super-weird-totally-normal/"/>
    <updated>2020-03-02T00:00:00+00:00</updated>
    <id>https://artsy.github.io/blog/2020/03/02/ios-deploys-super-weird-totally-normal</id>
    <content type="html"><![CDATA[<p>Software deploys! What a concept. You have some code running somewhere, and you need to get it running somewhere
else. What could possibly go wrong? While web developers have become accustom to some <em>really slick</em> deploy
processes, iOS developers have to work within some very different constraints.</p>

<p>Today I want to explore the differences between deploying iOS software and front-end/back-end web software. Some of
these differences are inherent to how the code gets executed, and some of the differences are incidental to choices
that Apple has made. These are constraints that iOS developers need to work within. As Artsy has adopted React
Native over the past four years, we have had more and more of our web engineering colleagues contributing to our
iOS app. For these web engineers, getting familiar with the iOS deploy constraints is as important as getting to
know Xcode and CocoaPods.</p>

<!-- more -->

<h2 id="a-release-case-study">A Release Case Study</h2>

<p>We’re going to use a case study to frame today’s discussion. Artsy’s Mobile Experience team recently got a ticket
from our Platform team. The nature of the ticket itself doesn’t matter, but it involved a change we were making to
our API. I fixed the bug and submitted a pull request, which quickly got merged. We tested the bug fix in our next
beta deploy, and everything looked fine. Great so far.</p>

<p>Artsy releases iOS software on a two-week release cadence, and this bug fix was scheduled to be released to users
the following week. But our back-end team wanted to quickly deploy that API change, which would require the app bug
fix to get released to users <em>first</em>.</p>

<p>So… what to do?</p>

<p>Do we release off-cadence? Or do we push back on our Platform team and ask them to hold off until the scheduled
release?</p>

<p>Let’s actually pause for a moment and consider one of the assumptions we made above. If you’re a web engineer, the
idea of releasing only every two weeks might seem pretty strange! I mean, why not release continuously? For
example, Artsy’s website gets deployed to our staging environment after every merged pull request, and staging then
gets promoted to production several times a day. This process is generally referred to as “continuous delivery”,
and <a href="https://www.thoughtworks.com/insights/blog/case-continuous-delivery">it has a lot of advantages</a>. That’s why
it’s so common among web engineering teams. So why not use continuous delivery on iOS apps?</p>

<h2 id="the-executable-problem">The Executable Problem</h2>

<p>There are two reasons we can’t use continuous delivery on iOS. First, continuous delivery is only really possible
when you control where the software gets executed (or, in the case of web front-ends, where the client-side code
gets served from). Artsy controls our own servers, so we can deliver web software continuously. The next time a
user makes a web request, they’ll get the updated code. However, the Artsy iOS app runs on our users’ devices,
instead. We can’t push out updates to users’ iPhones or iPads in the same way we can push updates to our servers.</p>

<p>iOS apps are binary executables that are distributed through Apple’s App Store, and updates to apps have to be
pulled down by devices. Even if <em>most</em> users have automatic updates turned on, those updates are typically
installed overnight. Consequently, there’s quite a lag between when we deploy an iOS update and when users run the
code. While it only takes about a week for 80% of our users to update to the latest version, there’s a very long
tail after that.</p>

<p><img src="/images/2020-03-02-ios-deploys-super-weird-totally-normal/graph.png" alt="Graph of in-use versions of Artsy's app, illustrating both the quick adoption of new updates by most users and the long tail of old versions that are never updated" /></p>

<p>iOS software is executed in an environment that we don’t control, that we can’t push updates to, and most
importantly, that we can’t roll back deploys on. If we ship a version of our app with a bug, but then ship an
updated version with a fix right away, there is absolutely no guarantee that users will install that update.
<em>Ever</em>. That means that <em>every</em> deploy we make to our iOS software requires a lot of confidence in that code. In
contrast, rolling back a web deploy is quite painless. If we ship a bug to the web, no problem: just roll back the
deploy, fix the bug, and re-deploy with the fix.</p>

<p>(Note: some readers might be wondering why we don’t take advantage of over-the-air updates to our React Native
JavaScript bundle. This is definitely possible, but our app is brownfield with some native code and some React
Native code and we haven’t yet built out the infrastructure for this. As more and more code shifts to React Native,
we plan to investigate OTA updates to JavaScript bundles.)</p>

<h2 id="apples-platform-apples-rules">Apple’s Platform, Apple’s Rules</h2>

<p>The second reason to deploy iOS software on a schedule, rather than with continuous delivery, depends on the App
Store review process. This is another big difference that takes web engineers a while to get used to. Whenever we
ship a version of our iOS app, we ship it to Apple for review, and then Apple ships it to our users. I’m not going
to debate the utility of Apple as an intermediary – the fact is that they own the iOS platform and these are the
rules they have chosen. If you want to ship iOS software, then you have to abide by Apple’s rules.</p>

<p>App Store review isn’t exactly QA. I mean, if we were to ship an app update and it crashes upon launch, Apple isn’t
likely to approve that update. But if we have a small bug buried somewhere in the app, we can’t expect Apple to
find it. Apple is only testing for adherence to their
<a href="https://developer.apple.com/app-store/review/guidelines/">App Store Review Guidelines</a>. Apple is looking for
things like: is the app trying to steal user data? Is the app displaying objectionable material, given its age
rating? Is the app’s description and App Store metadata correct? That kind of stuff.</p>

<p>So not only do iOS software developers need a lot of confidence in every deploy, but they also need to abide by
Apple’s guidelines.</p>

<p>Alright. Let’s return to the case study from earlier.</p>

<h2 id="case-study-resolution">Case Study Resolution</h2>

<p>We had a bug fix in our app, and getting it deployed was blocking an important change to our back-end API. First,
we had to consider that some users simply wouldn’t get the update. We had to ask ourselves if this would block the
back-end change entirely – through open discussions with the team, we decided to move forward. Second, we had to
consider the other work that had been merged since our last release. Were we confident in deploying that work
as-is? And what amount of QA would need to be done to ship those changes as well?</p>

<p>That last point is really interesting because there was actually another option. Rather than deploy the app based
off the current <code class="language-plaintext highlighter-rouge">master</code> branch (with the bug fix <em>and</em> other work included), we did something a bit clever.
<a href="https://fastlane.tools">fastlane</a>, the tool we use to automate our iOS deploys, will tag each commit that we
submit to the App Store. So rather than deploy the current <code class="language-plaintext highlighter-rouge">master</code> branch, which would require very rigorous QA,
we checked out the previous release tag. We then used
<a href="https://www.atlassian.com/git/tutorials/cherry-pick"><code class="language-plaintext highlighter-rouge">git cherry-pick</code></a> to apply <em>only</em> the bug fix changes, and
deployed from there.</p>

<p><img src="/images/2020-03-02-ios-deploys-super-weird-totally-normal/slack.png" alt="Screenshot from Slack where I detailed my plan to cherry-pick the commits" /></p>

<p>This isolated the changes we were making to the app and minimized the amount of QA we needed to feel confident in
our release. Even still, we ran through our usual QA script. As I hope I’ve demonstrated above, it’s always better
to be safe than be sorry when it comes to deploying iOS software.</p>

<p>This <code class="language-plaintext highlighter-rouge">git cherry-pick</code> approach has its own trade-offs, but it is very effective in the right circumstance. It’s an
approach I’ve only had to use a few times during my time at Artsy, but it’s a good approach to be familiar with.
This situation also highlights a benefit of automating iOS deploys: we know <em>exactly</em> which commit each version of
our app is running, making it easy to <code class="language-plaintext highlighter-rouge">git cherry-pick</code> with confidence.</p>

<p>I hope I’ve illustrated how iOS software is a bit different from web software, both inherently and incidentally.
Many of these same quirks apply to Android deploys as well. Mobile software feels closer to software sold in
shrink-wrapped boxes than it does to Docker images shipped to Kubernetes clusters. And that’s okay. Different
platforms will always have different constraints. Hopefully by understanding these constraints, mobile and web
engineers can gain a greater empathy for one another and, ideally, share ideas and solutions so we can all learn
and grown together.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Migrating to PR Label based Continuous Deployment]]></title>
    <link href="https://artsy.github.io/blog/2019/01/03/label-based-prs/"/>
    <updated>2019-01-03T00:00:00+00:00</updated>
    <id>https://artsy.github.io/blog/2019/01/03/label-based-prs</id>
    <content type="html"><![CDATA[<p>In the JavaScript world, the idea of deploying your libraries on every PR is pretty common. As someone who runs a
dependency manager but comes from a native background, it’s easy for me to cringe and imagine the strain this puts
on NPM’s servers. However, that is where the ecosystem is and <a href="https://github.com/artsy/reaction/issues/388">continuous deployment</a> can be really useful. So,
about a year ago <a href="https://github.com/artsy/reaction/pull/521">we started</a> moving a lot of our libraries to do this at Artsy too. Starting with our most
critical dependencies:</p>

<ul>
  <li><a href="https://github.com/artsy/reaction#readme">Reaction</a> (our React components used in many of our web apps)</li>
  <li><a href="https://github.com/artsy/palette#readme">Palette</a> (our <a href="https://palette.artsy.net">design system</a>)</li>
</ul>

<p>We started off using a commit message based workflow, but have just finished the migrating to a GitHub Label based
workflow that is less workload on individual contributors. This post will cover how, and why.</p>

<!-- more -->

<h2 id="why">Why?</h2>

<p>We started using <a href="https://semantic-release.gitbook.io/semantic-release/">semantic-release</a> to handle commit message based deploys. The way semantic-release works
is you would add a specially formatted commit that included a version prefix indicating you wanted a deploy. For
example, <code class="language-plaintext highlighter-rouge">[PATCH artwork] Fix safari mail issue</code> would mean that by merging a PR with this commit into master
should trigger a patch release.</p>

<p>This is their ideal flow, but the reality for us is that a lot of people would forget to do this, or write commits
like: <code class="language-plaintext highlighter-rouge">[PATCH] bumpity bump</code>. Even worse, these kind of commits were the perfect reason for pushing to master and
skipping code review to speed things up.</p>

<p>We could have added a pre-commit hooks that enforced the messaging on commits, but that’s not very <a href="https://github.com/artsy/README/blob/master/culture/engineering-principles.md#minimal-viable-process">Minimum Viable
Process</a> - where we try to map new tool/process improvements to existing behavior instead of regimenting new
behavior when possible.</p>

<p>The problem felt like the idea of declaring your version changes at commit time felt like a disconnect from how
people thought about deploys. The code unit for a review is a Pull Request, not per-commit. To try improve on our
deployment, we re-grouped and discussed what could be a better mapping to our existing workflow. Our answer was: PR
Label based deploys.</p>

<p>The idea is: You write a PR exactly as you used to, when you create a new PR then you apply a label saying whether
it is a major, minor, patch or trivial PR and when it is merged then deploy could be made for you.</p>

<p>To match our existing behavior completely, we would automatically add the “patch” label to any PR which doesn’t
declare what type of deployment it is up-front.</p>

<p>I summarized our ideal state, and turned it into an RFC on our Reaction repo: <a href="https://github.com/artsy/reaction/issues/1095">“Change rules around automatic
deploys, and add a CHANGELOG”</a> .</p>

<h2 id="how">How?</h2>

<h4 id="deployment">Deployment</h4>

<p>We started building this infrastructure inside <a href="https://github.com/artsy/reaction/pull/1407">our app Reaction</a>. Our implementation was a PR that lasted a
few months. It was a hard project to prioritize, and didn’t really seem to have an end in sight. This changed last
week when we discovered the work going on over at <a href="https://github.com/intuit/auto-release#readme">auto-release</a> by the team at <a href="https://github.com/intuit/">Intuit</a>.</p>

<p>The team at Intuit had taken the same problem and worked to apply it generically, making it a useful tool for
everyone rather than just for one type of project. Perfect.</p>

<p>To try it out, I set it up on our upcoming CLI for the <a href="https://github.com/omakase-js/omakase#readme">Artsy Omakase</a> JS stack - which is a <a href="https://github.com/lerna/lerna#readme">Lerna</a>
mono-repo. This means it’s a single repo for many JS packages, which makes it a bit more complex than a normal repo
for a node project.</p>

<p>Auto-release handled this setup out-of-the-box, <code class="language-plaintext highlighter-rouge">10/10</code> - so it was likely to handle our simpler repos. In the
process we made a bunch of PRs back and were quickly iterating on making it work well for Artsy also. Collaborating
on projects like this is our <a href="https://github.com/artsy/README/blob/master/culture/engineering-principles.md#own-your-dependencies">bread and butter</a>, it means we don’t have to build tools from scratch and
can improve upon great work by others.</p>

<p>To use it, we needed to set up two environment variables:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">NPM_TOKEN</code> - used to deploy your package to NPM</li>
  <li><code class="language-plaintext highlighter-rouge">GH_TOKEN</code> - used to create GitHub releases</li>
</ul>

<p>and you need to make sure your CI has write access to your repo, so it can push tags and the CHANGELOG entries back
to your repo.</p>

<h4 id="downsides-to-continuous-deployment">Downsides to Continuous Deployment</h4>

<p>Both the commit message and PR label based continuous deployment structure comes with one annoying flaw, if you’re
merging many PRs at once - then you can get into trouble with versioning. We’ve been discussing ideas around this
in the [auto-release issues][ar_iss]. We already had this flaw, so it just propagated to the new technique. We’ve
been wondering if deploying via <a href="https://github.com/features/actions">GitHub actions</a> may fix this.</p>

<h4 id="peril">Peril</h4>

<p>With auto-release you can have set an option to treat having no release label on your PR as a being a “patch”
release. This is a great setting, but an ideal workflow for us is to showcase what is happening every time. This
makes the understanding of our deployments explicit, and is a good reminder to highlight that you might want to
change the type of deployment. You can see this happening to me <a href="https://github.com/artsy/reaction/pull/1787">in this PR</a>.</p>

<p>We’re currently at <code class="language-plaintext highlighter-rouge">9.1.59</code> - meaning 58 patches in a row, so it’s pretty rare for a minor or major. By making it
obvious how to change that during the PR (by highlighting that it’s classed as a patch each time) we can maybe make
the version number change a bit closer to <em>some form</em> of “semantic reality”.</p>

<p>We wanted to first roll this out on one repo, so we scoped <a href="https://github.com/artsy/peril-settings/pull/88">our Artsy Peril changes</a> to just the
<code class="language-plaintext highlighter-rouge">artsy/reaction</code> repo</p>

<div class="language-diff highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">{</span>
  "rules": {
    // Keep a list of all deployments in slack
    "create (ref_type == tag)": "org/newRelease.ts",
    ...
  },
  "repos": {
    "artsy/reaction": {
      "pull_request": "danger/pr.ts",
<span class="gi">+     "pull_request.opened": "artsy/peril-settings@repos/reaction/addPatchLabel.ts"
</span>    },
    "artsy/force": {
      "pull_request": "dangerfile.ts"
    },
    ...
  },
<span class="err">}</span>
</code></pre></div></div>

<p>The simplest implementation for adding the label is this:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// repos/reaction/addPatchLabel.ts</span>
<span class="c1">//</span>
<span class="k">export</span> <span class="k">default</span> <span class="k">async</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">pr</span> <span class="o">=</span> <span class="nx">danger</span><span class="p">.</span><span class="nx">github</span><span class="p">.</span><span class="nx">pr</span>

  <span class="kd">const</span> <span class="nx">patchLabelName</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">Version: Patch</span><span class="dl">"</span>
  <span class="kd">const</span> <span class="nx">requiredPrefix</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">Version: </span><span class="dl">"</span>

  <span class="c1">// Someone's already made a decision on the version</span>
  <span class="kd">const</span> <span class="nx">hasAlreadyGotLabel</span> <span class="o">=</span> <span class="nx">danger</span><span class="p">.</span><span class="nx">github</span><span class="p">.</span><span class="nx">issue</span><span class="p">.</span><span class="nx">labels</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="nx">l</span> <span class="o">=&gt;</span> <span class="nx">l</span><span class="p">.</span><span class="nx">name</span><span class="p">.</span><span class="nx">startsWith</span><span class="p">(</span><span class="nx">requiredPrefix</span><span class="p">))</span>
  <span class="k">if</span> <span class="p">(</span><span class="nx">hasAlreadyGotLabel</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`Skipping setting the patch label, because the PR author already set one.`</span><span class="p">)</span>
    <span class="k">return</span>
  <span class="p">}</span>

  <span class="c1">// Create or add the label if it's not being used</span>
  <span class="kd">const</span> <span class="nx">label</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">name</span><span class="p">:</span> <span class="nx">patchLabelName</span><span class="p">,</span>
    <span class="na">color</span><span class="p">:</span> <span class="dl">"</span><span class="s2">247A38</span><span class="dl">"</span><span class="p">,</span>
    <span class="na">description</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Indicates that you want this PR to trigger a patch release</span><span class="dl">"</span>
  <span class="p">}</span>

  <span class="kd">const</span> <span class="nx">repo</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">owner</span><span class="p">:</span> <span class="nx">pr</span><span class="p">.</span><span class="nx">base</span><span class="p">.</span><span class="nx">user</span><span class="p">.</span><span class="nx">login</span><span class="p">,</span>
    <span class="na">repo</span><span class="p">:</span> <span class="nx">pr</span><span class="p">.</span><span class="nx">base</span><span class="p">.</span><span class="nx">repo</span><span class="p">.</span><span class="nx">name</span><span class="p">,</span>
    <span class="na">id</span><span class="p">:</span> <span class="nx">pr</span><span class="p">.</span><span class="nx">number</span>
  <span class="p">}</span>

  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">Adding the label:</span><span class="dl">"</span><span class="p">,</span> <span class="nx">label</span><span class="p">.</span><span class="nx">name</span><span class="p">)</span>
  <span class="k">await</span> <span class="nx">danger</span><span class="p">.</span><span class="nx">github</span><span class="p">.</span><span class="nx">utils</span><span class="p">.</span><span class="nx">createOrAddLabel</span><span class="p">(</span><span class="nx">label</span><span class="p">,</span> <span class="nx">repo</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>

<p>This will dynamically add your label if it doesn’t exist on the repo yet. Our <a href="https://github.com/artsy/peril-settings/blob/db492b5f9213faee3e5d8659c55b84c635240f0c/repos/reaction/addPatchLabel.ts">production
implementation</a> is a bit more complicated because it will create all of the different labels too. This
means as we roll out the PR Label based workflow to other repos, the labels will be consistent.</p>

<p>Introducing auto-release meant introducing our first automatically generated changelog (something I’m not sold on,
I see changelogs as consumer-facing. Most PR title/descriptions aren’t aimed at downstream consumers, but I’m open
to giving this a shot as today the consumers are also contributors to the repo) which broke one of our global Peril
rules. This rule would detect a if a repo has a changelog, and ask you to update it if you’ve made any app changes.
We <a href="https://github.com/artsy/peril-settings/pull/89">amended that rule</a> to detect auto-release on the repo first.</p>

<h2 id="so-how-do-i-get-this-set-up">So, how do I get this set up?</h2>

<p>For the automatic deployment:</p>

<ol>
  <li>Install auto: <code class="language-plaintext highlighter-rouge">yarn add -D auto-release-cli</code></li>
  <li>Run <code class="language-plaintext highlighter-rouge">yarn auto init</code> and go through the questions</li>
  <li>Add a <code class="language-plaintext highlighter-rouge">release</code> script to your <code class="language-plaintext highlighter-rouge">package.json</code>: <code class="language-plaintext highlighter-rouge">"release": "auto shipit"</code></li>
  <li>In your CI, set both <code class="language-plaintext highlighter-rouge">NPM_TOKEN</code> and <code class="language-plaintext highlighter-rouge">GH_TOKEN</code></li>
  <li>Add <code class="language-plaintext highlighter-rouge">echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" &gt;&gt; ~/.npmrc</code> to “log in” to NPM in our deploy steps</li>
  <li>In your deployment phase run: <code class="language-plaintext highlighter-rouge">yarn release</code></li>
</ol>

<p>For the Peril rule:</p>

<ol>
  <li>Add <code class="language-plaintext highlighter-rouge">"pull_request.opened": "artsy/peril-settings@repos/reaction/addPatchLabel.ts"</code> to your
<code class="language-plaintext highlighter-rouge">peril.settings.json</code></li>
</ol>

<p>This is a little bit risky, because we can change our implementation anytime. If that’s an issue, implement it
yourself in your settings repo. You got this.</p>

<p>You can get the full details for <a href="https://intuit.github.io/auto-release/">auto-release in their docs</a>, and you can use both <a href="https://github.com/artsy/reaction#readme"><code class="language-plaintext highlighter-rouge">artsy/reaction</code></a>
and <a href="https://github.com/omakase-js/omakase#readme"><code class="language-plaintext highlighter-rouge">omakase/omakase-js</code></a> as references for how to set it up with Circle CI 2.0.</p>

<p>To wrap this up, I specifically want to call out <a href="https://github.com/hipstersmoothie">@hipstersmoothie</a> for their great work on auto-release (and
<a href="https://github.com/oliver-moran/jimp">jimp</a>.) It’s been really easy to get started and already covered nearly all the cases we needed. You did great
work here.</p>

<!-- prettier-ignore-start -->
<!-- prettier-ignore-end -->

]]></content>
  </entry>
  
</feed>
