<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Customisation | Artsy Engineering]]></title>
  <link href="https://artsy.github.io/blog/categories/customisation/atom.xml" rel="self"/>
  <link href="https://artsy.github.io/"/>
  <updated>2024-08-06T19:48:16+00:00</updated>
  <id>https://artsy.github.io/</id>
  <author>
    <name><![CDATA[]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Musical Chairs]]></title>
    <link href="https://artsy.github.io/blog/2013/03/29/musical-chairs/"/>
    <updated>2013-03-29T16:38:00+00:00</updated>
    <id>https://artsy.github.io/blog/2013/03/29/musical-chairs</id>
    <content type="html"><![CDATA[<p>At Artsy we make Artsy Folio. Folio is an awesome portfolio app that shows our gallery and museum partners their artworks in one place, allows them to easily get information about their inventory and to send works by email to their contacts.</p>

<p>Folio has to deal with large multi-gigabyte syncs in order to operate offline. That makes for a great user experience, but for the developer working on the sync, it’s not as pleasant. Combined with our use of Core Data, the app’s maturity, and dealing with data store migrations, things can get hairy. We needed a tool that could freeze and restore app data at will, obviating the need for constant syncing and resyncing.</p>

<p>That’s why I built <a href="https://github.com/orta/chairs">chairs</a>…</p>

<!--more-->

<p>Chairs is a gem you can install via <code class="language-plaintext highlighter-rouge">gem install chairs</code>. It allows you to stash and replace your current iOS simulator application state. It will grab everything related to the app ( including the current <code class="language-plaintext highlighter-rouge">NSUserDefaults</code>) and store it in a named subfolder in your current working directory. No black magic, just lots of copying files.</p>

<p>The command line interface is based on git, so to bring in the current state you run <code class="language-plaintext highlighter-rouge">chairs pull [name]</code> and to replace the state you use <code class="language-plaintext highlighter-rouge">chairs push [name]</code>. The name is just a label so you can remember which version corresponds to that musical chair. You can get a list of these by doing <code class="language-plaintext highlighter-rouge">chairs list</code>, and delete them with <code class="language-plaintext highlighter-rouge">chairs rm [name]</code>.</p>

<p>Besides the core functionality, chairs has a little bit of sugar to help you with related tasks. My personal favourite is <code class="language-plaintext highlighter-rouge">chairs open</code>; this will just open the folder of the most recently used app so you can go and have a snoop around. Amazing for making sure files are where they say they are or for opening your sqlite database in <a href="http://menial.co.uk/base/">Base</a>.</p>

<p>So <code class="language-plaintext highlighter-rouge">gem install chairs</code> or check out the <a href="https://github.com/orta/chairs">README</a> for some more information.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[On Making It Personal in iOS with Searchbars]]></title>
    <link href="https://artsy.github.io/blog/2012/05/11/on-making-it-personal-in-iOS-with-searchbars/"/>
    <updated>2012-05-11T20:52:00+00:00</updated>
    <id>https://artsy.github.io/blog/2012/05/11/on-making-it-personal--in-iOS-with-searchbars</id>
    <content type="html"><![CDATA[<p>We make Folio, a pretty kick-ass iPad app that we give away to our partners to showcase their inventory at art fairs. Whilst making it we tried to ensure that all of the application fits in with the <a href="http://artsy.net">Artsy</a> website aesthetic, and recently the last natively styled control fell to our mighty code hammers. That was the <code class="language-plaintext highlighter-rouge">UISearchBar</code>.</p>

<p><img src="http://ortastuff.s3.amazonaws.com/images/custom_searchbar_example.jpg" alt="Screenshot of Artsy Folio" /></p>

<p>When displaying only search results in a table it makes a lot of sense to use Apple’s <code class="language-plaintext highlighter-rouge">UISearchDisplayController</code> as it handles a lot of edge cases for you. However the downside is that you lose some control over how the views interact.</p>

<p>The search bar was the only native control that actually made it into the version 1 release. This was mainly due to it requiring a bit of black magic in order to get it to work the way we wanted. So lets go through the code and rip it to pieces.</p>

<!--more-->

<p>First up, you’re going to want to make yourself a subclass of the <code class="language-plaintext highlighter-rouge">UISearchBar</code>, I’m going to be calling ours <code class="language-plaintext highlighter-rouge">ARSearchBar</code>. Here’s our public header.</p>

<div class="language-objc highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">@interface</span> <span class="nc">ARSearchBar</span> <span class="p">:</span> <span class="nc">UISearchBar</span>

<span class="c1">// Called from The SearchDisplayController Delegate</span>
<span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">showCancelButton</span><span class="p">:(</span><span class="n">BOOL</span><span class="p">)</span><span class="nv">show</span><span class="p">;</span>
<span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">cancelSearchField</span><span class="p">;</span>
<span class="k">@end</span>
</code></pre></div></div>

<p>Inside the implementation file we declare private instance variables for keeping track of the textfield and the Cancel button. This is so we can avoid finding them in the view hierarchy when we want to change the frame it during resizing.</p>

<div class="language-objc highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">@interface</span> <span class="nc">ARSearchBar</span> <span class="p">(){</span>
    <span class="n">UITextField</span> <span class="o">*</span><span class="n">foundSearchTextField</span><span class="p">;</span>
    <span class="n">UIButton</span> <span class="o">*</span><span class="n">overlayCancelButton</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>So, to look at setting the size we’ve found it easiest to deal with that in an overrode <code class="language-plaintext highlighter-rouge">setFrame</code> and setting the height of the new frame before it goes to the super class. As the search bar doesn’t change its height between state changes like text insertion it shouldn’t pose a problem to have it hardcoded.</p>

<div class="language-objc highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">setFrame</span><span class="p">:(</span><span class="n">CGRect</span><span class="p">)</span><span class="nv">frame</span> <span class="p">{</span>
    <span class="n">frame</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">height</span> <span class="o">=</span> <span class="n">ARSearchBarHeight</span><span class="p">;</span>
    <span class="p">[</span><span class="n">super</span> <span class="nf">setFrame</span><span class="p">:</span><span class="n">frame</span><span class="p">];</span>
<span class="p">}</span>
</code></pre></div></div>

<p>What does pose a problem though is making sure that the subviews inside the search bar are positioned correctly with respect to the new height, this is amended in <code class="language-plaintext highlighter-rouge">layoutSubviews</code>. In our case the textfield should take up almost all of the search bar.</p>

<div class="language-objc highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">layoutSubviews</span> <span class="p">{</span>
    <span class="p">[</span><span class="n">super</span> <span class="nf">layoutSubviews</span><span class="p">];</span>

    <span class="c1">// resize textfield</span>
    <span class="n">CGRect</span> <span class="n">frame</span> <span class="o">=</span> <span class="n">foundSearchTextField</span><span class="p">.</span><span class="n">frame</span><span class="p">;</span>
    <span class="n">frame</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">height</span> <span class="o">=</span> <span class="n">ViewHeight</span><span class="p">;</span>
    <span class="n">frame</span><span class="p">.</span><span class="n">origin</span><span class="p">.</span><span class="n">y</span> <span class="o">=</span> <span class="n">ViewMargin</span><span class="p">;</span>
    <span class="n">frame</span><span class="p">.</span><span class="n">origin</span><span class="p">.</span><span class="n">x</span> <span class="o">=</span> <span class="n">ViewMargin</span><span class="p">;</span>
    <span class="n">frame</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">width</span> <span class="o">-=</span> <span class="n">ViewMargin</span> <span class="o">/</span> <span class="mi">2</span><span class="p">;</span>
    <span class="n">foundSearchTextField</span><span class="p">.</span><span class="n">frame</span> <span class="o">=</span> <span class="n">frame</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Next up is that we can’t access our <code class="language-plaintext highlighter-rouge">foundSearchField</code> because it’s not been found yet! Personally,  I’m a big fan of using nibs for everything ( and pretty pumped about Storyboards too ) so we do our searching in <code class="language-plaintext highlighter-rouge">awakeFromNib</code> .</p>

<div class="language-objc highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">awakeFromNib</span> <span class="p">{</span>
    <span class="p">[</span><span class="n">super</span> <span class="nf">awakeFromNib</span><span class="p">];</span>

    <span class="c1">// find textfield in subviews</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">subviews</span> <span class="nf">count</span><span class="p">]</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">--</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">UIView</span> <span class="o">*</span><span class="n">subview</span> <span class="o">=</span> <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">subviews</span> <span class="nf">objectAtIndex</span><span class="p">:</span><span class="n">i</span><span class="p">];</span>                
        <span class="k">if</span> <span class="p">([</span><span class="n">subview</span><span class="p">.</span><span class="n">class</span> <span class="nf">isSubclassOfClass</span><span class="p">:[</span><span class="n">UITextField</span> <span class="nf">class</span><span class="p">]])</span> <span class="p">{</span>
            <span class="n">foundSearchTextField</span> <span class="o">=</span> <span class="p">(</span><span class="n">UITextField</span> <span class="o">*</span><span class="p">)</span><span class="n">subview</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>This gives us a textfield, next up we want to stylize it. The perfect place for this is just after finding the textfield that you use to search in.</p>

<div class="language-objc highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">stylizeSearchTextField</span> <span class="p">{</span>
    <span class="c1">// Sets the background to a static black by removing the gradient view</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">subviews</span> <span class="nf">count</span><span class="p">]</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">--</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">UIView</span> <span class="o">*</span><span class="n">subview</span> <span class="o">=</span> <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">subviews</span> <span class="nf">objectAtIndex</span><span class="p">:</span><span class="n">i</span><span class="p">];</span>                

        <span class="c1">// This is the gradient behind the textfield</span>
        <span class="k">if</span> <span class="p">([</span><span class="n">subview</span><span class="p">.</span><span class="n">description</span> <span class="nf">hasPrefix</span><span class="p">:</span><span class="s">@"&lt;UISearchBarBackground"</span><span class="p">])</span> <span class="p">{</span>
            <span class="p">[</span><span class="n">subview</span> <span class="nf">removeFromSuperview</span><span class="p">];</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="c1">// now change the search textfield itself</span>
    <span class="n">foundSearchTextField</span><span class="p">.</span><span class="n">borderStyle</span> <span class="o">=</span> <span class="n">UITextBorderStyleNone</span><span class="p">;</span>
    <span class="n">foundSearchTextField</span><span class="p">.</span><span class="n">backgroundColor</span> <span class="o">=</span> <span class="p">[</span><span class="n">UIColor</span> <span class="nf">whiteColor</span><span class="p">];</span>
    <span class="n">foundSearchTextField</span><span class="p">.</span><span class="n">background</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">;</span>
    <span class="n">foundSearchTextField</span><span class="p">.</span><span class="n">text</span> <span class="o">=</span> <span class="s">@""</span><span class="p">;</span>
    <span class="n">foundSearchTextField</span><span class="p">.</span><span class="n">clearButtonMode</span> <span class="o">=</span> <span class="n">UITextFieldViewModeNever</span><span class="p">;</span>
    <span class="n">foundSearchTextField</span><span class="p">.</span><span class="n">leftView</span> <span class="o">=</span> <span class="p">[[</span><span class="n">UIView</span> <span class="nf">alloc</span><span class="p">]</span> <span class="nf">initWithFrame</span><span class="p">:</span><span class="n">CGRectMake</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">TextfieldLeftMargin</span><span class="p">,</span> <span class="mi">0</span><span class="p">)];</span>
    <span class="n">foundSearchTextField</span><span class="p">.</span><span class="n">placeholder</span> <span class="o">=</span> <span class="s">@""</span><span class="p">;</span>
    <span class="n">foundSearchTextField</span><span class="p">.</span><span class="n">font</span> <span class="o">=</span> <span class="p">[</span><span class="n">UIFont</span> <span class="nf">serifFontWithSize</span><span class="p">:</span><span class="n">ARFontSansLarge</span><span class="p">];</span>
<span class="p">}</span>
</code></pre></div></div>

<p>You might be wondering why we removed the placeholder text? We needed more control over the style and positioning of the placeholder text and the search icon. These are easily controlled by the UISearchDisplayController subclass rather than inside the custom search bar. This is also the place that we can deal with having our custom Cancel button.</p>

<div class="language-objc highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="nf">searchDisplayControllerWillBeginSearch</span><span class="p">:(</span><span class="n">UISearchDisplayController</span> <span class="o">*</span><span class="p">)</span><span class="nv">controller</span> <span class="p">{</span>
    <span class="p">[</span><span class="n">searchBar</span> <span class="nf">showCancelButton</span><span class="p">:</span><span class="nb">YES</span><span class="p">];</span>
    <span class="p">[</span><span class="n">UIView</span> <span class="nf">animateWithDuration</span><span class="p">:</span><span class="mi">0</span><span class="p">.</span><span class="mi">2</span> <span class="nf">animations</span><span class="p">:</span><span class="o">^</span><span class="p">{</span>
        <span class="n">searchPlaceholderLabel</span><span class="p">.</span><span class="n">alpha</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="p">}];</span>
<span class="p">}</span>

<span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="nf">searchDisplayControllerWillEndSearch</span><span class="p">:(</span><span class="n">UISearchDisplayController</span> <span class="o">*</span><span class="p">)</span><span class="nv">controller</span> <span class="p">{</span>
    <span class="p">[</span><span class="n">searchBar</span> <span class="nf">showCancelButton</span><span class="p">:</span><span class="nb">NO</span><span class="p">];</span>
    <span class="p">[</span><span class="n">UIView</span> <span class="nf">animateWithDuration</span><span class="p">:</span><span class="mi">0</span><span class="p">.</span><span class="mi">2</span> <span class="nf">animations</span><span class="p">:</span><span class="o">^</span><span class="p">{</span>
        <span class="n">searchPlaceholderLabel</span><span class="p">.</span><span class="n">alpha</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
    <span class="p">}];</span>
<span class="p">}</span>
</code></pre></div></div>

<p>The corresponding code for showing and hiding the Cancel button is here. We just animate it in and out by a distance of 80.</p>

<div class="language-objc highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">showCancelButton</span><span class="p">:(</span><span class="n">BOOL</span><span class="p">)</span><span class="nv">show</span> <span class="p">{</span>
    <span class="n">CGFloat</span> <span class="n">distance</span> <span class="o">=</span> <span class="n">show</span><span class="p">?</span> <span class="o">-</span><span class="n">CancelAnimationDistance</span> <span class="p">:</span> <span class="n">CancelAnimationDistance</span><span class="p">;</span>
    <span class="p">[</span><span class="n">UIView</span> <span class="nf">animateWithDuration</span><span class="p">:</span><span class="mi">0</span><span class="p">.</span><span class="mi">25</span> <span class="nf">animations</span><span class="p">:</span><span class="o">^</span><span class="p">{</span>
        <span class="n">overlayCancelButton</span><span class="p">.</span><span class="n">frame</span> <span class="o">=</span> <span class="n">CGRectOffset</span><span class="p">(</span><span class="n">overlayCancelButton</span><span class="p">.</span><span class="n">frame</span><span class="p">,</span> <span class="n">distance</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
    <span class="p">}];</span>
<span class="p">}</span>
</code></pre></div></div>

<p>The original Cancel button is something that we choose to keep around, rather than removing it form the view hierarchy, that’s so we can have our overlay Cancel button call its method instead of trying to replicate the cancel functionality ourselves.</p>

<p>To keep track of the Cancel button we need to know when its meant to appear, and when its meant to disappear. Because the Cancel button is created at runtime every time a search is started we need to
know when thats happening so we can hide it, we can do that by registering for <code class="language-plaintext highlighter-rouge">UITextFieldTextDidBeginEditingNotification</code> on the textfield once it’s been found. We do this in <code class="language-plaintext highlighter-rouge">awakeFromNib</code>.</p>

<div class="language-objc highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">[[</span><span class="n">NSNotificationCenter</span> <span class="nf">defaultCenter</span><span class="p">]</span> <span class="nf">addObserver</span><span class="p">:</span><span class="n">self</span> <span class="nf">selector</span><span class="p">:</span><span class="k">@selector</span><span class="p">(</span><span class="n">removeOriginalCancel</span><span class="p">)</span> <span class="n">name</span><span class="o">:</span><span class="n">UITextFieldTextDidBeginEditingNotification</span> <span class="n">object</span><span class="o">:</span><span class="n">foundSearchTextField</span><span class="p">];</span>


<span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">removeOriginalCancel</span> <span class="p">{</span>
    <span class="c1">// remove the original button</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">subviews</span> <span class="nf">count</span><span class="p">]</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">--</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">UIView</span> <span class="o">*</span><span class="n">subview</span> <span class="o">=</span> <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">subviews</span> <span class="nf">objectAtIndex</span><span class="p">:</span><span class="n">i</span><span class="p">];</span>                
        <span class="k">if</span> <span class="p">([</span><span class="n">subview</span><span class="p">.</span><span class="n">class</span> <span class="nf">isSubclassOfClass</span><span class="p">:[</span><span class="n">UIButton</span> <span class="nf">class</span><span class="p">]])</span> <span class="p">{</span>
        	<span class="c1">// This is called every time a search is began,</span>
        	<span class="c1">// so make sure to get the right button!</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">subview</span><span class="p">.</span><span class="n">frame</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">height</span> <span class="o">!=</span> <span class="n">ViewHeight</span><span class="p">)</span> <span class="p">{</span>
                <span class="n">subview</span><span class="p">.</span><span class="n">hidden</span> <span class="o">=</span> <span class="nb">YES</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Finally we have the styling of the button. I’ve summed it up here as a lot of it is very application specific.</p>

<div class="language-objc highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">createButton</span> <span class="p">{</span>
    <span class="n">ARFlatButton</span> <span class="o">*</span><span class="n">cancelButton</span> <span class="o">=</span> <span class="p">[</span><span class="n">ARFlatButton</span> <span class="nf">buttonWithType</span><span class="p">:</span><span class="n">UIButtonTypeCustom</span><span class="p">];</span>
    <span class="p">[[</span><span class="n">cancelButton</span> <span class="nf">titleLabel</span><span class="p">]</span> <span class="nf">setFont</span><span class="p">:[</span><span class="n">UIFont</span> <span class="nf">sansSerifFontWithSize</span><span class="p">:</span><span class="n">ARFontSansSmall</span><span class="p">]];</span>

    <span class="n">NSString</span> <span class="o">*</span><span class="n">title</span> <span class="o">=</span> <span class="p">[</span><span class="s">@"Cancel"</span> <span class="nf">uppercaseString</span><span class="p">];</span>
    <span class="p">[</span><span class="n">cancelButton</span> <span class="nf">setTitle</span><span class="p">:</span><span class="n">title</span> <span class="nf">forState</span><span class="p">:</span><span class="n">UIControlStateNormal</span><span class="p">];</span>
    <span class="p">[</span><span class="n">cancelButton</span> <span class="nf">setTitle</span><span class="p">:</span><span class="n">title</span> <span class="nf">forState</span><span class="p">:</span><span class="n">UIControlStateHighlighted</span><span class="p">];</span>

    <span class="n">CGRect</span> <span class="n">buttonFrame</span> <span class="o">=</span> <span class="n">cancelButton</span><span class="p">.</span><span class="n">frame</span><span class="p">;</span>
    <span class="n">buttonFrame</span><span class="p">.</span><span class="n">origin</span><span class="p">.</span><span class="n">y</span> <span class="o">=</span> <span class="n">ViewMargin</span><span class="p">;</span>
    <span class="n">buttonFrame</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">height</span> <span class="o">=</span> <span class="n">ViewHeight</span><span class="p">;</span>
    <span class="n">buttonFrame</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">width</span> <span class="o">=</span> <span class="mi">66</span><span class="p">;</span>
    <span class="n">buttonFrame</span><span class="p">.</span><span class="n">origin</span><span class="p">.</span><span class="n">x</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">frame</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">width</span> <span class="o">-</span> <span class="n">buttonFrame</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">width</span> <span class="o">-</span> <span class="n">ViewMargin</span> <span class="o">+</span> <span class="n">CancelAnimationDistance</span><span class="p">;</span>
    <span class="n">cancelButton</span><span class="p">.</span><span class="n">frame</span> <span class="o">=</span> <span class="n">buttonFrame</span><span class="p">;</span>
    <span class="p">[</span><span class="n">cancelButton</span> <span class="nf">addTarget</span><span class="p">:</span><span class="n">self</span> <span class="nf">action</span><span class="p">:</span><span class="k">@selector</span><span class="p">(</span><span class="n">cancelSearchField</span><span class="p">)</span> <span class="n">forControlEvents</span><span class="o">:</span><span class="n">UIControlEventTouchUpInside</span><span class="p">];</span>

    <span class="n">overlayCancelButton</span> <span class="o">=</span> <span class="n">cancelButton</span><span class="p">;</span>
    <span class="p">[</span><span class="n">self</span> <span class="nf">addSubview</span><span class="p">:</span><span class="n">overlayCancelButton</span><span class="p">];</span>
    <span class="p">[</span><span class="n">self</span> <span class="nf">bringSubviewToFront</span><span class="p">:</span><span class="n">overlayCancelButton</span><span class="p">];</span>
<span class="p">}</span>

<span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">cancelSearchField</span> <span class="p">{</span>
    <span class="c1">// tap the original button!</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">subviews</span> <span class="nf">count</span><span class="p">]</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">--</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">UIView</span> <span class="o">*</span><span class="n">subview</span> <span class="o">=</span> <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">subviews</span> <span class="nf">objectAtIndex</span><span class="p">:</span><span class="n">i</span><span class="p">];</span>                
        <span class="k">if</span> <span class="p">([</span><span class="n">subview</span><span class="p">.</span><span class="n">class</span> <span class="nf">isSubclassOfClass</span><span class="p">:[</span><span class="n">UIButton</span> <span class="nf">class</span><span class="p">]])</span> <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">subview</span><span class="p">.</span><span class="n">frame</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">height</span> <span class="o">!=</span> <span class="n">ViewHeight</span><span class="p">)</span> <span class="p">{</span>
                <span class="n">UIButton</span> <span class="o">*</span><span class="n">realCancel</span> <span class="o">=</span> <span class="p">(</span><span class="n">UIButton</span> <span class="o">*</span><span class="p">)</span><span class="n">subview</span><span class="p">;</span>
                <span class="p">[</span><span class="n">realCancel</span> <span class="nf">sendActionsForControlEvents</span><span class="p">:</span> <span class="n">UIControlEventTouchUpInside</span><span class="p">];</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>    
<span class="p">}</span>
</code></pre></div></div>

<p>The complete code is available <a href="https://gist.github.com/2667766">as a gist</a> under the MIT license.</p>
]]></content>
  </entry>
  
</feed>
