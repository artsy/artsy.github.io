<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: build tools | Artsy Engineering]]></title>
  <link href="https://artsy.github.io/blog/categories/build-tools/atom.xml" rel="self"/>
  <link href="https://artsy.github.io/"/>
  <updated>2024-08-07T18:22:11+00:00</updated>
  <id>https://artsy.github.io/</id>
  <author>
    <name><![CDATA[]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[It's time to use Swift Package Manager]]></title>
    <link href="https://artsy.github.io/blog/2019/01/05/its-time-to-use-spm/"/>
    <updated>2019-01-05T00:00:00+00:00</updated>
    <id>https://artsy.github.io/blog/2019/01/05/its-time-to-use-spm</id>
    <content type="html"><![CDATA[<p>It’s been three years, and <a href="https://swift.org/package-manager/">Swift Package Manager</a> (SPM) is at a point where it can be useful for iOS
projects. It’ll take a bit of sacrifice and a little bit of community spirit to fix some holes probably but <strong>in my
opinion, it’s time for teams to start adopting SPM for their 3rd party dev tools</strong>.</p>

<p><strong>TLDR:</strong> You should be using SPM for 3rd party dev tools like: <a href="https://github.com/realm/SwiftLint">SwiftLint</a>, <a href="https://github.com/nicklockwood/SwiftFormat">SwiftFormat</a>, <a href="https://danger.systems/swift/">Danger</a>,
<a href="https://github.com/krzysztofzablocki/Sourcery">Sourcery</a>, <a href="https://github.com/SwiftGen/SwiftGen/">SwiftGen</a> and <a href="https://github.com/orta/Komondor">Git Hook management</a>.</p>

<p>This post covers: What made it feasible to use SPM now? What are the downsides of the status quo? Why use SPM at
all? What are the downsides to using SPM?</p>

<!-- more -->

<h3 id="what-changed-to-make-spm-usable">What changed to make SPM usable?</h3>

<p>From my perspective, David Hart’s <a href="https://github.com/apple/swift-package-manager/pull/1187">addition of <code class="language-plaintext highlighter-rouge">swift run</code></a> to SPM which shipped with Swift 4.0 is what
pushed the project over the finish line to being useful for iOS developers. <code class="language-plaintext highlighter-rouge">swift run</code> is contextually the same as
<code class="language-plaintext highlighter-rouge">bundle exec</code> in that it will run a locally bundled version of your executable.</p>

<p>This means you can run <code class="language-plaintext highlighter-rouge">swift run swiftlint</code> and reliably get the same results as your CI and fellow developers.</p>

<p>Second, all of the big third party tools support SPM already. So, you probably don’t need to send any upstream PRs.</p>

<h3 id="what-are-the-downsides-of-the-status-quo">What are the downsides of the status quo</h3>

<p><strong>Using Homebrew</strong></p>

<p>Right now, a lot of folks use <a href="https://brew.sh">homebrew</a> to manage these types of dependencies. Homebrew is useful for rarely
updated tools (like unix-y CLI apps) but it does not handle having different versions of tool available. This is a
totally reasonable call from Homebrew’s perspective but it makes homebrew a bad choice for your <strong>project</strong>
dependencies - because it only installs things globally.</p>

<p>This means a developer (or your CI) would get the most recent version of that tool when they last installed the
tool. This isn’t a problem for many projects (for example, check out their <a href="https://formulae.brew.sh/analytics/install/90d/">most installed</a> formulas to
see that it’s lot of system libraries, languages and global tools like <code class="language-plaintext highlighter-rouge">node</code>, <code class="language-plaintext highlighter-rouge">git</code> and <code class="language-plaintext highlighter-rouge">python</code>)</p>

<p><strong>Using CocoaPods</strong></p>

<p>You can hijack CocoaPod’s dependency resolver, and locking system mixed with consistent dependency paths to handle
your tools. This is better than using Homebrew, because everyone has the same version - and so you could reliably
run SwiftLint via <code class="language-plaintext highlighter-rouge">./Pods/SwiftLint/swiftlint</code>.</p>

<p>This is a great hack, and CocoaPods is smart here - because these dependencies don’t ship any code for your app for
compiling it won’t set up a library or framework for you. You can even use CocoaPods to set up <a href="https://guides.cocoapods.org/syntax/podfile.html#script_phase">a build
phase</a> for you too (I have feelings on this but we’ll get to those later.)</p>

<p>I don’t really have much of a “you shouldn’t do this” for using hacking CocoaPods for your tools, outside of SPM
it’s probably the right way to do it.</p>

<h3 id="why-use-swiftpm">Why Use SwiftPM?</h3>

<ol>
  <li>SPM works</li>
  <li>SPM can lock your dependencies correctly. <code class="language-plaintext highlighter-rouge">:tada:</code></li>
  <li>The primary tools used in our ecosystem already support it, so you don’t need to do any extra work</li>
  <li>Easy to cache (everything lives in <code class="language-plaintext highlighter-rouge">.build</code>) which means fast CI builds</li>
  <li>You’re using Swift’s tools to manage tools built in Swift, promoting and encouraging the ecosystem you want to
thrive</li>
  <li>Your team can get used to how SPM works now, because it should be useful for code dependencies some day</li>
  <li>SPM is still in a pretty early phase for usage like this, maybe you can find features to add once you’ve got
started and contribute back</li>
</ol>

<h3 id="what-are-the-downsides">What are the downsides?</h3>

<ol>
  <li>
    <p>Running a tool will compile it the first time you use <code class="language-plaintext highlighter-rouge">swift run</code>. Running <code class="language-plaintext highlighter-rouge">swift run danger-swift</code> would first
build <code class="language-plaintext highlighter-rouge">danger-swift</code> from source and then it would run the executable.</p>
  </li>
  <li>
    <p>SPM’s dependency resolution step is very naive, and will clone all the dependencies in the tree - even if you
don’t need them. So, the dependencies of your dependencies (a.k.a transitive dependencies) will have full clones
locally - e.g. the test runner for SwiftLint has to be fully cloned locally in <code class="language-plaintext highlighter-rouge">.build</code> if you use SPM for
SwiftLint. I’m hoping <a href="https://github.com/apple/swift-package-manager/pull/1918">this PR</a> and subsequent
improvements will fix this.</p>
  </li>
  <li>
    <p>You need to reference a single Swift file in your project to make this work. SPM today does not support a
dependencies only project (it won’t build), so you’ll need to reference one Swift file in your codebase.</p>
  </li>
</ol>

<p>All of these are fixable, and the first two can be worked around on CI, by caching the <code class="language-plaintext highlighter-rouge">.build</code> directory. Locally
these actions normally only happens once when you install, or update.</p>

<h3 id="show-me-it-in-action">Show me it in action</h3>

<p>What would this look like for a project? IMO, for a reasonably complex Swift app, I think you should have:</p>

<ul>
  <li><a href="https://github.com/realm/SwiftLint">SwiftLint</a> for catching potential code issues</li>
  <li><a href="https://github.com/nicklockwood/SwiftFormat">SwiftFormat</a> so you don’t argue about code style</li>
  <li><a href="https://github.com/orta/Komondor">Komondor</a> to automate the above tools, so people don’t have to remember to run the tools</li>
  <li><a href="https://danger.systems/swift/">Danger Swift</a> to handle cultural rules for PRs like “Please add Changelogs entries”</li>
</ul>

<p>You would write a <code class="language-plaintext highlighter-rouge">Package.swift</code> file like this:</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// swift-tools-version:4.2</span>
<span class="kd">import</span> <span class="kt">PackageDescription</span>

<span class="k">let</span> <span class="nv">package</span> <span class="o">=</span> <span class="kt">Package</span><span class="p">(</span>
    <span class="nv">name</span><span class="p">:</span> <span class="s">"Eigen"</span><span class="p">,</span>
    <span class="nv">dependencies</span><span class="p">:</span> <span class="p">[</span>
      <span class="o">.</span><span class="nf">package</span><span class="p">(</span><span class="nv">url</span><span class="p">:</span> <span class="s">"https://github.com/danger/swift.git"</span><span class="p">,</span> <span class="nv">from</span><span class="p">:</span> <span class="s">"1.0.0"</span><span class="p">),</span>
      <span class="o">.</span><span class="nf">package</span><span class="p">(</span><span class="nv">url</span><span class="p">:</span> <span class="s">"https://github.com/nicklockwood/SwiftFormat"</span><span class="p">,</span> <span class="nv">from</span><span class="p">:</span> <span class="s">"0.35.8"</span><span class="p">),</span>
      <span class="o">.</span><span class="nf">package</span><span class="p">(</span><span class="nv">url</span><span class="p">:</span> <span class="s">"https://github.com/Realm/SwiftLint"</span><span class="p">,</span> <span class="nv">from</span><span class="p">:</span> <span class="s">"0.28.1"</span><span class="p">),</span>
      <span class="o">.</span><span class="nf">package</span><span class="p">(</span><span class="nv">url</span><span class="p">:</span> <span class="s">"https://github.com/orta/Komondor"</span><span class="p">,</span> <span class="nv">from</span><span class="p">:</span> <span class="s">"1.0.0"</span><span class="p">),</span>
    <span class="p">],</span>
    <span class="nv">targets</span><span class="p">:</span> <span class="p">[</span>
        <span class="c1">// This is just an arbitrary Swift file in the app, that has</span>
        <span class="c1">// no dependencies outside of Foundation, the dependencies section</span>
        <span class="o">.</span><span class="nf">target</span><span class="p">(</span><span class="nv">name</span><span class="p">:</span> <span class="s">"eigen"</span><span class="p">,</span> <span class="nv">dependencies</span><span class="p">:</span> <span class="p">[</span><span class="s">"Danger"</span><span class="p">],</span> <span class="nv">path</span><span class="p">:</span> <span class="s">"Artsy"</span><span class="p">,</span> <span class="nv">sources</span><span class="p">:</span> <span class="p">[</span><span class="s">"Stringify.swift"</span><span class="p">]),</span>
    <span class="p">]</span>
<span class="p">)</span>

<span class="c1">// The settings for the git hooks for our repo</span>
<span class="cp">#if canImport(PackageConfig)</span>
    <span class="kd">import</span> <span class="kt">PackageConfig</span>

    <span class="k">let</span> <span class="nv">config</span> <span class="o">=</span> <span class="kt">PackageConfig</span><span class="p">([</span>
        <span class="s">"komondor"</span><span class="p">:</span> <span class="p">[</span>
            <span class="c1">// When someone has run `git commit`, first run</span>
            <span class="c1">// SwiftFormat and the auto-correcter for SwiftLint</span>
            <span class="s">"pre-commit"</span><span class="p">:</span> <span class="p">[</span>
                <span class="s">"swift run swiftformat ."</span><span class="p">,</span>
                <span class="s">"swift run swiftlint autocorrect --path Artsy/"</span><span class="p">,</span>
                <span class="s">"git add ."</span><span class="p">,</span>
            <span class="p">],</span>
        <span class="p">]</span>
    <span class="p">])</span>
<span class="cp">#endif</span>
</code></pre></div></div>

<p>Which gives you access to the following commands:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">swift run komondor install</code> - to set up your repo’s git hooks</li>
  <li><code class="language-plaintext highlighter-rouge">swift run swiftformat .</code> - to run SwiftFormat over your project</li>
  <li><code class="language-plaintext highlighter-rouge">swift run swiftlint --autocorrect</code> - to highlight your linter issues</li>
  <li><code class="language-plaintext highlighter-rouge">swift run danger-swift ci</code> - to run Danger Swift on your CI</li>
</ul>

<p>Because you can reliably run both SwiftFormat and SwiftLint via Komondor on a git hook, you can remove build phase
steps that run these tools.</p>

<p>An iOS app’s compile and run cycle already takes on the order of seconds, so you should avoid adding extra build
steps in Xcode. I realise that people are only doing this due to the (unreasonably) limited extension support in
Xcode, but the build steps are critical path code. When your build and run cycle is already on the order of many
seconds that iteration cycle has to be as tight as possible.</p>

<p>This setup gives you version-locked access to common linting/formating tools (with the ability to use komondor to
add extra checks if needed) in a self-contained <code class="language-plaintext highlighter-rouge">Package.swift</code>.</p>

<p>We’ve started migrating our Artsy projects to use this setup when we work on our native codebases. With our main
iOS app Eigen already using this pattern for Danger Swift, but we don’t created/modify enough <code class="language-plaintext highlighter-rouge">*.swift</code> files to
warrant linters/formatters yet.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Migrating to PR Label based Continuous Deployment]]></title>
    <link href="https://artsy.github.io/blog/2019/01/03/label-based-prs/"/>
    <updated>2019-01-03T00:00:00+00:00</updated>
    <id>https://artsy.github.io/blog/2019/01/03/label-based-prs</id>
    <content type="html"><![CDATA[<p>In the JavaScript world, the idea of deploying your libraries on every PR is pretty common. As someone who runs a
dependency manager but comes from a native background, it’s easy for me to cringe and imagine the strain this puts
on NPM’s servers. However, that is where the ecosystem is and <a href="https://github.com/artsy/reaction/issues/388">continuous deployment</a> can be really useful. So,
about a year ago <a href="https://github.com/artsy/reaction/pull/521">we started</a> moving a lot of our libraries to do this at Artsy too. Starting with our most
critical dependencies:</p>

<ul>
  <li><a href="https://github.com/artsy/reaction#readme">Reaction</a> (our React components used in many of our web apps)</li>
  <li><a href="https://github.com/artsy/palette#readme">Palette</a> (our <a href="https://palette.artsy.net">design system</a>)</li>
</ul>

<p>We started off using a commit message based workflow, but have just finished the migrating to a GitHub Label based
workflow that is less workload on individual contributors. This post will cover how, and why.</p>

<!-- more -->

<h2 id="why">Why?</h2>

<p>We started using <a href="https://semantic-release.gitbook.io/semantic-release/">semantic-release</a> to handle commit message based deploys. The way semantic-release works
is you would add a specially formatted commit that included a version prefix indicating you wanted a deploy. For
example, <code class="language-plaintext highlighter-rouge">[PATCH artwork] Fix safari mail issue</code> would mean that by merging a PR with this commit into master
should trigger a patch release.</p>

<p>This is their ideal flow, but the reality for us is that a lot of people would forget to do this, or write commits
like: <code class="language-plaintext highlighter-rouge">[PATCH] bumpity bump</code>. Even worse, these kind of commits were the perfect reason for pushing to master and
skipping code review to speed things up.</p>

<p>We could have added a pre-commit hooks that enforced the messaging on commits, but that’s not very <a href="https://github.com/artsy/README/blob/master/culture/engineering-principles.md#minimal-viable-process">Minimum Viable
Process</a> - where we try to map new tool/process improvements to existing behavior instead of regimenting new
behavior when possible.</p>

<p>The problem felt like the idea of declaring your version changes at commit time felt like a disconnect from how
people thought about deploys. The code unit for a review is a Pull Request, not per-commit. To try improve on our
deployment, we re-grouped and discussed what could be a better mapping to our existing workflow. Our answer was: PR
Label based deploys.</p>

<p>The idea is: You write a PR exactly as you used to, when you create a new PR then you apply a label saying whether
it is a major, minor, patch or trivial PR and when it is merged then deploy could be made for you.</p>

<p>To match our existing behavior completely, we would automatically add the “patch” label to any PR which doesn’t
declare what type of deployment it is up-front.</p>

<p>I summarized our ideal state, and turned it into an RFC on our Reaction repo: <a href="https://github.com/artsy/reaction/issues/1095">“Change rules around automatic
deploys, and add a CHANGELOG”</a> .</p>

<h2 id="how">How?</h2>

<h4 id="deployment">Deployment</h4>

<p>We started building this infrastructure inside <a href="https://github.com/artsy/reaction/pull/1407">our app Reaction</a>. Our implementation was a PR that lasted a
few months. It was a hard project to prioritize, and didn’t really seem to have an end in sight. This changed last
week when we discovered the work going on over at <a href="https://github.com/intuit/auto-release#readme">auto-release</a> by the team at <a href="https://github.com/intuit/">Intuit</a>.</p>

<p>The team at Intuit had taken the same problem and worked to apply it generically, making it a useful tool for
everyone rather than just for one type of project. Perfect.</p>

<p>To try it out, I set it up on our upcoming CLI for the <a href="https://github.com/omakase-js/omakase#readme">Artsy Omakase</a> JS stack - which is a <a href="https://github.com/lerna/lerna#readme">Lerna</a>
mono-repo. This means it’s a single repo for many JS packages, which makes it a bit more complex than a normal repo
for a node project.</p>

<p>Auto-release handled this setup out-of-the-box, <code class="language-plaintext highlighter-rouge">10/10</code> - so it was likely to handle our simpler repos. In the
process we made a bunch of PRs back and were quickly iterating on making it work well for Artsy also. Collaborating
on projects like this is our <a href="https://github.com/artsy/README/blob/master/culture/engineering-principles.md#own-your-dependencies">bread and butter</a>, it means we don’t have to build tools from scratch and
can improve upon great work by others.</p>

<p>To use it, we needed to set up two environment variables:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">NPM_TOKEN</code> - used to deploy your package to NPM</li>
  <li><code class="language-plaintext highlighter-rouge">GH_TOKEN</code> - used to create GitHub releases</li>
</ul>

<p>and you need to make sure your CI has write access to your repo, so it can push tags and the CHANGELOG entries back
to your repo.</p>

<h4 id="downsides-to-continuous-deployment">Downsides to Continuous Deployment</h4>

<p>Both the commit message and PR label based continuous deployment structure comes with one annoying flaw, if you’re
merging many PRs at once - then you can get into trouble with versioning. We’ve been discussing ideas around this
in the [auto-release issues][ar_iss]. We already had this flaw, so it just propagated to the new technique. We’ve
been wondering if deploying via <a href="https://github.com/features/actions">GitHub actions</a> may fix this.</p>

<h4 id="peril">Peril</h4>

<p>With auto-release you can have set an option to treat having no release label on your PR as a being a “patch”
release. This is a great setting, but an ideal workflow for us is to showcase what is happening every time. This
makes the understanding of our deployments explicit, and is a good reminder to highlight that you might want to
change the type of deployment. You can see this happening to me <a href="https://github.com/artsy/reaction/pull/1787">in this PR</a>.</p>

<p>We’re currently at <code class="language-plaintext highlighter-rouge">9.1.59</code> - meaning 58 patches in a row, so it’s pretty rare for a minor or major. By making it
obvious how to change that during the PR (by highlighting that it’s classed as a patch each time) we can maybe make
the version number change a bit closer to <em>some form</em> of “semantic reality”.</p>

<p>We wanted to first roll this out on one repo, so we scoped <a href="https://github.com/artsy/peril-settings/pull/88">our Artsy Peril changes</a> to just the
<code class="language-plaintext highlighter-rouge">artsy/reaction</code> repo</p>

<div class="language-diff highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">{</span>
  "rules": {
    // Keep a list of all deployments in slack
    "create (ref_type == tag)": "org/newRelease.ts",
    ...
  },
  "repos": {
    "artsy/reaction": {
      "pull_request": "danger/pr.ts",
<span class="gi">+     "pull_request.opened": "artsy/peril-settings@repos/reaction/addPatchLabel.ts"
</span>    },
    "artsy/force": {
      "pull_request": "dangerfile.ts"
    },
    ...
  },
<span class="err">}</span>
</code></pre></div></div>

<p>The simplest implementation for adding the label is this:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// repos/reaction/addPatchLabel.ts</span>
<span class="c1">//</span>
<span class="k">export</span> <span class="k">default</span> <span class="k">async</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">pr</span> <span class="o">=</span> <span class="nx">danger</span><span class="p">.</span><span class="nx">github</span><span class="p">.</span><span class="nx">pr</span>

  <span class="kd">const</span> <span class="nx">patchLabelName</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">Version: Patch</span><span class="dl">"</span>
  <span class="kd">const</span> <span class="nx">requiredPrefix</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">Version: </span><span class="dl">"</span>

  <span class="c1">// Someone's already made a decision on the version</span>
  <span class="kd">const</span> <span class="nx">hasAlreadyGotLabel</span> <span class="o">=</span> <span class="nx">danger</span><span class="p">.</span><span class="nx">github</span><span class="p">.</span><span class="nx">issue</span><span class="p">.</span><span class="nx">labels</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="nx">l</span> <span class="o">=&gt;</span> <span class="nx">l</span><span class="p">.</span><span class="nx">name</span><span class="p">.</span><span class="nx">startsWith</span><span class="p">(</span><span class="nx">requiredPrefix</span><span class="p">))</span>
  <span class="k">if</span> <span class="p">(</span><span class="nx">hasAlreadyGotLabel</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`Skipping setting the patch label, because the PR author already set one.`</span><span class="p">)</span>
    <span class="k">return</span>
  <span class="p">}</span>

  <span class="c1">// Create or add the label if it's not being used</span>
  <span class="kd">const</span> <span class="nx">label</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">name</span><span class="p">:</span> <span class="nx">patchLabelName</span><span class="p">,</span>
    <span class="na">color</span><span class="p">:</span> <span class="dl">"</span><span class="s2">247A38</span><span class="dl">"</span><span class="p">,</span>
    <span class="na">description</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Indicates that you want this PR to trigger a patch release</span><span class="dl">"</span>
  <span class="p">}</span>

  <span class="kd">const</span> <span class="nx">repo</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">owner</span><span class="p">:</span> <span class="nx">pr</span><span class="p">.</span><span class="nx">base</span><span class="p">.</span><span class="nx">user</span><span class="p">.</span><span class="nx">login</span><span class="p">,</span>
    <span class="na">repo</span><span class="p">:</span> <span class="nx">pr</span><span class="p">.</span><span class="nx">base</span><span class="p">.</span><span class="nx">repo</span><span class="p">.</span><span class="nx">name</span><span class="p">,</span>
    <span class="na">id</span><span class="p">:</span> <span class="nx">pr</span><span class="p">.</span><span class="nx">number</span>
  <span class="p">}</span>

  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">Adding the label:</span><span class="dl">"</span><span class="p">,</span> <span class="nx">label</span><span class="p">.</span><span class="nx">name</span><span class="p">)</span>
  <span class="k">await</span> <span class="nx">danger</span><span class="p">.</span><span class="nx">github</span><span class="p">.</span><span class="nx">utils</span><span class="p">.</span><span class="nx">createOrAddLabel</span><span class="p">(</span><span class="nx">label</span><span class="p">,</span> <span class="nx">repo</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>

<p>This will dynamically add your label if it doesn’t exist on the repo yet. Our <a href="https://github.com/artsy/peril-settings/blob/db492b5f9213faee3e5d8659c55b84c635240f0c/repos/reaction/addPatchLabel.ts">production
implementation</a> is a bit more complicated because it will create all of the different labels too. This
means as we roll out the PR Label based workflow to other repos, the labels will be consistent.</p>

<p>Introducing auto-release meant introducing our first automatically generated changelog (something I’m not sold on,
I see changelogs as consumer-facing. Most PR title/descriptions aren’t aimed at downstream consumers, but I’m open
to giving this a shot as today the consumers are also contributors to the repo) which broke one of our global Peril
rules. This rule would detect a if a repo has a changelog, and ask you to update it if you’ve made any app changes.
We <a href="https://github.com/artsy/peril-settings/pull/89">amended that rule</a> to detect auto-release on the repo first.</p>

<h2 id="so-how-do-i-get-this-set-up">So, how do I get this set up?</h2>

<p>For the automatic deployment:</p>

<ol>
  <li>Install auto: <code class="language-plaintext highlighter-rouge">yarn add -D auto-release-cli</code></li>
  <li>Run <code class="language-plaintext highlighter-rouge">yarn auto init</code> and go through the questions</li>
  <li>Add a <code class="language-plaintext highlighter-rouge">release</code> script to your <code class="language-plaintext highlighter-rouge">package.json</code>: <code class="language-plaintext highlighter-rouge">"release": "auto shipit"</code></li>
  <li>In your CI, set both <code class="language-plaintext highlighter-rouge">NPM_TOKEN</code> and <code class="language-plaintext highlighter-rouge">GH_TOKEN</code></li>
  <li>Add <code class="language-plaintext highlighter-rouge">echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" &gt;&gt; ~/.npmrc</code> to “log in” to NPM in our deploy steps</li>
  <li>In your deployment phase run: <code class="language-plaintext highlighter-rouge">yarn release</code></li>
</ol>

<p>For the Peril rule:</p>

<ol>
  <li>Add <code class="language-plaintext highlighter-rouge">"pull_request.opened": "artsy/peril-settings@repos/reaction/addPatchLabel.ts"</code> to your
<code class="language-plaintext highlighter-rouge">peril.settings.json</code></li>
</ol>

<p>This is a little bit risky, because we can change our implementation anytime. If that’s an issue, implement it
yourself in your settings repo. You got this.</p>

<p>You can get the full details for <a href="https://intuit.github.io/auto-release/">auto-release in their docs</a>, and you can use both <a href="https://github.com/artsy/reaction#readme"><code class="language-plaintext highlighter-rouge">artsy/reaction</code></a>
and <a href="https://github.com/omakase-js/omakase#readme"><code class="language-plaintext highlighter-rouge">omakase/omakase-js</code></a> as references for how to set it up with Circle CI 2.0.</p>

<p>To wrap this up, I specifically want to call out <a href="https://github.com/hipstersmoothie">@hipstersmoothie</a> for their great work on auto-release (and
<a href="https://github.com/oliver-moran/jimp">jimp</a>.) It’s been really easy to get started and already covered nearly all the cases we needed. You did great
work here.</p>

<!-- prettier-ignore-start -->
<!-- prettier-ignore-end -->

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why is the Swift Package Manager taking so long?]]></title>
    <link href="https://artsy.github.io/blog/2018/12/21/why-is-swiftpm-taking-so-long/"/>
    <updated>2018-12-21T00:00:00+00:00</updated>
    <id>https://artsy.github.io/blog/2018/12/21/why-is-swiftpm-taking-so-long</id>
    <content type="html"><![CDATA[<p>Last month I was chatting at a bar with an engineer working on the Swift team, and we welcomed someone to our
conversation where they opened with the question: <em>“When can I stop using CocoaPods and switch to Swift PM?”</em> I
chuckled, because I get this a lot (I have been helping to maintain CocoaPods for about 6 years now) but they had
made mistake of asking an Apple employee about something which sounds even remotely like a future product question.
So, it didn’t go anywhere.</p>

<p>Well, <em>person whose name I don’t remember</em>, let me try to re-frame that question into something I can take a
reasonable stab at: <strong>“Why are we all still using CocoaPods now instead of Swift PM for iOS apps three years after
its release?”</strong></p>

<!-- more -->

<p>Three years ago in December 2015, Swift became open source. Inside the source code was a <a href="https://twitter.com/orta/status/672436829250052102">pleasant
surprise</a> that Apple were going to start making their own package manager. Great, CocoaPods was
<a href="https://www.urbandictionary.com/define.php?term=sherlocked">sherlocked</a>, but Apple had control of Xcode and the entire toolchain so they could integrate it natively. I
thought this was pretty cool, and wrote the following about Swift PM in my annual write-up that year:</p>

<blockquote>
  <p>[On the Swift PM team] They’re actively talking with the community and us, finding ways to share work and to
promote collaboration. It’s eased a lot of the friction I had been feeling. Apple has a fresh start in a way we
could not, and will be able to do things much better than the CocoaPods team could.</p>
</blockquote>

<blockquote>
  <p>All in all, when people have been asking what I want to do in the next year, I’m feeling pretty done on the
“lowering the barrier to entry” space, this year it became less fun.</p>
</blockquote>

<p><em>Fun fact: This is what gave me the space to start working on <a href="https://danger.systems/">Danger</a>.</em></p>

<p>The announcement of Swift PM came out to some fan-fare as the “end of CocoaPods” from the iOS community, and I was
also pretty happy to get some time back to work on other problems. However, a few years down the line it’s not
really turned out that way. What gives?</p>

<h1 id="why-swift-pm-exists">Why Swift PM exists</h1>

<p>Before Swift PM, you couldn’t reasonably manage Swift projects in Linux. Apple have exclusively been building dev
tools for macOS because that’s what they own, and so, all their dev-tools customers (internal and external) have to
use Macs to make their software. It’s not particularly unreasonable.</p>

<p>However, to make Swift a language with a larger scope than “making iOS and macOS apps” and it’s usage being limited
to just the Cocoa community: they would need to support running and compiling Swift apps on Linux.</p>

<p>It’s safe to say Apple probably has no plans to port Xcode to Linux, (though look at what Microsoft achieved when
they decided that they needed to support Visual Studio on macOS <a href="https://code.visualstudio.com">somehow</a>) but what’s more important here
is the underlying tooling <strong>above</strong> the compiler but <strong>below</strong> Xcode: <code class="language-plaintext highlighter-rouge">xcodebuild</code>, wouldn’t make any sense in that
context. It’s deeply macOS and Cocoa specific.</p>

<p>So, Apple needed something to handle the following problems if you were working in a Xcode-less Swift project:</p>

<ul>
  <li>Handling build dependencies</li>
  <li>Linking to existing code</li>
  <li>Creating library abstractions</li>
  <li>Creating executable for the language</li>
  <li>Handling sharing code between projects</li>
</ul>

<p>Roughly in that order of precedence too. In short, they needed a build system first, and then a dependency manager
to support remote packages.</p>

<p>There are a few big existing build systems: <a href="https://www.github.com/facebook/buck">Buck</a> and <a href="https://ninja-build.org">Ninja</a> are the biggest players in the game,
but they aim to be language agnostic build tools. This makes them a bit too abstract to be useful as the main way
to build a modular system for building projects in a language. So, each language from Swift’s generation of <em>“As
fast as C, but safe”</em> like Rust, Go and D all implement a build system unique to their language.</p>

<h1 id="llbuild">llbuild</h1>

<p>Apple’s approach to building a build system is smart. Instead of from scratch creating a build tool for Swift, they
created an abstraction which makes it feasible to build complex builds systems quicker. That’s <a href="https://www.github.com/apple/swift-llbuild">llbuild</a>, a
low-level build system. This was used to create the Swift build system. Then, llbuild was re-used to create
<a href="https://lists.swift.org/pipermail/swift-build-dev/Week-of-Mon-20170605/001019.html">Xcode’s build system</a>.</p>

<p>The new build system for Xcode came out in 2017 with Xcode 9, and became the default in 2018 with Xcode 10. What’s
impressive about the new build system is how much it was just like the last, but better, to quote <a href="https://jamesdempsey.net/2017/06/13/new-xcode-build-system-and-buildsettingextractor/">James
Dempsey</a>:</p>

<blockquote>
  <p>New build system. Same build settings</p>
</blockquote>

<p>Which is impressive, because the existing system is <a href="https://pewpewthespells.com/blog/xcode_build_system.html">complex</a>.</p>

<h1 id="build-system--package-manager">Build System != Package Manager</h1>

<p>CocoaPods was “useful” for Cocoa development very quickly in comparison (roughly a month from initial commit to
supporting a few existing libraries in an app back in 2011), this was because CocoaPods completely skipped the
build tool stage. There was no need, Xcode has a working build system and you can control it via <code class="language-plaintext highlighter-rouge">.xcodeproj</code>
files. This meant that the key output for CocoaPods is to reliably support generating xcode projects and the
underlying abstractions making it actually compile is left to the Xcode team.</p>

<p>The Swift PM team couldn’t do this without making it deeply dependent on Xcode. CocoaPods can be in-different to
something like Linux support (fun fact: last month <a href="https://github.com/CocoaPods/CocoaPods/pull/8189">Windows support</a> was added) because no-one is writing
Cocoa apps on Linux, and it’s only concern is shipping those Xcode project files to your project’s file system.</p>

<p>This difference in abstraction level allowed CocoaPods to work on comprehensive support of the existing library
ecosystem considerably sooner. The config options were already set, the types of projects were known they had to
map to whatever Xcode supported rather than the more mundane task of actually figuring out how to make a project
build, compile and scale.</p>

<p>CocoaPods got focus on more user-facing issues that a dependency manager has considerably quicker, and could focus
on building the most used features first then moving to more niche features (which could be the abstractions those
popular feature relied on) when someone needed it. This meant that the user-facing, and interesting to me, work was
feasible considerably earlier:</p>

<ul>
  <li>Discovery of packages</li>
  <li>A lot of documentation</li>
  <li>Access rights for owners</li>
  <li>Creating plugin systems giving hooks for all sorts of projects to be built</li>
  <li>Support for esoteric compiler features</li>
  <li>Support for esoteric Xcode features</li>
  <li>Providing useful metrics on quality/usage</li>
  <li>Cool stickers</li>
</ul>

<p>Which generally speaking are problems that Swift PM will eventually have to hit, but instead of jumping straight to
it, the team has to first build the foundations before making the decorations.</p>

<h1 id="the-cost">The cost</h1>

<p>These choices came with a cost though, right now there’s only 1 or 2 contexts where Swift PM is useful, the most
prominent is Swift on a Server. It’s likely that Swift on a server probably isn’t as widely adopted as Apple hoped
it would be by the programming community on whole. Unless you are an iOS developer with existing skills, Swift
probably doesn’t even register as being a language you would consider building your web API/apps in. Yes, I know
there are a <a href="https://www.pointfree.co">few</a> <a href="https://talk.objc.io/collections/server-side-swift">good</a> exceptions, but they come from the iOS community.</p>

<p>Which probably hasn’t helped with resourcing Swift PM at Apple, where the user-facing team has
<a href="https://github.com/apple/swift-package-manager/graphs/contributors">basically</a> been a one-man operation for about a year and a half. From my external perspective,
this is lower than I’d like. It’s a problem close to my heart though.</p>

<p>Given that we’re talking about Apple, you shouldn’t judge activity entirely from their open source contributions,
but given the project isn’t useful for most people who could contribute, they don’t. I started working on CocoaPods
because it was fixing a really hard problem that I had, and I knew that working on this would fix it for everyone
else in the industry too, making it worth my time. So, external contributions outside Apple are pretty low.</p>

<p>Build systems are a hard problem, and the Swift PM team very reasonably needs to work on that first, but is
basically doing it pretty much solo. I think this is one of those “<a href="https://ryanparman.com/posts/2011/skating-to-where-the-puck-will-be/">skate where the puck will be</a>”
situations, instead of where it is, which CocoaPods’ aimed for. This means it’s going to take a much longer time to
be useful and widely adopted. While I don’t really know where Swift PM aims to be in the long-term, I think Xcode
integration will probably be the major adoption turning point but in the meantime I’ve got an idea for a smaller
way to make Swift PM useful to the iOS community. That, however, is another blog post.</p>

]]></content>
  </entry>
  
</feed>
