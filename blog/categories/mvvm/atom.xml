<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: mvvm | Artsy Engineering]]></title>
  <link href="https://artsy.github.io/blog/categories/mvvm/atom.xml" rel="self"/>
  <link href="https://artsy.github.io/"/>
  <updated>2024-05-17T14:49:02+00:00</updated>
  <id>https://artsy.github.io/</id>
  <author>
    <name><![CDATA[]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Upgrading to RxSwift]]></title>
    <link href="https://artsy.github.io/blog/2015/12/08/reactive-cocoa-to-rxswift/"/>
    <updated>2015-12-08T12:00:00+00:00</updated>
    <id>https://artsy.github.io/blog/2015/12/08/reactive-cocoa-to-rxswift</id>
    <content type="html"><![CDATA[<p>When we <a href="http://artsy.github.io/blog/2014/11/13/eidolon-retrospective/">built Eidolon last year</a>, Swift was still pre-1.0 and we couldn‚Äôt rely on the wide variety of available Swift libraries we enjoy today. I wanted to build it using functional reactive programming, because that‚Äôs how I believe <a href="https://realm.io/news/altconf-ash-furrow-functional-reactive-swift/">everyone should write software</a>, but there were no Swift-based FRP libraries at the time. As a compromise, I used ReactiveCocoa‚Äôs Objective-C API (the Swift API was months away from an alpha).</p>

<!-- more -->

<p>The choice to use an Objective-C API ‚Äì one that heavily relies on the runtime ‚Äì limited us in terms of what Swift features we could use. We had a lot of closures use <code class="language-plaintext highlighter-rouge">AnyObject!</code> as parameter types, requiring constant checks for <code class="language-plaintext highlighter-rouge">nil</code> and conditional casts to specific types. It was a real nightmare. We had a lot of code that looked like this:</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">signal</span><span class="o">.</span><span class="n">map</span> <span class="p">{</span> <span class="n">object</span> <span class="k">in</span>
    <span class="k">if</span> <span class="k">let</span> <span class="nv">castObject</span> <span class="o">=</span> <span class="n">object</span> <span class="k">as?</span> <span class="kt">WhateverType</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">castObject</span><span class="o">.</span><span class="nf">thingWeAreMappingTo</span><span class="p">()</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="k">return</span> <span class="kt">SomeSensibleMissingValue</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Swift 2‚Äôs <code class="language-plaintext highlighter-rouge">guard</code> statements helped clean this up, but the fundamental problem was that we were using an FRP library not suited for Swift.</p>

<p>While we had <a href="https://github.com/ashfurrow/Swift-RAC-Macros">built replacements</a> for the Objective-C runtime features that weren‚Äôt available in Swift, we knew that a migration away from RAC‚Äôs Objective-C API would eventually be necessary.</p>

<p>I used a bit of down-time recently to tackle the problem, starting with some small bits and pieces before dedicating two weeks to finish it. Here we go!</p>

<h3 id="benefits">Benefits</h3>

<p>The key benefits of using a Swift-based FRP framework include:</p>

<ul>
  <li>Using the type-checker to catch bugs at compile-time.</li>
  <li>Writing fewer lines of code.</li>
  <li>Writing more expressive code.</li>
  <li>Having fun with the type checker and protocol extensions.</li>
</ul>

<p>When Apple announced Swift, they stressed how safe of a language it was. Now that we were moving to a Swift-based FRP framework, we would finally benefit from those safety features.</p>

<p>This makes new features easier and faster to build. It gives me more confidence when I make a new deploy that things won‚Äôt break. And like I mentioned above, it‚Äôs just a lot more fun to write Swift with Swift-based frameworks.</p>

<h3 id="process">Process</h3>

<p>When we wrote Eidolon, ReactiveCocoa was more-or-less the only iOS FRP library around. That‚Äôs fine, because ReactiveCocoa is <em>awesome</em>. But today, there are a variety of frameworks and <a href="https://ashfurrow.com/blog/reactivecocoa-vs-rxswift/">they‚Äôre <em>all</em> awesome</a>. So we have a choice to make.</p>

<p>Sticking with ReactiveCocoa would mean that we could make a gradual transition (there‚Äôs a bridge between the Objective-C and Swift APIs). This is <em>kind of</em> a benefit, but also kind of a drawback. I don‚Äôt really trust myself enough to move off of Objective-C‚Äôs API completely if a bridge is there ‚Äì it‚Äôs just too tempting to leave some parts of the app using the old API.</p>

<p>So instead I decided to not consider the existing code. I asked myself: ‚ÄúIf I were choosing an FRP library today for a <em>brand-new</em> app, which one would I choose?‚Äù</p>

<p>The answer to that question is <a href="https://github.com/ReactiveX/RxSwift">RxSwift</a>.</p>

<p>RxSwift is a Swift implementation of the <a href="http://reactivex.io">ReactiveX APIs</a>, which bring a few great benefits. The API is well-defined and unlikely to include breaking changes, there are reference implementations for Rx in other languages, and tutorials/resources for other Rx frameworks apply directly to this library. There is some extra overhead from having to interact with a larger community, and <a href="http://stackoverflow.com/questions/32542846/reactivecocoa-vs-rxswift-pros-and-cons/32581824#32581824">there are technical distinctions</a> that might influence your decision. Ultimately, though, I chose RxSwift because I‚Äôve found their community much more pleasant to interact with.</p>

<p>I started the process by <a href="https://github.com/artsy/eidolon/commit/8e6e86d733e36d3c0b3db581019d09296d04cd68">removing ReactiveCocoa and adding RxSwift to our Podfile</a>. Of course, that made the <em>entire app break</em>, which was fine.</p>

<p>I was working off a ‚Äúdevelop‚Äù branch, so having the app in an uncompilable state for a few weeks would be no problem.</p>

<p>Then the remaining process was simple: find a compiler error, fix it, and find a new one. 27 days later, <a href="https://github.com/artsy/eidolon/commit/8e6e86d733e36d3c0b3db581019d09296d04cd68">we merged the changes into master</a>.</p>

<p>The process was prioritized in the following way:</p>

<ol>
  <li>Get the app compiling again.</li>
  <li>Get the app more-or-less working (no crashes for common use cases).</li>
  <li>Get the unit tests compiling again.</li>
  <li>Get the unit tests <em>completing</em> without crashing.</li>
  <li>Get the unit tests <em>passing</em> (locally and on CI).</li>
  <li>Thoroughly test the app to verify it still works properly.</li>
</ol>

<p>We‚Äôre currently wrapping up the final stage, but I expect to release a new build for production use later this week.</p>

<h3 id="biggest-challenges">Biggest Challenges</h3>

<p>The biggest challenges were keeping an eye on the end result. When you go for so long without being able to see the benefits of your work, it‚Äôs easy to get discouraged.</p>

<p>This is the first major app I‚Äôve written in Swift with FRP, so there were new patterns and practices I had to learn. Checking in with the RxSwift team helped a lot, with a lot of assistance from <a href="https://twitter.com/bontoJR">Junior</a> in particular. Making the changes in the open also <a href="https://github.com/artsy/eidolon/pull/569#commitcomment-14632425">let others provide feedback on our progress</a>.</p>

<p>One of the biggest challenges was the structure of the existing code. Our bid-fulfillment process shares <em>a lot</em> of state ‚Äì much of it in ways that we wouldn‚Äôt write today. But I didn‚Äôt want to increase the scope of the transition to RxSwift to <em>also</em> include removing all shared state from the app ‚Äì scope creep is really dangerous when your project already spans weeks. It was hard to resist this temptation, but I feel it worked out for the best.</p>

<h3 id="things-that-were-easier-than-expected">Things That Were Easier than Expected</h3>

<p>Things generally went easier than I had anticipated. Using a new library for the first time in production, I had a persistent fear that I would get close to completing the transition, but some fundamental misunderstanding of mine would completely undermine all my work. This turned out to be mild impostor syndrome ‚Äì with a few small exceptions, the app worked correctly as soon as it compiled üéâ</p>

<p>I tried to get rid of <code class="language-plaintext highlighter-rouge">dynamic</code> properties in views, controllers, and view models, but left them on models to use KVO with <code class="language-plaintext highlighter-rouge">rx_observe</code>. I tried not to use KVO a lot, and instead rely on <code class="language-plaintext highlighter-rouge">Variable</code> properties, which wrap a value in a type that can be observed. I‚Äôm still finding a balance between these two approaches, but this is largely a personal preference.</p>

<p>A common pattern became defining a private <code class="language-plaintext highlighter-rouge">Variable</code> and a public <code class="language-plaintext highlighter-rouge">Observable</code>, which would constrain the state (a common theme in FRP).</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">private</span> <span class="k">let</span> <span class="nv">_password</span> <span class="o">=</span> <span class="kt">Variable</span><span class="p">(</span><span class="s">""</span><span class="p">)</span>
<span class="k">var</span> <span class="nv">password</span><span class="p">:</span> <span class="kt">Observable</span><span class="o">&lt;</span><span class="kt">String</span><span class="o">&gt;</span> <span class="p">{</span>
    <span class="k">return</span> <span class="n">_password</span><span class="o">.</span><span class="nf">asObservable</span><span class="p">()</span>
<span class="p">}</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">_password</code> is now the read/write property accessible only within the type, while <code class="language-plaintext highlighter-rouge">password</code> is a publicly read-only <code class="language-plaintext highlighter-rouge">Observable</code>. This pattern takes a bit of typing, so I‚Äôm still looking for a way to further abstract it. Maybe a Swift preprocessor would help.</p>

<h3 id="lessons-learned">Lessons Learned</h3>

<p>The biggest lesson I learned was not about RxSwift specifically, but more about how to use the type system to <a href="https://en.wikipedia.org/wiki/Don%27t_repeat_yourself">stay DRY</a>. For example, I was writing this kind of code in our unit tests <em>a lot</em>:</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">expect</span><span class="p">(</span><span class="k">try!</span> <span class="n">subject</span><span class="o">.</span><span class="n">expiryDatesAreValidSignal</span><span class="o">.</span><span class="nf">asBlocking</span><span class="p">()</span><span class="o">.</span><span class="nf">first</span><span class="p">())</span> <span class="o">==</span> <span class="kc">false</span>
</code></pre></div></div>

<p>(By ‚Äúa lot‚Äù, I mean that I had to write this code twice before deciding to find a better way.)</p>

<p>So I wrote an extension to the <code class="language-plaintext highlighter-rouge">ObservableType</code> protocol that would abstract this unit-testing code into a reusable function and operator.</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">func</span> <span class="n">equalFirst</span><span class="o">&lt;</span><span class="kt">T</span><span class="p">:</span> <span class="kt">Equatable</span><span class="o">&gt;</span><span class="p">(</span><span class="nv">expectedValue</span><span class="p">:</span> <span class="kt">T</span><span class="p">?)</span> <span class="o">-&gt;</span> <span class="kt">MatcherFunc</span><span class="o">&lt;</span><span class="kt">Observable</span><span class="o">&lt;</span><span class="kt">T</span><span class="o">&gt;&gt;</span> <span class="p">{</span>
    <span class="k">return</span> <span class="kt">MatcherFunc</span> <span class="p">{</span> <span class="n">actualExpression</span><span class="p">,</span> <span class="n">failureMessage</span> <span class="k">in</span>

        <span class="n">failureMessage</span><span class="o">.</span><span class="n">postfixMessage</span> <span class="o">=</span> <span class="s">"equal &lt;</span><span class="se">\(</span><span class="n">expectedValue</span><span class="se">)</span><span class="s">&gt;"</span>
        <span class="k">let</span> <span class="nv">actualValue</span> <span class="o">=</span> <span class="k">try</span> <span class="n">actualExpression</span><span class="o">.</span><span class="nf">evaluate</span><span class="p">()?</span><span class="o">.</span><span class="nf">toBlocking</span><span class="p">()</span><span class="o">.</span><span class="nf">first</span><span class="p">()</span>

        <span class="k">let</span> <span class="nv">matches</span> <span class="o">=</span> <span class="n">actualValue</span> <span class="o">==</span> <span class="n">expectedValue</span>
        <span class="k">return</span> <span class="n">matches</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="o">==&lt;</span><span class="kt">T</span><span class="p">:</span> <span class="kt">Equatable</span><span class="o">&gt;</span><span class="p">(</span><span class="nv">lhs</span><span class="p">:</span> <span class="kt">Expectation</span><span class="o">&lt;</span><span class="kt">Observable</span><span class="o">&lt;</span><span class="kt">T</span><span class="o">&gt;&gt;</span><span class="p">,</span> <span class="nv">rhs</span><span class="p">:</span> <span class="kt">T</span><span class="p">?)</span> <span class="p">{</span>
    <span class="n">lhs</span><span class="o">.</span><span class="nf">to</span><span class="p">(</span><span class="nf">equalFirst</span><span class="p">(</span><span class="n">rhs</span><span class="p">))</span>
<span class="p">}</span>
</code></pre></div></div>

<p>So now my unit tests‚Äô expectations look like this:</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">expect</span><span class="p">(</span><span class="n">subject</span><span class="o">.</span><span class="n">expiryDatesAreValid</span><span class="p">)</span> <span class="o">==</span> <span class="kc">false</span>
</code></pre></div></div>

<p>Nice ‚Äì way better.</p>

<p>This is just one example ‚Äì one that <a href="https://github.com/artsy/eidolon/issues/570">we will be moving into its own library</a>.</p>

<p>Swift‚Äôs type system is really, really powerful. <a href="https://github.com/artsy/eidolon/blob/cb31168fa29dcc7815fd4a2e30e7c000bd1820ce/Kiosk/UIKit+Rx.swift">Here</a> are some RxSwift-specific extensions we added to UIKit, and <a href="https://github.com/artsy/eidolon/blob/cb31168fa29dcc7815fd4a2e30e7c000bd1820ce/Kiosk/App/SwiftExtensions.swift#L22-L56">here</a> are some general Swift extensions that we‚Äôve found helpful.</p>

<p>There‚Äôs a danger in going overboard, of course. A few times, I was tempted to make an extension on string-convertible <code class="language-plaintext highlighter-rouge">Variable</code>s to make them themselves string-convertible, for example. That might make <em>writing</em> code easier, but its functionality would not be obvious when <em>reading</em> it later on.</p>

<p>I tried to keep changes like this as obvious and simple as possible, and every addition was peer-reviewed by Orta.</p>

<h3 id="community-impact">Community Impact</h3>

<p>Throughout the course of the transition to RxSwift, <a href="https://github.com/ReactiveX/RxSwift/pulls?utf8=‚úì&amp;q=is%3Apr+author%3Aashfurrow">I made a few contributions to the framework</a>, but the things I wanted to add were outside the immediate scope of the project maintainers‚Äô vision. Totally understandable. <a href="https://github.com/ReactiveX/RxSwift/issues/265">With their assistance</a>, Orta and I and others helped to create a <a href="https://github.com/RxSwiftCommunity">new organization for community-run, RxSwift-based libraries</a>.</p>

<p>Now RxSwift can stay lean and focused while the community has a dedicated space to improve all of our ideas, together. <a href="https://github.com/RxSwiftCommunity/NSObject-Rx">One library</a> I wrote during this project is already under the organization‚Äôs umbrella, with <a href="https://github.com/RxSwiftCommunity/contributors/issues/4">another on the way</a>.</p>

<p>Helping to create a new organization gave me an opportunity to practice my community-building skills. It was exciting to <a href="https://github.com/RxSwiftCommunity/contributors">re-apply Moya‚Äôs contributor guidelines</a> in a new setting, helping to set a positive tone for a growing community. I had a lot of guidance from Orta and Eloy, who of course have <a href="https://cocoapods.org">done this before</a>.</p>

<p>Making positive changes to the developer community ‚Äì and, on a larger scale, to the world ‚Äì is something I‚Äôve <a href="https://ashfurrow.com/blog/building-my-career/">decided to pursue as my career</a>. I wouldn‚Äôt have come to that conclusion if it weren‚Äôt for the thoughtfulness and generosity of my colleagues and of the RxSwift community.</p>

<hr />

<p>This transition project has been exciting, but at times it has been exhausting, too. While I‚Äôm <a href="https://github.com/artsy/eidolon/pull/569">glad it‚Äôs over</a>, the past few weeks have impacted my life in a significant ‚Äì and positive ‚Äì way. I‚Äôve never been more excited to be doing what I‚Äôm doing, and to be working in the growing open source Swift community. Thank you, everyone.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MVVM in Swift]]></title>
    <link href="https://artsy.github.io/blog/2015/09/24/mvvm-in-swift/"/>
    <updated>2015-09-24T16:13:00+00:00</updated>
    <id>https://artsy.github.io/blog/2015/09/24/mvvm-in-swift</id>
    <content type="html"><![CDATA[<p>Model View ViewModel has become the default way I write apps on iOS ‚Äì it makes writing iOS apps a joy. I‚Äôve written <a href="https://www.objc.io/issues/13-architecture/mvvm/">about it</a> <a href="http://www.teehanlax.com/blog/model-view-viewmodel-for-ios/">again</a> and <a href="https://speakerdeck.com/ashfurrow/reactivecocoa-at-mdevcon-2014">again</a> and <a href="https://leanpub.com/iosfrp">oh my</a>.</p>

<p>But last Autumn, as our team was all-hands-on-deck to wrap up the <a href="http://artsy.github.io/blog/2014/11/13/eidolon-retrospective/">auctions kiosk app</a>, we chose not to use MVVM. Why not?</p>

<p>We were building a <em>new app</em> in a <em>new language</em> using a <em>non-Swift framework</em> for functional reactive programming. I was also teaching colleagues what they needed to know about ReactiveCocoa to help write the app. We used the MVC pattern because the relative cost of MVVM was too high.</p>

<p>‚Äú‚Ä¶ <em>was</em> ‚Ä¶‚Äù</p>

<!-- more -->

<p>Since then, I‚Äôve been <a href="https://github.com/artsy/eidolon/issues/333">pecking away</a> at converting small view controllers away from MVC, to figure out what MVVM on iOS written in Swift might look like. My goal has been getting ready to cut down our behemoth main view controller and create a view model for it. Before the rewrite, it was nearly 600 lines of code and was responsible for:</p>

<ul>
  <li>networking.</li>
  <li>syncing auction lot states.</li>
  <li>user interaction.</li>
  <li>collection view layouts.</li>
  <li>image caching.</li>
  <li>background-thread data processing.</li>
</ul>

<p>It‚Äôs quite terrifying now that I think about it!</p>

<p>Well, <a href="https://github.com/artsy/eidolon/pull/503/files">finally I was ready</a>. The view controller is now down to 224 lines, and is responsible for only things like displaying data. Calculating <em>what</em> to display and <em>when</em> to display it is now contained within the view model. In true MVVM form, our view controller doesn‚Äôt even have direct access to the models it displays!</p>

<p>So what does MVVM in Swift look like? Well, our answer is just that ‚Äì <em>our</em> answer. Others exist, and they have merits and faults of their own.</p>

<p>I‚Äôm not here to preach a definitive definition of MVVM in Swift. Instead, I want to talk about some of the lessons we learnt in the process of building a solution that worked for us.</p>

<hr />

<p>Programming boils down to getting certain bits of code to communicate with other bits in an intelligent way. Software <em>patterns</em> are ways of constraining programmers to make it easier to program.</p>

<p>MVVM, roughly, has the following constraints:</p>

<ul>
  <li>Models don‚Äôt talk to anybody (same as MVC).</li>
  <li>View models only talk to models.</li>
  <li>View controllers can‚Äôt talk to models directly; they only interact with view models and views.</li>
  <li>Views only talk to the view <em>controllers</em>, notifying them of interaction events (same as MVC).</li>
</ul>

<p>And that‚Äôs pretty much it. It‚Äôs not that different from MVC ‚Äì the key differences are:</p>

<ul>
  <li>There‚Äôs a new ‚Äúview model‚Äù class.</li>
  <li>The view controller no longer has access to the model.</li>
</ul>

<p><img src="/images/2015-09-24-mvvm-in-swift/mvvm.png" alt="MVVM Diagram" /></p>

<p>Additionally, MVVM on iOS acknowledges the one-to-one relationship between views and view controllers. I tend to think of them as one entity that just happens to be split across a <code class="language-plaintext highlighter-rouge">.swift</code> file and a Storyboard.</p>

<p>The view model‚Äôs job is to handle all presentation logic. If a model contains an <code class="language-plaintext highlighter-rouge">NSDate</code>, the <code class="language-plaintext highlighter-rouge">NSDateFormatter</code> to format that date would live in the view model.</p>

<p>View models don‚Äôt have <em>any</em> access to the user interface. You should not even <code class="language-plaintext highlighter-rouge">import UIKit</code> in a view model. Typically, a view controller observes the view model somehow to know when there‚Äôs new data to display. This can be done through KVO or FRP.</p>

<p>MVVM and MVC share a common weakness: neither defines where the network logic of an app should go. I‚Äôve put it in the view model for now, but I plan on separating it out into its own object soon. That object will be owned by the view model.</p>

<hr />

<p>So let‚Äôs talk about some specific challenges we had.</p>

<h2 id="user-interface-structure">User Interface Structure</h2>

<p>Part of our user interface consists of a segment control near the top of the screen. The currently selected segment determines the sort order of the collection view cells, as well as the collection view‚Äôs layout. We had previously defined an enum to store the titles and sort order corresponding to each segmented control; the order of the enum cases implies the order of the controls in the UI.</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">enum</span> <span class="kt">SwitchValues</span><span class="p">:</span> <span class="kt">Int</span> <span class="p">{</span>
    <span class="k">case</span> <span class="kt">Grid</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="k">case</span> <span class="kt">LeastBids</span>
    <span class="k">case</span> <span class="kt">MostBids</span>
    <span class="k">case</span> <span class="kt">HighestCurrentBid</span>
    <span class="k">case</span> <span class="kt">LowestCurrentBid</span>
    <span class="k">case</span> <span class="kt">Alphabetical</span>
<span class="p">}</span>
</code></pre></div></div>

<p>So where does this enum live in MVVM? Since the logic for sorting models, the button titles, and the order of the buttons are all pieces of presentation logic, the enum seems like it belongs in the view model.</p>

<p>However, the decision of which layout for the collection view to use is slightly more nuanced. The layout doesn‚Äôt affect what data we show the user or how they interact with it; it only affects the visuals how the information is presented. This suggests the logic for deciding layouts might belong in the view controller.</p>

<p>My solution was to put the enum in the view model, and have the view model expose a signal defining which of the two layouts should be used. Based on the selected segment index, the view model decides which layout should be used and sends that value on a signal. The view controller is responsible for mapping that signal into a configured layout, then setting that layout on the collection view.</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Respond to changes in layout, driven by switch selection.</span>
<span class="n">viewModel</span><span class="o">.</span><span class="n">gridSelectedSignal</span><span class="o">.</span><span class="n">map</span> <span class="p">{</span> <span class="p">[</span><span class="k">weak</span> <span class="k">self</span><span class="p">]</span> <span class="p">(</span><span class="n">gridSelected</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">AnyObject</span><span class="o">!</span> <span class="k">in</span>
    <span class="k">switch</span> <span class="n">gridSelected</span> <span class="k">as?</span> <span class="kt">Bool</span> <span class="p">{</span>
    <span class="k">case</span> <span class="o">.</span><span class="kt">Some</span><span class="p">(</span><span class="kc">true</span><span class="p">):</span>
        <span class="k">return</span> <span class="kt">ListingsViewController</span><span class="o">.</span><span class="nf">masonryLayout</span><span class="p">()</span>
    <span class="k">default</span><span class="p">:</span>
        <span class="k">return</span> <span class="kt">ListingsViewController</span><span class="o">.</span><span class="nf">tableLayout</span><span class="p">(</span><span class="kt">CGRectGetWidth</span><span class="p">(</span><span class="k">self</span><span class="p">?</span><span class="o">.</span><span class="n">switchView</span><span class="o">.</span><span class="n">frame</span> <span class="p">??</span> <span class="kt">CGRectZero</span><span class="p">))</span>
    <span class="p">}</span>
<span class="p">}</span><span class="o">.</span><span class="n">subscribeNext</span> <span class="p">{</span> <span class="p">[</span><span class="k">weak</span> <span class="k">self</span><span class="p">]</span> <span class="n">layout</span> <span class="o">-&gt;</span> <span class="kt">Void</span> <span class="k">in</span>
    <span class="k">self</span><span class="p">?</span><span class="o">.</span><span class="n">collectionView</span><span class="o">.</span><span class="nf">setCollectionViewLayout</span><span class="p">(</span><span class="n">layout</span> <span class="k">as!</span> <span class="kt">UICollectionViewLayout</span><span class="p">,</span> <span class="nv">animated</span><span class="p">:</span> <span class="kc">false</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>

<p>The view controller also uses this signal to define which cell reuse identifier should be used.</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Map switch selection to cell reuse identifier.</span>
<span class="kt">RAC</span><span class="p">(</span><span class="k">self</span><span class="p">,</span> <span class="s">"cellIdentifier"</span><span class="p">)</span> <span class="o">&lt;~</span> <span class="n">viewModel</span><span class="o">.</span><span class="n">gridSelectedSignal</span><span class="o">.</span><span class="n">map</span> <span class="p">{</span> <span class="n">gridSelected</span> <span class="o">-&gt;</span> <span class="kt">AnyObject</span><span class="o">!</span> <span class="k">in</span>
    <span class="k">switch</span> <span class="n">gridSelected</span> <span class="k">as?</span> <span class="kt">Bool</span> <span class="p">{</span>
    <span class="k">case</span> <span class="o">.</span><span class="kt">Some</span><span class="p">(</span><span class="kc">true</span><span class="p">):</span>
        <span class="k">return</span> <span class="kt">MasonryCellIdentifier</span>
    <span class="k">default</span><span class="p">:</span>
        <span class="k">return</span> <span class="kt">TableCellIdentifier</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="structuring-a-view-model">Structuring a View Model</h2>

<p>The most common question from iOS developers about MVVM and FRP concerns how the view model exposes data to the view controller. The view controller needs to be notified about changes to the underlying model, but what mechanism do we use to do this? There are two options:</p>

<ol>
  <li>Use (dynamic) properties on the view model, which can be observed using KVO (or wrapped in a signal/sequence using FRP).</li>
  <li>Use signals/sequences/futures as properties on the view model, which can be consumed by their corresponding async frameworks.</li>
</ol>

<p>The first option is appealing since it gives your view controller a choice of how to observe the properties. However, I‚Äôd recommend against it; Swift doesn‚Äôt have type-checking on KVO (you need to cast from <code class="language-plaintext highlighter-rouge">AnyObject!</code> a lot).</p>

<p>The second option is what I prefer, and it seems the most ‚ÄúSwift‚Äù way of doing things. When we do move away from RAC‚Äôs Objective-C interface, the view model will replace its <code class="language-plaintext highlighter-rouge">RACSignal</code> properties with sequences based on Swift generics, which will provide compile-time type-checking üíØ</p>

<p>Defining these signals on a view model can be tricky. Swift initializers have <a href="http://ashfurrow.com/blog/swift-initializers/">strict rules</a> around when properties are assigned. The signals need access to the internal state of the view model, so they need to be created <em>after</em> calling <code class="language-plaintext highlighter-rouge">super.init()</code>. However, we can‚Äôt call <code class="language-plaintext highlighter-rouge">super.init()</code> until all our properties have been assigned to, including the signal properties.</p>

<p>It‚Äôs your standard chicken-and-the-egg problem üê£</p>

<p>I took the easy way out and used implicitly-unwrapped optionals, defined with <code class="language-plaintext highlighter-rouge">var</code>, which can be assigned to <em>after</em> the call to <code class="language-plaintext highlighter-rouge">super.init()</code>. It‚Äôs not a perfect solution. We could instead use <code class="language-plaintext highlighter-rouge">lazy var</code> properties assigned to self-evaluating closures, or just use computed properties. I‚Äôm hoping to explore other options when we move away from RAC 2‚Äôs Objective-C API.</p>

<h2 id="handling-user-interaction">Handling User Interaction</h2>

<p>The next problem I had was presenting details based on user interaction. Users tap a button, which is handled in the view controller, which presents the details. However, the view controller should not have access to the models, so how can it configure the details to present them?</p>

<p>My solution took advantage of the interchangeability of Swift functions and closures. First I defined a closure type in the view model.</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">typealias</span> <span class="kt">ShowDetailsClosure</span> <span class="o">=</span> <span class="p">(</span><span class="kt">SaleArtwork</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">Void</span>
</code></pre></div></div>

<p>Then I added a property to the view model and a corresponding parameter to the initializer.</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="kt">ListingsViewModel</span> <span class="p">{</span>
    <span class="k">let</span> <span class="nv">showDetails</span><span class="p">:</span> <span class="kt">ShowDetailsClosure</span>

    <span class="nf">init</span><span class="p">(</span><span class="o">...</span>
         <span class="nv">showDetails</span><span class="p">:</span> <span class="kt">ShowDetailsClosure</span><span class="p">,</span>
         <span class="o">...</span>
</code></pre></div></div>

<p>Next I need to actually call the closure. I defined a function on the view model that the view controller can invoke, passing in the context that‚Äôs necessary to decide which model‚Äôs details should be presented. This context is just an index path.</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">func</span> <span class="nf">showDetailsForSaleArtworkAtIndexPath</span><span class="p">(</span><span class="nv">indexPath</span><span class="p">:</span> <span class="kt">NSIndexPath</span><span class="p">)</span> <span class="p">{</span>
    <span class="nf">showDetails</span><span class="p">(</span><span class="n">sortedSaleArtworks</span><span class="p">[</span><span class="n">indexPath</span><span class="o">.</span><span class="n">item</span><span class="p">])</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Nice! So now when the user selects a cell, we can call this function on the view model with the index path that the user selected. The view model decides which model to use, and calls the closure.</p>

<p>The final piece of the puzzle is being clever about creating the view model. We need to pass a closure to its initializer, one that shows the model‚Äôs details. I defined a function on the view controller that matched the <code class="language-plaintext highlighter-rouge">ShowDetailsClosure</code> signature.</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">func</span> <span class="nf">showDetailsForSaleArtwork</span><span class="p">(</span><span class="nv">saleArtwork</span><span class="p">:</span> <span class="kt">SaleArtwork</span><span class="p">)</span> <span class="p">{</span>
    <span class="nf">performSegueWithIdentifier</span><span class="p">(</span><span class="kt">SegueIdentifier</span><span class="o">.</span><span class="kt">ShowSaleArtworkDetails</span><span class="o">.</span><span class="n">rawValue</span><span class="p">,</span> <span class="nv">sender</span><span class="p">:</span> <span class="n">saleArtwork</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>

<p>And then use lazy loading (discussed below) to call the view model‚Äôs initializer. I pass in a reference to the above function as the closure parameter.</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">lazy</span> <span class="k">var</span> <span class="nv">viewModel</span><span class="p">:</span> <span class="kt">ListingsViewModelType</span> <span class="o">=</span> <span class="p">{</span>
    <span class="k">return</span> <span class="kt">ListingsViewModel</span><span class="p">(</span><span class="o">...</span><span class="p">,</span> <span class="nv">showDetails</span><span class="p">:</span> <span class="k">self</span><span class="o">.</span><span class="n">showDetailsForSaleArtwork</span><span class="p">,</span> <span class="o">...</span><span class="p">)</span>
<span class="p">}()</span>
</code></pre></div></div>

<p>So let‚Äôs review what happens when a user makes a selection.</p>

<p>&lt;/div&gt;&lt;/div&gt;<a href="/images/2015-09-24-mvvm-in-swift/selection.png"><img src="/images/2015-09-24-mvvm-in-swift/selection.png" title="Selection diagram" /></a>&lt;div class='meta-container'&gt;&lt;header&gt;¬†&lt;/header&gt;&lt;/div&gt;&lt;div class='date-container'&gt;¬†&lt;/div&gt;&lt;div class='content-container'&gt;&lt;div class='entry-content'&gt;</p>

<p>Here are the steps:</p>

<ol>
  <li>User taps a cell.</li>
  <li>A callback on the view controller is invoked with the selected index path.</li>
  <li>The view controller tells the view model which index path was selected.</li>
  <li>The view model looks up the corresponding model.</li>
  <li>The view model invokes the <code class="language-plaintext highlighter-rouge">showDetails</code> closure given to it when it was initialized.</li>
  <li>The <code class="language-plaintext highlighter-rouge">showDetails</code> ‚Äúclosure‚Äù performs a segue with the model.</li>
</ol>

<p>It‚Äôs not an ideal solution since it still exposes the model to the view controller (even under very strict conditions), but it‚Äôs a reasonable compromise. As we continue to use more view models, I‚Äôm curious to see how this solution scales.</p>

<h2 id="testing">Testing</h2>

<p>Earlier I mentioned the lazy closure property in the view controller. This is a trick that lets the view controller customize the view model by using references to <code class="language-plaintext highlighter-rouge">self</code>.</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">lazy</span> <span class="k">var</span> <span class="nv">viewModel</span><span class="p">:</span> <span class="kt">ListingsViewModelType</span> <span class="o">=</span> <span class="p">{</span>
    <span class="k">return</span> <span class="kt">ListingsViewModel</span><span class="p">(</span>
        <span class="nv">selectedIndexSignal</span><span class="p">:</span> <span class="k">self</span><span class="o">.</span><span class="n">switchView</span><span class="o">.</span><span class="n">selectedIndexSignal</span><span class="p">,</span>
        <span class="nv">showDetails</span><span class="p">:</span> <span class="k">self</span><span class="o">.</span><span class="n">showDetailsForSaleArtwork</span><span class="p">,</span>
        <span class="nv">presentModal</span><span class="p">:</span> <span class="k">self</span><span class="o">.</span><span class="n">presentModalForSaleArtwork</span>
    <span class="p">)</span>
<span class="p">}()</span>
</code></pre></div></div>

<p>The <code class="language-plaintext highlighter-rouge">viewModel</code> property is first accessed by the view controller in <code class="language-plaintext highlighter-rouge">viewDidLoad()</code>, which means that we can replace the property by a test double any time before that.</p>

<p>The view controller is tested using <a href="https://github.com/facebook/ios-snapshot-test-case">snapshots</a> to verify the user interface hasn‚Äôt been inadvertently changed. Testing is straightforward:</p>

<ol>
  <li>Create a view controller to test.</li>
  <li>Create a stubbed view model, customized for each test.</li>
  <li>Give the view controller the stubbed view model before <code class="language-plaintext highlighter-rouge">viewDidLoad()</code> is called.</li>
  <li>Verify the view controller renders correctly.</li>
</ol>

<p>While writing tests, I found it difficult to subclass the existing view model (for stubbing purposes). Since the view model‚Äôs initializer has side-effects (starting recurring network requests üò¨), I can‚Äôt call <code class="language-plaintext highlighter-rouge">super.init()</code>. Instead, I made a <code class="language-plaintext highlighter-rouge">ListingsViewModelType</code> protocol. The view controller only interacts with the view model through this protocol ‚Äì it has no reference to the class itself. Now creating a stubbed view model is as easy as conforming to a protocol.</p>

<p>Seems more ‚ÄúSwift‚Äù, too.</p>

<p>Now that the view model and view controller are separate objects, we no longer have to test presentation logic in the view controller at all. The view model now takes care of network requests, data processing, etc ‚Äì this is now all tested <em>independently</em> of the user interface üéâ</p>

<p>In my opinion, the key benefits of MVVM boil down to the following:</p>

<ol>
  <li>Separating the view model from the user interface makes it easier to test presentation logic.</li>
  <li>Separating the view controller from the presentation logic makes it easier to test the user interface.</li>
</ol>

<hr />

<p>This is only a description of what we‚Äôve come up with so far. As our community and the Swift language continue to evolve, hand-in-hand, we‚Äôll re-evaluate our answer to the question of what MVVM with Swift looks like. For now, I‚Äôm quite pleased with the step we‚Äôve taken, and I‚Äôm looking forward to continuing to explore programming patterns in Swift.</p>
]]></content>
  </entry>
  
</feed>
