<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: github | Artsy Engineering]]></title>
  <link href="https://artsy.github.io/blog/categories/github/atom.xml" rel="self"/>
  <link href="https://artsy.github.io/"/>
  <updated>2024-08-06T19:48:16+00:00</updated>
  <id>https://artsy.github.io/</id>
  <author>
    <name><![CDATA[]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Strategies For Small, Focused Pull Requests]]></title>
    <link href="https://artsy.github.io/blog/2021/03/09/strategies-for-small-focused-pull-requests/"/>
    <updated>2021-03-09T00:00:00+00:00</updated>
    <id>https://artsy.github.io/blog/2021/03/09/strategies-for-small-focused-pull-requests</id>
    <content type="html"><![CDATA[<p>A common suggestion for improving pull requests (PRs) is to ‚Äúmake your PR small and focused‚Äù. I myself gave this suggestion in <a href="https://artsy.github.io/blog/2020/08/11/improve-pull-requests-by-including-valuable-context/">a recent article on this very blog about including context in PRs</a>.</p>

<p>Like most internet advice, this can feel like the <a href="https://knowyourmeme.com/memes/how-to-draw-an-owl">‚Äúdraw the rest of the owl‚Äù</a> meme. Even if we‚Äôre in agreement that I <em>should</em> make a PR smaller‚Ä¶<strong><em>how</em></strong> do I do it? How do I avoid a big PR when there‚Äôs a lot of cross-cutting changes to make? How do I create small, focused units of work when I‚Äôm building a large feature? How can I overcome my perfectionism and submit a PR that feels incomplete to me because the edges aren‚Äôt all polished?</p>

<!-- more -->

<h2 id="what-is-small-and-focused">What is ‚Äúsmall and focused‚Äù?</h2>

<p>Not all small PRs are focused. I might sneak five unrelated one-line changes into a PR. While it feels like that will enable me to move quickly, it also runs the risk of four unrelated changes being held up in review because the other is controversial.</p>

<p>Not all focused PRs are small. I might put an entire feature in one PR, and while it is focused, it‚Äôs still going to be difficult for you to review the large amount of changes thoroughly.</p>

<p>To make our PR reviewers‚Äô jobs easier, we‚Äôre looking for the intersection of small <em>and</em> focused. Changes that are cohesive and without distractions. Code that accomplishes one small thing.</p>

<p>Note that the recommendation for ‚Äúsmall and focused‚Äù PRs does <strong>not</strong> include the word ‚Äúcomplete‚Äù. I‚Äôm a perfectionist and I like my work to be very polished before it‚Äôs done, but when we‚Äôre iterating quickly the polish can come in a follow-up PR. This is the biggest challenge I‚Äôve had as an Artsy engineer ‚Äî finding the balance between polish and iteration. Artsy‚Äôs core values include <a href="https://github.com/artsy/README/blob/ccfbba13ead7cb6586d2d9bf088e5180907be07b/culture/what-is-artsy.md#impact-over-perfection">Impact Over Perfection</a> but my personal values include ‚Äúmake things <em>real good</em>‚Äù and it can be hard for me to navigate that tension.</p>

<h3 id="integrating-code-a-little-at-a-time">Integrating code a little at a time</h3>

<p>A caveat: the recommendations in this article assume you can integrate code a little bit at a time. I‚Äôve worked on teams and projects where we used very long-lived branches for features or even epic ‚Äî I know those environments exist. This article is probably not the one that will convince you to move to <a href="https://trunkbaseddevelopment.com/">trunk-based development</a>; it also might be less useful without trunk-based development.</p>

<p>Having said that, even with long-lived feature branches you can introduce code <em>into those branches</em> a little bit at a time. PRs can be opened against <em>any</em> branch, not just <code class="language-plaintext highlighter-rouge">main</code>.</p>

<p>A couple strategies we use at Artsy for integrating code a little bit at a time:</p>

<ul>
  <li><strong><a href="https://trunkbaseddevelopment.com/feature-flags/">Feature toggles</a></strong>. <a href="https://artsy.github.io/blog/2020/12/31/echo-supporting-old-app-versions/">Ash wrote about Echo</a>, a service for toggling features on mobile devices, but we have additional ways for enabling/disabling features at the system <em>or</em> user level. When we introduce new code we can hide it behind a feature flag until we‚Äôre ready for everyone to see it.</li>
  <li><strong>‚ÄúHidden‚Äù routes</strong>. Often when we redesign or modernize an existing route on Artsy.net we‚Äôll create a <em>second</em> similar route. We hide the in-progress page behind that new route and don‚Äôt share it until it‚Äôs ready. ü§´</li>
</ul>

<p>Armed with tools for integrating code incrementally, here are some strategies for reducing the size and scope of a PR. I‚Äôm not suggesting you use these strategies universally, but if you think you‚Äôre headed toward a very large PR, these are some things to try.</p>

<h2 id="start-with-small-scope--slice-your-stories-small">Start with small scope ‚Äî slice your stories small</h2>

<p>One of the most valuable lessons I learned as a consultant with a company focused on agile development is that you can almost always slice a story smaller. You can do this by sacrificing quality, but you can also (and probably should) do it by cutting scope. We can ship a new screen for our app sooner if we focus on building the most absolutely critical features first, and follow up with the valuable-but-not-critical features later.</p>

<p>There are many ways to break a story smaller, and all of them enable you to integrate code sooner in the form of smaller PRs:</p>

<ul>
  <li>Separate CRUD (Create, Read, Update, Delete) operations and ship them one at a time</li>
  <li>Separate by user role</li>
  <li>Separate individual edge cases</li>
  <li>Separate a simplified experience from an enhanced version</li>
</ul>

<p>Think of these smaller scoped features as self-contained vertical slices of functionality. As each one is released, users can take advantage of them, and your team can start building the next slice.</p>

<h2 id="pr-by-architectural-layer">PR by architectural layer</h2>

<p>Rather than building an entire feature end-to-end before creating a pull request, consider integrating one layer at a time. Embrace the boundaries between the front and back ends of your code ‚Äî submit a PR to introduce changes to the API, and once it‚Äôs merged follow up with another PR to introduce changes to the UI.</p>

<p>Depending on the architecture of your system, you might already be forced to this. At Artsy, our <a href="https://github.com/artsy/force">web app lives in one repo</a>, our <a href="https://github.com/artsy/metaphysics">GraphQL endpoint lives in another</a>, and many services are separated into repositories behind that. We <em>must</em> integrate our features one layer at a time. Here‚Äôs an example where <a href="https://artsy.github.io/author/matt/">Matt</a> <a href="https://github.com/artsy/metaphysics/pull/2819/files">added a field to our API</a> in one PR, and <a href="https://github.com/artsy/force/pull/6613">propagated it to the UI</a> in a separate PR. Even if you don‚Äôt have a repository boundary between your API and your UI, splitting PRs at this logical boundary can help make them more digestible.</p>

<p>The suggestion to PR by architectural layer is not in conflict with slicing stories small ‚Äî in fact, these two strategies complement each other nicely. A PR that contains multiple features but only one layer is probably large enough to be difficult to review; so is a PR that contains one feature end-to-end. A PR containing one layer of one feature can be easier to review.</p>

<h2 id="build-a-walking-skeleton">Build a walking skeleton</h2>

<p>A <a href="walking-skeleton">walking skeleton</a> is a bare-bones, stripped down implementation of your feature from end-to-end. It connects the UI all the way to the data source. Very little of the feature is presented, but what is there is fully functional.</p>

<p>Start a new feature with a walking skeleton PR to demonstrate connectivity of the pieces involved. It won‚Äôt do very much ‚Äî maybe it only displays one field ‚Äî but that‚Äôs okay because no one‚Äôs going to see it yet. The important thing is that the moving pieces are all connected ‚Äî the database, the API, the UI.</p>

<p>Once a walking skeleton PR is merged, you can start filling in the skeleton. Each new sub-feature can be its own PR.</p>

<p>This is a great approach if your team is looking to swarm on a feature. If we all work on our own sub-features without first merging a walking skeleton, we‚Äôre likely to face some intense merge conflict headaches when we realize we‚Äôve all connected the full stack in slightly different ways. Starting with a walking skeleton removes a lot of those merge conflicts, because we‚Äôre mostly bolting fields on to existing infrastructure along the way.</p>

<p><a href="https://github.com/artsy/relay-workshop/pull/1">This PR</a> is an example of a walking skeleton. My goal was to stand up an app that connected <a href="https://reactjs.org/">React</a>, <a href="https://relay.dev/">Relay</a>, and <a href="https://www.typescriptlang.org/">TypeScript</a>. <a href="https://github.com/artsy/relay-workshop/pull/1/files#diff-26ad4b834941d9b19ebf9db8082bd202aaf72ea0ddea85f5a8a0cb3c729cc6f2R25">The actual app doesn‚Äôt display very much</a> ‚Äî just enough to prove that the pieces were all working.</p>

<h2 id="separate-riskycontroversial-work-from-routine-work">Separate risky/controversial work from routine work</h2>

<p>It‚Äôs not always possible to identify ahead of time which work will prompt more discussion during review, but sometimes it‚Äôs obvious. Novel work that takes thoughtful consideration of multiple approaches is much more likely to invite feedback than work that follows existing patterns.</p>

<p>Routine implementation can be a noisy distraction in a PR that also contains a unique function that you really want reviewers to see. You should point out the unique bits in the PR body if they‚Äôre combined, but you also might consider separating the less-interesting implementation into its own PR.</p>

<p>The worst review you can get on a PR that contains both novel and routine work is ‚ÄúLGTM!‚Äù (looks good to me). It likely means the reviewer couldn‚Äôt separate the signal from the noise and overlooked the bits that required more thought and effort.</p>

<h2 id="separate-infrastructural-work-from-implementations">Separate infrastructural work from implementations</h2>

<p>A <a href="https://en.wikipedia.org/wiki/T-shaped_skills">t-shaped person</a> is someone with a lot of shallow experience in many areas, and deep expertise in one or a few areas. Their skills are wide at the base, and tall and narrow in their area of focus.</p>

<p>Code can have a similar shape. Infrastructural work tends to be wide and shallow ‚Äî it touches a lot of places in your code, but it doesn‚Äôt go deep in any of them. Implementation work tends to be the opposite ‚Äî it doesn‚Äôt affect the entire app, but it goes very deep for one feature.</p>

<p>We probably review infrastructural changes differently than we review implementation changes:</p>

<ul>
  <li>
    <p>Infrastructural work deserves scrutiny for the abstractions it introduces and how it might affect performance or future implementations. These kinds of changes introduce new patterns to the codebase and we want to make sure they‚Äôre useful and usable patterns.</p>
  </li>
  <li>
    <p>An individual implementation gets more scrutiny on user-facing details. It‚Äôs probably combining <em>existing</em> patterns, so we‚Äôll spend less time looking at abstractions. We‚Äôll spend more time confirming it works for our users.</p>
  </li>
</ul>

<p>When a large PR combines wide, shallow, abstract work with deep, narrow, concrete work, it requires the reviewer to shift between two different mindsets. You might consider breaking your PR into two: one containing the wide infrastructural work, and one containing the deep implementation work. This allows reviewers to focus on abstractions in one PR and user-facing details in the other.</p>

<p>Some examples of infrastructural changes that could be separated from implementation work:</p>

<ul>
  <li>We introduced a seam to the code in order to make room for our implementation.</li>
  <li>We updated a dependency to take advantage of a new feature.</li>
  <li>We refactored before we started our implementation.</li>
</ul>

<h2 id="separating-an-already-large-pr">Separating an already-large PR</h2>

<p>It‚Äôs natural for PRs to grow large. <a href="https://thedecisionlab.com/biases/optimism-bias/">Optimism bias</a> diminishes our ability to estimate work often resulting in more code changes than we expected. A feature seems like it won‚Äôt take much work until you get deeper and find complexity in places you hadn‚Äôt considered. There‚Äôs a lot of uncertainty when you start working on a feature and we‚Äôd need to model the entire problem to completion to know what the PR was going to look like before we started. A PR seems like it will be small until suddenly‚Ä¶it isn‚Äôt anymore.</p>

<p>This is what usually prevents developers from separating PRs ‚Äî by the time you recognize the PRs could be de-tangled, it seems like a lot of effort to de-tangle them.</p>

<p>When you‚Äôve got a PR/branch that contains multiple lines of work and you want to separate them, <a href="https://www.atlassian.com/git/tutorials/rewriting-history/git-rebase"><code class="language-plaintext highlighter-rouge">git rebase</code></a> is your best friend. Rebasing enables you to rename, reorder, combine, and separate commits. Use <code class="language-plaintext highlighter-rouge">git rebase</code> to group your commits into one set for each branch you want to extract, and submit a PR for each smaller set of changes.</p>

<p>Good commit hygiene makes it easier to rebase commits. Commit small units of work so that they can be re-ordered and grouped, and apply clear messages to each commit in case you need to move it. While you might not <em>always</em> separate/rebase PR branches, you‚Äôll appreciate small commits with clear messages when you do.</p>

<h2 id="small-prs-start-long-before-the-work-starts">Small PRs start long before the work starts</h2>

<p>The size of a pull request can be influenced long before the PR is opened. Slice features small in your product backlog; make small commits along the way; combine small commits into small pull requests. Among other benefits, a focus on breaking work into small parts will make it easier to review your changes.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Improve Pull Requests By Including Valuable Context]]></title>
    <link href="https://artsy.github.io/blog/2020/08/11/improve-pull-requests-by-including-valuable-context/"/>
    <updated>2020-08-11T00:00:00+00:00</updated>
    <id>https://artsy.github.io/blog/2020/08/11/improve-pull-requests-by-including-valuable-context</id>
    <content type="html"><![CDATA[<p>Code review is an engineering process that has benefited greatly from a move toward asynchronous communication.
Long ago, engineering teams would sit in a room with code on a projector to review changes together. üò± For many
teams this led to batching code reviews or even skipping them altogether. üò±üò±</p>

<p>Today, most engineering teams use incredible tools like GitHub or GitLab to review changes through Pull Requests
(PRs). The greatest advantage of PRs is that the review can happen when it‚Äôs convenient for the reviewer:
asynchronously. Asynchronous communication isn‚Äôt all sunshine and unicorns, though. Notably, it lacks the ability
to course-correct when context is misunderstood.</p>

<!-- more -->

<p>When you‚Äôre in a synchronous conversation with someone, it doesn‚Äôt take much time for them to let you know you‚Äôve
forgotten to include context. Their brow furrows. They look confused. You notice this and quickly add the missing
context to keep the conversation moving forward. It takes a lot longer to identify missing context when
communicating asynchronously. The non-verbal cues are missing.</p>

<p>Worse, lack of context when <em>reviewing code</em> asynchronously has a reverb effect. I create my PR when it‚Äôs
convenient for me, you ask a clarifying question when it‚Äôs convenient for you, I respond when it‚Äôs convenient for
me, etc. Suddenly my PR has been open for three days and we haven‚Äôt yet made it to a common understanding of why
I‚Äôve made these changes.</p>

<p>It‚Äôs extremely important to include all available context when drafting a PR. It saves incredible amounts of time
by cutting out slow round-trip conversations to clarify.</p>

<p>I‚Äôm personally proud of and impressed by the job we do at Artsy in including context in our PRs. We start early, by
giving our engineers
<a href="https://github.com/artsy/README/blob/master/playbooks/engineer-workflow.md#pull-requests">some reading about how we work with PRs during their onboarding</a>.</p>

<p>But beyond that our engineers lead by example. This article presents a handful of examples from Artsy repositories
demonstrating how you can add context to your PRs to avoid unnecessary clarifying conversation.</p>

<h2 id="explain-your-reasoning">Explain Your Reasoning</h2>

<p>You‚Äôve been thinking a lot about the problem you‚Äôre solving - probably significantly more than your reviewers.
You‚Äôll save everyone time by describing the problem and sharing how you‚Äôre thinking about it.</p>

<h3 id="define-the-problem-and-solution">Define the problem and solution</h3>

<p>Why does this PR exist? Explain the problem it solves and describe your solution, as
<a href="https://github.com/sweir27">Sarah</a> does <a href="https://github.com/artsy/force/pull/3095">in this PR</a>. For bonus points,
include alternative approaches you considered.</p>

<p>As you are writing up the problem and solution, you might find that you‚Äôve missed on the scope of your PR. Are
there <em>many</em> problems this PR is solving? Maybe this should be broken into smaller PRs. Is it hard to describe the
problem because it requires multiple other PRs? Maybe those should be consolidated into one cohesive set of
changes.</p>

<h3 id="explain-interesting-lines-of-code">Explain interesting lines of code</h3>

<p>The reviewers aren‚Äôt the only ones who can comment on lines of code.
<a href="https://github.com/artsy/emission/pull/2085#discussion_r378228269">Give them</a> some
<a href="https://github.com/artsy/emission/pull/2085#discussion_r378230196">additional information</a> about
<a href="https://github.com/artsy/emission/pull/2085#discussion_r378231974">why a particular line was written</a>, as
<a href="https://github.com/ds300">David</a> does <a href="https://github.com/artsy/emission/pull/2085">in this PR</a>. Maybe you want
feedback focused on that line or maybe the line has side-effects and implications that aren‚Äôt obvious.</p>

<h3 id="give-a-guided-tour-of-the-changes">Give a guided tour of the changes</h3>

<p><a href="https://github.com/dblandin">Devon</a> takes the idea of adding context to individual lines to the next level
<a href="https://github.com/artsy/reaction/pull/2774#pullrequestreview-288095754">in this PR</a>. He takes advantage of
markdown to give us a virtual tour of the changes, at each stop providing helpful information and a link to the
next change. It‚Äôs like he‚Äôs sitting next to you!</p>

<h2 id="show-your-work">Show Your Work</h2>

<p>If your PR contains work that is beyond trivial, show your reviewers how you thought about the problem. Demonstrate
the effects of the changes. Give them confidence that you‚Äôve worked through this problem thoroughly, and you‚Äôve
brought receipts.</p>

<h3 id="make-small-self-contained-commits">Make small, self-contained commits</h3>

<p>A good PR starts with good commits. Good commits are small, self-contained, and leave the codebase always in a
working state. With good commits, reviewers can see exactly how you worked through the problem you were solving.
<a href="https://github.com/artsy/convection/pull/645">Here‚Äôs a PR</a> from <a href="https://github.com/jonallured">Jon</a> that
demonstrates the use of small, self-contained commits to describe his approach to refactoring code before fixing a
bug.</p>

<p><em>Bonus tip</em>: it can be easier to review PRs with many small commits via the
<a href="https://github.com/artsy/convection/pull/645/commits"><em>Commits</em></a> tab instead of the
<a href="https://github.com/artsy/convection/pull/645/files"><em>Files changed</em></a> tab.</p>

<h3 id="demonstrate-the-results">Demonstrate the results</h3>

<p>Pictures are a worth a thousand words. Animated gifs are worth a thousand pictures (uhhhh, in file size too üò¨). An
animated gif showing the outcome of your PR gives reviewers a demo, and confidence that you‚Äôve verified your
changes.</p>

<p><a href="https://github.com/artsy/force/pull/5817">Here‚Äôs a PR</a> from <a href="https://github.com/ashleyjelks">Ashley</a> that includes
animated gifs of the changes she‚Äôs made. The effects of the changes might not be obvious by looking only at the
code, but seeing them in action makes it clear.</p>

<h3 id="document-the-unseen">Document the unseen</h3>

<p>Sometimes a PR‚Äôs changes have effects outside of the UI. There are still ways to give reviewers proof that the
changes have the desired effects.</p>

<p><a href="https://github.com/artsy/eigen/pull/3206">Here‚Äôs a PR</a> from <a href="https://github.com/yuki24">Yuki</a> that not only
demonstrates what‚Äôs happening in the UI, but also assures me that the back-end data is getting updated properly
through a Rails console.</p>

<p><a href="https://github.com/xtina-starr">Christina</a> authored <a href="https://github.com/artsy/reaction/pull/3441">this PR</a> which
shows the UI changes in addition to some output from her browser console, demonstrating that analytics tracking
calls are firing correctly.</p>

<h3 id="share-your-progress">Share your progress</h3>

<p>One mistake many engineers make with non-trivial pull requests is to wait to open them until they‚Äôre ‚Äúdone‚Äù. If
there are changes you‚Äôd like to get people‚Äôs eyes on quickly, open a WIP PR before the work is done: mark it as a
draft in GitHub, or put <code class="language-plaintext highlighter-rouge">WIP</code> in the title. Extra work up front avoids rework by starting early discussions about
your approach.</p>

<p>Let reviewers know in the body that your work isn‚Äôt complete. As you continue your work, use a <code class="language-plaintext highlighter-rouge">TODO:</code> list in the
body to illustrate your progress, as in <a href="https://github.com/artsy/palette/pull/464">this PR</a> from
<a href="https://github.com/sepans">Sepand</a>.</p>

<p>Is this PR part of a larger scope of work? Is there followup work that will need to be done after it‚Äôs merged? Are
there PRs in other systems that need to merge in a specific sequence? Any migration details or timing that should
be known before merging? Call these details out to avoid another round-trip conversation.</p>

<h2 id="spread-knowledge">Spread knowledge</h2>

<p>Pull requests should not be one-sided - they aren‚Äôt just about collecting feedback from the reviewer. They‚Äôre also
an opportunity to spread knowledge from the author.</p>

<h3 id="share-your-learnings">Share your learnings</h3>

<p>Maybe you learned some things about the system you‚Äôre working with, or you learned a new feature of the language.
Share this new information with your team. <a href="https://github.com/anandaroop">Roop</a> shares some findings about
disabled tests <a href="https://github.com/artsy/metaphysics/pull/2130">in this PR</a>.</p>

<p>We introduced a new state management library shortly before <a href="https://github.com/pepopowitz">I</a> opened
<a href="https://github.com/artsy/eigen/pull/3526">this PR</a>, and I had to do some reading about how to add types to
something. I <a href="https://github.com/artsy/eigen/pull/3526#discussion_r451161406">shared my learnings with the team</a>.</p>

<h3 id="share-development-tips">Share development tips</h3>

<p>Did you learn a new technique while building this feature? Share it with your team!</p>

<p>In <a href="https://github.com/artsy/reaction/pull/3279#discussion_r395461329">this PR</a>,
<a href="https://github.com/damassi">Chris</a> shared with us his technique for grabbing fixture data from his locally running
environment.</p>

<hr />

<p>When your team embraces the pull request process, you reap rewards that extend far beyond the lines of code.
Providing context up-front shortens the feedback loop and surfaces important discussions sooner, allowing you to
ship changes more quickly. Sharing knowledge in PRs grows individuals and spreads expertise across your team. Every
PR becomes an artifact for retracing history. You can look back and see not only <em>which</em> decisions were made, but
<em>why</em> they were made.</p>

<p>If you‚Äôd like to know more about how we work with pull requests at Artsy, take a look at our
<a href="https://github.com/artsy/README/blob/master/playbooks/engineer-workflow.md#pull-requests">‚ÄúEngineer workflow‚Äù playbook</a>,
or poke around <a href="https://github.com/artsy">our GitHub repositories</a>. Check out
<a href="https://github.com/artsy/artsy.github.io/pull/619">the PR that created this article</a>. And if you‚Äôve got examples
of great PRs to share with the rest of us, leave a comment!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why Projects Need Code Names]]></title>
    <link href="https://artsy.github.io/blog/2019/05/10/why-projects-need-codenames/"/>
    <updated>2019-05-10T00:00:00+00:00</updated>
    <id>https://artsy.github.io/blog/2019/05/10/why-projects-need-codenames</id>
    <content type="html"><![CDATA[<p>Before I joined Artsy, I worked at companies where software projects tended to have meaningful, predictable names. If we were building a system for flagging media uploads, it might be called <code class="language-plaintext highlighter-rouge">media-review</code>. In many cases, our code repositories‚Äô names matched the main product‚Äôs branding or even the company‚Äôs name. Life was simple and there was no risk of ambiguity.</p>

<p>At Artsy, our systems have peculiar code names like <em>Gravity</em>, <em>Pulse</em>, and <em>Vortex</em>. There‚Äôs a persistent learning curve as you contribute to different repositories or as new services get created. Numerous times, I‚Äôve wondered: are code names worth the trouble?</p>

<!-- more -->

<p><img src="/images/2019-05-10-why-projects-need-codenames/github_projects.png" alt="" /></p>

<p>To be clear, <em>any</em> project naming scheme works in small quantities. Personal projects or libraries for public release should probably just be named for clarity and find-ability. Code names start to offer benefits as a team grows and a product evolves over the longer term:</p>

<p>Code names embrace that <strong>we don‚Äôt necessarily know the fit or scope of a system when it‚Äôs first conceived</strong>. To <em>not</em> employ code names would require accurately predicting a system‚Äôs eventual function. A project named <code class="language-plaintext highlighter-rouge">artsy-admin</code> starts to grate when we make the architectural decision to split apart management utilities or introduce more fine-grained administrative roles. An <code class="language-plaintext highlighter-rouge">artwork-taxonomy</code> label loses meaning when that system expands to include less structured tags</p>

<p><strong>Branding shifts, products pivot, and companies merge.</strong> Project code names introduce a level of indirection between what engineers build and the labels, URLs, or brands that end users experience. Over a long enough period, these external or superficial changes <em>will</em> happen and risk introducing confusion or just subtle misalignment between form and function. As with software design in general, abstractions can be a powerful tool to <a href="https://en.wikipedia.org/wiki/Separation_of_concerns">separate concerns</a>. Ask yourself: what code changes might be required if your company were to spin off your product or be merged into an acquirer?</p>

<p><strong>Language is important</strong>, and not just for communication but for shaping our thoughts and assumptions. We frequently find ourselves debating which system should serve as the authority for a given domain model or where to implement a new feature, and project names that overlap with these topics (e.g., <code class="language-plaintext highlighter-rouge">search</code>, <code class="language-plaintext highlighter-rouge">images</code>, <code class="language-plaintext highlighter-rouge">suggestions</code>) would predispose us to certain decisions. Code names free us to focus on the architectural and organizational merits instead.</p>

<p>We like to <strong>have fun at work</strong> and it‚Äôs more joyful to proclaim that ‚ÄúTorque is in the wild‚Äù than ‚Äúdata-sync has been deployed.‚Äù Over time these names gain mythologies and personalities within the team and organization.</p>

<p>With this in mind, how should you choose a naming scheme?</p>

<h2 id="rules-for-a-project-naming-scheme">Rules for a project naming scheme</h2>

<ul>
  <li>Avoid implicit value judgments like ‚Äúnew,‚Äù ‚Äúnext,‚Äù or ‚Äúmodern.‚Äù We‚Äôve all witnessed today‚Äôs hot project become next year‚Äôs unloved albatross.</li>
  <li>Choose a code name scheme that isn‚Äôt directly related to your technology or business. A flower business using flower names is cute, but breaks down when you want to build a feature that <em>actually</em> is about tulips.</li>
  <li>Everyone should be able to participate, so avoid industry lingo or obscure terminology. Funny story: I work at an art start-up but don‚Äôt know enough artists to name my projects that way. I struggle even more to pronounce the few projects that are.</li>
  <li>There should be lots of choices. You‚Äôll regret choosing to name your projects after ‚Äúdecathlon sports‚Äù or ‚Äúdays of the week‚Äù when your team inevitably transitions to microservices.</li>
  <li>Names should be unique within a company and‚Äìideally‚Äìbeyond the company‚Äôs scope. You wouldn‚Äôt want your <code class="language-plaintext highlighter-rouge">marketing-site</code> repository to conflict with a contributor‚Äôs <code class="language-plaintext highlighter-rouge">marketing-site</code> repository from another organization. Github projects, S3 buckets, Heroku application names, and published libraries all benefit from being globally unique.</li>
  <li>Bonus points for choosing a rich enough scheme that names can subtly relate to each system‚Äôs function. At Artsy, we use physics terms for code names, so our e-commerce back-end is called <a href="https://github.com/artsy/exchange">Exchange</a> and a command line utility for developers is called <a href="https://github.com/artsy/momentum">Momentum</a>. A shipping service might be called <em>Weight</em>.</li>
</ul>

<p>Example code name schemes: animals, movies, sea creatures, cartoon/TV characters, woodworking tools, celebrities (but get legal advice before borrowing living individuals‚Äô names). <a href="https://wiki.ubuntu.com/DevelopmentCodeNames">Ubuntu</a> gets extra mileage by combining adjectives with animal names. <a href="https://en.wikipedia.org/wiki/List_of_Apple_codenames">Apple</a> has used wine, cats, and California geography. <a href="https://en.wikipedia.org/wiki/Android_%28operating_system%29">Google</a> likes dessert.</p>

<h2 id="finally">Finally</h2>

<p>These days, I‚Äôve embraced Artsy‚Äôs use of physics terms for project names. There continues to be some head-scratching as new engineers navigate codebases and encounter these terms or just struggle to identify the system responsible for a given site or feature. (This isn‚Äôt shocking, since code names were probably adapted from more secretive environments like the military.) As your code names multiply and projects come and go, a glossary becomes essential. I suggest creating a simple document that maps projects‚Äô code names to descriptions, URL destinations, hosting environments, and teams.</p>

<p>See also:</p>

<ul>
  <li><a href="https://blog.codinghorror.com/whats-in-a-project-name/">What‚Äôs in a Project Name?</a></li>
  <li><a href="https://royal.pingdom.com/the-developer-obsession-with-code-names-186-interesting-examples/">The Developer Obsession With Code Names, 186 Interesting Examples</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using GitHub Issues for Blog Comments]]></title>
    <link href="https://artsy.github.io/blog/2017/07/15/Comments-are-on/"/>
    <updated>2017-07-15T00:00:00+00:00</updated>
    <id>https://artsy.github.io/blog/2017/07/15/Comments-are-on</id>
    <content type="html"><![CDATA[<p>I‚Äôve worked on a few large-scale OSS projects, and I believe that people find it easier to just leave a comment and rely on a contributor to explain a problem rather than consulting the documentation. I consider doing everything you can to make people find their own answers a strong part of <a href="/blog/2016/07/03/handling-big-projects/">defensive open source</a>.</p>

<p>For the posts I write, I have an even lower tolerance for comments. For example, I added the ability to turn off comments per-post and haven‚Äôt allowed comments on any posts I‚Äôve written here. A lot of transitory discussion around an article happens on twitter via <a href="https://twitter.com/ArtsyOpenSource/">@ArtsyOpenSource</a>.</p>

<p>I‚Äôm willing to give it another shot though, and so I got around to creating a simple system for allowing opt-in comments on posts using GitHub Issues. The rest of this post will be about how you can do it also, and a bit about why I think GitHub Issues are a happy medium for the comments.</p>

<!-- more -->

<div><div class="comment"><div class="comment-header"><a class="comment-username" href="https://github.com/orta"><img src="https://avatars6.githubusercontent.com/u/49038?v=4" alt="" width="40" height="40" />orta</a> commented <a class="comment-date" href="https://github.com/artsy/artsy.github.io/issues/355#issuecomment-313158506">2 days ago</a></div><div class="comment-body"><p>Comments can be worth a shot.</p>
<p>With a static site like ours it can be a bit tricky, but with an external server and some simple JavaScript it can work out <g-emoji alias="+1" fallback-src="https://assets-cdn.github.com/images/icons/emoji/unicode/1f44d.png" ios-version="6.0">üëç</g-emoji>.</p></div></div></div>

<h1 id="getting-set-up">Getting set up</h1>

<p>The general concept is that you have some JavaScript in your page which requests a list of comments from GitHub. These are available as a JSON API, you can grab that then style the results. Sounds easy right?</p>

<p>Turns out to be a bit more complicated. GitHub‚Äôs API has rate-limits for IP addresses, and they‚Äôre reasonably low. So, you‚Äôll want to use authenticated requests, but you don‚Äôt really want to include your access tokens inside the JavaScript on your blog.</p>

<p>I‚Äôve worked around this with a project called <a href="https://github.com/orta/gh-commentify">gh-commentify</a>, a node app whose job is to wrap your comment API requests with an access token. You can create your own instance on heroku using <a href="https://heroku.com/deploy?template=https://github.com/orta/gh-commentify">this link</a>. It gets scoped to a single org/user, so you can avoid others using your heroku instance for their blog.</p>

<p>From there you need to be able to declare in a post what issue it is hooked up to. This blog uses Jekyll, which has <a href="https://jekyllrb.com/docs/frontmatter/">YAML Front Matter</a> on posts. So, I edited our post templates to look for a key <code class="language-plaintext highlighter-rouge">comment_id</code>.</p>

<p>From there you need to grab the comments JSON, and move them into the DOM.</p>

<p>I based my work on these two posts:</p>

<ul>
  <li><a href="http://ivanzuzak.info/2011/02/18/github-hosted-comments-for-github-hosted-blogs.html">GitHub hosted comments for GitHub hosted blogs</a></li>
  <li><a href="http://donw.io/post/github-comments/">Replacing Disqus with Github Comments</a></li>
</ul>

<p>However this version is more reliable (GitHub authenticated requests) and has fewer dependencies (no jQuery for example).</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code>{% if page.comment_id %}
  <span class="nt">&lt;article</span> <span class="na">class=</span><span class="s">'post'</span><span class="nt">&gt;</span>
    {% include gh_comments.html %}
  <span class="nt">&lt;/article&gt;</span>
{% endif %}
</code></pre></div></div>

<p>This then imports the required JavaScript into the page. It feels a lot like this:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">writeToComment</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">element</span><span class="p">,</span> <span class="nx">html</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">var</span> <span class="nx">element</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="nx">element</span><span class="p">)</span>
  <span class="nx">element</span><span class="p">.</span><span class="nx">innerHTML</span> <span class="o">=</span> <span class="nx">html</span>
  <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="dl">"</span><span class="s2">comments</span><span class="dl">"</span><span class="p">).</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">element</span><span class="p">)</span>
<span class="p">}</span>

<span class="kd">var</span> <span class="nx">loadComments</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">writeToComment</span><span class="p">(</span><span class="dl">"</span><span class="s2">h2</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">Comments</span><span class="dl">"</span><span class="p">)</span>
  
  <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">data</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">commentHTML</span> <span class="o">=</span> <span class="p">[...]</span>
    <span class="nx">writeToComment</span><span class="p">(</span><span class="dl">"</span><span class="s2">div</span><span class="dl">"</span><span class="p">,</span> <span class="nx">commentHTML</span><span class="p">)</span>
  <span class="p">}</span>

  <span class="kd">var</span> <span class="nx">callToAction</span> <span class="o">=</span> <span class="p">[...]</span>
  <span class="nx">writeToComment</span><span class="p">(</span><span class="dl">"</span><span class="s2">div</span><span class="dl">"</span><span class="p">,</span> <span class="nx">callToAction</span><span class="p">)</span>
<span class="p">}</span>

<span class="kd">var</span> <span class="nx">writeFirstComment</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
  <span class="kd">var</span> <span class="nx">callToAction</span> <span class="o">=</span> <span class="p">[...]</span>
  <span class="nx">writeToComment</span><span class="p">(</span><span class="dl">"</span><span class="s2">div</span><span class="dl">"</span><span class="p">,</span> <span class="nx">callToAction</span><span class="p">)</span>
<span class="p">}</span>

<span class="c1">// This is mostly there now: http://caniuse.com/#feat=fetch</span>
<span class="k">if</span> <span class="p">(</span><span class="nb">window</span><span class="p">.</span><span class="nx">fetch</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">var</span> <span class="nx">url</span> <span class="o">=</span>
    <span class="dl">"</span><span class="s2">https://artsy-blog-gh-commentify.herokuapp.com/repos/artsy/artsy.github.io/issues/{{ page.comment_id }}/comments</span><span class="dl">"</span>

  <span class="nb">window</span>
    <span class="p">.</span><span class="nx">fetch</span><span class="p">(</span><span class="nx">url</span><span class="p">,</span> <span class="p">{</span> <span class="na">Accept</span><span class="p">:</span> <span class="dl">"</span><span class="s2">application/vnd.github.v3.html+json</span><span class="dl">"</span> <span class="p">})</span>
    <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">response</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">return</span> <span class="nx">response</span><span class="p">.</span><span class="nx">json</span><span class="p">()</span>
    <span class="p">})</span>
    <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">json</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">if</span><span class="p">(</span><span class="nx">json</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">loadComments</span><span class="p">(</span><span class="nx">json</span><span class="p">)</span>
      <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="nx">writeFirstComment</span><span class="p">()</span>
      <span class="p">}</span>
    <span class="p">})</span>
<span class="p">}</span>
</code></pre></div></div>

<p>No-one is going to award this JavaScript with a prize for elegance, but it works just fine. That‚Äôs basically it, you can edit the DOM however you want.</p>

<p>The full PR for these changes is here: <a href="https://github.com/artsy/artsy.github.io/pull/363">artsy.github.io#363</a> - and you can see the current <a href="https://github.com/artsy/artsy.github.io/blob/source/_includes/gh_comments.html">HTML/JS here</a>.</p>

<h1 id="styling">Styling</h1>

<p>The style of our comments are built to evoke the GitHub UI for issues. This is done to prime people for a relatively different type of comment creation, but still feel like it‚Äôs a part of the Artsy OSS style.</p>

<p><img src="/images/comments-are-on/example-comment.png" /></p>

<div><div class="comment"><div class="comment-header"><a class="comment-username" href="https://github.com/orta"><img src="https://avatars6.githubusercontent.com/u/49038?v=4" alt="" width="40" height="40" />orta</a> commented <a class="comment-date" href="https://github.com/artsy/artsy.github.io/issues/355#issuecomment-313158506">10 days ago</a></div><div class="comment-body"><p>This is done and dusted.</p>
</div></div></div>

<h1 id="why-github">Why GitHub?</h1>

<p>It‚Äôs easier for you to keep track of the conversations, you‚Äôre likely already having a lot of conversations in a place like GitHub. This means you can use the same flow and tools as your daily job, not relying on a third party service‚Äôs emails.</p>

<p>You have good admin tools: you can edit comments, block and report problematic users. These are tools that you have for all repos.</p>

<p>People will be using their developer accounts, which I‚Äôd like to hope they will take pride in. You‚Äôre probably more likely to get high quality responses. The lack of threading is a bit of a shame in this context, but we‚Äôve lived with it in GitHub Issues for this long, so I‚Äôm OK with this.</p>

<p>This setup makes it trivial to drop comments from the blog anytime, and you still have all the comments around in a constructive way after. We don‚Äôt have to hope that other services have export features and open data. Everything public is <a href="https://github.com/blog/2298-github-data-ready-for-you-to-explore-with-bigquery">open data</a> on GitHub.</p>

<p>So: low maintenance, works on static sites, data isn‚Äôt silo-ed and it‚Äôs more likely to result in positive interactions.</p>

]]></content>
  </entry>
  
</feed>
