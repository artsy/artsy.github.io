<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: rspec | Artsy Engineering]]></title>
  <link href="https://artsy.github.io/blog/categories/rspec/atom.xml" rel="self"/>
  <link href="https://artsy.github.io/"/>
  <updated>2024-05-17T14:49:02+00:00</updated>
  <id>https://artsy.github.io/</id>
  <author>
    <name><![CDATA[]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[What JavaScript Tests Could Learn From RSpec]]></title>
    <link href="https://artsy.github.io/blog/2021/09/10/what-javascript-tests-could-learn-from-rspec/"/>
    <updated>2021-09-10T00:00:00+00:00</updated>
    <id>https://artsy.github.io/blog/2021/09/10/what-javascript-tests-could-learn-from-rspec</id>
    <content type="html"><![CDATA[<p>When I started at Artsy a few years ago, I’d never written a line of Ruby. I feel at home with JavaScript — it’s
been my buddy since I started my career over 20 years ago. I’ve written enough tests in JavaScript that I sometimes
feel like I can write them in my sleep (as long as they don’t involve async React events 😅).</p>

<p>Most of the code I write at Artsy is still JavaScript, but now I write some Ruby code too, and I’ve written enough
RSpec tests that I’m starting to form opinions about what I think they should look like.</p>

<p>My most recent work has been JavaScript again. I’ve been writing Jest tests against one of our React apps. But
rather than reaching for the testing patterns I’d become accustomed to over my years of JavaScripting, I’m finding
that something’s missing in my Jest tests! My experiences with RSpec have me longing for two features in Jest:</p>

<!-- more -->

<ol>
  <li><code class="language-plaintext highlighter-rouge">context</code> blocks</li>
  <li><code class="language-plaintext highlighter-rouge">let</code> blocks</li>
</ol>

<h2 id="1-context-blocks">1. <code class="language-plaintext highlighter-rouge">context</code> blocks</h2>

<p>A <a href="https://relishapp.com/rspec/rspec-core/v/2-11/docs/example-groups/basic-structure-describe-it"><code class="language-plaintext highlighter-rouge">context</code> block</a>
in an RSpec test is, as I understand it, literally the same thing as a <code class="language-plaintext highlighter-rouge">describe</code> block. Like it’s just an alias of
<code class="language-plaintext highlighter-rouge">describe</code>. What’s the point, you ask?</p>

<p>The difference is in, well, context. Well-organized RSpec tests use <code class="language-plaintext highlighter-rouge">describe</code> to describe what’s being
tested…and <code class="language-plaintext highlighter-rouge">context</code> to describe scenarios of the thing being tested.</p>

<p>For example, if I wanted to test the <code class="language-plaintext highlighter-rouge">multiply</code> method of a <code class="language-plaintext highlighter-rouge">Calculator</code> class, I might write some test scenarios
that look like this:</p>

<div class="language-rb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">describe</span> <span class="s2">"Calculator"</span> <span class="k">do</span>
  <span class="n">describe</span> <span class="s2">".multiply"</span> <span class="k">do</span>
    <span class="n">context</span> <span class="s2">"when the first value is negative"</span> <span class="k">do</span>
      <span class="n">context</span> <span class="s2">"when the second value is negative"</span> <span class="k">do</span>
        <span class="n">it</span> <span class="s2">"returns a positive number"</span> <span class="k">do</span>
        <span class="k">end</span>
      <span class="k">end</span>
      <span class="n">context</span> <span class="s2">"when the second value is positive"</span> <span class="k">do</span>
        <span class="n">it</span> <span class="s2">"returns a negative number"</span> <span class="k">do</span>
        <span class="k">end</span>
      <span class="k">end</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>See the difference in those test cases between <code class="language-plaintext highlighter-rouge">describe</code> and <code class="language-plaintext highlighter-rouge">context</code>? The way I think about it is: if the
statement coming after my <code class="language-plaintext highlighter-rouge">describe</code>/<code class="language-plaintext highlighter-rouge">context</code> describes a pre-condition for the test, it’s a <code class="language-plaintext highlighter-rouge">context</code>; otherwise
it’s a <code class="language-plaintext highlighter-rouge">describe</code>.</p>

<p><code class="language-plaintext highlighter-rouge">context</code> wouldn’t be hard to implement in JavaScript — I’d bet there are test frameworks that have it. It’d just
be an alias of <code class="language-plaintext highlighter-rouge">describe</code>.</p>

<h2 id="2-let-blocks">2. <code class="language-plaintext highlighter-rouge">let</code> blocks</h2>

<p><a href="https://relishapp.com/rspec/rspec-core/v/2-11/docs/helper-methods/let-and-let"><code class="language-plaintext highlighter-rouge">let</code> blocks</a> are used in an RSpec
test to set things up for your test scenario.</p>

<p>Here’s a test for a <code class="language-plaintext highlighter-rouge">Counter</code> class, verifying that when I call the <code class="language-plaintext highlighter-rouge">increment</code> method on an instance, its stored
value becomes <code class="language-plaintext highlighter-rouge">1</code>.</p>

<div class="language-rb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">describe</span> <span class="s2">"counter"</span> <span class="k">do</span>

  <span class="n">let</span><span class="p">(</span><span class="ss">:counter</span><span class="p">)</span> <span class="p">{</span> <span class="no">Counter</span><span class="p">.</span><span class="nf">new</span> <span class="p">}</span>

  <span class="n">describe</span> <span class="s2">"increment"</span> <span class="k">do</span>
    <span class="n">it</span> <span class="s2">"increments by 1"</span> <span class="k">do</span>
      <span class="n">counter</span><span class="p">.</span><span class="nf">increment</span>

      <span class="n">counter</span><span class="p">.</span><span class="nf">value</span><span class="p">.</span><span class="nf">should</span> <span class="n">eq</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>If you’re new to Ruby, the only line that doesn’t translate almost directly to a similar JavaScript expression is
the <code class="language-plaintext highlighter-rouge">let</code> statement.</p>

<p>The <code class="language-plaintext highlighter-rouge">let</code> statement in RSpec <a href="https://medium.com/@tomkadwill/all-about-rspec-let-a3b642e08d39">creates a method with a specified name, which lazily evaluates to the result of a
block</a>. In this case, we get a method named <code class="language-plaintext highlighter-rouge">counter</code>, which is evaluated to a new instance of the
<code class="language-plaintext highlighter-rouge">Counter</code> class. There are a few important things to note about <code class="language-plaintext highlighter-rouge">let</code> blocks:</p>

<ol>
  <li>They’re evaluated lazily (by default). That <code class="language-plaintext highlighter-rouge">counter</code> doesn’t actually get created until I reference it.</li>
  <li>They’re memoized. Wherever I reference <code class="language-plaintext highlighter-rouge">counter</code> within that <code class="language-plaintext highlighter-rouge">describe "counter"</code> block, I’m getting the same
instance. It’s initialized to whatever I return inside the <code class="language-plaintext highlighter-rouge">let</code> block.</li>
  <li>I can override a <code class="language-plaintext highlighter-rouge">let</code> block deeper inside the tree of tests, by declaring another <code class="language-plaintext highlighter-rouge">let(:counter)</code> later. When I
do this, the closest <code class="language-plaintext highlighter-rouge">let</code> block in the tree for that thing is the one that gets used.</li>
</ol>

<p>I don’t think it’s possible to implement <code class="language-plaintext highlighter-rouge">let</code> in JavaScript — at least not in the way it exists in RSpec. It
relies on
<a href="https://www.leighhalliday.com/ruby-metaprogramming-method-missing">Ruby meta-programming to intercept calls to missing methods</a>,
which just doesn’t exist in JavaScript. The <a href="https://github.com/enova/givens">givens</a> library does something pretty
close, but it relies on string keys to define things, and there’s a bit of extra work when working with TypeScript.</p>

<h2 id="whats-the-big-deal">What’s the big deal?</h2>

<p>On the surface these two features don’t seem like much, but they provide a really powerful framework for organizing
test cases and the associated test setup.</p>

<p>With the <code class="language-plaintext highlighter-rouge">let</code> blocks being lazily evaluated, and override-able, I can set up data at the exact level of tests that
I need it. When I need to override it for a certain set of tests, I can put another <code class="language-plaintext highlighter-rouge">let</code> block in that set. In
JavaScript I can define functions to set up my data for me with just the changes I need at each test level, or I
can use <code class="language-plaintext highlighter-rouge">beforeEach</code> blocks, but all that can get pretty noisy.</p>

<p>And with <code class="language-plaintext highlighter-rouge">context</code> blocks, I can more clearly lay out the scenarios of my tests. Yes, I <em>could</em> just do this with
more <code class="language-plaintext highlighter-rouge">describe</code> blocks in JavaScript, but how often have you found JavaScript tests that actually do this? I’ve
personally seen/written too many tests to count named something like
<code class="language-plaintext highlighter-rouge">it("returns false when the flag is enabled, they're located in the US, but they have brown hair.")</code>. That’s three
scenarios rolled into one test name. It works, but being able to nest different <code class="language-plaintext highlighter-rouge">context</code> blocks to define my
complex scenarios is much easier to read.</p>

<h2 id="examples">Examples</h2>

<p>Here’s an example of some tests I could write in RSpec with <code class="language-plaintext highlighter-rouge">let</code> and <code class="language-plaintext highlighter-rouge">context</code>:</p>

<div class="language-rb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">describe</span> <span class="s2">"Calculator"</span> <span class="k">do</span>
  <span class="n">let</span><span class="p">(</span><span class="ss">:calculator</span><span class="p">)</span> <span class="p">{</span> <span class="no">Calculator</span><span class="p">.</span><span class="nf">new</span> <span class="p">}</span>

  <span class="n">describe</span> <span class="s2">".multiply"</span> <span class="k">do</span>
    <span class="n">let</span><span class="p">(</span><span class="ss">:result</span><span class="p">)</span> <span class="p">{</span> <span class="n">calculator</span><span class="p">.</span><span class="nf">multiply</span><span class="p">(</span><span class="n">first</span><span class="p">,</span> <span class="n">second</span><span class="p">)</span> <span class="p">}</span>

    <span class="n">context</span> <span class="s2">"when the first value is negative"</span> <span class="k">do</span>
      <span class="n">let</span><span class="p">(</span><span class="ss">:first</span><span class="p">)</span> <span class="p">{</span> <span class="o">-</span><span class="mi">1</span> <span class="p">}</span>

      <span class="n">context</span> <span class="s2">"when the second value is negative"</span> <span class="k">do</span>
        <span class="n">let</span><span class="p">(</span><span class="ss">:second</span><span class="p">)</span> <span class="p">{</span> <span class="o">-</span><span class="mi">3</span> <span class="p">}</span>

        <span class="n">it</span> <span class="s2">"returns a positive number"</span> <span class="k">do</span>
          <span class="n">result</span><span class="p">.</span><span class="nf">should</span> <span class="n">eq</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
        <span class="k">end</span>
      <span class="k">end</span>

      <span class="n">context</span> <span class="s2">"when the second value is positive"</span> <span class="k">do</span>
        <span class="n">let</span><span class="p">(</span><span class="ss">:second</span><span class="p">)</span> <span class="p">{</span> <span class="mi">3</span> <span class="p">}</span>

        <span class="n">it</span> <span class="s2">"returns a negative number"</span> <span class="k">do</span>
          <span class="n">result</span><span class="p">.</span><span class="nf">should</span> <span class="n">eq</span><span class="p">(</span><span class="o">-</span><span class="mi">3</span><span class="p">)</span>
        <span class="k">end</span>
      <span class="k">end</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>HOW COOL IS THAT! Every <code class="language-plaintext highlighter-rouge">describe</code>/<code class="language-plaintext highlighter-rouge">context</code> block has <em>exactly</em> the setup data it needs defined clearly inside it.
And each block has very little noise to distract you.</p>

<p>Here’s what I’d do in JavaScript/Jest to accomplish something similar:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">describe</span><span class="p">(</span><span class="dl">"</span><span class="s2">Calculator</span><span class="dl">"</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">let</span> <span class="nx">calculator</span>
  <span class="nx">beforeEach</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="nx">calculator</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Calculator</span><span class="p">()</span> <span class="p">})</span>

  <span class="nx">describe</span><span class="p">(</span><span class="dl">"</span><span class="s2">.multiply</span><span class="dl">"</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">let</span> <span class="nx">first</span><span class="p">,</span> <span class="nx">second</span>
    <span class="kd">function</span> <span class="nx">getResult</span><span class="p">()</span> <span class="p">{</span>
      <span class="k">return</span> <span class="nx">calculator</span><span class="p">.</span><span class="nx">multiply</span><span class="p">(</span><span class="nx">first</span><span class="p">,</span> <span class="nx">second</span><span class="p">)</span>
    <span class="p">}</span>

    <span class="nx">describe</span><span class="p">(</span><span class="dl">"</span><span class="s2">when the first value is negative</span><span class="dl">"</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="nx">beforeEach</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="nx">first</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span> <span class="p">})</span>

      <span class="nx">describe</span><span class="p">(</span><span class="dl">"</span><span class="s2">when the second value is negative</span><span class="dl">"</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="nx">beforeEach</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="nx">second</span> <span class="o">=</span> <span class="o">-</span><span class="mi">3</span> <span class="p">})</span>

        <span class="nx">it</span><span class="p">(</span><span class="dl">"</span><span class="s2">returns a positive number</span><span class="dl">"</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
          <span class="nx">expect</span><span class="p">(</span><span class="nx">getResult</span><span class="p">()).</span><span class="nx">toEqual</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
        <span class="p">})</span>
      <span class="p">})</span>

      <span class="nx">describe</span><span class="p">(</span><span class="dl">"</span><span class="s2">when the second value is positive</span><span class="dl">"</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="nx">beforeEach</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="nx">second</span> <span class="o">=</span> <span class="mi">3</span> <span class="p">})</span>

        <span class="nx">it</span><span class="p">(</span><span class="dl">"</span><span class="s2">returns a negative number</span><span class="dl">"</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
          <span class="nx">expect</span><span class="p">(</span><span class="nx">getResult</span><span class="p">()).</span><span class="nx">toEqual</span><span class="p">(</span><span class="o">-</span><span class="mi">3</span><span class="p">)</span>
        <span class="p">})</span>
      <span class="p">})</span>
    <span class="p">})</span>
  <span class="p">})</span>
<span class="p">})</span>
</code></pre></div></div>

<p>There’s definitely a bit more noise here, especially with the <code class="language-plaintext highlighter-rouge">beforeEach</code> and <code class="language-plaintext highlighter-rouge">let</code> statements. It’s not a <em>lot</em>
more noise, but it is definitely more noise.</p>

<p>In real life I wouldn’t expect to find tests like the above JavaScript example. I’d expect to find the tests in
JavaScript looking more like this:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">describe</span><span class="p">(</span><span class="dl">"</span><span class="s2">Calculator</span><span class="dl">"</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">let</span> <span class="nx">calculator</span>
  <span class="nx">beforeEach</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="nx">calculator</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Calculator</span><span class="p">()</span> <span class="p">})</span>

  <span class="nx">describe</span><span class="p">(</span><span class="dl">"</span><span class="s2">.multiply</span><span class="dl">"</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">it</span><span class="p">(</span><span class="dl">"</span><span class="s2">returns a positive number when the first number is negative and the second number is negative</span><span class="dl">"</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="kd">const</span> <span class="nx">result</span> <span class="o">=</span> <span class="nx">calculator</span><span class="p">.</span><span class="nx">multiply</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">3</span><span class="p">)</span>

      <span class="nx">expect</span><span class="p">(</span><span class="nx">result</span><span class="p">).</span><span class="nx">toEqual</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
    <span class="p">})</span>

    <span class="nx">it</span><span class="p">(</span><span class="dl">"</span><span class="s2">returns a negative number when the first number is negative and the second number is positive</span><span class="dl">"</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="kd">const</span> <span class="nx">result</span> <span class="o">=</span> <span class="nx">calculator</span><span class="p">.</span><span class="nx">multiply</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span>

      <span class="nx">expect</span><span class="p">(</span><span class="nx">result</span><span class="p">).</span><span class="nx">toEqual</span><span class="p">(</span><span class="o">-</span><span class="mi">3</span><span class="p">)</span>
    <span class="p">})</span>
  <span class="p">})</span>
<span class="p">})</span>
</code></pre></div></div>

<p>You could certainly make the case for this contrived example that <em>this</em> is actually the most readable set of
tests, because there’s less code. I would have a hard time arguing. But most real-life tests are more complex than
these examples, with state and side-effects to mock out, and more scenarios and edge cases worth testing. Each test
case here includes multiple conditions, but there are only two permutations represented. Once things get a little
more complicated than these contrived examples, the RSpec tests become the clear winner for me — they’re easier to
read and manage, with their <code class="language-plaintext highlighter-rouge">let</code> and <code class="language-plaintext highlighter-rouge">context</code> blocks more discretely describing your test scenarios.</p>

<p>You could also argue that the bigger win here would be breaking scenarios into individual <code class="language-plaintext highlighter-rouge">describe</code> blocks in
JavaScript tests, instead of cramming the entire scenario into one long <code class="language-plaintext highlighter-rouge">it("...")</code> statement. I wouldn’t argue
that either.</p>

<h2 id="caveats">Caveats</h2>

<p>The day after I wrote this article, a conversation started in the Artsy slack about how confusing <code class="language-plaintext highlighter-rouge">let</code> was because
it moved variable initializations far away from where the tests used them.</p>

<p>This makes sense! I think it points to two truths in software development:</p>

<h3 id="code-readability-is-subjective">Code readability is subjective</h3>

<p>For years I was convinced that practices like small functions or long and descriptive function names were
<em>objectively</em> more readable. I leaned into this, and my code reviews almost always included comments on what I
thought would make the code more readable.</p>

<p>As more people pushed back on my feedback over time, I realized that the feedback I was giving was <em>subjective</em>. I
still like code that uses many short functions wired together, but not everyone finds that more readable! I’ve
stopped giving readability feedback on PRs, unless I can provide nearly-objective facts or scenarios that point to
a readability improvement.</p>

<p>In this article, I find the RSpec <code class="language-plaintext highlighter-rouge">let</code> examples to be much more readable than the JavaScript examples. But you and
your team might not! Maybe the distance between a <code class="language-plaintext highlighter-rouge">let</code> block’s definition and its method’s usage makes it hard for
you to follow the test. That’s cool!</p>

<h3 id="any-cool-thing-can-be-abused">Any cool thing can be abused</h3>

<p>Earlier in this article I linked to <a href="https://medium.com/@tomkadwill/all-about-rspec-let-a3b642e08d39">an article that describes <code class="language-plaintext highlighter-rouge">let</code> blocks in more detail</a>. It includes
<a href="https://www.rubydoc.info/github/rspec/rspec-core/RSpec%2FCore%2FMemoizedHelpers%2FClassMethods%3Alet">a warning from the actual <code class="language-plaintext highlighter-rouge">let</code> docs</a>:</p>

<blockquote>
  <p>Note: <code class="language-plaintext highlighter-rouge">let</code> can enhance readability when used sparingly (1,2, or maybe 3 declarations) in any given example
group, but that can quickly degrade with overuse. YMMV.</p>
</blockquote>

<p>I’ve definitely seen code where I had a hard time following a stream of <code class="language-plaintext highlighter-rouge">let</code> blocks. The RSpec example I gave
above reads nicely to me — but it’s probably teetering on the edge of where <code class="language-plaintext highlighter-rouge">let</code> usage becomes confusing. I’m
guessing I have a slightly higher tolerance for this particular abstraction than my friends who don’t like
it…again pointing to readability being subjective.</p>

<p>Having said all that — lately every time I try to write JavaScript tests, I find myself trying (unsuccessfully) to
recreate that RSpec example above. It represents exactly how I want to think about complex test scenarios. Each
level of the tests has exactly the setup that is unique to that level. There’s very little distraction or noise at
each <code class="language-plaintext highlighter-rouge">context</code> and <code class="language-plaintext highlighter-rouge">it</code>. It totally aligns with
<a href="https://www.stevenhicks.me/blog/2018/01/chekhovs-gun-and-better-unit-tests/">my desire to minimize irrelevant test setup</a>.
I’m in ❤️ ❤️ ❤️ ❤️ ❤️.</p>

<blockquote>
  <p><em>This post originally appeared on
<a href="https://www.stevenhicks.me/blog/2021/09/what-javascript-tests-could-learn-from-rspec/">Steve’s blog</a>.</em></p>
</blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Switch from Capybara Webkit to Chrome]]></title>
    <link href="https://artsy.github.io/blog/2018/11/27/switch-from-capybara-webkit-to-chrome/"/>
    <updated>2018-11-27T00:00:00+00:00</updated>
    <id>https://artsy.github.io/blog/2018/11/27/switch-from-capybara-webkit-to-chrome</id>
    <content type="html"><![CDATA[<p>Volt is the internal app name of Artsy CMS, and our partners use it to manage their inventory and presence on artsy.net. It’s a Rails-based UI app that talks to many API services. We use <a href="https://github.com/rspec/rspec">RSpec</a> extensively to cover controller, model, view, and feature specs. As of Jun. 2018, Volt had 3751 specs and 495 of them were run with JavaScript enabled. It took about 16 mins to run on CircleCI with 6x parallelism.</p>

<p>Capybara-webkit was introduced from the very beginning of Volt for testing JavaScript-enabled specs via headless WebKit browser. It’s been providing a lot of confidence for the past 4+ years; however, a few reasons/growing concerns have encouraged us to look for (more modern) alternatives:</p>

<!-- more -->

<h2 id="the-problem">The Problem</h2>

<ul>
  <li>The <a href="https://github.com/thoughtbot/capybara-webkit/tree/v1.14.0#qt-dependency-and-installation-issues">dependency of a specific versions of Qt</a> has been causing frustrations to set it up properly both on engineers’ local machines and on CI.</li>
  <li>The roadmap of capybara-webkit development is <a href="https://github.com/thoughtbot/capybara-webkit/issues/885#issuecomment-193988527">unclear</a>.</li>
  <li>It’s been hard to truly identify the root cause of “flickering” feature specs (i.e. tests that fail intermittently and are hard to reliably reproduce), while retrying tended to resolve it on CI.</li>
  <li>The entire RSpec tests took about 16 mins to complete on CI, with 6 parallelism. The slowness made it unrealistic to run the whole tests locally.</li>
</ul>

<h2 id="the-goal">The Goal</h2>

<p>Headless Chrome has gained a lot of attention in the past few years and migrations done by companies such as <a href="https://about.gitlab.com/2017/12/19/moving-to-headless-chrome/">GitLab</a> and <a href="https://robots.thoughtbot.com/headless-feature-specs-with-chrome">thoughtbot</a> have proven it to be a promising alternative to capybara-webkit. In fact, it’s been <a href="http://guides.rubyonrails.org/5_1_release_notes.html#system-tests">officially included in Rails 5.1</a> for <a href="https://guides.rubyonrails.org/testing.html#system-testing">system tests</a>.</p>

<p>The goal of this project is to switch to Headless Chrome and maintain the same feature sets we have now. This includes:</p>

<ul>
  <li>Making all existing specs pass</li>
  <li>Running in container environments and using Artsy <a href="https://github.com/artsy/hokusai">Hokusai</a></li>
  <li>Supporting mechanisms to debug specs, e.g. examining browser console logs for JavaScript behavior, taking screenshots on demand and automatically on failure, etc.</li>
  <li>Bonus point to improve the stability of feature specs</li>
  <li>Bonus point to improve the speed of running the entire test suite</li>
</ul>

<h2 id="the-how">The How</h2>

<p>First, we replaced <code class="language-plaintext highlighter-rouge">capybara-webkit</code> with <code class="language-plaintext highlighter-rouge">selenium-webdriver</code> and <code class="language-plaintext highlighter-rouge">chromedriver-helper</code>:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">gem</span> <span class="s1">'selenium-webdriver'</span>
<span class="n">gem</span> <span class="s1">'chromedriver-helper'</span>
</code></pre></div></div>

<p><a href="https://github.com/flavorjones/chromedriver-helper"><code class="language-plaintext highlighter-rouge">chromedriver-helper</code></a> was useful to help install <a href="https://sites.google.com/a/chromium.org/chromedriver/">chromedriver</a> in different environments, e.g. an engineer’s local machine, CI, etc.</p>

<p>Second, we registered both <code class="language-plaintext highlighter-rouge">:chrome</code> and <code class="language-plaintext highlighter-rouge">:headleass_chrome</code> drivers. By default, it used Headless Chrome as the JavaScript driver, and we could easily switch to Chrome and observe the actual interaction happening in a real browser.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">Capybara</span><span class="p">.</span><span class="nf">register_driver</span> <span class="ss">:chrome</span> <span class="k">do</span> <span class="o">|</span><span class="n">app</span><span class="o">|</span>
  <span class="no">Capybara</span><span class="o">::</span><span class="no">Selenium</span><span class="o">::</span><span class="no">Driver</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="n">app</span><span class="p">,</span> <span class="ss">browser: :chrome</span><span class="p">)</span>
<span class="k">end</span>

<span class="no">Capybara</span><span class="p">.</span><span class="nf">register_driver</span> <span class="ss">:headless_chrome</span> <span class="k">do</span> <span class="o">|</span><span class="n">app</span><span class="o">|</span>
  <span class="n">caps</span> <span class="o">=</span> <span class="no">Selenium</span><span class="o">::</span><span class="no">WebDriver</span><span class="o">::</span><span class="no">Remote</span><span class="o">::</span><span class="no">Capabilities</span><span class="p">.</span><span class="nf">chrome</span><span class="p">(</span><span class="ss">loggingPrefs: </span><span class="p">{</span> <span class="ss">browser: </span><span class="s1">'ALL'</span> <span class="p">})</span>
  <span class="n">opts</span> <span class="o">=</span> <span class="no">Selenium</span><span class="o">::</span><span class="no">WebDriver</span><span class="o">::</span><span class="no">Chrome</span><span class="o">::</span><span class="no">Options</span><span class="p">.</span><span class="nf">new</span>

  <span class="n">chrome_args</span> <span class="o">=</span> <span class="sx">%w[--headless --window-size=1920,1080 --no-sandbox --disable-dev-shm-usage]</span>
  <span class="n">chrome_args</span><span class="p">.</span><span class="nf">each</span> <span class="p">{</span> <span class="o">|</span><span class="n">arg</span><span class="o">|</span> <span class="n">opts</span><span class="p">.</span><span class="nf">add_argument</span><span class="p">(</span><span class="n">arg</span><span class="p">)</span> <span class="p">}</span>
  <span class="no">Capybara</span><span class="o">::</span><span class="no">Selenium</span><span class="o">::</span><span class="no">Driver</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="n">app</span><span class="p">,</span> <span class="ss">browser: :chrome</span><span class="p">,</span> <span class="ss">options: </span><span class="n">opts</span><span class="p">,</span> <span class="ss">desired_capabilities: </span><span class="n">caps</span><span class="p">)</span>
<span class="k">end</span>

<span class="no">Capybara</span><span class="p">.</span><span class="nf">configure</span> <span class="k">do</span> <span class="o">|</span><span class="n">config</span><span class="o">|</span>
  <span class="c1"># change this to :chrome to observe tests in a real browser</span>
  <span class="n">config</span><span class="p">.</span><span class="nf">javascript_driver</span> <span class="o">=</span> <span class="ss">:headless_chrome</span>
<span class="k">end</span>
</code></pre></div></div>

<p>We were on Rails v5.0.2 and Capybara v2.18.0 during the migration. We will be able to simplify the configuration by using the default <code class="language-plaintext highlighter-rouge">:selenium_chrome</code> and <code class="language-plaintext highlighter-rouge">:selenium_chrome_headless</code> drivers introduced in <a href="https://github.com/teamcapybara/capybara/blob/3.11.1/lib/capybara.rb#L535-L545">Capybara v3.11.1</a>. In addition, Rails v5.1 introduced the new system tests, and it’ll be even simpler by using the <a href="https://api.rubyonrails.org/v5.1.3/classes/ActionDispatch/SystemTestCase.html#method-c-driven_by"><code class="language-plaintext highlighter-rouge">driven_by</code></a> method.</p>

<h2 id="lessons-learned">Lessons Learned</h2>

<p>Naively switching to Headless Chrome caused about 60 spec failures on my local machine. We simply went through them one by one and fixed them. A big part of failures was due to <a href="https://github.com/thoughtbot/capybara-webkit/tree/v1.14.0#non-standard-driver-methods">capybara-webkit’s non-standard driver methods</a>, such as setting cookies, inspecting console logs, etc., and we just had to migrate to Selenium WebDriver’s equivalents.</p>

<p>However, we still observed flickering specs on CI, while the exact failures seemed to be different than previously observed with Capybara Webkit. We will have to investigate further for possible causes. Regarding speed, we didn’t see significant improvement after switching to Headless Chrome, as mentioned in GitLab’s and others’ blog post, too.</p>

<h2 id="next-steps">Next Steps</h2>

<p>The naive migration to Chrome (and removal of the Qt dependency) already improved the developer experience quite a lot (e.g. no more wrestling with installing Capybara Webkit and Qt 5.5 on every engineer’s local machine <em>and</em> CI.) There are many next steps we can keep experimenting with and improving our tests, for example</p>

<ul>
  <li>Updating Volt to Rails &gt;= 5.1 and switching to system tests</li>
  <li>Investigating the causes of the flickering specs by looking into intermittent failures reported on CI</li>
  <li>Improving speed by using Docker <a href="https://docs.docker.com/develop/develop-images/multistage-build/">multi-stage builds</a>, caching, writing the right type and amount of tests, etc.</li>
</ul>

<p>It’s a long journey, and we were all excited about the migration and the new future. We’d love to hear your experience, too!</p>

]]></content>
  </entry>
  
</feed>
