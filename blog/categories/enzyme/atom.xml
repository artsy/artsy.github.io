<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: enzyme | Artsy Engineering]]></title>
  <link href="https://artsy.github.io/blog/categories/enzyme/atom.xml" rel="self"/>
  <link href="https://artsy.github.io/"/>
  <updated>2024-05-17T14:49:02+00:00</updated>
  <id>https://artsy.github.io/</id>
  <author>
    <name><![CDATA[]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Testing React Tracking with Jest and Enzyme]]></title>
    <link href="https://artsy.github.io/blog/2021/04/15/testing-react-tracking-with-jest-and-enzyme/"/>
    <updated>2021-04-15T00:00:00+00:00</updated>
    <id>https://artsy.github.io/blog/2021/04/15/testing-react-tracking-with-jest-and-enzyme</id>
    <content type="html"><![CDATA[<p>Recently, I needed to test a button that would make an analytics tracking call using
<a href="https://github.com/NYTimes/react-tracking">react-tracking</a> and then navigate to a new page in a callback. This
presented some challenges - I wasn’t sure how to create a mocked version of react-tracking that would allow a
callback to be passed.</p>

<p>With some help from fellow Artsy engineers <a href="https://github.com/damassi">Christopher Pappas</a> and
<a href="https://twitter.com/pvinis">Pavlos Vinieratos</a>, I got the tracking and testing to work. Here’s how we did it.</p>

<!-- more -->

<h1 id="a-little-context">A little context</h1>

<p>This work took place in Volt, our partner CMS (it’s sadly a private repository, but I’ll do my best to paste in
relevant code snippets so you’re not totally in the dark). Volt has been around for a long time and has had several
different client-side tracking implementations over the years. In this case, I wanted to take the opportunity to
bring Volt up to standard with our other big apps, <a href="https://github.com/artsy/force/">Force</a> and
<a href="https://github.com/artsy/eigen">Eigen</a>. They both use react-tracking and
<a href="https://github.com/artsy/cohesion/">Cohesion</a>, our centralized analytics schema.</p>

<p>Our use-case was a button that would navigate the user to a new page. The button had been implemented in a previous
PR, and now we wanted to make it execute a tracking call before navigating.</p>

<p>We use Segment for tracking, and their tracking setup relies on a JS snippet being available on your pages. That
snippet sets a <code class="language-plaintext highlighter-rouge">window.analytics</code> property, which in turn
<a href="https://segment.com/docs/connections/sources/catalog/libraries/website/javascript/#track">has a</a> <code class="language-plaintext highlighter-rouge">.track()</code>
method. On a fundamental level, all of our tracking calls boil down to a call to <code class="language-plaintext highlighter-rouge">window.analytics.track()</code>. We
pass a list of properties to <code class="language-plaintext highlighter-rouge">.track()</code>, Segment receives the event and properties, and the resulting JSON is
stored in our data warehouse.</p>

<h1 id="adding-react-tracking">Adding react-tracking</h1>

<p>First, there was a bit of setup required to get react-tracking working. The react-tracking package
<a href="https://github.com/NYTimes/react-tracking#custom-optionsdispatch-for-tracking-data">assumes you’re using Google Tag Manager by default</a>,
but allows you to override that behavior with a custom <code class="language-plaintext highlighter-rouge">dispatch</code> function. In our case, we wrap our React apps in
a <code class="language-plaintext highlighter-rouge">&lt;BaseApp&gt;</code> component, so we added a new <code class="language-plaintext highlighter-rouge">&lt;TrackerContextCohesion&gt;</code> component with a custom <code class="language-plaintext highlighter-rouge">dispatch</code> that would
be available to all of our React apps:</p>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">React</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react</span><span class="dl">"</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">track</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react-tracking</span><span class="dl">"</span>

<span class="c1">// We're following the instructions from react-tracking's README on overriding the dispatch function</span>
<span class="kd">const</span> <span class="nx">TrackerContextCohesion</span> <span class="o">=</span> <span class="nx">track</span><span class="p">(</span>
  <span class="c1">// This is blank because we're not actually tracking a specific event here, just modifying dispatch</span>
  <span class="c1">// so that all components in the tree can use it</span>
  <span class="p">{},</span>
  <span class="p">{</span>
    <span class="na">dispatch</span><span class="p">:</span> <span class="p">({</span> <span class="nx">data</span><span class="p">,</span> <span class="nx">options</span><span class="p">,</span> <span class="nx">callback</span> <span class="p">})</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="nx">trackEvent</span><span class="p">(</span><span class="nb">window</span><span class="p">.</span><span class="nx">analytics</span><span class="p">.</span><span class="nx">track</span><span class="p">(</span><span class="nx">data</span><span class="p">.</span><span class="nx">action</span><span class="p">,</span> <span class="nx">data</span><span class="p">,</span> <span class="nx">options</span><span class="p">,</span> <span class="nx">callback</span><span class="p">))</span>
    <span class="p">},</span>
  <span class="p">}</span>
<span class="p">)((</span><span class="nx">props</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">props</span><span class="p">.</span><span class="nx">children</span>
<span class="p">})</span>

<span class="k">export</span> <span class="kd">const</span> <span class="nx">BaseApp</span> <span class="o">=</span> <span class="p">(</span><span class="nx">props</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">return</span> <span class="o">&lt;</span><span class="nx">TrackerContextCohesion</span><span class="o">&gt;</span><span class="p">{</span><span class="nx">props</span><span class="p">.</span><span class="nx">children</span><span class="p">}</span><span class="o">&lt;</span><span class="sr">/TrackerContextCohesion</span><span class="err">&gt;
</span><span class="p">}</span>
</code></pre></div></div>

<p>This allows us to make tracking calls in our components, including the passing of custom callback functions:</p>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">useTracking</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react-tracking</span><span class="dl">"</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">Box</span><span class="p">,</span> <span class="nx">Button</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">@artsy/palette</span><span class="dl">"</span>

<span class="c1">// Assumes that MyComponent is wrapped in &lt;BaseApp&gt; wherever it's used, giving</span>
<span class="c1">// it access to tracking context</span>
<span class="kd">const</span> <span class="nx">MyComponent</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="p">{</span> <span class="nx">trackEvent</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">useTracking</span><span class="p">()</span>

  <span class="kd">const</span> <span class="nx">handleClick</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">trackEvent</span><span class="p">({</span>
      <span class="na">data</span><span class="p">:</span> <span class="p">{</span> <span class="na">action</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Click</span><span class="dl">"</span><span class="p">,</span> <span class="na">somePropToTrack</span><span class="p">:</span> <span class="dl">"</span><span class="s2">andy-warhol</span><span class="dl">"</span> <span class="p">},</span>
      <span class="na">options</span><span class="p">:</span> <span class="p">{},</span> <span class="c1">// Additional Segment options, e.g. integrations: { 'Intercom': false, }</span>
      <span class="na">callback</span><span class="p">:</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="nb">window</span><span class="p">.</span><span class="nx">location</span><span class="p">.</span><span class="nx">assign</span><span class="p">(</span><span class="dl">"</span><span class="s2">/artworks</span><span class="dl">"</span><span class="p">)</span>
      <span class="p">},</span>
    <span class="p">})</span>
  <span class="p">}</span>

  <span class="k">return</span> <span class="p">(</span>
    <span class="o">&lt;</span><span class="nx">Box</span><span class="o">&gt;</span>
      <span class="o">&lt;</span><span class="nx">Button</span> <span class="nx">onClick</span><span class="o">=</span><span class="p">{</span><span class="nx">handleClick</span><span class="p">}</span><span class="o">&gt;</span><span class="nx">Track</span> <span class="nx">and</span> <span class="nx">navigate</span><span class="o">&lt;</span><span class="sr">/Button</span><span class="err">&gt;
</span>    <span class="o">&lt;</span><span class="sr">/Box</span><span class="err">&gt;
</span>  <span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Being able to pass a callback was especially important in our case. We realized that if we needed to track <em>and
then navigate</em>, the callback was necessary. In our testing, we saw that if we simply tried to fire the tracking
call then run <code class="language-plaintext highlighter-rouge">window.location.assign()</code> synchronously, the tracking call might not get executed before the
navigation started, so we would effectively lose that event. Segment specifically
<a href="https://segment.com/docs/connections/sources/catalog/libraries/website/javascript/#track">allows you to pass a callback</a>
to their tracking function to their track function for this situation. They describe the optional <code class="language-plaintext highlighter-rouge">callback</code>
parameter as:</p>

<blockquote>
  <p>A function that is executed after a short timeout, giving the browser time to make outbound requests first.</p>
</blockquote>

<p>Thus, we pass the tracking data and the callback to the custom <code class="language-plaintext highlighter-rouge">track</code> call we implemented, and we’re good to go.</p>

<h1 id="the-problem-with-testing">The problem with testing</h1>

<p>Our use-case is simple enough, but we wanted to make sure that when the button was pressed, we would both execute
the tracking call and then navigate. A test checking that the navigation worked had already been implemented.
However, after moving the <code class="language-plaintext highlighter-rouge">window.location.assign</code> call into a callback, our test started failing because our
component was trying to execute a tracking call before navigating.</p>

<p>The test that predated the addition of tracking looked like this:</p>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">React</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react</span><span class="dl">"</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">mount</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">enzyme</span><span class="dl">"</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">MyComponent</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">./MyComponent</span><span class="dl">"</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">TestApp</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">testing/components/TestApp</span><span class="dl">"</span>

<span class="nb">window</span><span class="p">.</span><span class="nx">location</span><span class="p">.</span><span class="nx">assign</span> <span class="o">=</span> <span class="nx">jest</span><span class="p">.</span><span class="nx">fn</span><span class="p">()</span>

<span class="nx">it</span><span class="p">(</span><span class="dl">"</span><span class="s2">Navigates to artworks page</span><span class="dl">"</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">wrapper</span> <span class="o">=</span> <span class="nx">mount</span><span class="p">(</span>
    <span class="o">&lt;</span><span class="nx">TestApp</span><span class="o">&gt;</span>
      <span class="o">&lt;</span><span class="nx">MyComponent</span> <span class="o">/&gt;</span>
    <span class="o">&lt;</span><span class="sr">/TestApp</span><span class="err">&gt;
</span>  <span class="p">)</span>

  <span class="nx">wrapper</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="dl">"</span><span class="s2">Button</span><span class="dl">"</span><span class="p">).</span><span class="nx">simulate</span><span class="p">(</span><span class="dl">"</span><span class="s2">click</span><span class="dl">"</span><span class="p">)</span>
  <span class="nx">expect</span><span class="p">(</span><span class="nb">window</span><span class="p">.</span><span class="nx">location</span><span class="p">.</span><span class="nx">assign</span><span class="p">).</span><span class="nx">toBeCalledWith</span><span class="p">(</span><span class="dl">"</span><span class="s2">/artworks</span><span class="dl">"</span><span class="p">)</span>
<span class="p">})</span>
</code></pre></div></div>

<p>So we were rendering our button, clicking on it, and expecting to try to navigate. How could we mock our tracking
call while still executing a passed callback?</p>

<h1 id="the-final-solution">The final solution</h1>

<p>Our mock ended up looking like this:</p>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">window</span><span class="p">.</span><span class="nx">analytics</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">track</span><span class="p">:</span> <span class="nx">jest</span><span class="p">.</span><span class="nx">fn</span><span class="p">(),</span>
<span class="p">}</span>

<span class="nx">jest</span><span class="p">.</span><span class="nx">mock</span><span class="p">(</span><span class="dl">"</span><span class="s2">react-tracking</span><span class="dl">"</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">({</span>
  <span class="na">useTracking</span><span class="p">:</span> <span class="nx">jest</span><span class="p">.</span><span class="nx">fn</span><span class="p">(),</span>
  <span class="na">track</span><span class="p">:</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">(</span><span class="nx">children</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">children</span><span class="p">,</span>
<span class="p">}))</span>

<span class="kd">const</span> <span class="nx">trackEvent</span> <span class="o">=</span> <span class="nx">jest</span><span class="p">.</span><span class="nx">fn</span><span class="p">((</span><span class="nx">args</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">args</span><span class="p">.</span><span class="nx">callback</span><span class="p">()</span>
<span class="p">})</span>

<span class="nx">useTracking</span><span class="p">.</span><span class="nx">mockImplementation</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">({</span>
  <span class="nx">trackEvent</span><span class="p">,</span>
<span class="p">}))</span>
</code></pre></div></div>

<p>Let’s break that down section by section. First:</p>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">window</span><span class="p">.</span><span class="nx">analytics</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">track</span><span class="p">:</span> <span class="nx">jest</span><span class="p">.</span><span class="nx">fn</span><span class="p">(),</span>
<span class="p">}</span>
</code></pre></div></div>

<p>As noted above, all of our tracking calls assume <code class="language-plaintext highlighter-rouge">window.analytics</code> exists and that it has a <code class="language-plaintext highlighter-rouge">.track()</code> method. We
started by mocking that setup.</p>

<p>Next:</p>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">jest</span><span class="p">.</span><span class="nx">mock</span><span class="p">(</span><span class="dl">"</span><span class="s2">react-tracking</span><span class="dl">"</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">({</span>
  <span class="na">useTracking</span><span class="p">:</span> <span class="nx">jest</span><span class="p">.</span><span class="nx">fn</span><span class="p">(),</span>
  <span class="na">track</span><span class="p">:</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">(</span><span class="nx">children</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">children</span><span class="p">,</span>
<span class="p">}))</span>
</code></pre></div></div>

<p>Here we mock the <code class="language-plaintext highlighter-rouge">react-tracking</code> package and two specific methods it exports, <code class="language-plaintext highlighter-rouge">useTracking</code> and <code class="language-plaintext highlighter-rouge">track</code>. We made
<code class="language-plaintext highlighter-rouge">useTracking</code> a Jest function - we’ll flesh it out further a few lines farther down in the file.</p>

<p>Then there’s the mocking of <code class="language-plaintext highlighter-rouge">track</code>. To put it in words, our mock is: a function that returns a function that takes
in <code class="language-plaintext highlighter-rouge">children</code> and returns those <code class="language-plaintext highlighter-rouge">children</code>. That might sound like gibberish at first blush, but essentially what
we’re doing is mocking the function composition we performed earlier when creating <code class="language-plaintext highlighter-rouge">TrackerContextCohesion</code>. We
needed something that was the same shape as <code class="language-plaintext highlighter-rouge">react-tracking</code>’s <code class="language-plaintext highlighter-rouge">track()</code>, but we don’t care about overriding
<code class="language-plaintext highlighter-rouge">dispatch</code> in our mocks.</p>

<p>Last:</p>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">trackEvent</span> <span class="o">=</span> <span class="nx">jest</span><span class="p">.</span><span class="nx">fn</span><span class="p">((</span><span class="nx">args</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">args</span><span class="p">.</span><span class="nx">callback</span><span class="p">()</span>
<span class="p">})</span>
<span class="nx">useTracking</span><span class="p">.</span><span class="nx">mockImplementation</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">({</span>
  <span class="nx">trackEvent</span><span class="p">,</span>
<span class="p">}))</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">trackEvent</code> is a mock function that takes in an <code class="language-plaintext highlighter-rouge">args</code> object and executes <code class="language-plaintext highlighter-rouge">args.callback()</code>. We then update our
<code class="language-plaintext highlighter-rouge">useTracking</code> mock to make it return a function that returns an object with a <code class="language-plaintext highlighter-rouge">trackEvent</code> property. What a
mouthful! That sounds super confusing, but remember that we’re trying to mock something that we actually use like
this:</p>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="p">{</span> <span class="nx">trackEvent</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">useTracking</span><span class="p">()</span>
</code></pre></div></div>

<p>So basically, our goal was to mock <code class="language-plaintext highlighter-rouge">trackEvent</code> and we needed to emulate the shape it has when it’s exported by
<code class="language-plaintext highlighter-rouge">react-tracking</code>. Hopefully that makes things a little clearer.</p>

<p>After some tinkering and eventually getting the mocks to work in a single test file, we moved these mocked
functions to a <code class="language-plaintext highlighter-rouge">setup.ts</code> file that all of our Jest tests load automatically. We chose to make these mocks
available to all tests because then we wouldn’t get surprising test failures if we, say, forgot that we were making
a tracking call in a component and didn’t explicitly mock the tracking calls in those tests.</p>

<p>At the end of the day, we can use these mocked calls in our test files by doing the following:</p>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">React</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react</span><span class="dl">"</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">mount</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">enzyme</span><span class="dl">"</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">MyComponent</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">./MyComponent</span><span class="dl">"</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">TestApp</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">testing/components/TestApp</span><span class="dl">"</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">useTracking</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react-tracking</span><span class="dl">"</span>

<span class="c1">// This only works because we mock tracking in setup.ts, and we only need to</span>
<span class="c1">// declare it because we want to check how many times it was called. Also, it</span>
<span class="c1">// would break the rules of hooks (https://reactjs.org/docs/hooks-rules.html)</span>
<span class="c1">// if it wasn't mocked. Tread cautiously!</span>
<span class="kd">const</span> <span class="p">{</span> <span class="nx">trackEvent</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">useTracking</span><span class="p">()</span>

<span class="nb">window</span><span class="p">.</span><span class="nx">location</span><span class="p">.</span><span class="nx">assign</span> <span class="o">=</span> <span class="nx">jest</span><span class="p">.</span><span class="nx">fn</span><span class="p">()</span>

<span class="nx">it</span><span class="p">(</span><span class="dl">"</span><span class="s2">Calls tracking and navigates to artworks page</span><span class="dl">"</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">wrapper</span> <span class="o">=</span> <span class="nx">mount</span><span class="p">(</span>
    <span class="o">&lt;</span><span class="nx">TestApp</span><span class="o">&gt;</span>
      <span class="o">&lt;</span><span class="nx">MyComponent</span> <span class="p">{...</span><span class="nx">props</span><span class="p">}</span> <span class="sr">/</span><span class="err">&gt;
</span>    <span class="o">&lt;</span><span class="sr">/TestApp</span><span class="err">&gt;
</span>  <span class="p">)</span>

  <span class="nx">wrapper</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="dl">"</span><span class="s2">Button</span><span class="dl">"</span><span class="p">).</span><span class="nx">simulate</span><span class="p">(</span><span class="dl">"</span><span class="s2">click</span><span class="dl">"</span><span class="p">)</span>
  <span class="nx">expect</span><span class="p">(</span><span class="nx">trackEvent</span><span class="p">).</span><span class="nx">toHaveBeenCalledTimes</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
  <span class="nx">expect</span><span class="p">(</span><span class="nb">window</span><span class="p">.</span><span class="nx">location</span><span class="p">.</span><span class="nx">assign</span><span class="p">).</span><span class="nx">toBeCalledWith</span><span class="p">(</span><span class="dl">"</span><span class="s2">/artworks</span><span class="dl">"</span><span class="p">)</span>
<span class="p">})</span>
</code></pre></div></div>

<p>That’s it! If you’re trying to test something similar and found this post, I hope it helps you out. If so, or if
you’re still confused, leave a comment!</p>
]]></content>
  </entry>
  
</feed>
