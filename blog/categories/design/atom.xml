<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: design | Artsy Engineering]]></title>
  <link href="https://artsy.github.io/blog/categories/design/atom.xml" rel="self"/>
  <link href="https://artsy.github.io/"/>
  <updated>2024-05-17T14:49:02+00:00</updated>
  <id>https://artsy.github.io/</id>
  <author>
    <name><![CDATA[]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[CSS is Hard and Other Things I Learned Working on the 2019 Artsy Vanguard]]></title>
    <link href="https://artsy.github.io/blog/2019/10/29/css-is-hard-and-vanguard-2019-learnings/"/>
    <updated>2019-10-29T00:00:00+00:00</updated>
    <id>https://artsy.github.io/blog/2019/10/29/css-is-hard-and-vanguard-2019-learnings</id>
    <content type="html"><![CDATA[<p>The Artsy Vanguard is an annual editorial series where we feature up-and-coming, notable, and praiseworthy artists
and their contributions to the art world. 2019 was the second year that Artsy published this special feature,
although we have been publishing custom editorial segments multiple times per year since 2015.</p>

<p><em>In this post, I’ll discuss my recent experience working on the
<a href="https://www.artsy.net/series/artsy-vanguard-2019">2019 Artsy Vanguard</a> editorial feature. I’ll start by
introducing the technology stack behind our articles and then discuss what I learned from both a team/organization
and technical perspective.</em></p>

<!-- more -->

<h1 id="an-introduction-to-artsy-editorial">An Introduction to Artsy Editorial</h1>

<p>Typically our editorial works fall under one of five or so categories:</p>

<ul>
  <li><a href="https://www.artsy.net/article/artsy-editorial-hip-hop-legend-q-tip-shares-diverse-art-collection">Standard articles</a>,
which have the same layout, but whose content could broadly relate to any of the primary categories Artsy’s
editors tend to cover.</li>
  <li><a href="https://www.artsy.net/news">News content</a> consisting of an infinitely scrolling feed of the latest newsworthy
events in the art world.</li>
  <li><a href="https://www.artsy.net/series/artsy-editors-future-art">Sponsored</a> and non-sponsored editorial features that may
be a <a href="https://www.artsy.net/article/artsy-editorial-rise-fall-internet-art-communities">standalone</a> publication
or a <a href="https://www.artsy.net/series/how-to-be-an-artist">part of a larger related series</a> of features.</li>
  <li><a href="https://www.artsy.net/series/artsy-editors-future-art-carrie-mae-weems">Video editorial series</a>.</li>
</ul>

<p>For more information on Artsy’s editorals, check out this
<a href="https://artsy.github.io/blog/2019/03/05/custom-editorial-features/">blog post</a> written by Senior Software Engineer
<a href="https://artsy.github.io/author/eve/">Eve Essex</a>.</p>

<p>To maintain consistency and standardization in terms of user experience design, layout, and page interactivity
options of the editorials that we offer, we use an internal content management service.
<a href="http://pages.artsy.net/rs/609-FDY-207/images/Gallery%20Guide%20to%20Artsy%20Writer.pdf">Artsy Writer</a> enables our
editorial team to publish content to the main Artsy website without having to collaborate with our engineering
organization. (Yay software!) Given that it is designed to handle the layout of the different types of editorial
features that we offer in a uniform way, highly customized editorials like the
<a href="https://www.artsy.net/series/artsy-vanguard-2019">2019 Artsy Vanguard</a> or
<a href="https://www.artsy.net/article/artsy-editorial-people-defined-visual-culture-2018">2018 Year in Visual Culture</a>
require quite a bit of planning and cross-team collaboration, as well as customized software development to support
the features that deviate from our current layouts.</p>

<p>Creating the 2019 Artsy Vanguard was truly a company-wide effort! I’m pretty new to Artsy, having only joined last
summer, so some of the work I did on Artsy Vanguard was around understanding our existing framework for routing
article content from <a href="https://github.com/artsy/positron">Positron</a>, Artsy’s editorial API, to
<a href="https://github.com/artsy/force">Force</a>, the code that powers our <a href="https://www.artsy.net/">production site</a>. On the
Engineering side, I collaborated with the project’s technical lead Eve, a senior engineer with years of experience
working in these code repositories. There were several key stakeholders, including, but certainly not limited to, a
lead project manager, lead visuals editor, designers, content writers, as well as the
<a href="http://wax-studios.com/">external design firm</a> that delivered the initial design concept and video content used
for the series.</p>

<h1 id="learnings">Learnings</h1>

<p>Vanguard was an exciting project, but as with any software endeavor, it came with its own share of learnings and
difficulties.</p>

<h2 id="1-splitting-time-between-two-teams-is-hard"><strong>1. Splitting time between two teams is hard</strong></h2>

<p>My team, Grow, is responsible for the development and maintenance of Engineering software related to increasing
user engagement with Artsy’s products. Some of our most notable projects include
<a href="http://files.artsy.net/documents/artsy-bmw-city-guide.pdf">City Guide</a>, an iOS feature built in collaboration with
BMW, detailing art shows and partner fairs in several major international cities,
<a href="https://www.artsy.net/collections">collections</a> and <a href="https://www.artsy.net/collect">collection hubs</a> offering
prospective art buyers more comprehensive ways to explore works and artists of interest, and of course the
<a href="https://www.artsy.net/articles">Artsy Editorial</a>, home to all of our editorial content. We typically work in
two-week sprint cycles, aiming to produce a planned set of deliverables during that time, and collaborating between
other developers on the team, a designer, product manager, data scientist, and technical team leader.</p>

<p>Given that this project involved collaboration from several teams and stakeholders outside of Engineering, we
decided to manage it as a project separate from the rest of the deliverables the Grow team did during the sprints.
This meant I had to split my time between team meetings for Vanguard work and team meetings for Grow. I would keep
the Grow team up to date on the Vanguard work we were doing but it felt like I was in a liminal space between the
two teams. In addition to attending weekly cross-team Vanguard standups, I attended daily Vanguard engineering
standups to align with Eve on the work that we needed to produce. In the interest of protecting my time and not
attending 3 different team standups in a single day, I posted updates to the Grow team via Slack to keep everyone
updated on the progress of our work. Despite our best intentions, it’s difficult to work on two teams at once and
feel fully committed to either.</p>

<h2 id="2-estimation-is-hard"><strong>2. Estimation is Hard</strong></h2>

<p>Due to the way this project was organized, we allotted 1.5 sprint cycles to complete the engineering work. However,
this time allotment was decided on before we had received the completed design specifications from the design firm.
This posed a set of interesting challenges in the sense that the Grow team committed to delivering a feature by a
predetermined deadline without having all of the information needed to understand the full scope of the project. As
with any engineering project, there are often unknown unknowns, those pesky little gotchas that surface as work
commences on a project, but that cannot always be predicted. This presented an interesting lesson in learning how
to estimate the amount of work required to deliver a minimum viable product and reduce the scope to meet certain
deadlines.</p>

<p>Given the limited amount of time to deliver some fairly complex designs, it was clear that we would have to reduce
some of the technical complexity in order to meet the deadline. This is pretty standard in agile development, but
this was the first time that I was in a position of having to deliver this “bad news”. It is difficult to tell team
members that a feature is not going to be able to shipped as initially expected, but these are the sort of
concessions that have to be made sometimes in order to deliver a viable product. Fortunately, I was fully supported
by my managers, tech lead, and colleagues in having to deliver the news that we were not going to be able to
deliver a feature identical to the one given to us by the design firm. From this experience, I learned that making
accurate estimations about how much work a project actually involves is hard, relying on agile as a rule makes it
easier, communicating early and often when there’s any uncertainty around delivering a feature by deadline is
critical, and working with team members that value candor, flexibility, communication, and iteration is empowering.</p>

<h2 id="3-css-is-hard"><strong>3. CSS is Hard</strong></h2>

<p>I get excited about implementing visually delightful designs, and Artsy Vanguard’s 2019 designs did not
disappoint. There were two key components that involved interesting CSS approaches:</p>

<p>** 1. Mixed Blending Mode to handle the inversion of the side frame text when it appeared over different
backgrounds**</p>

<p>** 2. Creating the visual effect of <code class="language-plaintext highlighter-rouge">.mp4</code> videos nested inside of SVG shapes**</p>

<h2 id="mixed-blend-mode">Mixed Blend Mode</h2>

<p>Mixed blend mode is a CSS property that handles blending the colors of overlapping elements. In this case, we
wanted to create the effect of inverting the colors of the static side frame text when they overlapped with either
the white background, the black SVG shapes, or the SVG videos.</p>

<p>This inverted color effect also needed to be applied to the text of the editorial content when it overlapped with
the black SVG background, when it extended past the SVG background onto a white background, and when the current
article was in an expanded state.</p>

<p>I found <a href="https://css-tricks.com/almanac/properties/m/mix-blend-mode/">CSS-Tricks</a> and the
<a href="https://developer.mozilla.org/en-US/docs/Web/CSS/mix-blend-mode">Mozilla Developer’s Network</a> documentation super
helpful in understanding the various blending properties. Since the designs for Vanguard involved a fairly simple
blending mode of inverting black and white, the mix-blend-mode difference property was how we created the effect of
inverting the black text against the various backgrounds it overlapped with. The blend mode property works by
calculating the rgb color value of the text, and the background-color of the underlying element, and using that
value to determine what colors to render. This inverse calculation also creates the “solarized” effect when the
black side frame text renders over the video-in-SVG.</p>

<p>In the original design specifications, the static text framing the page was intended to render black over a white
background, white over a black background, and white over the video-in-SVG. In order to achieve that effect, we
would have needed to apply the <code class="language-plaintext highlighter-rouge">difference</code> mix-blend-mode property when the text overlapped with a black or white
background, and color-dodge when it overlapped with a video-in-SVG background. However, given it is not possible to
assign multiple blending modes to a fixed element we had to deviate from the original design specifications.</p>

<p><img src="/images/2019-11-04-css-is-hard-and-vanguard-2019-learnings/mbb.png" alt="" /></p>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">FrameText</span> <span class="o">=</span> <span class="nx">styled</span><span class="p">(</span><span class="nx">Sans</span><span class="p">)</span><span class="s2">`
  position: fixed;
  z-index: 2;
  mix-blend-mode: difference;
  color: rgb(255, 255, 255);
`</span>
</code></pre></div></div>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">InvertedText</span> <span class="o">=</span> <span class="nx">styled</span><span class="p">(</span><span class="nx">Serif</span><span class="p">)</span><span class="s2">` 
mix-blend-mode: </span><span class="se">\$</span><span class="s2">{p =&gt; (p.isMobile ? "normal" : "difference")}; 
color: rgb(255,255,255); 
will-change: color;
`</span>
</code></pre></div></div>

<h2 id="video-in-svg">Video-in-SVG</h2>

<p>In the article series you might have noticed that each of the article subsections begins with a different polygonal
shape, which serves as a visual indicator to readers that they are viewing an article either the <em>Emerging</em>, <em>Newly
Established</em>, or <em>Getting Their Due</em> sections. You might have also noticed that each article subseries starts with
a video clip nested inside of one of these corresponding polygon shapes. These are what I refer to as video-in-SVG.
Nothing too in-depth here, but I’ll offer up the initial approach to how this effect was implemented as well as the
final solution.</p>

<p><img src="/images/2019-11-04-css-is-hard-and-vanguard-2019-learnings/getting-their-due.gif" alt="" />
<img src="/images/2019-11-04-css-is-hard-and-vanguard-2019-learnings/getting-their-due-img.png" alt="" /></p>

<p>Initially, I attempted to implement this using the
<a href="https://developer.mozilla.org/en-US/docs/Web/SVG/Element/foreignObject">Foreign Object</a> SVG element and adding a
<a href="https://css-tricks.com/almanac/properties/c/clip-path/">Clip Path</a> CSS property with the to the div element
wrapping the video. In both approaches the video component stopped respecting the responsiveness of the page, which
created an undesirable layout effect of having a huge video on screens smaller than 600 pixels wide, and
disproportionate sizing relative to the rest of the components in the article series.</p>

<p>In order to achieve the desired effect, the component was refactored to make the SVG “blob” a sibling of the video
wrapped inside a parent div with a fixed height. The parent div received a height equal to 100% of the viewport
width divided by the video’s aspect ratio–16:9. This prevents the video from being visible outside the borders of
the SVG. Et voila!</p>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">SubseriesWrapper</span> <span class="o">=</span> <span class="nx">styled</span><span class="p">(</span><span class="nx">Flex</span><span class="p">)</span><span class="s2">`
  flex-direction: row;
  position: relative;
  z-index: -2;
  /* 16 x 9 aspect ratio */
  height: calc(100vw * 0.56);
`</span>
</code></pre></div></div>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;SubseriesWrapper&gt;</span>
  <span class="nt">&lt;SubseriesSVGWrapper&gt;</span>
    <span class="nt">&lt;svg</span> <span class="na">viewBox=</span><span class="s">"0 0 1600 900"</span> <span class="na">xmlns=</span><span class="s">"http://www.w3.org/2000/svg"</span> <span class="na">fill=</span><span class="s">"FFF"</span> <span class="na">width=</span><span class="s">"100vw"</span><span class="nt">&gt;</span>
      <span class="nt">&lt;path</span> <span class="na">d=</span><span class="s">"M0,0V900H1600V0ZM1489.83,896.43,146.61,805.5,47.2,182.84,320,4.17l874.07,86,360.06,148Z"</span> <span class="nt">/&gt;</span>
    <span class="nt">&lt;/svg&gt;</span>
    <span class="nt">&lt;VanguardSubseriesVideoWrapper&gt;</span>
      <span class="nt">&lt;VanguardSubseriesVideo</span> <span class="na">autoPlay</span> <span class="na">loop</span> <span class="na">muted</span> <span class="na">playsInline</span> <span class="na">controls=</span><span class="s">"{false}"</span> <span class="na">src=</span><span class="s">"{props.url}"</span> <span class="nt">/&gt;</span>
    <span class="nt">&lt;/VanguardSubseriesVideoWrapper&gt;</span>
  <span class="nt">&lt;/SubseriesSVGWrapper&gt;</span>
<span class="nt">&lt;/SubseriesWrapper&gt;</span>
</code></pre></div></div>

<h1 id="final-thoughts">Final Thoughts</h1>

<p>One of the biggest non-technical takeaways for me was the importance of becoming skilled at thinking like a product
manager while approaching engineering work. Engineers that do this well are adept at balancing many
responsibilities–scoping out the amount of engineering work involved in producing a deliverable, communicating
technical information to non-technical team members, managing expectations and (sometimes) competing interests when
working on cross-teams projects, gracefully informing stakeholders that the scope of a project will have to be
limited in order to deliver an MVP, among others. Doing these things well is hard, and furthermore not something we
learn in computer science or engineering programs; yet is a requisite, in my opinion, to be an effective engineer.
I’m grateful for the opportunity to have collaborated with others on this year’s Artsy Vanguard and to have been
given the chance to develop these skills.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Where art thou, my error?]]></title>
    <link href="https://artsy.github.io/blog/2018/10/19/where-art-thou-my-error/"/>
    <updated>2018-10-19T00:00:00+00:00</updated>
    <id>https://artsy.github.io/blog/2018/10/19/where-art-thou-my-error</id>
    <content type="html"><![CDATA[<p><em>Note: This is the text of a presentation given at <a href="https://graphql-finland.fi">GraphQL Finland 2018</a>, as such the
language may in some cases be slightly awkward for a blog post. You can find those slides on
<a href="https://speakerdeck.com/alloy/where-art-thou-my-error">Speaker Deck</a>.</em></p>

<p>GraphQL is still in its early stages and thus these are very exciting times, indeed! Traditionally the GraphQL team
has taken the approach of defining the bare minimum in the specification that was deemed needed and otherwise
letting the community come-up with defining problems and experimenting with solutions for those. One such example
is how metadata about the location in the graph where errors occurred during execution were <a href="https://github.com/facebook/graphql/pull/230">added to the
specification</a>.</p>

<p>This is great in the sense that we still have the ability, as a community, to shape the future of a GraphQL
specification that we all <em>want</em> to use, but on the other hand it also means that we may need to spend significant
amounts of time on thinking about these problems and iterating. Seeing as we all strive to have backwards
compatible schemas, it’s of great importance that we know of the various iterations that people have experimented
with and what the outcome was.</p>

<p>This is our story of thinking about and working with errors, thus far.</p>

<!-- more -->

<p>NOTE: Throughout this talk I’ll use ‘query execution’ to indicate executing a GraphQL document, be it a query or
mutation operation. I have a hard time relating to ‘document execution’, mostly because I don’t see others using
it, but perhaps I’ve just missed it. Come at me, at the bar, and set me straight!</p>

<h2 id="errors-vs-errors">Errors vs errors</h2>

<p>First of all, I want to take a step back and talk about errors in general. The nomenclature around these can get
confusing, suffice to say that during this session we’ll talk about these two types:</p>

<ul>
  <li>
    <p>Errors that occur during query execution, that were unexpected, and <em>could</em> lead to corrupted data. We’ll refer
to these as (top-level) ‘GraphQL errors’, going forward.</p>

    <p>These could be due to hardware failures, such as running out of memory or disk space, network failures, or
unexpected upstream data etc.</p>

    <p>When these occur, <code class="language-plaintext highlighter-rouge">graphql-js</code> will return <code class="language-plaintext highlighter-rouge">null</code> for the field that triggered the error and serialize the error
into the top-level <code class="language-plaintext highlighter-rouge">errors</code> list, next to the successful response <code class="language-plaintext highlighter-rouge">data</code>. (Presumably other implementations
follow this reference implementation.)</p>
  </li>
</ul>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"data"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"artwork"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="nl">"artist"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
        </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Vincent van Gogh"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"leftEarSize"</span><span class="p">:</span><span class="w"> </span><span class="kc">null</span><span class="w">
      </span><span class="p">}</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">},</span><span class="w">
  </span><span class="nl">"errors"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
    </span><span class="p">{</span><span class="w">
      </span><span class="nl">"message"</span><span class="p">:</span><span class="w"> </span><span class="s2">"An unexpected error occurred"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"path"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">"artwork"</span><span class="p">,</span><span class="w"> </span><span class="s2">"artist"</span><span class="p">,</span><span class="w"> </span><span class="s2">"leftEarSize"</span><span class="p">]</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">]</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<ul>
  <li>
    <p>Exceptions to these are errors that are <em>known</em> to occur and are expected to be handled by the user of an API.
We’ll refer to these as ‘exceptions’, going forward.</p>

    <p>By default these are treated equally by <code class="language-plaintext highlighter-rouge">graphql-js</code> to top-level GraphQL errors, if uncaught.</p>
  </li>
</ul>

<p>We will <strong>not</strong> be speaking about errors that occur <em>outside</em> of query execution, such as network failures reaching
the GraphQL server, parsing a syntactically incorrect document, or passing variables that don’t satisfy the
type-system; as these will all lead to a query being rejected wholesale and are solve-able using traditional means,
such as a <code class="language-plaintext highlighter-rouge">4xx</code> HTTP status code or <code class="language-plaintext highlighter-rouge">5xx</code> in some cases.</p>

<h2 id="what-is-the-problem-were-trying-to-solve">What is the problem we’re trying to solve?</h2>

<p>Because with GraphQL we’re usually requesting data for multiple resources, there may be a situation where some
fields resolve successfully and some may fail. This is also why, when using an HTTP transport layer, the advice is
to always respond with a HTTP 200 (ok) status. Determining how to process the response is left up to the client.</p>

<p>So how <em>do</em> we model errors in such a way that they can be meaningful and in context of their origin?</p>

<ul>
  <li>
    <p>What if you want to render partial data?</p>

    <ul>
      <li>
        <p>Maybe the failed data is unrelated to other components that you were also requesting data for.</p>

        <p><img src="/images/2018-10-19-where-art-thou-my-error/partial-data-unrelated-annotated.png" alt="Unrelated component" /></p>
      </li>
      <li>
        <p>Or the data that failed was part of a list and other entries can still be rendered just fine.</p>

        <p><img src="/images/2018-10-19-where-art-thou-my-error/partial-data-list-annotated.png" alt="Partial list data" /></p>
      </li>
    </ul>
  </li>
  <li>
    <p>Or what if you’d (additionally) like to communicate the error in your interface?</p>

    <ul>
      <li>
        <p>When the query is in response to a mutation and you’d like to communicate input validation failures.</p>

        <p><img src="/images/2018-10-19-where-art-thou-my-error/mutation-validation-error.png" alt="Surface validation error" /></p>
      </li>
    </ul>
  </li>
</ul>

<h2 id="possible-solutions">Possible solutions</h2>

<h3 id="top-level-graphql-errors-and-treating-an-entire-response-as-unusable-when-such-errors-exist">Top-level GraphQL errors and treating an entire response as unusable when such errors exist</h3>

<p>Some clients, such as Apollo and Relay Classic, have made the decision to reject a response entirely, by default,
if any top-level GraphQL errors exist. This is because clients can really only fully assume that the response data
is incomplete, not whether or not your application could handle that case.</p>

<p>This may be an ok solution when you’re starting out or all the requested data is part of a single holistic view,
but it quickly breaks down when you want a little more than that.</p>

<h3 id="top-level-graphql-errors-with-extra-metadata">Top-level GraphQL errors with extra metadata</h3>

<p>GraphQL errors only have a single field in <a href="https://facebook.github.io/graphql/draft/#sec-Errors">the specification</a> to provide context around the cause of
the error, which is the <code class="language-plaintext highlighter-rouge">message</code> field. However, <a href="https://facebook.github.io/graphql/draft/#sec-Response-Format">the specification</a> also defines a top-level
<code class="language-plaintext highlighter-rouge">extensions</code> key, which may hold a map of freeform data for the schema implementors to extend the protocol however
they see fit.</p>

<p>Apollo Server 2.0, for instance, <a href="https://blog.apollographql.com/full-stack-error-handling-with-graphql-apollo-5c12da407210">introduced standardized errors</a> you can throw from your
resolvers, which end up being serialized into the <code class="language-plaintext highlighter-rouge">extensions</code> map. An example they give is for bad user input:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">UserInputError</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">apollo-server</span><span class="dl">"</span>

<span class="kd">const</span> <span class="nx">resolvers</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">Query</span><span class="p">:</span> <span class="p">{</span>
    <span class="nx">events</span><span class="p">(</span><span class="nx">root</span><span class="p">,</span> <span class="p">{</span> <span class="nx">zipCode</span> <span class="p">})</span> <span class="p">{</span>
      <span class="c1">// do custom validation for user inputs</span>
      <span class="kd">const</span> <span class="nx">validationErrors</span> <span class="o">=</span> <span class="p">{}</span>
      <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">isValidZipCode</span><span class="p">(</span><span class="nx">zipCode</span><span class="p">))</span> <span class="p">{</span>
        <span class="nx">validationErrors</span><span class="p">.</span><span class="nx">zipCode</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">This is not a valid zipcode</span><span class="dl">"</span>
      <span class="p">}</span>
      <span class="k">if</span> <span class="p">(</span><span class="nb">Object</span><span class="p">.</span><span class="nx">keys</span><span class="p">(</span><span class="nx">validationErrors</span><span class="p">).</span><span class="nx">length</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">throw</span> <span class="k">new</span> <span class="nx">UserInputError</span><span class="p">(</span><span class="dl">"</span><span class="s2">Failed to get events due to validation errors</span><span class="dl">"</span><span class="p">,</span> <span class="p">{</span> <span class="nx">validationErrors</span> <span class="p">})</span>
      <span class="p">}</span>
      <span class="c1">// actually query events here and return successfully</span>
      <span class="k">return</span> <span class="nx">getEventsByZipcode</span><span class="p">(</span><span class="nx">zipCode</span><span class="p">)</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Seeing as these extensions are freeform, however, this builds an <strong>implicit</strong> contract between the server and
client that then needs to be abstracted away by additional client code. This is unfortunate, when you think about
it, because GraphQL is meant to explicitly express shapes of data.</p>

<p>The Apollo team acknowledges this by adding:</p>

<blockquote>
  <p>While convenient, the weakness of this approach is that the format of the validation error messages is not
captured by your schema, making it brittle to changes. Unless you maintain tight control of both server and
client, you should keep the error responses as simple as possible.</p>

  <p>For mutations, it can be worthwhile defining these validation errors as first class citizens within your schema.</p>
</blockquote>

<p>(Which we’ll address next.)</p>

<h3 id="make-mutation-error-metadata-part-of-schema-as-separate-fields">Make (mutation) error metadata part of schema as separate fields</h3>

<p>One <a href="https://www.apollographql.com/docs/guides/schema-design.html#mutation-responses">commonly suggested approach</a> around mutations is to define status metadata on the
response type next to the field of the affected entity. For example, a response type could look like:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>type UpdateArtworkMutationResponse {
  success: Boolean!
  message: String!
  artwork: Artwork
}
</code></pre></div></div>

<p>Here there’s a boolean that indicates success, an extra message that sheds context on the situation when a failure
occurs, and finally the <code class="language-plaintext highlighter-rouge">artwork</code> that an update was attempted to be made to.</p>

<p>Adding these fields to the same namespace makes sense when we’re thinking of the failure case, but what about the
success case? Do we really need a <code class="language-plaintext highlighter-rouge">success</code> boolean to indicate that updates to the <code class="language-plaintext highlighter-rouge">artwork</code> were made? What
purpose serves the <code class="language-plaintext highlighter-rouge">message</code> field, other than possibly being a sign of an overly positive schema that sends you
happy messages?</p>

<p>Finally, this approach only really works for mutations, as their return type acts as a distinct root type to start
a query from. It would be hard to imagine how to apply this to queries.</p>

<h3 id="make-error-metadata-part-of-schema-as-separate-field">Make error metadata part of schema as separate field</h3>

<p>Similarly, <a href="https://itnext.io/the-definitive-guide-to-handling-graphql-errors-e0c58b52b5e1">another suggested approach</a> is to add an additional <code class="language-plaintext highlighter-rouge">error</code> field to the type in
question, which then describes the error that occurred. The previous example could be rewritten like so:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>type GenericError {
  message: String!
}

type UpdateArtworkMutationResponse {
  error: GenericError
  artwork: Artwork
}
</code></pre></div></div>

<p>If <code class="language-plaintext highlighter-rouge">error</code> is not <code class="language-plaintext highlighter-rouge">null</code>, something went wrong. This cleans up the namespace a bit, but more importantly this
approach can be applied to queries too:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>type PublishedArtworkNotification {
  artwork: Artwork
}

type PublishedArtworkNotificationsPayload {
  error: GenericError
  notifications: [PublishedArtworkNotification]
}

type Query {
  publishedArtworkNotificationsPayload: PublishedArtworkNotificationsPayload!
}
</code></pre></div></div>

<p>Neat.</p>

<p>However, and this may just be our use-case, we don’t have partial data at these stages. We’ve either resolved the
data or we have an error. Hence, this approach would mean we’d always have an unneeded <code class="language-plaintext highlighter-rouge">null</code> field, which pollutes
the namespace of the type unnecessarily.</p>

<p>Side-note: if you don’t control the server schema, and are using a client that can extend a server schema on the
client, you could try to retrofit top-level GraphQL errors to these suggested error fields into the schema where
they occurred based on the error <code class="language-plaintext highlighter-rouge">path</code>, as shown <a href="https://github.com/facebook/relay/issues/1913#issuecomment-358636018">here</a>.</p>

<h2 id="recap">Recap</h2>

<p>So to quickly recap, ideally we want a solution to:</p>

<ul>
  <li>Use GraphQL: Utilize GraphQL to explicitly describe the error data.</li>
  <li>In context: Present the error data exactly where the error occurred in the schema.</li>
  <li>All operations: Work for both mutations and queries.</li>
  <li>Explicit status: Be concise and encourage ‘clean’ types; that is, no pollution of namespaces with fields only
needed in some cases.</li>
</ul>

<h3 id="make-exceptions-first-class-citizens-of-your-schema">Make exceptions first-class citizens of your schema</h3>

<p>To that end, the final approach we’ll be discussing, and the one that we at Artsy have started adopting, is to give
exceptions their own type and return those instead of the success type, when they occur. To do this we make use of
a union of both the success and the exception type (or multiples thereof) and then query for those.</p>

<p>The benefits are:</p>

<ul>
  <li>
    <p>You can further model the exception in an explicit and introspect-able way.</p>

    <p>For example, in the case of an HTTP failure to an upstream service, your exception type could include an integer
status-code field and document it as such.</p>
  </li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>type Artwork {
  title: String!
}

type HTTPError {
  message: String!
  statusCode: Int!
}

union ArtworkOrError = Artwork | HTTPError

type Query {
  artworkOrError(id: ID!): ArtworkOrError
}
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>query {
  artworkOrError("mona-lisa") {
    ... on Artwork {
      title
    }
    ... on HTTPError {
      statusCode
    }
  }
}
</code></pre></div></div>

<ul>
  <li>You know exactly where the exception occurred in the graph.</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>type Artist {
  artworksOrErrors: [ArtworkOrError]
}

type Query {
  artist(id: ID!): Artist
}
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>query {
  artist("leonardo-da-vinci") {
    artworksOrErrors {
      ... on Artwork {
        title
      }
      ... on HTTPError {
        statusCode
      }
    }
  }
}
</code></pre></div></div>

<ul>
  <li>You can use it for both mutations and queries.</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>type UpdateArtworkMutationResponse {
  artworkOrError: ArtworkOrError
}
</code></pre></div></div>

<ul>
  <li>All fields will always be captured in the single <code class="language-plaintext highlighter-rouge">artworkOrError</code> field <em>or</em>, if no information about the error
is needed, you simply don’t query for it and get back <code class="language-plaintext highlighter-rouge">null</code> instead.</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>query {
  artworkOrError("mona-lisa") {
    ... on Artwork {
      title
    }
  }
}
</code></pre></div></div>

<h2 id="how-we-encode-it-into-our-schema">How we encode it into our schema</h2>

<p>I should preface this by clearly stating that while have been thinking about this problem for a while now, only
recently have we started rolling these changes out into our schema, so some of these are not yet discoverable in
<a href="http://github.com/artsy/metaphysics">our open-source GraphQL service</a>.</p>

<h3 id="types">Types</h3>

<p>As shown before, we define a union of the actual result type <em>and</em> the error type. However, we additionally (will)
define a set of error interfaces, which make it possible for clients to query for errors in a more generic way.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>interface Error {
  message: String!
}

interface HTTPError {
  message: String!
  statusCode: Int!
}

type HTTPErrorType implements Error &amp; HTTPError {
  message: String!
  statusCode: Int!
}

type Artwork {
  title: String!
}

union ArtworkOrError = Artwork | HTTPErrorType

type Query {
  artworkOrError(id: ID!): ArtworkOrError
}
</code></pre></div></div>

<p>We can now still query as shown in the earlier examples:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>query {
  artworkOrError("mona-lisa") {
    ... on Artwork {
      title
    }
    ... on HTTPError {
      message
      statusCode
    }
  }
}
</code></pre></div></div>

<p>…but we can now also have generic error components that would query like so:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>query {
  artworkOrError("mona-lisa") {
    ... on Artwork {
      title
    }
    ...GenericErrorComponent
    ...GenericHTTPErrorComponent
  }
}

fragment GenericErrorComponent on Error {
  message
}

fragment GenericHTTPErrorComponent on HTTPError {
  message
  statusCode
}
</code></pre></div></div>

<p>For the record, we have <em>not</em> yet put these interfaces into production, so the nomenclature is not set in stone yet
and I’d love to hear your input on this. Is <code class="language-plaintext highlighter-rouge">Error</code> <em>too</em> generic to use as the base error type? Is there a nicer
naming pattern that would allow us to avoid having to suffix concrete types of an error interface with <code class="language-plaintext highlighter-rouge">...Type</code>?</p>

<p>Side-note: there’s <a href="https://github.com/facebook/graphql/pull/373">an RFC</a> to the GraphQL specification that would make it possible to
have interfaces implement other interfaces, thus removing the need to keep repeating the fields of
super-interfaces. This RFC has recently been moved to the draft stage, yay!</p>

<h3 id="field-naming">Field naming</h3>

<p>As you may have noticed, we’re calling these fields <code class="language-plaintext highlighter-rouge">something</code> <em>or</em> <code class="language-plaintext highlighter-rouge">error</code>. We are mostly doing this to stay
backwards compatible with our existing schema. While we could certainly add exception types to existing union
fields, we can’t change a single type field into a union type field without breaking compatibility.</p>

<p>Instead we may now have 2 versions of a given field:</p>

<ul>
  <li>one with the single type field which is nullable, in case an exception occurred</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>query {
  artwork("mona-lisa") {
    title
  }
}
</code></pre></div></div>

<ul>
  <li>and another that has the error union type</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>query {
  artworkOrError("mona-lisa") {
    ... on Artwork {
      title
    }
    ... on HTTPError {
      statusCode
    }
  }
}
</code></pre></div></div>

<p>This duplication is slightly unfortunate, from a clean schema design perspective, but it’s similar to an existing
pattern in the community. For instance, many schemas provide 2 ways to retrieve lists:</p>

<ul>
  <li>one as an immediate list:</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>type Query {
  artworks: [Artwork]
}
</code></pre></div></div>

<ul>
  <li>and one as a ‘connection’ (as defined by the <a href="https://facebook.github.io/relay/graphql/connections.htm">Relay Connection specification</a>)</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>type ArtworkEdge {
  node: Artwork
}

type ArtworksConnection {
  edges: [ArtworkEdge]
}

type Query {
  artworksConnection: ArtworksConnection
}
</code></pre></div></div>

<p>So the jury is still out on whether or not that’s a bad way to name things. We’ll have to see after using this for a
while.</p>

<h3 id="downside-of-using-a-union">Downside of using a union</h3>

<p>One notable downside is that GraphQL scalar types can <em>not</em> be included in unions. Thus, if you have scalar fields
that could lead to exceptions, you will have to ‘box’ those in object types.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>type ArtworkPurchasableBox {
  value: Boolean!
}

union ArtworkPurchasableOrError = ArtworkPurchasableBox | HTTPError

type Artwork {
  currentlyPurchasableOrError: ArtworkPurchasableOrError
}
</code></pre></div></div>

<p>This is definitely a case where the pattern of defining 2 fields, one with and one without exception types, comes
in handy. Having to always query through the box type is inelegant, to put it softly.</p>

<p>Side-note: there actually is <a href="https://github.com/facebook/graphql/issues/215">an open RFC</a> to the specification to allow scalars in unions, but
it’s still in stage 0 and is in need of a champion in order to proceed. We may end up trying to do so, based on our
actual experiences with these cases where they may need to be boxed.</p>

<h3 id="example-of-how-we-consume-query-errors">Example of how we consume query errors</h3>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">OrderStatus_order</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">__generated__/OrderStatus_order.graphql</span><span class="dl">"</span>
<span class="k">import</span> <span class="nx">React</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react</span><span class="dl">"</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">createFragmentContainer</span><span class="p">,</span> <span class="nx">graphql</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react-relay</span><span class="dl">"</span>

<span class="kr">interface</span> <span class="nx">Props</span> <span class="p">{</span>
  <span class="nl">order</span><span class="p">:</span> <span class="nx">OrderStatus_order</span>
<span class="p">}</span>

<span class="kd">const</span> <span class="nx">OrderStatus</span><span class="p">:</span> <span class="nx">React</span><span class="p">.</span><span class="nx">SFC</span><span class="o">&lt;</span><span class="nx">Props</span><span class="o">&gt;</span> <span class="o">=</span> <span class="p">({</span> <span class="na">order</span><span class="p">:</span> <span class="nx">orderStatusOrError</span> <span class="p">})</span> <span class="o">=&gt;</span>
  <span class="nx">orderStatusOrError</span><span class="p">.</span><span class="nx">__typename</span> <span class="o">===</span> <span class="dl">"</span><span class="s2">OrderStatus</span><span class="dl">"</span> <span class="p">?</span> <span class="p">(</span>
    <span class="o">&lt;</span><span class="nx">div</span><span class="o">&gt;</span>
      <span class="p">{</span><span class="nx">orderStatusOrError</span><span class="p">.</span><span class="nx">deliveryDispatched</span>
        <span class="p">?</span> <span class="dl">"</span><span class="s2">Your order has been dispatched.</span><span class="dl">"</span>
        <span class="p">:</span> <span class="dl">"</span><span class="s2">Your order has not been dispatched yet.</span><span class="dl">"</span><span class="p">}</span>
    <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>  <span class="p">)</span> <span class="p">:</span> <span class="p">(</span>
    <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">error</span><span class="dl">"</span><span class="o">&gt;</span>
      <span class="p">{</span><span class="nx">orderStatusOrError</span><span class="p">.</span><span class="nx">code</span> <span class="o">===</span> <span class="dl">"</span><span class="s2">unpublished</span><span class="dl">"</span>
        <span class="p">?</span> <span class="dl">"</span><span class="s2">Please contact gallery services.</span><span class="dl">"</span>
        <span class="p">:</span> <span class="s2">`An unexpected error occurred: </span><span class="p">${</span><span class="nx">orderStatusOrError</span><span class="p">.</span><span class="nx">message</span><span class="p">}</span><span class="s2">`</span><span class="p">}</span>
    <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>  <span class="p">)</span>

<span class="k">export</span> <span class="kd">const</span> <span class="nx">OrderStatusContainer</span> <span class="o">=</span> <span class="nx">createFragmentContainer</span><span class="p">(</span>
  <span class="nx">OrderStatus</span><span class="p">,</span>
  <span class="nx">graphql</span><span class="s2">`
    fragment OrderStatus_order on Order {
      orderStatusOrError {
        __typename
        ... on OrderStatus {
          deliveryDispatched
        }
        ... on OrderError {
          message
          code
        }
      }
    }
  `</span>
<span class="p">)</span>
</code></pre></div></div>

<h3 id="example-of-how-we-consume-mutation-errors">Example of how we consume mutation errors</h3>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">SubmitOrder_order</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">__generated__/SubmitOrder_order.graphql</span><span class="dl">"</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">SubmitOrderMutation</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">__generated__/SubmitOrderMutation.graphql</span><span class="dl">"</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">Router</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">found-relay</span><span class="dl">"</span>
<span class="k">import</span> <span class="nx">React</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react</span><span class="dl">"</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">commitMutation</span><span class="p">,</span> <span class="nx">createFragmentContainer</span><span class="p">,</span> <span class="nx">graphql</span><span class="p">,</span> <span class="nx">RelayProp</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react-relay</span><span class="dl">"</span>

<span class="kr">interface</span> <span class="nx">Props</span> <span class="p">{</span>
  <span class="nl">order</span><span class="p">:</span> <span class="nx">SubmitOrder_order</span>
  <span class="nx">relay</span><span class="p">:</span> <span class="nx">RelayProp</span>
  <span class="nx">router</span><span class="p">:</span> <span class="nx">Router</span>
<span class="p">}</span>

<span class="kd">const</span> <span class="nx">SubmitOrder</span><span class="p">:</span> <span class="nx">React</span><span class="p">.</span><span class="nx">SFC</span><span class="o">&lt;</span><span class="nx">Props</span><span class="o">&gt;</span> <span class="o">=</span> <span class="nx">props</span> <span class="o">=&gt;</span> <span class="p">(</span>
  <span class="o">&lt;</span><span class="nx">button</span>
    <span class="nx">onClick</span><span class="o">=</span><span class="p">{()</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="nx">commitMutation</span><span class="o">&lt;</span><span class="nx">SubmitOrderMutation</span><span class="o">&gt;</span><span class="p">(</span><span class="nx">props</span><span class="p">.</span><span class="nx">relay</span><span class="p">.</span><span class="nx">environment</span><span class="p">,</span> <span class="p">{</span>
        <span class="na">mutation</span><span class="p">:</span> <span class="nx">graphql</span><span class="s2">`
          mutation SubmitOrderMutation($input: SubmitOrder!) {
            submitOrder(input: $input) {
              orderStatusOrError {
                __typename
                ... on OrderStatus {
                  submitted
                }
                ... on OrderError {
                  message
                  code
                }
              }
            }
          }
        `</span><span class="p">,</span>
        <span class="na">variables</span><span class="p">:</span> <span class="p">{</span> <span class="na">input</span><span class="p">:</span> <span class="p">{</span> <span class="na">orderID</span><span class="p">:</span> <span class="nx">props</span><span class="p">.</span><span class="nx">order</span><span class="p">.</span><span class="nx">id</span> <span class="p">}</span> <span class="p">},</span>
        <span class="na">onCompleted</span><span class="p">:</span> <span class="p">({</span> <span class="na">submitOrder</span><span class="p">:</span> <span class="p">{</span> <span class="nx">orderStatusOrError</span> <span class="p">}</span> <span class="p">},</span> <span class="nx">errors</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
          <span class="k">if</span> <span class="p">(</span><span class="nx">orderStatusOrError</span><span class="p">.</span><span class="nx">__typename</span> <span class="o">===</span> <span class="dl">"</span><span class="s2">OrderStatus</span><span class="dl">"</span><span class="p">)</span> <span class="p">{</span>
            <span class="nx">props</span><span class="p">.</span><span class="nx">router</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span>
              <span class="s2">`/orders/</span><span class="p">${</span><span class="nx">props</span><span class="p">.</span><span class="nx">order</span><span class="p">.</span><span class="nx">id</span><span class="p">}</span><span class="s2">/</span><span class="p">${</span><span class="nx">orderStatusOrError</span><span class="p">.</span><span class="nx">submitted</span> <span class="p">?</span> <span class="dl">"</span><span class="s2">submitted</span><span class="dl">"</span> <span class="p">:</span> <span class="dl">"</span><span class="s2">pending</span><span class="dl">"</span><span class="p">}</span><span class="s2">`</span>
            <span class="p">)</span>
          <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="nx">alert</span><span class="p">(</span>
              <span class="nx">orderStatusOrError</span><span class="p">.</span><span class="nx">code</span> <span class="o">===</span> <span class="dl">"</span><span class="s2">unpublished</span><span class="dl">"</span>
                <span class="p">?</span> <span class="dl">"</span><span class="s2">Please contact gallery services.</span><span class="dl">"</span>
                <span class="p">:</span> <span class="s2">`An unexpected error occurred: </span><span class="p">${</span><span class="nx">orderStatusOrError</span><span class="p">.</span><span class="nx">message</span><span class="p">}</span><span class="s2">`</span>
            <span class="p">)</span>
          <span class="p">}</span>
        <span class="p">}</span>
      <span class="p">})</span>
    <span class="p">}}</span>
  <span class="sr">/</span><span class="err">&gt;
</span><span class="p">)</span>

<span class="k">export</span> <span class="kd">const</span> <span class="nx">SubmitOrderContainer</span> <span class="o">=</span> <span class="nx">createFragmentContainer</span><span class="p">(</span>
  <span class="nx">SubmitOrder</span><span class="p">,</span>
  <span class="nx">graphql</span><span class="s2">`
    fragment SubmitOrder_order on Order {
      id
    }
  `</span>
<span class="p">)</span>
</code></pre></div></div>

<!--

### Show example of factory code that produces both single and union typed fields

TODO

-->

<h2 id="final-thoughts">Final thoughts</h2>

<p>As stated before, we having only recently begun rolling out these changes into our production schema. However, much
thought and experimentation has gone into this to ensure we will be able to address all of <em>our</em> needs, at least.</p>

<p>I would love to hear other people’s thoughts on this and definitely feedback if they try to adopt it themselves. As
a community we should openly iterate together, as much as possible, as we try to make the future of GraphQL a great
one and put legit questions to ‘REST’ ;)</p>

<p>For now, I’ll leave you with this message from some internet ‘rando’:</p>

<blockquote>
  <p>@alloy That diff makes a lot of sense to me. I’ve also seen user errors as a field on the mutation result, but I
like that union makes it explicit that there was either success or failure and in the case of failure provides
rich information that’s in your app’s domain.</p>
</blockquote>

<p>– <a href="https://twitter.com/leeb/status/1020054709694943232">Lee Byron</a></p>

]]></content>
  </entry>
  
</feed>
