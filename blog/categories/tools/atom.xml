<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: tools | Artsy Engineering]]></title>
  <link href="https://artsy.github.io/blog/categories/tools/atom.xml" rel="self"/>
  <link href="https://artsy.github.io/"/>
  <updated>2024-10-30T17:33:51+00:00</updated>
  <id>https://artsy.github.io/</id>
  <author>
    <name><![CDATA[]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Strategies For Small, Focused Pull Requests]]></title>
    <link href="https://artsy.github.io/blog/2021/03/09/strategies-for-small-focused-pull-requests/"/>
    <updated>2021-03-09T00:00:00+00:00</updated>
    <id>https://artsy.github.io/blog/2021/03/09/strategies-for-small-focused-pull-requests</id>
    <content type="html"><![CDATA[<p>A common suggestion for improving pull requests (PRs) is to ‚Äúmake your PR small and focused‚Äù. I myself gave this suggestion in <a href="https://artsy.github.io/blog/2020/08/11/improve-pull-requests-by-including-valuable-context/">a recent article on this very blog about including context in PRs</a>.</p>

<p>Like most internet advice, this can feel like the <a href="https://knowyourmeme.com/memes/how-to-draw-an-owl">‚Äúdraw the rest of the owl‚Äù</a> meme. Even if we‚Äôre in agreement that I <em>should</em> make a PR smaller‚Ä¶<strong><em>how</em></strong> do I do it? How do I avoid a big PR when there‚Äôs a lot of cross-cutting changes to make? How do I create small, focused units of work when I‚Äôm building a large feature? How can I overcome my perfectionism and submit a PR that feels incomplete to me because the edges aren‚Äôt all polished?</p>

<!-- more -->

<h2 id="what-is-small-and-focused">What is ‚Äúsmall and focused‚Äù?</h2>

<p>Not all small PRs are focused. I might sneak five unrelated one-line changes into a PR. While it feels like that will enable me to move quickly, it also runs the risk of four unrelated changes being held up in review because the other is controversial.</p>

<p>Not all focused PRs are small. I might put an entire feature in one PR, and while it is focused, it‚Äôs still going to be difficult for you to review the large amount of changes thoroughly.</p>

<p>To make our PR reviewers‚Äô jobs easier, we‚Äôre looking for the intersection of small <em>and</em> focused. Changes that are cohesive and without distractions. Code that accomplishes one small thing.</p>

<p>Note that the recommendation for ‚Äúsmall and focused‚Äù PRs does <strong>not</strong> include the word ‚Äúcomplete‚Äù. I‚Äôm a perfectionist and I like my work to be very polished before it‚Äôs done, but when we‚Äôre iterating quickly the polish can come in a follow-up PR. This is the biggest challenge I‚Äôve had as an Artsy engineer ‚Äî finding the balance between polish and iteration. Artsy‚Äôs core values include <a href="https://github.com/artsy/README/blob/ccfbba13ead7cb6586d2d9bf088e5180907be07b/culture/what-is-artsy.md#impact-over-perfection">Impact Over Perfection</a> but my personal values include ‚Äúmake things <em>real good</em>‚Äù and it can be hard for me to navigate that tension.</p>

<h3 id="integrating-code-a-little-at-a-time">Integrating code a little at a time</h3>

<p>A caveat: the recommendations in this article assume you can integrate code a little bit at a time. I‚Äôve worked on teams and projects where we used very long-lived branches for features or even epic ‚Äî I know those environments exist. This article is probably not the one that will convince you to move to <a href="https://trunkbaseddevelopment.com/">trunk-based development</a>; it also might be less useful without trunk-based development.</p>

<p>Having said that, even with long-lived feature branches you can introduce code <em>into those branches</em> a little bit at a time. PRs can be opened against <em>any</em> branch, not just <code class="language-plaintext highlighter-rouge">main</code>.</p>

<p>A couple strategies we use at Artsy for integrating code a little bit at a time:</p>

<ul>
  <li><strong><a href="https://trunkbaseddevelopment.com/feature-flags/">Feature toggles</a></strong>. <a href="https://artsy.github.io/blog/2020/12/31/echo-supporting-old-app-versions/">Ash wrote about Echo</a>, a service for toggling features on mobile devices, but we have additional ways for enabling/disabling features at the system <em>or</em> user level. When we introduce new code we can hide it behind a feature flag until we‚Äôre ready for everyone to see it.</li>
  <li><strong>‚ÄúHidden‚Äù routes</strong>. Often when we redesign or modernize an existing route on Artsy.net we‚Äôll create a <em>second</em> similar route. We hide the in-progress page behind that new route and don‚Äôt share it until it‚Äôs ready. ü§´</li>
</ul>

<p>Armed with tools for integrating code incrementally, here are some strategies for reducing the size and scope of a PR. I‚Äôm not suggesting you use these strategies universally, but if you think you‚Äôre headed toward a very large PR, these are some things to try.</p>

<h2 id="start-with-small-scope--slice-your-stories-small">Start with small scope ‚Äî slice your stories small</h2>

<p>One of the most valuable lessons I learned as a consultant with a company focused on agile development is that you can almost always slice a story smaller. You can do this by sacrificing quality, but you can also (and probably should) do it by cutting scope. We can ship a new screen for our app sooner if we focus on building the most absolutely critical features first, and follow up with the valuable-but-not-critical features later.</p>

<p>There are many ways to break a story smaller, and all of them enable you to integrate code sooner in the form of smaller PRs:</p>

<ul>
  <li>Separate CRUD (Create, Read, Update, Delete) operations and ship them one at a time</li>
  <li>Separate by user role</li>
  <li>Separate individual edge cases</li>
  <li>Separate a simplified experience from an enhanced version</li>
</ul>

<p>Think of these smaller scoped features as self-contained vertical slices of functionality. As each one is released, users can take advantage of them, and your team can start building the next slice.</p>

<h2 id="pr-by-architectural-layer">PR by architectural layer</h2>

<p>Rather than building an entire feature end-to-end before creating a pull request, consider integrating one layer at a time. Embrace the boundaries between the front and back ends of your code ‚Äî submit a PR to introduce changes to the API, and once it‚Äôs merged follow up with another PR to introduce changes to the UI.</p>

<p>Depending on the architecture of your system, you might already be forced to this. At Artsy, our <a href="https://github.com/artsy/force">web app lives in one repo</a>, our <a href="https://github.com/artsy/metaphysics">GraphQL endpoint lives in another</a>, and many services are separated into repositories behind that. We <em>must</em> integrate our features one layer at a time. Here‚Äôs an example where <a href="https://artsy.github.io/author/matt/">Matt</a> <a href="https://github.com/artsy/metaphysics/pull/2819/files">added a field to our API</a> in one PR, and <a href="https://github.com/artsy/force/pull/6613">propagated it to the UI</a> in a separate PR. Even if you don‚Äôt have a repository boundary between your API and your UI, splitting PRs at this logical boundary can help make them more digestible.</p>

<p>The suggestion to PR by architectural layer is not in conflict with slicing stories small ‚Äî in fact, these two strategies complement each other nicely. A PR that contains multiple features but only one layer is probably large enough to be difficult to review; so is a PR that contains one feature end-to-end. A PR containing one layer of one feature can be easier to review.</p>

<h2 id="build-a-walking-skeleton">Build a walking skeleton</h2>

<p>A <a href="walking-skeleton">walking skeleton</a> is a bare-bones, stripped down implementation of your feature from end-to-end. It connects the UI all the way to the data source. Very little of the feature is presented, but what is there is fully functional.</p>

<p>Start a new feature with a walking skeleton PR to demonstrate connectivity of the pieces involved. It won‚Äôt do very much ‚Äî maybe it only displays one field ‚Äî but that‚Äôs okay because no one‚Äôs going to see it yet. The important thing is that the moving pieces are all connected ‚Äî the database, the API, the UI.</p>

<p>Once a walking skeleton PR is merged, you can start filling in the skeleton. Each new sub-feature can be its own PR.</p>

<p>This is a great approach if your team is looking to swarm on a feature. If we all work on our own sub-features without first merging a walking skeleton, we‚Äôre likely to face some intense merge conflict headaches when we realize we‚Äôve all connected the full stack in slightly different ways. Starting with a walking skeleton removes a lot of those merge conflicts, because we‚Äôre mostly bolting fields on to existing infrastructure along the way.</p>

<p><a href="https://github.com/artsy/relay-workshop/pull/1">This PR</a> is an example of a walking skeleton. My goal was to stand up an app that connected <a href="https://reactjs.org/">React</a>, <a href="https://relay.dev/">Relay</a>, and <a href="https://www.typescriptlang.org/">TypeScript</a>. <a href="https://github.com/artsy/relay-workshop/pull/1/files#diff-26ad4b834941d9b19ebf9db8082bd202aaf72ea0ddea85f5a8a0cb3c729cc6f2R25">The actual app doesn‚Äôt display very much</a> ‚Äî just enough to prove that the pieces were all working.</p>

<h2 id="separate-riskycontroversial-work-from-routine-work">Separate risky/controversial work from routine work</h2>

<p>It‚Äôs not always possible to identify ahead of time which work will prompt more discussion during review, but sometimes it‚Äôs obvious. Novel work that takes thoughtful consideration of multiple approaches is much more likely to invite feedback than work that follows existing patterns.</p>

<p>Routine implementation can be a noisy distraction in a PR that also contains a unique function that you really want reviewers to see. You should point out the unique bits in the PR body if they‚Äôre combined, but you also might consider separating the less-interesting implementation into its own PR.</p>

<p>The worst review you can get on a PR that contains both novel and routine work is ‚ÄúLGTM!‚Äù (looks good to me). It likely means the reviewer couldn‚Äôt separate the signal from the noise and overlooked the bits that required more thought and effort.</p>

<h2 id="separate-infrastructural-work-from-implementations">Separate infrastructural work from implementations</h2>

<p>A <a href="https://en.wikipedia.org/wiki/T-shaped_skills">t-shaped person</a> is someone with a lot of shallow experience in many areas, and deep expertise in one or a few areas. Their skills are wide at the base, and tall and narrow in their area of focus.</p>

<p>Code can have a similar shape. Infrastructural work tends to be wide and shallow ‚Äî it touches a lot of places in your code, but it doesn‚Äôt go deep in any of them. Implementation work tends to be the opposite ‚Äî it doesn‚Äôt affect the entire app, but it goes very deep for one feature.</p>

<p>We probably review infrastructural changes differently than we review implementation changes:</p>

<ul>
  <li>
    <p>Infrastructural work deserves scrutiny for the abstractions it introduces and how it might affect performance or future implementations. These kinds of changes introduce new patterns to the codebase and we want to make sure they‚Äôre useful and usable patterns.</p>
  </li>
  <li>
    <p>An individual implementation gets more scrutiny on user-facing details. It‚Äôs probably combining <em>existing</em> patterns, so we‚Äôll spend less time looking at abstractions. We‚Äôll spend more time confirming it works for our users.</p>
  </li>
</ul>

<p>When a large PR combines wide, shallow, abstract work with deep, narrow, concrete work, it requires the reviewer to shift between two different mindsets. You might consider breaking your PR into two: one containing the wide infrastructural work, and one containing the deep implementation work. This allows reviewers to focus on abstractions in one PR and user-facing details in the other.</p>

<p>Some examples of infrastructural changes that could be separated from implementation work:</p>

<ul>
  <li>We introduced a seam to the code in order to make room for our implementation.</li>
  <li>We updated a dependency to take advantage of a new feature.</li>
  <li>We refactored before we started our implementation.</li>
</ul>

<h2 id="separating-an-already-large-pr">Separating an already-large PR</h2>

<p>It‚Äôs natural for PRs to grow large. <a href="https://thedecisionlab.com/biases/optimism-bias/">Optimism bias</a> diminishes our ability to estimate work often resulting in more code changes than we expected. A feature seems like it won‚Äôt take much work until you get deeper and find complexity in places you hadn‚Äôt considered. There‚Äôs a lot of uncertainty when you start working on a feature and we‚Äôd need to model the entire problem to completion to know what the PR was going to look like before we started. A PR seems like it will be small until suddenly‚Ä¶it isn‚Äôt anymore.</p>

<p>This is what usually prevents developers from separating PRs ‚Äî by the time you recognize the PRs could be de-tangled, it seems like a lot of effort to de-tangle them.</p>

<p>When you‚Äôve got a PR/branch that contains multiple lines of work and you want to separate them, <a href="https://www.atlassian.com/git/tutorials/rewriting-history/git-rebase"><code class="language-plaintext highlighter-rouge">git rebase</code></a> is your best friend. Rebasing enables you to rename, reorder, combine, and separate commits. Use <code class="language-plaintext highlighter-rouge">git rebase</code> to group your commits into one set for each branch you want to extract, and submit a PR for each smaller set of changes.</p>

<p>Good commit hygiene makes it easier to rebase commits. Commit small units of work so that they can be re-ordered and grouped, and apply clear messages to each commit in case you need to move it. While you might not <em>always</em> separate/rebase PR branches, you‚Äôll appreciate small commits with clear messages when you do.</p>

<h2 id="small-prs-start-long-before-the-work-starts">Small PRs start long before the work starts</h2>

<p>The size of a pull request can be influenced long before the PR is opened. Slice features small in your product backlog; make small commits along the way; combine small commits into small pull requests. Among other benefits, a focus on breaking work into small parts will make it easier to review your changes.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Improve Pull Requests By Including Valuable Context]]></title>
    <link href="https://artsy.github.io/blog/2020/08/11/improve-pull-requests-by-including-valuable-context/"/>
    <updated>2020-08-11T00:00:00+00:00</updated>
    <id>https://artsy.github.io/blog/2020/08/11/improve-pull-requests-by-including-valuable-context</id>
    <content type="html"><![CDATA[<p>Code review is an engineering process that has benefited greatly from a move toward asynchronous communication.
Long ago, engineering teams would sit in a room with code on a projector to review changes together. üò± For many
teams this led to batching code reviews or even skipping them altogether. üò±üò±</p>

<p>Today, most engineering teams use incredible tools like GitHub or GitLab to review changes through Pull Requests
(PRs). The greatest advantage of PRs is that the review can happen when it‚Äôs convenient for the reviewer:
asynchronously. Asynchronous communication isn‚Äôt all sunshine and unicorns, though. Notably, it lacks the ability
to course-correct when context is misunderstood.</p>

<!-- more -->

<p>When you‚Äôre in a synchronous conversation with someone, it doesn‚Äôt take much time for them to let you know you‚Äôve
forgotten to include context. Their brow furrows. They look confused. You notice this and quickly add the missing
context to keep the conversation moving forward. It takes a lot longer to identify missing context when
communicating asynchronously. The non-verbal cues are missing.</p>

<p>Worse, lack of context when <em>reviewing code</em> asynchronously has a reverb effect. I create my PR when it‚Äôs
convenient for me, you ask a clarifying question when it‚Äôs convenient for you, I respond when it‚Äôs convenient for
me, etc. Suddenly my PR has been open for three days and we haven‚Äôt yet made it to a common understanding of why
I‚Äôve made these changes.</p>

<p>It‚Äôs extremely important to include all available context when drafting a PR. It saves incredible amounts of time
by cutting out slow round-trip conversations to clarify.</p>

<p>I‚Äôm personally proud of and impressed by the job we do at Artsy in including context in our PRs. We start early, by
giving our engineers
<a href="https://github.com/artsy/README/blob/master/playbooks/engineer-workflow.md#pull-requests">some reading about how we work with PRs during their onboarding</a>.</p>

<p>But beyond that our engineers lead by example. This article presents a handful of examples from Artsy repositories
demonstrating how you can add context to your PRs to avoid unnecessary clarifying conversation.</p>

<h2 id="explain-your-reasoning">Explain Your Reasoning</h2>

<p>You‚Äôve been thinking a lot about the problem you‚Äôre solving - probably significantly more than your reviewers.
You‚Äôll save everyone time by describing the problem and sharing how you‚Äôre thinking about it.</p>

<h3 id="define-the-problem-and-solution">Define the problem and solution</h3>

<p>Why does this PR exist? Explain the problem it solves and describe your solution, as
<a href="https://github.com/sweir27">Sarah</a> does <a href="https://github.com/artsy/force/pull/3095">in this PR</a>. For bonus points,
include alternative approaches you considered.</p>

<p>As you are writing up the problem and solution, you might find that you‚Äôve missed on the scope of your PR. Are
there <em>many</em> problems this PR is solving? Maybe this should be broken into smaller PRs. Is it hard to describe the
problem because it requires multiple other PRs? Maybe those should be consolidated into one cohesive set of
changes.</p>

<h3 id="explain-interesting-lines-of-code">Explain interesting lines of code</h3>

<p>The reviewers aren‚Äôt the only ones who can comment on lines of code.
<a href="https://github.com/artsy/emission/pull/2085#discussion_r378228269">Give them</a> some
<a href="https://github.com/artsy/emission/pull/2085#discussion_r378230196">additional information</a> about
<a href="https://github.com/artsy/emission/pull/2085#discussion_r378231974">why a particular line was written</a>, as
<a href="https://github.com/ds300">David</a> does <a href="https://github.com/artsy/emission/pull/2085">in this PR</a>. Maybe you want
feedback focused on that line or maybe the line has side-effects and implications that aren‚Äôt obvious.</p>

<h3 id="give-a-guided-tour-of-the-changes">Give a guided tour of the changes</h3>

<p><a href="https://github.com/dblandin">Devon</a> takes the idea of adding context to individual lines to the next level
<a href="https://github.com/artsy/reaction/pull/2774#pullrequestreview-288095754">in this PR</a>. He takes advantage of
markdown to give us a virtual tour of the changes, at each stop providing helpful information and a link to the
next change. It‚Äôs like he‚Äôs sitting next to you!</p>

<h2 id="show-your-work">Show Your Work</h2>

<p>If your PR contains work that is beyond trivial, show your reviewers how you thought about the problem. Demonstrate
the effects of the changes. Give them confidence that you‚Äôve worked through this problem thoroughly, and you‚Äôve
brought receipts.</p>

<h3 id="make-small-self-contained-commits">Make small, self-contained commits</h3>

<p>A good PR starts with good commits. Good commits are small, self-contained, and leave the codebase always in a
working state. With good commits, reviewers can see exactly how you worked through the problem you were solving.
<a href="https://github.com/artsy/convection/pull/645">Here‚Äôs a PR</a> from <a href="https://github.com/jonallured">Jon</a> that
demonstrates the use of small, self-contained commits to describe his approach to refactoring code before fixing a
bug.</p>

<p><em>Bonus tip</em>: it can be easier to review PRs with many small commits via the
<a href="https://github.com/artsy/convection/pull/645/commits"><em>Commits</em></a> tab instead of the
<a href="https://github.com/artsy/convection/pull/645/files"><em>Files changed</em></a> tab.</p>

<h3 id="demonstrate-the-results">Demonstrate the results</h3>

<p>Pictures are a worth a thousand words. Animated gifs are worth a thousand pictures (uhhhh, in file size too üò¨). An
animated gif showing the outcome of your PR gives reviewers a demo, and confidence that you‚Äôve verified your
changes.</p>

<p><a href="https://github.com/artsy/force/pull/5817">Here‚Äôs a PR</a> from <a href="https://github.com/ashleyjelks">Ashley</a> that includes
animated gifs of the changes she‚Äôs made. The effects of the changes might not be obvious by looking only at the
code, but seeing them in action makes it clear.</p>

<h3 id="document-the-unseen">Document the unseen</h3>

<p>Sometimes a PR‚Äôs changes have effects outside of the UI. There are still ways to give reviewers proof that the
changes have the desired effects.</p>

<p><a href="https://github.com/artsy/eigen/pull/3206">Here‚Äôs a PR</a> from <a href="https://github.com/yuki24">Yuki</a> that not only
demonstrates what‚Äôs happening in the UI, but also assures me that the back-end data is getting updated properly
through a Rails console.</p>

<p><a href="https://github.com/xtina-starr">Christina</a> authored <a href="https://github.com/artsy/reaction/pull/3441">this PR</a> which
shows the UI changes in addition to some output from her browser console, demonstrating that analytics tracking
calls are firing correctly.</p>

<h3 id="share-your-progress">Share your progress</h3>

<p>One mistake many engineers make with non-trivial pull requests is to wait to open them until they‚Äôre ‚Äúdone‚Äù. If
there are changes you‚Äôd like to get people‚Äôs eyes on quickly, open a WIP PR before the work is done: mark it as a
draft in GitHub, or put <code class="language-plaintext highlighter-rouge">WIP</code> in the title. Extra work up front avoids rework by starting early discussions about
your approach.</p>

<p>Let reviewers know in the body that your work isn‚Äôt complete. As you continue your work, use a <code class="language-plaintext highlighter-rouge">TODO:</code> list in the
body to illustrate your progress, as in <a href="https://github.com/artsy/palette/pull/464">this PR</a> from
<a href="https://github.com/sepans">Sepand</a>.</p>

<p>Is this PR part of a larger scope of work? Is there followup work that will need to be done after it‚Äôs merged? Are
there PRs in other systems that need to merge in a specific sequence? Any migration details or timing that should
be known before merging? Call these details out to avoid another round-trip conversation.</p>

<h2 id="spread-knowledge">Spread knowledge</h2>

<p>Pull requests should not be one-sided - they aren‚Äôt just about collecting feedback from the reviewer. They‚Äôre also
an opportunity to spread knowledge from the author.</p>

<h3 id="share-your-learnings">Share your learnings</h3>

<p>Maybe you learned some things about the system you‚Äôre working with, or you learned a new feature of the language.
Share this new information with your team. <a href="https://github.com/anandaroop">Roop</a> shares some findings about
disabled tests <a href="https://github.com/artsy/metaphysics/pull/2130">in this PR</a>.</p>

<p>We introduced a new state management library shortly before <a href="https://github.com/pepopowitz">I</a> opened
<a href="https://github.com/artsy/eigen/pull/3526">this PR</a>, and I had to do some reading about how to add types to
something. I <a href="https://github.com/artsy/eigen/pull/3526#discussion_r451161406">shared my learnings with the team</a>.</p>

<h3 id="share-development-tips">Share development tips</h3>

<p>Did you learn a new technique while building this feature? Share it with your team!</p>

<p>In <a href="https://github.com/artsy/reaction/pull/3279#discussion_r395461329">this PR</a>,
<a href="https://github.com/damassi">Chris</a> shared with us his technique for grabbing fixture data from his locally running
environment.</p>

<hr />

<p>When your team embraces the pull request process, you reap rewards that extend far beyond the lines of code.
Providing context up-front shortens the feedback loop and surfaces important discussions sooner, allowing you to
ship changes more quickly. Sharing knowledge in PRs grows individuals and spreads expertise across your team. Every
PR becomes an artifact for retracing history. You can look back and see not only <em>which</em> decisions were made, but
<em>why</em> they were made.</p>

<p>If you‚Äôd like to know more about how we work with pull requests at Artsy, take a look at our
<a href="https://github.com/artsy/README/blob/master/playbooks/engineer-workflow.md#pull-requests">‚ÄúEngineer workflow‚Äù playbook</a>,
or poke around <a href="https://github.com/artsy">our GitHub repositories</a>. Check out
<a href="https://github.com/artsy/artsy.github.io/pull/619">the PR that created this article</a>. And if you‚Äôve got examples
of great PRs to share with the rest of us, leave a comment!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Deploying canaries with auto]]></title>
    <link href="https://artsy.github.io/blog/2020/02/20/deploying-canaries-with-auto/"/>
    <updated>2020-02-20T00:00:00+00:00</updated>
    <id>https://artsy.github.io/blog/2020/02/20/deploying-canaries-with-auto</id>
    <content type="html"><![CDATA[<p>Coordinating changes across many packages in the node ecosystem can be quite the challenge. You can use <code class="language-plaintext highlighter-rouge">npm link</code>
or <code class="language-plaintext highlighter-rouge">yarn link</code> to create a symlink of the package you‚Äôre developing on into another package, but it
<a href="https://github.com/yarnpkg/yarn/issues/1761#issuecomment-259706202">has some drawbacks</a>. If you‚Äôre doing local
development and need to rapidly see updates and <code class="language-plaintext highlighter-rouge">yarn link</code> isn‚Äôt working out there‚Äôs always tools like
<a href="https://github.com/whitecolor/yalc#yalc">yalc</a> to help you out. That‚Äôs really only for local development though.</p>

<p>What if you need to test packages together in a staging environment? Generally the approach would to be to deploy a
<a href="https://martinfowler.com/bliki/CanaryRelease.html">canary</a> version to npm that you can use in your staging
environment. I‚Äôll go over how to do that and how Artsy automates it.</p>

<!-- more -->

<p>Publishing a canary isn‚Äôt necessarily very hard. It‚Äôs just a regular publish to npm with a few more steps.</p>

<p>For example, if we were wanting to publish a canary version of <code class="language-plaintext highlighter-rouge">@artsy/reaction</code></p>

<ol>
  <li>Update <code class="language-plaintext highlighter-rouge">package.json</code>, set version to a canary version, e.g. <code class="language-plaintext highlighter-rouge">2.0.0-canary-&lt;PR#&gt;</code>, <code class="language-plaintext highlighter-rouge">3.1.5-canary-&lt;PR#&gt;</code>, ‚Ä¶</li>
  <li>Run <code class="language-plaintext highlighter-rouge">npm publish --tag canary</code> in <code class="language-plaintext highlighter-rouge">reaction</code> to publish the package under the canary tag</li>
  <li>Run <code class="language-plaintext highlighter-rouge">yarn add @artsy/reaction@canary</code> to install canary package in the consuming system</li>
</ol>

<p><em>Tip: Running <code class="language-plaintext highlighter-rouge">npm dist-tag ls</code> can be helpful to see what tagged packages are available</em></p>

<p>For a lot of people, that‚Äôd be enough. End blog post. Here at Artsy, we like things to be a little more
frictionless.</p>

<p>We‚Äôre already big fans of <a href="https://github.com/intuit/auto">Auto</a>, Intuit‚Äôs tool for automatically deploying
releases on PR merges. Orta wrote an awesome blog post on how we
<a href="https://artsy.github.io/blog/2019/01/03/label-based-prs/">migrated to auto</a> from semantic-release a while back.</p>

<p>As a short recap, <code class="language-plaintext highlighter-rouge">Auto</code> makes the deployable units of a package be a PR instead of a commit. It uses labels like
<code class="language-plaintext highlighter-rouge">Version: Major</code>, <code class="language-plaintext highlighter-rouge">Version: Minor</code>, etc to determine how the PR will affect the package version. When a PR is
merged it‚Äôll automatically cut a released based on that label.</p>

<p>As a testament to how awesome <code class="language-plaintext highlighter-rouge">Auto</code> is, it already supports
<a href="https://intuit.github.io/auto/pages/generated/canary.html">canary deployments</a> out of the box!</p>

<p>Essentially when we‚Äôre on a branch that isn‚Äôt master our CI runs this command:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>auto canary
</code></pre></div></div>

<p>and auto takes care of publishing a canary version to NPM <em>and</em> updating the PR description with the version and
instructions on how to use it.</p>

<p>You can <a href="https://github.com/artsy/reaction/pull/3168">check out the PR</a> where I enabled it on reaction to see it in
action. The CI configuration itself is layered behind some
<a href="https://circleci.com/docs/2.0/orb-intro/">CircleCI Orb</a>s. You can find all that configuration in
<a href="https://github.com/artsy/orbs">artsy/orbs</a> if you‚Äôre curious.</p>

<p>Ultimately the culmination of this work means that every PR to a library at Artsy gets a canary. It‚Äôs incredibly
simple to test changes in another system now.</p>

<p>There is, however, one caveat. Being as canaries are being deployed to NPM, they need our NPM token. We can‚Äôt just
share that with everyone, so this functionality doesn‚Äôt work on forks. Given how CircleCI works, this includes
forks from folks who even have write access to the repository. We‚Äôre thinking about how to solve that problem but
that‚Äôll be another blog post for another day.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Releasecop Tracks Stale Releases]]></title>
    <link href="https://artsy.github.io/blog/2015/09/01/releasecop-tracks-stale-releases/"/>
    <updated>2015-09-01T17:30:00+00:00</updated>
    <id>https://artsy.github.io/blog/2015/09/01/releasecop-tracks-stale-releases</id>
    <content type="html"><![CDATA[<p>Artsy practices a sort of <a href="http://en.wikipedia.org/wiki/Continuous_delivery">continuous delivery</a>. We keep release cycles short and the process of reviewing, testing, and deploying our software as reliable, fast, and automated as possible. (This blog has touched on these practices <a href="http://artsy.github.io/blog/categories/testing/">multiple</a> <a href="http://artsy.github.io/blog/categories/continuous-integration">times</a>.)</p>

<p>Usually, commits that have been reviewed and merged are immediately built and tested. Successfully built versions of the codebase are often automatically deployed to a staging environment. On an automated or frequent-but-manual basis, that version is deployed to a production environment. Thus, commits form a pipeline:</p>

<ul>
  <li>From developers‚Äô working branches</li>
  <li>To the master branch</li>
  <li>Through a hopefully-successful build</li>
  <li>To a staging environment</li>
  <li>To production</li>
</ul>

<p>The number of apps and services we deploy has grown to <em>dozens</em> per team, so sometimes things fall through the cracks. We‚Äôve been using <a href="https://github.com/joeyAghion/releasecop">Releasecop</a> for the last few months to get gentle email reminders when an environment could use a deploy.</p>

<!-- more -->

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>gem install releasecop
releasecop edit
</code></pre></div></div>

<p>This opens a <em>manifest</em> file where you can describe the sequence of git remotes and branches that make up your own release pipeline. For example:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>{
  "projects": {
    "charge": [
      { "name": "master", "git": "git@github.com:artsy/charge.git" },
      { "name": "staging", "git": "git@heroku.com:charge-staging.git" },
      { "name": "production", "git": "git@heroku.com:charge-production.git" }
    ],
    "gravity": [
      { "name": "master", "git": "git@github.com:artsy/gravity.git" },
      { "name": "master-succeeded", "git": "git@github.com:artsy/gravity.git", "branch": "master-succeeded" },
      { "name": "staging", "git": "git@github.com:artsy/gravity.git", "branch": "staging" },
      { "name": "production", "git": "git@github.com:artsy/gravity.git", "branch": "production" }
    ]
  }
}
</code></pre></div></div>

<p>The <code class="language-plaintext highlighter-rouge">charge</code> app is a typical deployment to Heroku. Work progresses from the <code class="language-plaintext highlighter-rouge">master</code> branch to a <code class="language-plaintext highlighter-rouge">charge-staging</code> app to a <code class="language-plaintext highlighter-rouge">charge-production</code> app. The <code class="language-plaintext highlighter-rouge">gravity</code> app is a more complicated, non-Heroku deployment. It updates git branches to reflect what has been merged (<code class="language-plaintext highlighter-rouge">master</code>), tested (<code class="language-plaintext highlighter-rouge">master-succeeded</code>), deployed to staging, and deployed to production.</p>

<p>Run the <code class="language-plaintext highlighter-rouge">releasecop check [app]</code> command to report the status of your apps‚Äô releases:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ releasecop check --all
charge...
  staging is up-to-date with master
  production is up-to-date with staging
gravity...
  master-succeeded is up-to-date with master
  staging is up-to-date with master-succeeded
  production is behind staging by:
    06ca969 2015-09-04 [config] Replace Apple Push Notification certificates that expire today. (Eloy Dur√°n)
    171121f 2015-09-03 Admin-only API for cancelling a bid (Matthew Zikherman)
    4c5feea 2015-09-02 install mongodb client in Docker so that import rake tasks can run (Barry Hoggard)
    95347d1 2015-08-31 Update to delayed_job cookbook that works with Chef 11.10 (Joey Aghion)
2 project(s) checked. 1 environment(s) out-of-date.
</code></pre></div></div>

<p>A nightly <a href="https://jenkins-ci.org/">Jenkins</a> job emails us the results, but a cron job could work equally well.</p>

<p><a href="https://github.com/joeyAghion/releasecop">Releasecop</a> reminds us to deploy ready commits and close the loop on in-progress work. We hope you find it useful. (Pull requests are welcome!)</p>
]]></content>
  </entry>
  
</feed>
