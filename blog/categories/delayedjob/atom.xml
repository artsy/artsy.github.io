<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: DelayedJob | Artsy Engineering]]></title>
  <link href="https://artsy.github.io/blog/categories/delayedjob/atom.xml" rel="self"/>
  <link href="https://artsy.github.io/"/>
  <updated>2024-10-30T17:23:09+00:00</updated>
  <id>https://artsy.github.io/</id>
  <author>
    <name><![CDATA[]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Testing with Delayed Jobs]]></title>
    <link href="https://artsy.github.io/blog/2012/08/16/testing-with-delayed-jobs/"/>
    <updated>2012-08-16T21:21:00+00:00</updated>
    <id>https://artsy.github.io/blog/2012/08/16/testing-with-delayed-jobs</id>
    <content type="html"><![CDATA[<p>A mean bug made it into our production environment. It wasn’t caught by our extensive test suite and caused thousands of emails to be sent to a handful of people. The root cause was an unfortunate combination of <a href="https://github.com/plataformatec/devise">Devise</a>, <a href="https://github.com/collectiveidea/delayed_job">DelayedJob</a> and, of course, our own code. It was an easy fix, but nobody ever wants this to happen again.</p>

<p>tl;dr DelayedJob says it’s possible to set <code class="language-plaintext highlighter-rouge">Delayed::Worker.delay_jobs = false</code> for your tests. Don’t do it.</p>

<!-- more -->

<p>Consider the following <code class="language-plaintext highlighter-rouge">User</code> model that implements various Devise strategies which support some kind of notification.</p>

<p>``` ruby app/models/user.rb
class User
  include Mongoid::Document</p>

<p>devise :database_authenticatable, :registerable, …</p>

<p>field :notified_at, type: DateTime
  after_save :notify!, :if =&gt; :notify?</p>

<p>def notify!
    super
    update_attributes!({ notified_at: Time.now.utc })
  end
end</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>We are overriding a black box `notify!` method and updating an attribute with a timestamp of the last notification.

Let's write a test.

``` ruby spec/models/user_spec.rb
describe User do

  subject { User.new }

  context "notification" do

    it "sends one email" do
      expect {
        subject.notify!
      }.to change(ActionMailer::Base.deliveries, :count).by(1)
    end

    it "updates notified_at" do
      expect {
        subject.notify!
      }.to change(subject, :notified_at)
    end

  end

end
</code></pre></div></div>

<p>All green. But once this code hit production, <code class="language-plaintext highlighter-rouge">notify!</code> was called in an infinite loop. How is that possible?</p>

<p>The call to <code class="language-plaintext highlighter-rouge">notify!</code> is delayed using DelayedJob in production and is not delayed in test. It does not work under DelayedJob and will create as many delayed notifications as it possibly can until it runs out of stack space.</p>

<p>As a common pattern in Devise, the implementation of <code class="language-plaintext highlighter-rouge">notify!</code> relies on an instance variable to signal that a notification has been sent. Setting the instance variable avoids sending the notification twice for multiple calls to <code class="language-plaintext highlighter-rouge">save!</code>. Our <code class="language-plaintext highlighter-rouge">after_save</code> callback invokes <code class="language-plaintext highlighter-rouge">update_attributes!</code>, which causes another <code class="language-plaintext highlighter-rouge">notify!</code> call unless <code class="language-plaintext highlighter-rouge">notify?</code> returns <code class="language-plaintext highlighter-rouge">false</code>. In a test, the call to <code class="language-plaintext highlighter-rouge">super</code> inside <code class="language-plaintext highlighter-rouge">notify!</code> will execute the notification (setting the instance variable), but will create a delayed job in production (without setting it).</p>

<p>We’ll start by bringing our tests closer to a real production environment by leaving <code class="language-plaintext highlighter-rouge">Delayed::Worker.delay_jobs = true</code> and making sure our problem is reproduced with a spec. We could call <code class="language-plaintext highlighter-rouge">Delayed::Worker.new.work_off</code> for every test that needs to execute a delayed job, but that would be rather tedious. A better approach may be to register an observer that will execute a delayed job every time one is created. This is similar to a production environment where having enough delayed workers almost guarantees a job is picked up immediately after being scheduled.</p>

<p>``` ruby config/initializers/delayed_job_observer.rb
class DelayedJobObserver &lt; Mongoid::Observer
  observe Delayed::Job</p>

<p>class « self
    attr_accessor :runs
  end</p>

<p>def after_create(delayed_job)
    delayed_job.invoke_job
    DelayedJobObserver.runs += 1
  end
end</p>

<p>DelayedJobObserver.runs = 0</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
The complete code, which handles a few more cases, including enabling and disabling the observer, and counting successful runs and errors can be found in [this gist](https://gist.github.com/3370052). Please help us improve it.

We can now test our notification without compromising on the delayed nature of the job and add a test making sure we create a single delayed job from a call to `notify!`.

``` ruby spec/models/user_spec.rb
describe User do

  subject { User.new }

  context "notification" do

    it "creates one delayed job" do
      expect {
        subject.notify!
      }.to change(DelayedJobObserver, :runs).by(1)
    end

  end

end
</code></pre></div></div>

<p>This test will also run for a long time before failing with a stack overflow error. Our fix was not to call <code class="language-plaintext highlighter-rouge">notify!</code> from an <code class="language-plaintext highlighter-rouge">after_save</code> callback.</p>

<p>We’ve suggested that immediate execution using an observer becomes a feature in DelayedJob in <a href="https://github.com/collectiveidea/delayed_job/issues/423">#423</a>. Please add your comments.</p>
]]></content>
  </entry>
  
</feed>
