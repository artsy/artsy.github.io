<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Shell | Artsy Engineering]]></title>
  <link href="https://artsy.github.io/blog/categories/shell/atom.xml" rel="self"/>
  <link href="https://artsy.github.io/"/>
  <updated>2024-10-30T17:23:09+00:00</updated>
  <id>https://artsy.github.io/</id>
  <author>
    <name><![CDATA[]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Master the Heroku CLI with Heroku Commander]]></title>
    <link href="https://artsy.github.io/blog/2013/02/01/master-heroku-command-line-with-heroku-commander/"/>
    <updated>2013-02-01T21:21:00+00:00</updated>
    <id>https://artsy.github.io/blog/2013/02/01/master-heroku-command-line-with-heroku-commander</id>
    <content type="html"><![CDATA[<p><img src="/images/2013-02-01-master-heroku-command-line-with-heroku-commander/heroku-commander.png" /></p>

<p>Heroku users frequently run the <strong>heroku</strong> command-line tool that ships with the <a href="https://toolbelt.heroku.com/">Heroku Toolbelt</a>. It has two very convenient features: it will remember API credentials and default to the “heroku” GIT remote to figure out the application to connect to. Neither of these features are available in the Heroku client API, so it’s not unusual to find developers invoke the Heroku CLI from Rake tasks and other automation scripts.</p>

<p>There’re several problems with using the Heroku CLI for automation:</p>

<ol>
  <li>The exit code from <code class="language-plaintext highlighter-rouge">heroku run</code> is not the exit code from the process being run on Heroku. See <a href="https://github.com/heroku/heroku/issues/186">#186</a>.</li>
  <li>Gathering console output from <code class="language-plaintext highlighter-rouge">heroku run:detached</code> requires an external <code class="language-plaintext highlighter-rouge">heroku logs --tail</code> process that will never finish.</li>
</ol>

<p>The <a href="https://github.com/dblock/heroku-commander">heroku-commander</a> gem wraps execution of the Heroku CLI to overcome these common limitations.</p>

<!-- more -->

<h3 id="heroku-configuration">Heroku Configuration</h3>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">commander</span> <span class="o">=</span> <span class="no">Heroku</span><span class="o">::</span><span class="no">Commander</span><span class="p">.</span><span class="nf">new</span>
<span class="c1"># a hash of all settings for your default heroku app</span>
<span class="n">commander</span><span class="p">.</span><span class="nf">config</span>
</code></pre></div></div>

<p>Notice that unlike <code class="language-plaintext highlighter-rouge">Heroku::Client.new</code>, this doesn’t require your e-mail or API key. It will invoke <code class="language-plaintext highlighter-rouge">heroku config -s</code>.</p>

<p>You can specify an application name, too.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">commander</span> <span class="o">=</span> <span class="no">Heroku</span><span class="o">::</span><span class="no">Commander</span><span class="p">.</span><span class="nf">new</span><span class="p">({</span> <span class="ss">:app</span> <span class="o">=&gt;</span> <span class="s2">"heroku-commander"</span> <span class="p">})</span>
<span class="c1"># a hash of all settings for the heroku-commander application</span>
<span class="n">commander</span><span class="p">.</span><span class="nf">config</span>
</code></pre></div></div>

<h3 id="run-commands-on-heroku">Run Commands on Heroku</h3>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">commander</span> <span class="o">=</span> <span class="no">Heroku</span><span class="o">::</span><span class="no">Commander</span><span class="p">.</span><span class="nf">new</span>
<span class="c1"># returns all output lines</span>
<span class="c1"># eg. [ "Linux 2.6.32-348-ec2 #54-Ubuntu SMP x86_64 GNU" ]</span>
<span class="n">commander</span><span class="p">.</span><span class="nf">run</span> <span class="s2">"uname -a"</span>
</code></pre></div></div>

<p>This calls <code class="language-plaintext highlighter-rouge">(heroku run 2&gt;&amp;1 uname -a; echo rc=\\$?)</code>, parses output for the final exit code line and raises an exception if the run’s result code wasn’t zero. In other words, if the command fails, an error is raised, which makes this suitable for Rake tasks.</p>

<p>You can also read output line-by-line.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">commander</span><span class="p">.</span><span class="nf">run</span> <span class="s2">"ls -1"</span> <span class="k">do</span> <span class="o">|</span><span class="n">line</span><span class="o">|</span>
  <span class="c1"># each line from the output of ls -1</span>
<span class="k">end</span>
</code></pre></div></div>

<h3 id="detach-commands-on-heroku">Detach Commands on Heroku</h3>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">commander</span> <span class="o">=</span> <span class="no">Heroku</span><span class="o">::</span><span class="no">Commander</span><span class="p">.</span><span class="nf">new</span>
<span class="n">commander</span><span class="p">.</span><span class="nf">run</span><span class="p">(</span><span class="s2">"ls -R"</span><span class="p">,</span> <span class="p">{</span> <span class="ss">:detached</span> <span class="o">=&gt;</span> <span class="kp">true</span> <span class="p">})</span> <span class="k">do</span> <span class="o">|</span><span class="n">line</span><span class="o">|</span>
  <span class="c1"># each line from the output of ls -r -1</span>
<span class="k">end</span>
</code></pre></div></div>

<p>This calls <code class="language-plaintext highlighter-rouge">(heroku detached:run ls -r -1 2&gt;&amp;1; echo rc=\\$?)</code>, parses the output for a Heroku process ID, spawns a <code class="language-plaintext highlighter-rouge">heroku logs --tail -p pid</code> and monitors the log output until it reports process completion. It will also parse output for the final exit code and raise an exception if the run’s result code wasn’t zero.</p>

<h3 id="more-examples">More Examples</h3>

<p>There’re more working examples <a href="https://github.com/dblock/heroku-commander/tree/master/examples">here</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Create MongoDB Command-Lines from Mongoid Configuration]]></title>
    <link href="https://artsy.github.io/blog/2013/01/31/create-mongodb-command-lines-with-mongo/"/>
    <updated>2013-01-31T21:21:00+00:00</updated>
    <id>https://artsy.github.io/blog/2013/01/31/create-mongodb-command-lines-with-mongo</id>
    <content type="html"><![CDATA[<p>We use MongoDB as our primary store and have built a healthy amount of automation around various database instances and operational environments. For example, we backup databases to S3 using <code class="language-plaintext highlighter-rouge">mongodump</code>, mirror data between instances with <code class="language-plaintext highlighter-rouge">mongorestore</code> and often need to open a MongoDB shell with <code class="language-plaintext highlighter-rouge">mongo</code> to examine data at the lowest level.</p>

<p>Generating MongoDB command-lines is tedious and error-prone. Introducing a new gem called <a href="https://github.com/dblock/mongoid-shell">mongoid-shell</a> to help with this. The library can generate command-lines for various MongoDB shell tools from your Mongoid configuration.</p>

<p>For example, connect to your production MongoDB instance from a <code class="language-plaintext highlighter-rouge">db:production:shell</code> Rake task.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">namespace</span> <span class="ss">:db</span>
  <span class="n">namespace</span> <span class="ss">:production</span>
    <span class="n">task</span> <span class="ss">:shell</span>
      <span class="no">Mongoid</span><span class="p">.</span><span class="nf">load!</span> <span class="s2">"mongoid.yml"</span><span class="p">,</span> <span class="ss">:production</span>
      <span class="nb">system</span> <span class="no">Mongoid</span><span class="o">::</span><span class="no">Shell</span><span class="o">::</span><span class="no">Commands</span><span class="o">::</span><span class="no">Mongo</span><span class="p">.</span><span class="nf">new</span><span class="p">.</span><span class="nf">to_s</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<!-- more -->

<p>Commands can be created for the current default session or you can pass a session as an argument to a new command.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># will use Mongoid.default_session</span>
<span class="no">Mongoid</span><span class="o">::</span><span class="no">Shell</span><span class="o">::</span><span class="no">Commands</span><span class="o">::</span><span class="no">Mongodump</span><span class="p">.</span><span class="nf">new</span>

<span class="c1"># use a hand-crafted session</span>
<span class="n">s</span> <span class="o">=</span> <span class="no">Moped</span><span class="o">::</span><span class="no">Session</span><span class="p">.</span><span class="nf">new</span><span class="p">([</span> <span class="s2">"127.0.0.1:27017"</span> <span class="p">])</span>
<span class="no">Mongoid</span><span class="o">::</span><span class="no">Shell</span><span class="o">::</span><span class="no">Commands</span><span class="o">::</span><span class="no">Mongodump</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="ss">session: </span><span class="n">s</span><span class="p">)</span>
</code></pre></div></div>

<p>Commands accept parameters. Here’s how to backup <code class="language-plaintext highlighter-rouge">my_database</code> to <code class="language-plaintext highlighter-rouge">/tmp/db_backup</code>.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">out</span> <span class="o">=</span> <span class="no">File</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="no">Dir</span><span class="p">.</span><span class="nf">tmpdir</span><span class="p">,</span> <span class="s1">'db_backup'</span><span class="p">)</span>
<span class="n">db</span> <span class="o">=</span> <span class="s1">'my_database'</span>
<span class="n">dump</span> <span class="o">=</span> <span class="no">Mongoid</span><span class="o">::</span><span class="no">Shell</span><span class="o">::</span><span class="no">Commands</span><span class="o">::</span><span class="no">Mongodump</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="ss">db: </span><span class="n">db</span><span class="p">,</span> <span class="ss">out: </span><span class="n">out</span><span class="p">)</span>
<span class="c1"># mongodump --db my_database --out /tmp/db_backup</span>
<span class="nb">system</span> <span class="n">dump</span><span class="p">.</span><span class="nf">to_s</span>
</code></pre></div></div>

<p>The mongoid-shell gem currently supports <code class="language-plaintext highlighter-rouge">mongo</code>, <code class="language-plaintext highlighter-rouge">mongodump</code>, <code class="language-plaintext highlighter-rouge">mongorestore</code> and <code class="language-plaintext highlighter-rouge">mongostat</code> and various MongoDB configurations, including replica-sets.</p>

<p>Please note that we don’t recommend you store passwords for production environments in your <code class="language-plaintext highlighter-rouge">mongoid.yml</code>. At Artsy, we set all sensitive values directly on our Heroku instances with <code class="language-plaintext highlighter-rouge">heroku config:add</code> and use <a href="https://github.com/dblock/heroku-commander">heroku-commander</a> to retrieve these settings in rake. We also have a bit of convention in our application name, such as “app-staging” and “app-production”.</p>

<p>Here’s a complete Rake task that dynamically fetches Heroku configuration and opens a MongoDB shell on a production or staging environment.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">namespace</span> <span class="ss">:db</span> <span class="k">do</span>
  <span class="p">[</span> <span class="ss">:staging</span><span class="p">,</span> <span class="ss">:production</span> <span class="p">].</span><span class="nf">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">env</span><span class="o">|</span>
    <span class="n">namespace</span> <span class="n">env</span> <span class="k">do</span>
      <span class="n">task</span> <span class="ss">:shell</span> <span class="k">do</span>
        <span class="n">app</span> <span class="o">=</span> <span class="s2">"myapp-</span><span class="si">#{</span><span class="n">env</span><span class="si">}</span><span class="s2">"</span>
        <span class="n">config</span> <span class="o">=</span> <span class="no">Heroku</span><span class="o">::</span><span class="no">Commander</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="ss">app: </span><span class="n">app</span><span class="p">).</span><span class="nf">config</span>
        <span class="n">config</span><span class="p">.</span><span class="nf">each_pair</span> <span class="k">do</span> <span class="o">|</span><span class="n">k</span><span class="p">,</span> <span class="n">v</span><span class="o">|</span>
          <span class="no">ENV</span><span class="p">[</span><span class="n">k</span><span class="p">]</span> <span class="o">=</span> <span class="n">v</span>
        <span class="k">end</span>
        <span class="n">mongoid_yml</span> <span class="o">=</span> <span class="no">File</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="no">Rails</span><span class="p">.</span><span class="nf">root</span><span class="p">,</span> <span class="s2">"config/mongoid.yml"</span><span class="p">)</span>
        <span class="no">Mongoid</span><span class="p">.</span><span class="nf">load!</span> <span class="n">mongoid_yml</span><span class="p">,</span> <span class="n">env</span>
        <span class="nb">system</span> <span class="no">Mongoid</span><span class="o">::</span><span class="no">Shell</span><span class="o">::</span><span class="no">Commands</span><span class="o">::</span><span class="no">Mongo</span><span class="p">.</span><span class="nf">new</span><span class="p">.</span><span class="nf">to_s</span>
      <span class="k">end</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>Run <code class="language-plaintext highlighter-rouge">rake db:staging:shell</code> or <code class="language-plaintext highlighter-rouge">rake db:production:shell</code>, which works as long as you have access to the Heroku app itself. A bonus feature is that the mongoid-shell gem will automatically connect to the primary node of a replica-set.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ rake db:staging:shell
 mongo db:10007/app-staging --username user --password ************
 MongoDB shell version: 2.0.7
 connecting to: db:10007/app-staging
 &gt;
</code></pre></div></div>
]]></content>
  </entry>
  
</feed>
