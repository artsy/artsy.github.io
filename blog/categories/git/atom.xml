<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: git | Artsy Engineering]]></title>
  <link href="https://artsy.github.io/blog/categories/git/atom.xml" rel="self"/>
  <link href="https://artsy.github.io/"/>
  <updated>2024-05-17T14:49:02+00:00</updated>
  <id>https://artsy.github.io/</id>
  <author>
    <name><![CDATA[]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Why Projects Need Code Names]]></title>
    <link href="https://artsy.github.io/blog/2019/05/10/why-projects-need-codenames/"/>
    <updated>2019-05-10T00:00:00+00:00</updated>
    <id>https://artsy.github.io/blog/2019/05/10/why-projects-need-codenames</id>
    <content type="html"><![CDATA[<p>Before I joined Artsy, I worked at companies where software projects tended to have meaningful, predictable names. If we were building a system for flagging media uploads, it might be called <code class="language-plaintext highlighter-rouge">media-review</code>. In many cases, our code repositories’ names matched the main product’s branding or even the company’s name. Life was simple and there was no risk of ambiguity.</p>

<p>At Artsy, our systems have peculiar code names like <em>Gravity</em>, <em>Pulse</em>, and <em>Vortex</em>. There’s a persistent learning curve as you contribute to different repositories or as new services get created. Numerous times, I’ve wondered: are code names worth the trouble?</p>

<!-- more -->

<p><img src="/images/2019-05-10-why-projects-need-codenames/github_projects.png" alt="" /></p>

<p>To be clear, <em>any</em> project naming scheme works in small quantities. Personal projects or libraries for public release should probably just be named for clarity and find-ability. Code names start to offer benefits as a team grows and a product evolves over the longer term:</p>

<p>Code names embrace that <strong>we don’t necessarily know the fit or scope of a system when it’s first conceived</strong>. To <em>not</em> employ code names would require accurately predicting a system’s eventual function. A project named <code class="language-plaintext highlighter-rouge">artsy-admin</code> starts to grate when we make the architectural decision to split apart management utilities or introduce more fine-grained administrative roles. An <code class="language-plaintext highlighter-rouge">artwork-taxonomy</code> label loses meaning when that system expands to include less structured tags</p>

<p><strong>Branding shifts, products pivot, and companies merge.</strong> Project code names introduce a level of indirection between what engineers build and the labels, URLs, or brands that end users experience. Over a long enough period, these external or superficial changes <em>will</em> happen and risk introducing confusion or just subtle misalignment between form and function. As with software design in general, abstractions can be a powerful tool to <a href="https://en.wikipedia.org/wiki/Separation_of_concerns">separate concerns</a>. Ask yourself: what code changes might be required if your company were to spin off your product or be merged into an acquirer?</p>

<p><strong>Language is important</strong>, and not just for communication but for shaping our thoughts and assumptions. We frequently find ourselves debating which system should serve as the authority for a given domain model or where to implement a new feature, and project names that overlap with these topics (e.g., <code class="language-plaintext highlighter-rouge">search</code>, <code class="language-plaintext highlighter-rouge">images</code>, <code class="language-plaintext highlighter-rouge">suggestions</code>) would predispose us to certain decisions. Code names free us to focus on the architectural and organizational merits instead.</p>

<p>We like to <strong>have fun at work</strong> and it’s more joyful to proclaim that “Torque is in the wild” than “data-sync has been deployed.” Over time these names gain mythologies and personalities within the team and organization.</p>

<p>With this in mind, how should you choose a naming scheme?</p>

<h2 id="rules-for-a-project-naming-scheme">Rules for a project naming scheme</h2>

<ul>
  <li>Avoid implicit value judgments like “new,” “next,” or “modern.” We’ve all witnessed today’s hot project become next year’s unloved albatross.</li>
  <li>Choose a code name scheme that isn’t directly related to your technology or business. A flower business using flower names is cute, but breaks down when you want to build a feature that <em>actually</em> is about tulips.</li>
  <li>Everyone should be able to participate, so avoid industry lingo or obscure terminology. Funny story: I work at an art start-up but don’t know enough artists to name my projects that way. I struggle even more to pronounce the few projects that are.</li>
  <li>There should be lots of choices. You’ll regret choosing to name your projects after “decathlon sports” or “days of the week” when your team inevitably transitions to microservices.</li>
  <li>Names should be unique within a company and–ideally–beyond the company’s scope. You wouldn’t want your <code class="language-plaintext highlighter-rouge">marketing-site</code> repository to conflict with a contributor’s <code class="language-plaintext highlighter-rouge">marketing-site</code> repository from another organization. Github projects, S3 buckets, Heroku application names, and published libraries all benefit from being globally unique.</li>
  <li>Bonus points for choosing a rich enough scheme that names can subtly relate to each system’s function. At Artsy, we use physics terms for code names, so our e-commerce back-end is called <a href="https://github.com/artsy/exchange">Exchange</a> and a command line utility for developers is called <a href="https://github.com/artsy/momentum">Momentum</a>. A shipping service might be called <em>Weight</em>.</li>
</ul>

<p>Example code name schemes: animals, movies, sea creatures, cartoon/TV characters, woodworking tools, celebrities (but get legal advice before borrowing living individuals’ names). <a href="https://wiki.ubuntu.com/DevelopmentCodeNames">Ubuntu</a> gets extra mileage by combining adjectives with animal names. <a href="https://en.wikipedia.org/wiki/List_of_Apple_codenames">Apple</a> has used wine, cats, and California geography. <a href="https://en.wikipedia.org/wiki/Android_%28operating_system%29">Google</a> likes dessert.</p>

<h2 id="finally">Finally</h2>

<p>These days, I’ve embraced Artsy’s use of physics terms for project names. There continues to be some head-scratching as new engineers navigate codebases and encounter these terms or just struggle to identify the system responsible for a given site or feature. (This isn’t shocking, since code names were probably adapted from more secretive environments like the military.) As your code names multiply and projects come and go, a glossary becomes essential. I suggest creating a simple document that maps projects’ code names to descriptions, URL destinations, hosting environments, and teams.</p>

<p>See also:</p>

<ul>
  <li><a href="https://blog.codinghorror.com/whats-in-a-project-name/">What’s in a Project Name?</a></li>
  <li><a href="https://royal.pingdom.com/the-developer-obsession-with-code-names-186-interesting-examples/">The Developer Obsession With Code Names, 186 Interesting Examples</a></li>
</ul>
]]></content>
  </entry>
  
</feed>
