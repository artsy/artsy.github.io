<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: emission | Artsy Engineering]]></title>
  <link href="https://artsy.github.io/blog/categories/emission/atom.xml" rel="self"/>
  <link href="https://artsy.github.io/"/>
  <updated>2024-10-30T17:23:09+00:00</updated>
  <id>https://artsy.github.io/</id>
  <author>
    <name><![CDATA[]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Becoming Mobile First]]></title>
    <link href="https://artsy.github.io/blog/2020/09/29/becoming-mobile-first-at-artsy/"/>
    <updated>2020-09-29T00:00:00+00:00</updated>
    <id>https://artsy.github.io/blog/2020/09/29/becoming-mobile-first-at-artsy</id>
    <content type="html"><![CDATA[<p>It was a Wednesday, mid-summer 2019. I don’t know which Wednesday specifically, but I know that it was <em>a</em>
Wednesday because I was attending Artsy’s weekly all-hands meeting. Two hundred colleagues were also there (many
dialing in remotely) and we were all listening to
<a href="https://files.artsy.net/documents/artsy-names-new-ceo.pdf">Artsy’s new CEO</a> talk about the company’s direction.
Mike Steib had only been around for a few months at that point, getting to know the business. He was talking about
the product direction, and I was listening intently.</p>

<p>With Artsy’s iOS app, I knew there were only really two directions we could go. As I listened, I reflected on how
we had gotten here.</p>

<!-- more -->

<p>When I joined Artsy in 2014, I joined the Mobile Team. It was an amazing team. While we were called the “mobile”
team, we only worked on Artsy’s iOS apps and not the mobile website.</p>

<p>By 2016, Artsy Engineering had grown to the size that having only a “mobile team” and a “web team” was no longer
working well. We dissolved both teams and distributed the engineers into
<a href="https://artsy.github.io/blog/2016/03/28/artsy-engineering-organization-stack/">new product teams</a>, focused on
vertical aspects of Artsy’s business. Auctions. Partner Success. Editorial. And so on. The idea was that each team
would have total autonomy over building products to support their slice of the business, and each would have the
engineering and design resources to build new features across both our web and iOS canvases.</p>

<p>That structure worked well, and continues to work well today (we have continued re-organizing ourselves into new
teams to better meet business goals). But once we dissolved the mobile team, there was no longer anyone looking at
our iOS software holistically. The app had become a series of silos – each silo was internally consistent, but
distinct from each other. Often each silo was written in distinct programming languages (we had also started
adopting React Native).</p>

<p>New iOS technologies had been created by Apple, but our teams weren’t taking full advantage of them. We would
update to support the latest versions of Xcode and iOS in the free time between other tickets. It wasn’t ideal. Of
the <a href="https://github.com/artsy/mobile">five original members of the Mobile Team</a>, everyone else had moved on except
me.</p>

<p>As a product, the app was languishing.</p>

<p>Yet despite this, it was also hugely popular among our users and very important to Artsy’s business. Art collectors
love our app! It gets a large percentage of our total sessions. Also, users place an outsized number of auction
bids and artwork inquiries using our app relative to the number of sessions on our website. In fact, the highest
value artwork transaction <em>ever</em> to take place on Artsy was made on an iPad, running software that I helped build.
I’m still pretty proud of that.</p>

<p>So, Wednesday all-hands. I stood there, not sure of what would happen next. I could see Artsy either making a
massive investment in the app, or I could see Artsy cutting its losses and focusing on the software that we already
knew how to build. Which direction we took largely depended on this new CEO, who was now standing in front of us
all and describing the direction Artsy’s product would take next.</p>

<h2 id="the-dream">The Dream</h2>

<p>Mike said something that caused a lot of raised eyebrows in the crowd. People were excited. <em>I</em> was excited.
Artsy’s product organization would shift to adopt a “mobile-first strategy.”</p>

<p>Someone asked “does this mean the app will reach feature parity with Artsy’s website?”</p>

<p>Mike responded: “No. It means that features are going to launch <em>first</em> on the app. If anything, it’s the <em>website</em>
that will be catching up <em>to the app</em>.”</p>

<p>I was kind of blown away! I mean, this had been the spirit of our original re-org in 2016, but that hadn’t really
materialized. The app had continued to trail the website. At most, only one product team was ever building new
features for the app (usually which ever team I happened to be on). Shifting to this mobile-first strategy would be
a <em>massive</em> undertaking, but I was keen.</p>

<p>In August, an email landed in my inbox from Artsy’s head of software. He wanted to spin up a new team to focus on
the app: the team would be responsible for supporting Artsy’s new mobile-first product strategy. He wanted to know
what I thought, and he wanted to know if I was interested in leading the team.</p>

<p>Honestly, it was a dream come true.</p>

<p><img src="/images/2020-09-29-becoming-mobile-first-at-artsy/rfc.png" alt="Screenshot of the RFC for creating the Mobile Experience team" /></p>

<p>Here we are, a year later. This is the story of how Artsy created its Mobile Experience team. How we recovered a
languishing iOS app. How engineers helped shift the product organization to a mobile-first product strategy. And
how Artsy grew from <em>sometimes</em> having <em>a</em> team working on the app, to usually having <em>every</em> team working on it.</p>

<p><img src="/images/2020-09-29-becoming-mobile-first-at-artsy/faq.png" alt="Another screenshot of the RFC for creating the Mobile Experience team, describing frequently asked questions" /></p>

<h2 id="getting-our-bearings">Getting Our Bearings</h2>

<p>When Artsy created its new Mobile Experience team, we were already resource-constrained and so the new team would
need to be nimble. We had three full-time engineers (myself as tech lead, and two others), assisted by a designer,
product manager, and data analyst, who would each be spending only half their work time on the Mobile Experience
team. We needed to be scrappy. I’m really proud of the work that that early team accomplished, and I look back
fondly on those first few months working with Sam, Joanna, David, Kieran, and Ani.</p>

<p>The first thing we did was define our own mandate. What was this team responsible for? What was it <em>not</em>
responsible for? “Mobile Experience” is pretty vague, and we had to answer a lot of upfront questions. Would we be
responsible for <em>all</em> of Artsy’s iOS software? No, just the main collector app. Would we be responsible for Artsy’s
mobile website? No, that’s too far-reaching. What about Android? Well, yes, eventually…</p>

<p>After we decided on our mandate, the next step was to get really familiar with the existing app. We storyboarded
out all the existing screens and their connections to one another.</p>

<p><img src="/images/2020-09-29-becoming-mobile-first-at-artsy/walkthrough.png" alt="Screenshot of all the screens in our app laid out to discuss" /></p>

<p><img src="/images/2020-09-29-becoming-mobile-first-at-artsy/brainstorm.png" alt="Screenshot of a brainstorm for app ideas" /></p>

<p>No one on our team had complete knowledge of every screen in the app, not even me, so exploring it together was a
great way to uncover what needed immediate attention. One example was our partner page, which displayed information
to our users about Artsy’s partners: galleries, museums, auction houses, etc. We learned that the app actually used
an ancient web view, and it didn’t even show the partner’s <em>artworks</em>. The artworks! Probably the most important
thing for it to do!</p>

<p><img src="/images/2020-09-29-becoming-mobile-first-at-artsy/old_partner.png" alt="Screenshot of a presentation showing the old partner page" /></p>

<p><img src="/images/2020-09-29-becoming-mobile-first-at-artsy/new_partner.png" alt="Screenshot of a presentation showing the new partner page, which looks much nicer" /></p>

<p>This is where “being scrappy” started to take root. Usually when developing new features, Artsy designers iterate
on a design before we plan on execution, then we implement, test, and deploy. The nice part of replacing something
that was <em>obviously broken</em> was that we didn’t feel beholden to this usual process; whatever we built would be
better than what we had. One engineer and our designer started the new partner page with a quick pencil sketch,
using the app’s existing UI abstractions to design something that we could quickly build. Once we had a prototype,
the engineer and designer iterated. The whole project took only about three weeks.</p>

<h2 id="early-wins">Early Wins</h2>

<p>Learning about the app itself was critical, but equally important was learning about how our users <em>used</em> the app.
We scheduled user interviews and, in the mean time, looked into our anonymized user analytics. Our data analyst
found a few representative sessions and we walked through each action that a user took. One big lesson here was how
much our app users relied on the app’s search feature, which was still written in Objective-C and hadn’t been
updated in a long time. We found that users would often search for the same query several times in the same
session. For example, users would search for “banksy”, wander off exploring some art, and then return to search for
“bansky” again. And again. And again.</p>

<p>Our search implementation didn’t show users their own recent searches, which would have greatly reduced the amount
of friction users experienced while exploring the art world in the app. Our other engineer took point working with
our designer to migrate the app’s search to React Native. We also added some other features to our search page,
like adding entity subtitles so users would know if the result they were tapping on was an artwork, and artist, a
gallery, and so on. The whole project took about a month to complete, and we have continued to iterate on the app’s
search.</p>

<p><img src="/images/2020-09-29-becoming-mobile-first-at-artsy/new_search.png" alt="Screenshot of a presentation showing the new search" /></p>

<p>In early conversations with company leadership, the Mobile Experience team settled on an… interesting strategy to
what we would prioritize. Our mission was “to make the app not suck.” This might seem harsh! But it came from a
place of caring. We knew how much better the app could be and we were motivated to make that a reality. In the
spring of 2020, the team felt like we had reached a point where the app no longer “sucked” – our goal now was “to
make the app amazing.”</p>

<p>During 2020, we made a lot of changes to the app. We had built a new home page, a profile tab for users, granular
push notification settings, Sign In with Apple, and more.</p>

<p><img src="/images/2020-09-29-becoming-mobile-first-at-artsy/new_home.png" alt="Screenshot of a presentation showing the new home page" /></p>

<p>It was really exciting to show off our progress to the rest of the company at our monthly Demo Day, especially in
those early months. The product team makes up only a quarter of our company and it was really cool to hear gallery
liaisons complementing our new partner page, or sales people complementing our refreshed home feed. I think that
people had gotten so used to the app not moving much at all that this sudden high velocity of development was as
exciting for them as it was for us.</p>

<h2 id="setting-up-others-to-succeed">Setting Up Others To Succeed</h2>

<p>Artsy’s goal for the Mobile Experience team was explicitly <em>not</em> to centralize all our iOS feature development, and
so our mandate included much more that just working on iOS software ourselves. We wanted to sit between a typical
product team and a “platform” team, to provide infrastructure and assistance so any team at Artsy could develop
their own iOS feature. This was a big challenge, and required work at the individual and team levels.</p>

<p>The first step was apparent before we even created the Mobile Experience team. Artsy Engineering runs skills
surveys every six months, and we knew that building iOS software in React Native was something Artsy engineers
weren’t really familiar with, but that they really wanted to learn more about. I worked with the Engineering team’s
Peer Learning Working Group to design a curriculum – big shout out to Christina and Adam for their help here!</p>

<p><a href="https://artsy.github.io/blog/2019/12/03/ios-learning-group/">The iOS Learning Group took four weeks to deliver four lessons</a>.
The learners were mostly web engineers, so I emphasized the familiar parts of writing React Native software. I also
provided weekly office hours for learners to get assistance with homework. I even stretched my wings as an
educator, developing new skills around curriculum design and delivery. After the course, learners responded
positively to the experience and we have integrated lessons learned from the iOS Learning Group into subsequent
peer learning groups.</p>

<h2 id="aligning-product-releases">Aligning Product Releases</h2>

<p>Now that engineers had a solid grasp of how to build software in our application, we could re-align our product
development process around iOS. I can’t speak to the design side of this, but from a product perspective the most
critical milestone was defining a regular 2-week app release cadence. Let me explain.</p>

<p>Prior to the Mobile Experience team, we released the app pretty irregularly. We would release whenever we had
something big to release, basically. There are two major flaws with that approach. The first problem is that since
each release was bigger, each release was scarier. No one really felt confident releasing app updates. The second
problem was that large pieces of work tended to get coupled together. This came to a head last summer when we were
blocked from releasing an redesigned artwork view because we were waiting for a major overhaul to Artsy’s GraphQL
API to be completed. Without guidance or structure, different teams were building big projects and both had their
changes in our default branch – it was a bit chaotic.</p>

<p>These two problems are incidental to how we worked at Artsy but there is another, inherent problem to developing
mobile apps:
<a href="https://artsy.github.io/blog/2020/03/02/ios-deploys-super-weird-totally-normal/">deploying iOS software is weird</a>.
Engineers, designers, and product managers at Artsy are used to being able to quickly and cheaply deploy software
to the <em>web</em>, not the App Store. iOS software is deployed to our user’s hardware, not to servers we control, which
introduces the possibility that users might not upgrade. Software we shipped years ago is still being run today –
we have the analytics to prove it. Not to mention that every app update has to go through Apple’s App Store review
process. Getting our product team aligned on a release schedule might also help us get aligned on the weirdness of
deploying iOS software.</p>

<center>
<blockquote class="twitter-tweet"><p lang="en" dir="ltr">iOS developers! I have a question for you. I hear a lot about teams releasing app updates on a 2-week cadence, to increase user confidence/App Store ranking/team morale/etc.<br /><br />Have any teams shared their experiences with this? Bonus points for any quantitative data. Thanks!! 🤗</p>&mdash; Ash Furrow (@ashfurrow) <a href="https://twitter.com/ashfurrow/status/1184845989510811649?ref_src=twsrc%5Etfw">October 17, 2019</a></blockquote> <script async="" src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</center>
<p><br /></p>

<p>As the Mobile Experience team formed, I reached out to other mobile teams to find out about how they structured
regular releases. <a href="https://twitter.com/Cform">Matt Greenwell</a> from BuzzFeed was really helpful in particular,
outlining their experience of the pros and cons of a regular release cadence. We implemented a two-week release
cadence so that all product teams could align their own feature development and testing around this predictable
structure. We also created documentation for teams to hide their in-progress work behind feature flags. And
finally, we refined our app QA process; teams would QA their own features and bug fixes while the Mobile Experience
team would used a QA script to test the app <em>generally</em>, every other Monday, before submitting an update to the App
Store.</p>

<p><img src="/images/2020-09-29-becoming-mobile-first-at-artsy/cadence.png" alt="Calendar describing our cadence on an example sprint" /></p>

<h2 id="making-deploys-not-scary">Making Deploys Not Scary</h2>

<p>To further help teams get into the habit of developing and releasing iOS software often, we created nightly betas.
We also adopted a clever idea from our web colleagues: deploy blocks. In case of a technical reason to not release
a beta, we create a block and the CI job that deploys the beta would fail with a descriptive message. This reduced
a lot of chatter in Slack where engineers would ask “could I make a new beta?” Instead, engineers usually just wait
for the nightly beta. And if they get impatient, they now default to action (their beta deploy will fail if we set
up a block).</p>

<p>All of this was automated through <a href="https://fastlane.tools">fastlane</a> on our CI provider. We had been using fastlane
for a long time at Artsy, but the Mobile Experience team took the time to share knowledge of how it worked. Any
engineer at Artsy can now make a beta (<code class="language-plaintext highlighter-rouge">make deploy</code>) or promote the latest beta to an App Store submission
(<code class="language-plaintext highlighter-rouge">make promote_beta_to_submission</code>).</p>

<p>We deploy more often and, consequently, each deploy is less scary. And everyone is aware of the need to hide
in-progress work behind feature flags. At this point, updates to our app are mundane, predictable, and boring. Just
the way we like them.</p>

<h2 id="being-generous-with-our-time">Being Generous With Our Time</h2>

<p>Our QA and deploy process touches on something I want to go into more detail about, which is how the Mobile
Experience team helped support other product teams. I described earlier how Mobile Experience sits somewhere
between a normal product team and a platform team, and we leveraged that to our advantage. It would have been easy
to become primarily a supportive team, and leave feature development up to others. However, that would leave us
unaware of how day-to-day development <em>feels</em> in the app. We own the platform, and that includes the developer
experience. By sitting in this ambiguous in-between state, we stayed aware of both the needs of everyday
developers, and the needs of our platform.</p>

<p>I would encourage engineers from other teams to ask us for help, which led to a lot of pairing sessions. To be
honest, I think it probably interfered with our productivity, but it was worth it. A half hour of my time spent
pairing with a colleague might save them three hours of banging their head against Xcode. But it’s not the time
saved that I care about, it’s the head-banging. I want engineers at Artsy to feel empowered to build their own iOS
software, and that’s only going to happen if they feel comfortable and supported.</p>

<p>When the Galleries team kicked off their ambitious Viewing Rooms project, we helped them get started by lending an
engineer to them for a few sprints. When they ran into problems, we were generous with our time by pairing with
them. When they were nearing completion, we helped them test the new feature. This all culminated in a smooth
release.</p>

<p><img src="/images/2020-09-29-becoming-mobile-first-at-artsy/new_loader.png" alt="Screenshot of a presentation showing the new home page's new loading indicator" /></p>

<p>Speaking of Developer Experience, we took a keen interest in standardizing our best practices and modernizing the
codebase. We
<a href="https://github.com/artsy/eigen/blob/dc81bbc9cd33d51d10054a6c57e61a1bd0ee3e75/docs/preferred_practices.md">documented how we wanted the app’s codebase to look</a>
and set up
<a href="https://github.com/artsy/eigen/blob/dc81bbc9cd33d51d10054a6c57e61a1bd0ee3e75/tslint-rules/useWrappedComponentsRule.js">processes like lint rules</a>
to encourage developers to follow our best practices. We also invited any engineer at Artsy to join our
twice-weekly Knowledge Share meetings (I’ll discuss these in-depth shortly). We looked for bottle necks in the
development process and found many problems, which we addressed.
<a href="https://github.com/artsy/eigen/pull/3022">We combined the Native iOS and React Native repositories</a> (which had
historically been separated). <a href="https://github.com/artsy/eigen/pull/3105">We overhauled the CI configuration</a> to
leverage heavy caching – average build times dropped from fifteen minutes to less than five.
<a href="https://github.com/artsy/eigen/pull/3210">And we adopted stricter TypeScript compiler settings</a> so that engineers
would be forced to deal with nullability and other causes of bugs. (Hey, sometimes you need a carrot and sometimes
you need a stick.)</p>

<p>The React Native community has grown a lot since 2016. If Artsy were to begin our adoption of React Native today,
we would be really well-supported by a community that has defined best practices, documented standard approaches to
problems, and a consolidated opinion on what a React Native codebase should “feel” like. None of that existed in
2016, and our early architectural decisions don’t really reflect contemporary best practices. We continue working
to bring our codebase closer to resembling a fresh project created with <code class="language-plaintext highlighter-rouge">react-native init</code>.</p>

<p>I’m extraordinarily happy with how things have shaped up, and in the direction we continue to move. This is all an
ongoing process, and should remain an ongoing process. For example, engineers were still facing a bottleneck with
core parts of our app’s routing logic that were in Objective-C, so we recently
<a href="https://github.com/artsy/eigen/pull/3771">moved all routing to TypeScript</a>. Not only does moving code out of
Objective-C make it easier for everyone to build, but it also ladders up to a cross-platform Artsy app.</p>

<p>We still have older practices in the app that we want to migrate away from, like testing with Enzyme. But overall,
things are looking good!</p>

<iframe width="100%" height="400" src="https://www.youtube.com/embed/IEn2_WSKFHw" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe>

<h2 id="knowledge-shares">Knowledge Shares</h2>

<p>We achieved most of these big, infrastructural changes in meetings called <em>Knowledge Shares</em>, which I mentioned
earlier. I should write a dedicated blog post on these (update: <a href="/blog/2020/12/09/share-your-knowledge/">I did write one</a>), but in short: Knowledge Shares are a <em>structured</em> time to
facilitate <em>unstructured learning</em>. Anyone can bring a topic to Knowledge Share, from a ticket that they’re stuck
on to an idea they have to a neat trick they recently learned. We set aside these two hours a week to discuss
whatever the team wants, and we don’t only invite engineers.</p>

<p>New feature designs, product roadmaps, and data analyses are often brought up by our non-engineering colleagues; we
discuss these at the beginning of the meetings to make sure everyone’s time is respected. Throughout the week,
someone will raise a question in Slack. Before we had Knowledge Share meetings, we might schedule a dedicated
half-hour meeting to discussing this question. But instead, we now say “alright let’s chat about this at tomorrow’s
KS.” Usually the discussion lasts a lot less than a half hour, so we save time and needless context-switching.</p>

<p>Knowledge Shares are also a manifestation of my philosophy of tech leadership, which is this: none of us have built
an Artsy before, so instead of optimizing for building an Artsy, let’s optimize for <em>learning</em> how to build an
Artsy. The best Artsy we can build. And as a natural byproduct, an Artsy gets built. But it’s the <em>learning</em> that
is treated as the paramount goal.</p>

<p>Like I said, I owe you a whole blog post on Knowledge Share meetings. I hope I have conveyed how important these
scheduled “structured unstructured learning” times have been for us.</p>

<h2 id="the-results">The Results</h2>

<p>So where does that leave us? It’s been a year and change, where are we now? Well I’m happy to say that we’ve made a
huge impact. We’ve gone from only having (at most) one product team writing iOS software at a time to having nearly
<em>every</em> product team building iOS software. Artsy is through the woods of its transition to a mobile-first product
strategy. We still have a ways to go, but it feels like we have finally realized the dream we had in 2016 where
every team is fully equipped and empowered to deliver on their own business goals, across all of Artsy’s canvasses.</p>

<p>Our App Store ranking has shot through the roof – not surprising considering our “make it not suck” and then “make
it amazing” approach. Artsy’s iOS app rating now sits at a stout 4.7.</p>

<p><img src="/images/2020-09-29-becoming-mobile-first-at-artsy/ratings.png" alt="Screenshot of a graph showing an increasing average App Store rating" /></p>

<p>We’ve also started tracking our iOS developer experience within Artsy. We know exactly where we still need work
because we ask our engineers where they need support.</p>

<p>It’s taken a mammoth effort, and there’s so much more that I could talk about, but this blog post is long enough
already! Looking at the work we’ve done, the ways we’ve done it, and the results of our effort… I feel ecstatic.</p>

<h2 id="next-steps">Next Steps</h2>

<p>All that said, Artsy’s product team is currently embarking on another reorganization. With so much technical and
product debt paid off, Artsy has evolved past the need for a dedicated Mobile Experience team. It’s bittersweet,
but I’m proud to say that the new Collector Experience team is about to be born. Our team will continue to own the
mobile platform, including its holistic user experience and day-to-day developer experience, but we’ll have an
expanded mandate. That mandate includes a cross-platform Artsy app that will work for collectors on Android as well
as iOS.</p>

<p>The Mobile Experience team has grown, too. Since we started last year with just a few engineers and limited product
support, we now boast a full roster of engineers and product support. I want to thank everyone on the team,
currently: David, Sam, Brian, Mike, Brittney, Pavlos, and Mounir. You have made the past year an incredibly
rewarding experience for me as I learn the ropes of technical leadership. I’m so proud of what we’ve built together
and I’m excited for what the new Collector Experience team is going to do next!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Managing Secrets in a React Native App]]></title>
    <link href="https://artsy.github.io/blog/2018/06/15/cocoapods-keys-react-native/"/>
    <updated>2018-06-15T00:00:00+00:00</updated>
    <id>https://artsy.github.io/blog/2018/06/15/cocoapods-keys-react-native</id>
    <content type="html"><![CDATA[<!--
Iɴᴛʀᴏᴅᴜᴄᴛɪᴏɴ
-->

<p>Hi! I’m Erik, a software engineer on the Purchase team. One of the most visible payoffs from Artsy’s investments in React Native <a href="https://artsy.github.io/search/?q=react+native">over the past two years</a> has been the opening up of our mobile codebase to contributors like myself coming primarily from web stacks. It’s nice to be able to build mobile interfaces with the same declarative API used by so many of our web projects, but sometimes we still need to bridge the divide to our Objective-C and Swift ecosystem. One such case: replacing the app secrets typically loaded from a deploy environment or web developer’s <a href="https://www.npmjs.com/package/dotenv">dotenv</a> file.</p>

<!-- more -->
<!--
Mᴀɪɴ Bᴏᴅʏ
-->

<p><a href="https://github.com/artsy/emission">Emission</a> is Artsy’s React Native component library. It contains its own native app in the <code class="language-plaintext highlighter-rouge">/Example</code> folder, which uses <a href="https://artsy.github.io/blog/2015/01/21/cocoapods-keys-and-CI/">cocoapods-keys</a> to store secrets while still letting us code in the open. In order to expose these keys to our React Native components, however, we must do a fair bit of setup. Here’s a straightforward how-to that also makes a quick tour through the iOS ecosystem for web developers looking at the React Native JavaScript runtime today.</p>

<p>Links to examples below come from <a href="https://github.com/artsy/emission/pull/1086/commits/4a2a3e9260e97d791536cf38376a06b0ad0946a8">this commit</a> which adds a key for the Stripe API to Emission. When we are finished, a client app (<code class="language-plaintext highlighter-rouge">/Example</code>, <a href="https://github.com/artsy/eigen">Eigen</a>, etc.) will be able to initialize Emission with this secret, which will in turn make it available to React Native components.</p>

<h2 id="steps">Steps</h2>

<h4 id="1-add-the-key-to-the-apps-podfile">1. Add the key to the app’s Podfile.</h4>

<p>This is the extent of <code class="language-plaintext highlighter-rouge">cocoapods-keys</code> official <a href="https://github.com/orta/cocoapods-keys#usage">setup</a>, and after this you <strong>could</strong> set the key via <code class="language-plaintext highlighter-rouge">pod keys set &lt;NAME&gt;</code> or <code class="language-plaintext highlighter-rouge">pod install</code>… but we have more to do.</p>

<p><a href="https://github.com/artsy/emission/blob/4a2a3e9260e97d791536cf38376a06b0ad0946a8/Example/Podfile#L63">/Example/Podfile</a>:</p>

<div class="language-diff highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">plugin 'cocoapods-keys', {
</span>  :target =&gt; 'Emission',
  :keys =&gt; [
    'ArtsyAPIClientSecret',
    'ArtsyAPIClientKey',
<span class="gi">+    'StripePublishableKey',
</span>  ]
<span class="err">}</span>
</code></pre></div></div>

<hr />

<h4 id="2-configure-the-library-to-consume-our-new-key">2. Configure the library to consume our new key</h4>

<p>We’ll need to update the <code class="language-plaintext highlighter-rouge">initWithUserId...</code> function — one <strong>fun</strong> part of adjusting to Objective-C is that rather than named functions, we just refer to them by their entire signatures — to expose the new key as a property and add it to <code class="language-plaintext highlighter-rouge">constantsToExport</code> (<a href="https://facebook.github.io/react-native/docs/native-modules-ios.html#exporting-constants">docs</a>).</p>

<p>Note that this is happening in our <em>Emission Pod</em>; The pod now expects that key to be available in our <em>consuming</em> Example app as defined above.</p>

<p><a href="https://github.com/artsy/emission/blob/4a2a3e9260e97d791536cf38376a06b0ad0946a8/Pod/Classes/Core/AREmission.h#L17-L34">/Pod/Classes/Core/AREmission.h</a>:</p>

<div class="language-diff highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">//</span> ENV Variables
 #import &lt;React/RCTBridgeModule.h&gt;

 @interface AREmissionConfiguration : NSObject &lt;RCTBridgeModule&gt;

+ @property (nonatomic, copy, readonly, nullable) NSString *stripePublishableKey;

 - (instancetype)initWithUserID:(NSString *)userID
           authenticationToken:(NSString *)token
                     sentryDSN:(nullable NSString *)sentryDSN
<span class="gi">+         stripePublishableKey:(NSString *)stripePublishableKey
</span>              googleMapsAPIKey:(nullable NSString *)googleAPIKey
                    gravityURL:(NSString *)gravity
                metaphysicsURL:(NSString *)metaphysics
                     userAgent:(NSString *)userAgent;
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">AREmission</code>’s implementation (.m) needs to be configured to take this new key- It will be exported to our React Native components as <code class="language-plaintext highlighter-rouge">Emission</code>. We make our initializer match the signature defined in the header (.h) file, and add an instance <code class="language-plaintext highlighter-rouge">_stripePublishableKey</code> to match the <code class="language-plaintext highlighter-rouge">@property</code> declaration.</p>

<p><a href="https://github.com/artsy/emission/blob/4a2a3e9260e97d791536cf38376a06b0ad0946a8/Pod/Classes/Core/AREmission.m#L24-L60">/Pod/Classes/Core/AREmission.m</a>:</p>

<div class="language-diff highlighter-rouge"><div class="highlight"><pre class="highlight"><code> @implementation AREmissionConfiguration
 RCT_EXPORT_MODULE(Emission);
 # ...

 - (NSDictionary *)constantsToExport
 {
   return @{
<span class="gi">+    @"stripePublishableKey": self.stripePublishableKey ?: @"",
</span>     # ...lots more
   };
 }

 - (instancetype)initWithUserID:(NSString *)userID
            authenticationToken:(NSString *)token
                      sentryDSN:(NSString *)sentryDSN
<span class="gi">+          stripePublishableKey:(NSString *)stripePublishableKey
</span>               googleMapsAPIKey:(NSString *)googleAPIKey
                     gravityURL:(NSString *)gravity
                 metaphysicsURL:(NSString *)metaphysics
                      userAgent:(nonnull NSString *)userAgent
 {
     self = [super init];
     _userID = [userID copy];
<span class="gi">+    _stripePublishableKey = [stripePublishableKey copy];
</span>     # ... More copies...
     return self;
 }
</code></pre></div></div>

<p><em>Why is <code class="language-plaintext highlighter-rouge">copy</code> needed at all? See <a href="https://stackoverflow.com/questions/387959/nsstring-property-copy-or-retain/388002#388002">here</a>.</em></p>

<hr />

<h4 id="3-configure-the-example-app-to-expose-the-new-key-to-our-library">3. Configure the example app to expose the new key to our library</h4>

<p>After making sure we have imported the keys from <code class="language-plaintext highlighter-rouge">cocoapods-keys</code> we update Emission’s setup to use the new initializer signature we defined above.</p>

<p><a href="https://github.com/artsy/emission/blob/4a2a3e9260e97d791536cf38376a06b0ad0946a8/Example/Emission/AppDelegate.m#L109">Example/Emission/AppDelegate.m</a>:</p>

<div class="language-diff highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">#import</span> &lt;Keys/EmissionKeys.h&gt;

  - (void)setupEmissionWithUserID:(NSString *)userID accessToken:(NSString *)accessToken keychainService:(NSString *)service;
  {
    # ...
     AREmissionConfiguration *config = [[AREmissionConfiguration alloc]
      initWithUserID:userID
      authenticationToken:accessToken
      sentryDSN:nil
<span class="gi">+     stripePublishableKey:keys.stripePublishableKey
</span>      googleMapsAPIKey:nil
      gravityURL:setup.gravityURL
      metaphysicsURL:setup.metaphysicsURL
      userAgent:@"Emission Example"];
    # ...
</code></pre></div></div>

<hr />

<h4 id="4-use-that-configured-key-in-a-react-native-component">4. Use that configured key in a React Native component.</h4>

<p><code class="language-plaintext highlighter-rouge">Emission</code> is now exposed along with its configured keys via React Native’s <a href="https://facebook.github.io/react-native/docs/native-modules-ios.html">NativeModules</a>.</p>

<p><a href="https://github.com/artsy/emission/blob/4a2a3e9260e97d791536cf38376a06b0ad0946a8/src/lib/components/bidding/screens/confirmfirsttimebid.tsx#l31">src/lib/Components/Bidding/Screens/ConfirmFirstTimeBid.tsx</a>:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">NativeModules</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react-native</span><span class="dl">"</span><span class="p">;</span>
<span class="kd">const</span> <span class="nx">Emission</span> <span class="o">=</span> <span class="nx">NativeModules</span><span class="p">.</span><span class="nx">Emission</span> <span class="o">||</span> <span class="p">{};</span>

<span class="nx">stripe</span><span class="p">.</span><span class="nx">setOptions</span><span class="p">({</span>
  <span class="na">publishableKey</span><span class="p">:</span> <span class="nx">Emission</span><span class="p">.</span><span class="nx">stripePublishableKey</span>
<span class="p">});</span>
</code></pre></div></div>

<!--
Cᴏɴᴄʟᴜsɪᴏɴ
-->

<p>That’s it! Compared to a familiar dotenv file, <strong>it</strong> certainly means a bit more ceremony here, but we are working through React Native code, its containing Pod <em>and</em> a consuming app. The process is more complicated, but it’s also a nice overview of some fundamentals of Objective-C, iOS development and bridging the gap between react and mobile native code.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Making a React Native Components Pod]]></title>
    <link href="https://artsy.github.io/blog/2018/04/17/making-a-components-pod/"/>
    <updated>2018-04-17T00:00:00+00:00</updated>
    <id>https://artsy.github.io/blog/2018/04/17/making-a-components-pod</id>
    <content type="html"><![CDATA[<p>When we talk about our React Native setup in abstract, there are two kinds of “<a href="http://2.bp.blogspot.com/_PekcT72-PGE/SK3PTKwW_eI/AAAAAAAAAGY/ALg_ApHyzR8/s1600-h/1219140692800.jpg">now draw The Tick</a>” for
iOS developers:</p>

<ul>
  <li>How do I build this React Native as a CocoaPods setup?</li>
  <li>How do I get all the JavaScript tooling setup up?</li>
</ul>

<p>We’re going to address the first part in this post. By the end of this post we’re going to get an <a href="/blog/2016/08/24/On-Emission/">Emission-like
repo</a> set up for an existing OSS Swift iOS app called <a href="https://github.com/GitHawkApp/GitHawk/">GitHawk</a>. The aim being to introduce no
JavaScript tooling into GitHawk itself, and to only expose iOS-native <code class="language-plaintext highlighter-rouge">UIViewControllers</code> via a CocoaPod which is
consumed by GitHawk.</p>

<p>To do this we’re going to use the CocoaPods’ <code class="language-plaintext highlighter-rouge">pod lib create</code> template, and React Native’s <code class="language-plaintext highlighter-rouge">react-native init</code> to
make a self-contained React Native repo. It will export a JS file, and some native code which Podspec will
reference. This keeps the tooling complexity for iOS and React Native separate. Read on to start digging in.</p>

<!-- more -->

<p>So, I’m <strong>choosing</strong> to be annoying here. I will intentionally be adding <code class="language-plaintext highlighter-rouge">$</code>s before all of the commands, this is
specifically to slow you down and make you think about each command. This isn’t a quick tutorial you can skim in 2
minutes, running though it properly should take about an hour.</p>

<p>_You can also watch along with <a href="https://www.youtube.com/watch?v=ucQXL4vkP78">this YouTube video</a> of me going through
the tutorial at <a href="http://artsy.github.io/artsy-x-react-native.html">Artsy x React Native_</a>.</p>

<div class="mobile-only">
<p>
  <strong>Also, before you get started</strong>, it looks like you're using a really small screen, this post expects you would have a terminal around with useful tools for getting stuff done. I'm afraid without that, you're not going to get much out of it. I'd recommend switching to a computer.
</p>
</div>

<h2 id="what-are-we-going-to-do">What Are We Going To Do?</h2>

<p>We will make a React Native components library (GitDawg) for an existing open-source iOS Swift Application
(GitHawk). This reflects an existing app with a team who wants to experiment with React Native in a way that doesn’t
affect the main codebase. In Artsy, GitDawg is <a href="https://github.com/artsy/emission">Emission</a>, and GitHawk is <a href="https://github.com/artsy/eigen">Eigen</a>.</p>

<ol>
  <li>
    <p>We will clone and set up GitHawk</p>
  </li>
  <li>
    <p>We will use <code class="language-plaintext highlighter-rouge">pod lib create</code> to make a library repo called GitDawg</p>
  </li>
  <li>
    <p>We will use <code class="language-plaintext highlighter-rouge">react-native init</code> to make a React Native environment</p>
  </li>
  <li>
    <p>We will bundle the React Native code into our Pod’s asset folder</p>
  </li>
  <li>
    <p>We will edit the Podspec for GitDawg, and then the Podfile for the example project to consume it</p>
  </li>
  <li>
    <p>We will use <a href="https://github.com/orta/cocoapods-fix-react-native#readme">cocoapods-fix-react-native</a> to hotfix the React Native files</p>
  </li>
  <li>
    <p>We will expose a UIViewController which corresponds to the default screen from <code class="language-plaintext highlighter-rouge">react-native init</code> in our Pod</p>
  </li>
  <li>
    <p>We will change the storyboard reference to point to the UIViewController from our Pod, and run the simulator to
see our welcome screen.</p>
  </li>
  <li>
    <p>We will set up GitHawk to consume our new Pod</p>
  </li>
  <li>
    <p>We will change GitHawk to show our new UIViewController instead of the bookmarks screen</p>
  </li>
  <li>
    <p>We will edit GitDawg to act more like a development environment</p>
  </li>
</ol>

<h2 id="githawk">GitHawk</h2>

<p>Let’s get started by having a working <a href="https://github.com/GitHawkApp/GitHawk/">copy of GitHawk</a>. I’ll leave the README for GitHawk to do that, but
if you want to be certain you’re on the same version as me - I’m working from this commit
<code class="language-plaintext highlighter-rouge">6dc2988d23d70eb0862d11f4a365bf47a87848c6</code>.</p>

<p>Clone a copy of GitHawk, and get it running in your Simulator, should take about 5-10 minutes, you’ll need Xcode
9.3. Then we can move on to starting our components repo.</p>

<h2 id="gitdawg-js">GitDawg JS</h2>

<p>When you’re done with GitHawk, go back a folder so that you’re ready to create the GitDawg repo: <code class="language-plaintext highlighter-rouge">$ cd ..</code>.</p>

<h3 id="pre-requisites">Pre-requisites</h3>

<p>We need CocoaPods: <code class="language-plaintext highlighter-rouge">$ gem install cocoapods</code>.</p>

<p>We’re going to need node, and a dependency manager. If you run <code class="language-plaintext highlighter-rouge">$ brew install yarn</code> you will get both.</p>

<p>I’m running on node <code class="language-plaintext highlighter-rouge">8.9.x</code> and yarn <code class="language-plaintext highlighter-rouge">1.5.x</code>. Honestly, it shouldn’t matter if you’re on node 8, or 9. Yarn is
basically CocoaPods for node projects. If you’re wondering what the differences are between <a href="https://github.com/yarnpkg/yarn/">yarn</a> and <a href="https://www.npmjs.com/">NPM</a>,
then TLDR: there used to be some, but now there’s few. I stick with yarn because I prefer how the CLI works, and I
can easily read the lockfile it generates.</p>

<p>We need the React Native CLI, so let’s install it globally: <code class="language-plaintext highlighter-rouge">$ yarn global add react-native-cli</code>.</p>

<h3 id="starting-with-the-pod">Starting with the Pod</h3>

<p>We’re going to let CocoaPods create the initial folder for our project. Let’s set up your Pod:</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>pod lib create GitDawg

Cloning <span class="sb">`</span>https://github.com/CocoaPods/pod-template.git<span class="sb">`</span> into <span class="sb">`</span>GitDawg<span class="sb">`</span><span class="nb">.</span>
Configuring GitDawg template.

<span class="nt">------------------------------</span>

To get you started we need to ask a few questions, this should only take a minute.

If this is your first <span class="nb">time </span>we recommend running through with the guide:
 - http://guides.cocoapods.org/making/using-pod-lib-create.html
 <span class="o">(</span> hold cmd and click links to open <span class="k">in </span>a browser. <span class="o">)</span>


What platform <span class="k">do </span>you want to use?? <span class="o">[</span> iOS / macOS <span class="o">]</span>
 <span class="o">&gt;</span> iOS

What language <span class="k">do </span>you want to use?? <span class="o">[</span> Swift / ObjC <span class="o">]</span>
 <span class="o">&gt;</span> ObjC

Would you like to include a demo application with your library? <span class="o">[</span> Yes / No <span class="o">]</span>
 <span class="o">&gt;</span> Yes

Which testing frameworks will you use? <span class="o">[</span> Specta / Kiwi / None <span class="o">]</span>
 <span class="o">&gt;</span> None

Would you like to <span class="k">do </span>view based testing? <span class="o">[</span> Yes / No <span class="o">]</span>
 <span class="o">&gt;</span> No

What is your class prefix?
 <span class="o">&gt;</span> GD
</code></pre></div></div>

<p>I’d recommend using only Objective-C at this point, for simplicities sake. Swift is a great language, but I want
tooling simplicity. Swift and React Native is [docs] though. We’re also not going to write enough native code to
warrant the setup for testing. Plus, if we skip native testing then we can run CI on linux - which is basically
instant in comparison.</p>

<p>This has made a new library. Let’s go into our project’s root with <code class="language-plaintext highlighter-rouge">$ cd GitDawg</code>. There shouldn’t be too much in
here:</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">ls
</span>Example         GitDawg         GitDawg.podspec LICENSE         README.md         _Pods.xcodeproj
</code></pre></div></div>

<p>Because the core competency of the repo is the JavaScript, we’re going to rename the “GitDawg” folder in the root to
be about the CocoaPod instead of owning the name of the project. Run <code class="language-plaintext highlighter-rouge">$ mv GitDawg Pod</code> to do that.</p>

<p>We want to create our React Native project. I’m hard-coding my versions in these commands to try ensure this post
lasts some time, but you never know what amazing changes the future brings. If things are broken, leave a comment at
the bottom of this post.</p>

<p>Let’s create a GitDawg React Native project, and then rename the folder to src:</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Use the RN CLI to create a new RN app in the folder GitDawg</span>
<span class="nv">$ </span>react-native init GitDawg <span class="nt">--version</span> react-native@0.54.4

<span class="c"># Rename the folder to src</span>
<span class="nv">$ </span><span class="nb">mv </span>GitDawg src

<span class="c"># Remove _Pods.xcodeproj as it's relevant for our pod</span>
<span class="nv">$ </span><span class="nb">rm</span> <span class="nt">-rf</span> _Pods.xcodeproj
</code></pre></div></div>

<p>We don’t want all our project files living in a sub-folder though, so let’s move a few of them back to the repo’s
root, then remove some unused files.</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Copy the package metadata, deps, lockfile and dotfiles to root</span>
<span class="nv">$ </span><span class="nb">mv </span>src/package.json src/node_modules src/yarn.lock src/.<span class="k">*</span> <span class="nb">.</span>

<span class="c"># Remove the ios and android scaffolds as we have the CP one</span>
<span class="nv">$ </span><span class="nb">rm</span> <span class="nt">-rf</span> src/ios src/android
</code></pre></div></div>

<p>Which should make your app’s folder look something like this:</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">ls
</span>Example         GitDawg.podspec LICENSE         README.md       Pods        node_modules    package.json    src             yarn.lock

<span class="nv">$ </span><span class="nb">ls </span>src/
App.js    __tests__ app.json  index.js
</code></pre></div></div>

<p>To ensure everything is still hooked up, let’s make sure that all of your tests are working in the new repo.</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>yarn <span class="nb">test

</span>yarn run v1.5.1
 PASS  src/__tests__/App.js
  ✓ renders correctly <span class="o">(</span>176ms<span class="o">)</span>

Test Suites: 1 passed, 1 total
Tests:       1 passed, 1 total
Snapshots:   0 total
Time:        1.392s
Ran all <span class="nb">test </span>suites.
✨  Done <span class="k">in </span>2.32s.
</code></pre></div></div>

<p>We’re now going to be done with our JavaScript side, basically is our React Native “hello world”. It’s a React
Native project that exposes a single component which says <code class="language-plaintext highlighter-rouge">"Welcome to React Native!"</code>.</p>

<p>However, it’s going to take a bit of work before we can see it in action.</p>

<h3 id="deployment">Deployment</h3>

<p>We’re going to want to have this exposed to our native libraries, so we’re going to ship the bundled JavaScript as
our library’s source code. We do this via the React Native CLI, and it’s going to place the file inside our Pod
folder from earlier.</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>react-native bundle <span class="nt">--entry-file</span> src/index.js <span class="nt">--bundle-output</span> Pod/Assets/GitDawg.js <span class="nt">--assets-dest</span> Pod/Assets
</code></pre></div></div>

<p>It looks like this, when you run it via the sim:</p>

<center><img src="/images/making_cp_pod/success.png" width="50%" /></center>

<h2 id="gitdawg-pod">GitDawg Pod</h2>

<p>With that done, we can start looking at the native side of our codebase. We let <code class="language-plaintext highlighter-rouge">pod lib create</code> set up an Example
app for us to work with in the repo, which consumes a Podspec in the root. So we’re going to take a look at the
Podspec, and update it.</p>

<p>Our goal with the Example app is to set up an app exclusively for developing components in. In Artsy’s case, this
app handles auth to the Artsy API and has a series of jump-off points for developing a component.</p>

<p>To get started we need to modify the CocoaPod this repo represents:</p>

<ul>
  <li>Update our Podspec to handle React Native as a dependency, and our assets</li>
  <li>Add support for native compilation via CocoaPods with <a href="https://github.com/orta/cocoapods-fix-react-native#readme">cocoapods-fix-react-native</a></li>
  <li>Create a single <code class="language-plaintext highlighter-rouge">UIViewController</code> subclass for the Welcome Screen using the bundled React Native JS</li>
</ul>

<p>We want to have our Podspec re-use the metadata from React Native to set up GitDawg’s dependencies. So replace
<code class="language-plaintext highlighter-rouge">GitDawg.podspec</code> with this:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">require</span> <span class="s1">'json'</span>

<span class="c1"># Returns the version number for a package.json file</span>
<span class="n">pkg_version</span> <span class="o">=</span> <span class="nb">lambda</span> <span class="k">do</span> <span class="o">|</span><span class="n">dir_from_root</span> <span class="o">=</span> <span class="s1">''</span><span class="p">,</span> <span class="n">version</span> <span class="o">=</span> <span class="s1">'version'</span><span class="o">|</span>
  <span class="n">path</span> <span class="o">=</span> <span class="no">File</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">__dir__</span><span class="p">,</span> <span class="n">dir_from_root</span><span class="p">,</span> <span class="s1">'package.json'</span><span class="p">)</span>
  <span class="no">JSON</span><span class="p">.</span><span class="nf">parse</span><span class="p">(</span><span class="no">File</span><span class="p">.</span><span class="nf">read</span><span class="p">(</span><span class="n">path</span><span class="p">))[</span><span class="n">version</span><span class="p">]</span>
<span class="k">end</span>

<span class="c1"># Let the main package.json decide the version number for the pod</span>
<span class="n">gitdawg_version</span> <span class="o">=</span> <span class="n">pkg_version</span><span class="p">.</span><span class="nf">call</span>
<span class="c1"># Use the same RN version that the JS tools use</span>
<span class="n">react_native_version</span> <span class="o">=</span> <span class="n">pkg_version</span><span class="p">.</span><span class="nf">call</span><span class="p">(</span><span class="s1">'node_modules/react-native'</span><span class="p">)</span>

<span class="no">Pod</span><span class="o">::</span><span class="no">Spec</span><span class="p">.</span><span class="nf">new</span> <span class="k">do</span> <span class="o">|</span><span class="n">s</span><span class="o">|</span>
  <span class="n">s</span><span class="p">.</span><span class="nf">name</span>             <span class="o">=</span> <span class="s1">'GitDawg'</span>
  <span class="n">s</span><span class="p">.</span><span class="nf">version</span>          <span class="o">=</span> <span class="n">gitdawg_version</span>
  <span class="n">s</span><span class="p">.</span><span class="nf">description</span>      <span class="o">=</span> <span class="s1">'Components for GitHawk.'</span>
  <span class="n">s</span><span class="p">.</span><span class="nf">summary</span>          <span class="o">=</span> <span class="s1">'Components for GitHawk.'</span>
  <span class="n">s</span><span class="p">.</span><span class="nf">homepage</span>         <span class="o">=</span> <span class="s1">'https://github.com/orta/GitDawg'</span>
  <span class="n">s</span><span class="p">.</span><span class="nf">license</span>          <span class="o">=</span> <span class="p">{</span> <span class="ss">type: </span><span class="s1">'MIT'</span><span class="p">,</span> <span class="ss">file: </span><span class="s1">'LICENSE'</span> <span class="p">}</span>
  <span class="n">s</span><span class="p">.</span><span class="nf">author</span>           <span class="o">=</span> <span class="p">{</span> <span class="s1">'orta'</span> <span class="o">=&gt;</span> <span class="s1">'orta.therox@gmail.com'</span> <span class="p">}</span>
  <span class="n">s</span><span class="p">.</span><span class="nf">source</span>           <span class="o">=</span> <span class="p">{</span> <span class="ss">git: </span><span class="s1">'https://github.com/orta/GitDawg.git'</span><span class="p">,</span> <span class="ss">tag: </span><span class="n">s</span><span class="p">.</span><span class="nf">version</span><span class="p">.</span><span class="nf">to_s</span> <span class="p">}</span>

  <span class="n">s</span><span class="p">.</span><span class="nf">source_files</span>   <span class="o">=</span> <span class="s1">'Pod/Classes/**/*.{h,m}'</span>
  <span class="n">s</span><span class="p">.</span><span class="nf">resources</span>      <span class="o">=</span> <span class="s1">'Pod/Assets/{GitDawg.js,assets}'</span>
  <span class="n">s</span><span class="p">.</span><span class="nf">platform</span>       <span class="o">=</span> <span class="ss">:ios</span><span class="p">,</span> <span class="s1">'8.0'</span>

  <span class="c1"># React is split into a set of subspecs, these are the essentials</span>
  <span class="n">s</span><span class="p">.</span><span class="nf">dependency</span> <span class="s1">'React/Core'</span><span class="p">,</span> <span class="n">react_native_version</span>
  <span class="n">s</span><span class="p">.</span><span class="nf">dependency</span> <span class="s1">'React/CxxBridge'</span><span class="p">,</span> <span class="n">react_native_version</span>
  <span class="n">s</span><span class="p">.</span><span class="nf">dependency</span> <span class="s1">'React/RCTAnimation'</span><span class="p">,</span> <span class="n">react_native_version</span>
  <span class="n">s</span><span class="p">.</span><span class="nf">dependency</span> <span class="s1">'React/RCTImage'</span><span class="p">,</span> <span class="n">react_native_version</span>
  <span class="n">s</span><span class="p">.</span><span class="nf">dependency</span> <span class="s1">'React/RCTLinkingIOS'</span><span class="p">,</span> <span class="n">react_native_version</span>
  <span class="n">s</span><span class="p">.</span><span class="nf">dependency</span> <span class="s1">'React/RCTNetwork'</span><span class="p">,</span> <span class="n">react_native_version</span>
  <span class="n">s</span><span class="p">.</span><span class="nf">dependency</span> <span class="s1">'React/RCTText'</span><span class="p">,</span> <span class="n">react_native_version</span>

  <span class="c1"># React's dependencies</span>
  <span class="n">s</span><span class="p">.</span><span class="nf">dependency</span> <span class="s1">'yoga'</span><span class="p">,</span> <span class="s2">"</span><span class="si">#{</span><span class="n">react_native_version</span><span class="si">}</span><span class="s2">.React"</span>
  <span class="n">podspecs</span> <span class="o">=</span> <span class="p">[</span>
    <span class="s1">'node_modules/react-native/third-party-podspecs/DoubleConversion.podspec'</span><span class="p">,</span>
    <span class="s1">'node_modules/react-native/third-party-podspecs/Folly.podspec'</span><span class="p">,</span>
    <span class="s1">'node_modules/react-native/third-party-podspecs/glog.podspec'</span>
  <span class="p">]</span>
  <span class="n">podspecs</span><span class="p">.</span><span class="nf">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">podspec_path</span><span class="o">|</span>
    <span class="n">spec</span> <span class="o">=</span> <span class="no">Pod</span><span class="o">::</span><span class="no">Specification</span><span class="p">.</span><span class="nf">from_file</span> <span class="n">podspec_path</span>
    <span class="n">s</span><span class="p">.</span><span class="nf">dependency</span> <span class="n">spec</span><span class="p">.</span><span class="nf">name</span><span class="p">,</span> <span class="s2">"</span><span class="si">#{</span><span class="n">spec</span><span class="p">.</span><span class="nf">version</span><span class="si">}</span><span class="s2">"</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>This Podspec is probably more complex then you’re used to, but it means less config. To validate the Podspec, use
<code class="language-plaintext highlighter-rouge">$ pod ipc spec GitDawg.podspec</code> and read the JSON it outputs. With the Podspec set up, it’s time to set up the
example project’s <code class="language-plaintext highlighter-rouge">Gemfile</code> and <code class="language-plaintext highlighter-rouge">Podfile</code>.</p>

<p>We’ll start with applying the <a href="https://github.com/orta/cocoapods-fix-react-native#readme">React Native hot-fix plugin</a>, sometimes a version of React Native is released
that doesn’t support Swift frameworks (as Facebook doesn’t use Swift) and so you have to apply some patches to the
code. I made a CocoaPods Plugin that handles the hot-fixes for you.</p>

<p>Start by making a <code class="language-plaintext highlighter-rouge">Gemfile</code> in the <code class="language-plaintext highlighter-rouge">Example</code> folder: <code class="language-plaintext highlighter-rouge">touch Example/Gemfile</code></p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">source</span> <span class="s1">'https://rubygems.org'</span>

<span class="n">gem</span> <span class="s1">'cocoapods'</span>
<span class="n">gem</span> <span class="s1">'cocoapods-fix-react-native'</span>
</code></pre></div></div>

<p>Then run <code class="language-plaintext highlighter-rouge">$ bundle install</code> in the <code class="language-plaintext highlighter-rouge">Example</code> folder, which will set up the ruby dependencies of <code class="language-plaintext highlighter-rouge">cocoapods</code> and
<code class="language-plaintext highlighter-rouge">cocoapods-fix-react-native</code> for your app. This makes it possible to reference <code class="language-plaintext highlighter-rouge">"cocoapods-fix-react-native"</code> in
your <code class="language-plaintext highlighter-rouge">Podfile</code> next.</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">cd </span>Example
<span class="nv">$ </span>bundle <span class="nb">install</span>
</code></pre></div></div>

<p>We want to take the current <code class="language-plaintext highlighter-rouge">Podfile</code> and make sure that every React Native dependency comes from the folder
<code class="language-plaintext highlighter-rouge">node_modules/react-native</code>. We can do this using the <code class="language-plaintext highlighter-rouge">:path</code> operator to redeclare where you can find each Pod.</p>

<p>Note: we also <em>extend</em> the amount of subspecs for <code class="language-plaintext highlighter-rouge">'React'</code> in this Podfile via <code class="language-plaintext highlighter-rouge">subspecs: ['DevSupport']</code> - this
subspec is what provide the hot code reloading and other developer tools. You’ll want this, in here, it will mean
that the example app can be used as a dev environment, and your main app will only get a production environment.</p>

<p>So edit <code class="language-plaintext highlighter-rouge">Example/Podfile</code> to look like this:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">platform</span> <span class="ss">:ios</span><span class="p">,</span> <span class="s1">'9.0'</span>

<span class="n">node_modules_path</span> <span class="o">=</span> <span class="s1">'../node_modules'</span>
<span class="n">react_path</span> <span class="o">=</span> <span class="no">File</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">node_modules_path</span><span class="p">,</span> <span class="s1">'react-native'</span><span class="p">)</span>
<span class="n">yoga_path</span> <span class="o">=</span> <span class="no">File</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">react_path</span><span class="p">,</span> <span class="s1">'ReactCommon/yoga'</span><span class="p">)</span>
<span class="n">folly_spec_path</span> <span class="o">=</span> <span class="no">File</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">react_path</span><span class="p">,</span> <span class="s1">'third-party-podspecs/Folly.podspec'</span><span class="p">)</span>
<span class="n">glog_spec_path</span> <span class="o">=</span> <span class="no">File</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">react_path</span><span class="p">,</span> <span class="s1">'third-party-podspecs/glog.podspec'</span><span class="p">)</span>
<span class="n">double_conversion_spec_path</span> <span class="o">=</span> <span class="no">File</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">react_path</span><span class="p">,</span> <span class="s1">'third-party-podspecs/DoubleConversion.podspec'</span><span class="p">)</span>

<span class="n">plugin</span> <span class="s1">'cocoapods-fix-react-native'</span>

<span class="n">target</span> <span class="s1">'GitDawg_Example'</span> <span class="k">do</span>
  <span class="n">pod</span> <span class="s1">'GitDawg'</span><span class="p">,</span> <span class="ss">path: </span><span class="s1">'../'</span>

  <span class="c1"># We want extra developer support in React inside this app</span>
  <span class="n">pod</span> <span class="s1">'React'</span><span class="p">,</span> <span class="ss">path: </span><span class="n">react_path</span><span class="p">,</span> <span class="ss">subspecs: </span><span class="p">[</span><span class="s1">'DevSupport'</span><span class="p">]</span>

  <span class="c1"># We're letting CP know where it can find these Podspecs</span>
  <span class="n">pod</span> <span class="s1">'yoga'</span><span class="p">,</span> <span class="ss">path: </span><span class="n">yoga_path</span>
  <span class="n">pod</span> <span class="s1">'Folly'</span><span class="p">,</span> <span class="ss">podspec: </span><span class="n">folly_spec_path</span>
  <span class="n">pod</span> <span class="s1">'DoubleConversion'</span><span class="p">,</span> <span class="ss">podspec: </span><span class="n">double_conversion_spec_path</span>
  <span class="n">pod</span> <span class="s1">'glog'</span><span class="p">,</span> <span class="ss">podspec: </span><span class="n">glog_spec_path</span>
<span class="k">end</span>
</code></pre></div></div>

<p>Run the following to set up the React Native dependencies for your project.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ bundle exec pod install
</code></pre></div></div>

<p>We need some native code to represent our Welcome component from the React Native template. Create two new files in
<code class="language-plaintext highlighter-rouge">Pod/Classes</code>, then re-create the CocoaPods project for it by <code class="language-plaintext highlighter-rouge">pod install</code>ing again.</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">touch</span> ../Pod/Classes/GDWelcomeViewController.h ../Pod/Classes/GDWelcomeViewController.m
<span class="nv">$ </span>bundle <span class="nb">exec </span>pod <span class="nb">install</span>
<span class="nv">$ </span>open GitDawg.xcworkspace
</code></pre></div></div>

<p>We’re going to make a pretty vanilla <code class="language-plaintext highlighter-rouge">UIViewController</code>, so declare it exists in the interface and then use an
<code class="language-plaintext highlighter-rouge">RCTRootView</code> as it’s <code class="language-plaintext highlighter-rouge">self.view</code>.</p>

<div class="language-objc highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#import &lt;UIKit/UIKit.h&gt;
</span>
<span class="k">@interface</span> <span class="nc">GDWelcomeViewController</span> <span class="p">:</span> <span class="nc">UIViewController</span>
<span class="k">@end</span>
</code></pre></div></div>

<p>The <code class="language-plaintext highlighter-rouge">GDWelcomeViewController</code> is going to handle the React bridging, because that is the simplest option for our
Hello World app. We’ll be going back to improve this later.</p>

<div class="language-objc highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#import "GDWelcomeViewController.h"
#import &lt;React/RCTRootView.h&gt;
#import &lt;React/RCTBridgeDelegate.h&gt;
#import &lt;React/RCTBridge.h&gt;
</span>
<span class="c1">// Let this View Controller handle getting the URL for the JS</span>
<span class="k">@interface</span> <span class="nc">GDWelcomeViewController</span> <span class="p">()</span> <span class="o">&lt;</span><span class="n">RCTBridgeDelegate</span><span class="o">&gt;</span>
<span class="k">@end</span>

<span class="k">@implementation</span> <span class="nc">GDWelcomeViewController</span>

<span class="c1">// Set self.view on the VC to be an RCTRootView</span>
<span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">loadView</span>
<span class="p">{</span>
    <span class="n">RCTBridge</span> <span class="o">*</span><span class="n">bridge</span> <span class="o">=</span> <span class="p">[[</span><span class="n">RCTBridge</span> <span class="nf">alloc</span><span class="p">]</span> <span class="nf">initWithDelegate</span><span class="p">:</span><span class="n">self</span> <span class="nf">launchOptions</span><span class="p">:@{}];</span>
    <span class="n">self</span><span class="p">.</span><span class="n">view</span> <span class="o">=</span> <span class="p">[[</span><span class="n">RCTRootView</span> <span class="nf">alloc</span><span class="p">]</span> <span class="nf">initWithBridge</span><span class="p">:</span><span class="n">bridge</span>
                                         <span class="nl">moduleName:</span><span class="s">@"GitDawg"</span>
                                  <span class="nl">initialProperties:</span><span class="p">@{}];</span>
<span class="p">}</span>

<span class="c1">// Use our bundled JS for now</span>
<span class="k">-</span> <span class="p">(</span><span class="n">NSURL</span> <span class="o">*</span><span class="p">)</span><span class="nf">sourceURLForBridge</span><span class="p">:(</span><span class="n">RCTBridge</span> <span class="o">*</span><span class="p">)</span><span class="nv">bridge</span>
<span class="p">{</span>
    <span class="n">NSBundle</span> <span class="o">*</span><span class="n">gitdawgBundle</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSBundle</span> <span class="nf">bundleForClass</span><span class="p">:</span><span class="n">GDWelcomeViewController</span><span class="p">.</span><span class="n">class</span><span class="p">];</span>
    <span class="k">return</span> <span class="p">[</span><span class="n">gitdawgBundle</span> <span class="nf">URLForResource</span><span class="p">:</span><span class="s">@"GitDawg"</span> <span class="nf">withExtension</span><span class="p">:</span><span class="s">@"js"</span><span class="p">];</span>
<span class="p">}</span>

<span class="k">@end</span>
</code></pre></div></div>

<p>As the <code class="language-plaintext highlighter-rouge">pod lib create</code> template uses storyboards, you will need to open up the example app’s storyboard and
<a href="/images/making_cp_pod/settings_welcome.png">change the initial view controller</a> to be a <code class="language-plaintext highlighter-rouge">GDWelcomeViewController</code>.
If you see a <a href="/images/making_cp_pod/not_working.png">white screen</a> on the app launches then this hasn’t been done.
Run the app in the simulator, and you should get this screen:</p>

<center><img src="/images/making_cp_pod/success.png" width="50%" /></center>

<p>This is the default screen from the React Native template, and it’s proof that everything has worked for our dev
app.</p>

<p>Let’s take a second to re-cover what has happened to get to this point.</p>

<ol>
  <li>
    <p>We used the <code class="language-plaintext highlighter-rouge">pod lib create</code> template to make a library repo</p>
  </li>
  <li>
    <p>We used <code class="language-plaintext highlighter-rouge">react-native init</code> to make a React Native environment, which has the settings in the root and the
source code inside <code class="language-plaintext highlighter-rouge">src</code></p>
  </li>
  <li>
    <p>We’ve bundled the React Native code into our CocoaPod’s asset folder</p>
  </li>
  <li>
    <p>We set up the Podspec for GitDawg, and then the Podfile for the example project to consume it</p>
  </li>
  <li>
    <p>We added <a href="https://github.com/orta/cocoapods-fix-react-native#readme">cocoapods-fix-react-native</a> to hot-fix the native files</p>
  </li>
  <li>
    <p>We added a UIViewController for the default screen from <code class="language-plaintext highlighter-rouge">react-native init</code> to our CocoaPod, and ran
<code class="language-plaintext highlighter-rouge">bundle exec pod install</code> to update the example project</p>
  </li>
  <li>
    <p>We changed the storyboard reference to point to the UIViewController from our Pod, and ran the simulator to see
our welcome screen</p>
  </li>
</ol>

<p>This is a full run-through of how your Pod would look when integrated into your main app’s codebase. At this point
you have a unique, isolated app which is going to be your development environment. In our case this app is a menu of
different root screens and admin flags.</p>

<p>—</p>

<p>OK, let’s go take this and migrate it into GitHawk. This is our end-goal:</p>

<center><img src="/images/making_cp_pod/githawk.gif" width="75%" /></center>

<p>Our setup is going to be different here because we can’t rely on React Native coming from the file-system, as we
want to make sure our app has no hint of JS tooling. So we will use CocoaPods to handle downloading and setting up
our versions of the React Native libraries. As of 0.54.x, that is React and Yoga.</p>

<p>We want to have a local copy of the JSON version of Podspecs for each of these. They can be generated from the
Podspecs using <code class="language-plaintext highlighter-rouge">bundle exec pod ipc spec [file.podspec]</code>. Let’s generate one for React:</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">cd </span>GitDawg/node_modules/react-native/<span class="p">;</span> pod ipc spec React.podspec
</code></pre></div></div>

<p>It will output a bunch of JSON to your terminal. This is perfect. Let’s move that text to a file on your desktop.</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>pod ipc spec React.podspec <span class="o">&gt;</span> ~/Desktop/React.podspec.json
</code></pre></div></div>

<!--

You'll see no output if everything went fine. Before you grab that podspec, let's get the one for yoga too.

```sh
$ cd ReactCommon/yoga/; pod ipc spec yoga.podspec > ~/Desktop/yoga.podspec.json
```

-->

<p>For the yoga podspec, you should just grab our version, it’s not worth me explaining all the details why, other than
the PR I made to fix a bug isn’t shipped in 0.54 so run:</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>curl https://raw.githubusercontent.com/artsy/emission/v1.5.0/externals/yoga/yoga.podspec.json <span class="o">&gt;</span> ~/Desktop/yoga.podspec.json
</code></pre></div></div>

<p>You should now have two JSON files in your Desktop. Grab them, move them into the <code class="language-plaintext highlighter-rouge">Local Pods</code> folder inside
GitHawk. It should already have a few Podspecs.</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">cd</span> ../../../ <span class="c"># Or however it takes to get back to the project root</span>

<span class="c"># Move any podspec.json into the Local Pods folder</span>
<span class="nv">$ </span><span class="nb">mv</span> ~/Desktop/<span class="k">*</span>.podspec.json <span class="s2">"Local Pods"</span>
</code></pre></div></div>

<p>Modify their <code class="language-plaintext highlighter-rouge">Gemfile</code> to include <a href="https://github.com/orta/cocoapods-fix-react-native#readme">cocoapods-fix-react-native</a>:</p>

<div class="language-diff highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">source 'https://rubygems.org'
</span>
gem 'cocoapods', '~&gt; 1.4.0'
<span class="gi">+ gem 'cocoapods-fix-react-native'
</span></code></pre></div></div>

<p>Then run <code class="language-plaintext highlighter-rouge">bundle install</code>. Next we need to add GitDawg, and our custom Podspecs to the Podfile:</p>

<div class="language-diff highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">source 'https://github.com/CocoaPods/Specs.git'
</span>
# Local Pods w/ custom changes
<span class="p">pod 'SwipeCellKit', :path =&gt; 'Local Pods/SwipeCellKit'
pod 'GitHubAPI', :path =&gt; 'Local Pods/GitHubAPI'
pod 'GitHubSession', :path =&gt; 'Local Pods/GitHubSession'
</span>
+ # React Native Support
<span class="gi">+ plugin 'cocoapods-fix-react-native'
+ pod 'GitDawg', :path =&gt; '../GitDawg'
+ pod 'React', :podspec =&gt; 'Local Pods/React.podspec.json'
+ pod 'yoga',  :podspec =&gt; 'Local Pods/yoga.podspec.json'
</span>
target 'Freetime' do
</code></pre></div></div>

<p>Then run <code class="language-plaintext highlighter-rouge">$ bundle exec pod install</code>. That should grab React Native for you. Unlike inside GitDawg, CocoaPods will
download the source code from the internet. <code class="language-plaintext highlighter-rouge">:podspec</code> only tells CocoaPods where to find the Podspec, but it will
still download code externally.</p>

<p>Open up the Xcode Workspace - <code class="language-plaintext highlighter-rouge">open Freetime.xcworkspace</code>, and we’re gonna make the code changes - it’s all in one
file. Open the file <code class="language-plaintext highlighter-rouge">RootNavigationManager.swift</code> (it’s in <code class="language-plaintext highlighter-rouge">Classes/Systems</code>) and add a new <code class="language-plaintext highlighter-rouge">import</code> at the top for
<code class="language-plaintext highlighter-rouge">GitDawg</code>:</p>

<div class="language-diff highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">import UIKit
import GitHubAPI
import GitHubSession
</span><span class="gi">+ import GitDawg
</span></code></pre></div></div>

<p>Then add our new view controller by replacing the bookmarks view controller on line 78.</p>

<div class="language-diff highlighter-rouge"><div class="highlight"><pre class="highlight"><code>        tabBarController?.viewControllers = [
            newNotificationsRootViewController(client: client),
            newSearchRootViewController(client: client),
<span class="gi">+            GDWelcomeViewController(),
</span><span class="gd">-            newBookmarksRootViewController(client: client),
</span>            settingsRootViewController ?? UIViewController() // simply satisfying compiler
        ]
</code></pre></div></div>

<p>That should get you to the same point as we were in the dev app. Now when you run the app, log in and hit the place
where the bookmarks icon used to live. Tada.</p>

<p>So what did we do? First, we added GitDawg, React and Yoga as dependencies in GitHawk’s Podfile to get them
installed. Then we switched to using GitDawg’s native view controller in 2 lines of code. No JavaScript in GitHawk,
little faffing overall.</p>

<p>This is how all our view controllers are exposed and used in production.</p>

<h2 id="what-now">What now?</h2>

<p>We’ve now got a successful deploy of our React Native Pod into an external app. However, we need to make some
changes in GitDawg now to start making it possible to develop efficiently.</p>

<p>We will need to:</p>

<ol>
  <li>
    <p>Make a singleton to handle setting up React Native between all potential UIViewControllers</p>
  </li>
  <li>
    <p>Use the React Native Packager to get runtime editing support</p>
  </li>
</ol>

<p>Move your terminal back to the GitDawg folder. We’re going to make a class that represents our library, GitDawg</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">touch </span>Pod/Classes/GitDawg.h Pod/Classes/GitDawg.m
</code></pre></div></div>

<p>Then we need to re-run <code class="language-plaintext highlighter-rouge">$ bundle exec pod install</code> in the <code class="language-plaintext highlighter-rouge">Example</code> folder to get it in Xcode. Open up the Xcode
workspace for GitDawg and let’s fill in these files. These files are based on <a href="https://github.com/artsy/emission/blob/master/Pod/Classes/Core/AREmission.h">AREmission.h</a> and
<a href="https://github.com/artsy/emission/blob/master/Pod/Classes/Core/AREmission.m">AREmission.m</a>. For us, in a production app, <code class="language-plaintext highlighter-rouge">AREmission</code> has a few key responsibilities:</p>

<ol>
  <li>
    <p>Pass through the non-optional environment variables to expose in JS</p>
  </li>
  <li>
    <p>Create and retain the React Native bridge</p>
  </li>
  <li>
    <p>Set up the native modules so that we React Native can communicate with the host app</p>
  </li>
</ol>

<p>For this tutorial we don’t need all of these responsibilities, but we will handle the second one.</p>

<p>For the header file, <code class="language-plaintext highlighter-rouge">GitDawg.h</code>:</p>

<div class="language-objc highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#import &lt;Foundation/Foundation.h&gt;
#import &lt;React/RCTBridge.h&gt;
</span>
<span class="n">NS_ASSUME_NONNULL_BEGIN</span>

<span class="c1">/// The RN library API</span>
<span class="k">@interface</span> <span class="nc">GitDawg</span> <span class="p">:</span> <span class="nc">NSObject</span>

<span class="c1">/// The way in which we communicate with React Native</span>
<span class="k">@property</span> <span class="p">(</span><span class="n">nonatomic</span><span class="p">,</span> <span class="n">strong</span><span class="p">,</span> <span class="n">readonly</span><span class="p">)</span> <span class="n">RCTBridge</span> <span class="o">*</span><span class="n">bridge</span><span class="p">;</span>

<span class="c1">/// The single instance of a GitDawg</span>
<span class="k">+</span> <span class="p">(</span><span class="n">instancetype</span><span class="p">)</span><span class="n">sharedInstance</span><span class="p">;</span>
<span class="k">+</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">setSharedInstance</span><span class="p">:(</span><span class="n">GitDawg</span> <span class="o">*</span><span class="p">)</span><span class="nv">instance</span><span class="p">;</span>

<span class="c1">/// Pass in nil for a packagerURL to indicate this is in release mode</span>
<span class="k">-</span> <span class="p">(</span><span class="n">instancetype</span><span class="p">)</span><span class="nf">initWithPackagerURL</span><span class="p">:(</span><span class="n">nullable</span> <span class="n">NSURL</span> <span class="o">*</span><span class="p">)</span><span class="nv">packagerURL</span> <span class="n">NS_DESIGNATED_INITIALIZER</span><span class="p">;</span>
<span class="k">-</span> <span class="p">(</span><span class="n">instancetype</span><span class="p">)</span><span class="n">init</span> <span class="n">NS_UNAVAILABLE</span><span class="p">;</span>

<span class="k">@end</span>

<span class="n">NS_ASSUME_NONNULL_END</span>
</code></pre></div></div>

<p>And for the implementation file <code class="language-plaintext highlighter-rouge">GitDawg.m</code>:</p>

<div class="language-objc highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#import "GitDawg.h"
</span>
<span class="k">@interface</span> <span class="nc">GitDawg</span><span class="p">()</span> <span class="o">&lt;</span><span class="n">RCTBridgeDelegate</span><span class="o">&gt;</span>
<span class="k">@property</span> <span class="p">(</span><span class="n">nonatomic</span><span class="p">,</span> <span class="n">copy</span><span class="p">)</span> <span class="n">NSURL</span> <span class="o">*</span><span class="n">packagerURL</span><span class="p">;</span>
<span class="k">@end</span>

<span class="k">@implementation</span> <span class="nc">GitDawg</span>

<span class="k">static</span> <span class="n">GitDawg</span> <span class="o">*</span><span class="n">_sharedInstance</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">;</span>

<span class="k">+</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">setSharedInstance</span><span class="p">:(</span><span class="n">GitDawg</span> <span class="o">*</span><span class="p">)</span><span class="nv">instance</span><span class="p">;</span>
<span class="p">{</span>
    <span class="n">_sharedInstance</span> <span class="o">=</span> <span class="n">instance</span><span class="p">;</span>
<span class="p">}</span>

<span class="k">+</span> <span class="p">(</span><span class="n">instancetype</span><span class="p">)</span><span class="n">sharedInstance</span><span class="p">;</span>
<span class="p">{</span>
    <span class="n">NSParameterAssert</span><span class="p">(</span><span class="n">_sharedInstance</span><span class="p">);</span>
    <span class="k">return</span> <span class="n">_sharedInstance</span><span class="p">;</span>
<span class="p">}</span>

<span class="k">-</span> <span class="p">(</span><span class="n">instancetype</span><span class="p">)</span><span class="nf">initWithPackagerURL</span><span class="p">:(</span><span class="n">NSURL</span> <span class="o">*</span><span class="p">)</span><span class="nv">packagerURL</span>
<span class="p">{</span>
    <span class="n">self</span> <span class="o">=</span> <span class="p">[</span><span class="n">super</span> <span class="nf">init</span><span class="p">];</span>

    <span class="n">_packagerURL</span> <span class="o">=</span> <span class="n">packagerURL</span><span class="p">;</span>
    <span class="n">_bridge</span> <span class="o">=</span> <span class="p">[[</span><span class="n">RCTBridge</span> <span class="nf">alloc</span><span class="p">]</span> <span class="nf">initWithDelegate</span><span class="p">:</span><span class="n">self</span> <span class="nf">launchOptions</span><span class="p">:@{}];</span>

    <span class="k">return</span> <span class="n">self</span><span class="p">;</span>
<span class="p">}</span>

<span class="k">-</span> <span class="p">(</span><span class="n">NSURL</span> <span class="o">*</span><span class="p">)</span><span class="nf">sourceURLForBridge</span><span class="p">:(</span><span class="n">RCTBridge</span> <span class="o">*</span><span class="p">)</span><span class="nv">bridge</span>
<span class="p">{</span>
    <span class="k">return</span> <span class="n">self</span><span class="p">.</span><span class="n">packagerURL</span> <span class="p">?:</span> <span class="n">self</span><span class="p">.</span><span class="n">releaseBundleURL</span><span class="p">;</span>
<span class="p">}</span>

<span class="k">-</span> <span class="p">(</span><span class="n">NSURL</span> <span class="o">*</span><span class="p">)</span><span class="n">releaseBundleURL</span><span class="p">;</span>
<span class="p">{</span>
    <span class="k">return</span> <span class="p">[[</span><span class="n">NSBundle</span> <span class="nf">bundleForClass</span><span class="p">:</span><span class="n">self</span><span class="p">.</span><span class="n">class</span><span class="p">]</span> <span class="nf">URLForResource</span><span class="p">:</span><span class="s">@"GitDawg"</span> <span class="nf">withExtension</span><span class="p">:</span><span class="s">@"js"</span><span class="p">];</span>
<span class="p">}</span>

<span class="k">@end</span>
</code></pre></div></div>

<p>Then change your <code class="language-plaintext highlighter-rouge">GDWelcomeViewController.m</code> to use the shared <code class="language-plaintext highlighter-rouge">GitDawg</code>.</p>

<div class="language-diff highlighter-rouge"><div class="highlight"><pre class="highlight"><code> #import "GDWelcomeViewController.h"
<span class="gi">+#import "GitDawg.h"
</span> #import &lt;React/RCTRootView.h&gt;
<span class="gd">-#import &lt;React/RCTBridgeDelegate.h&gt;
-#import &lt;React/RCTBridge.h&gt;
</span>
 - (void)loadView
 {
<span class="gd">-    RCTBridge *bridge = [[RCTBridge alloc] initWithDelegate:self launchOptions:@{}];
</span><span class="gi">+    RCTBridge *bridge = [GitDawg sharedInstance].bridge;
</span>     self.view = [[RCTRootView alloc] initWithBridge:bridge
                                              moduleName:@"GitDawg"
                                     initialProperties:@{}];
 }

-// Just use our packaged JS for now
<span class="gd">-- (NSURL *)sourceURLForBridge:(RCTBridge *)bridge
-{
-    NSBundle *emissionBundle = [NSBundle bundleForClass:GDWelcomeViewController.class];
-    return [emissionBundle URLForResource:@"GitDawg" withExtension:@"js"];
-}
-
</span> @end
</code></pre></div></div>

<p>We use the UIAppDelegate callback to set up our React Native bridge (you want this ready as fast as possible
normally) so edit <code class="language-plaintext highlighter-rouge">Example/GitDawg/GDAppDelegate.m</code></p>

<div class="language-diff highlighter-rouge"><div class="highlight"><pre class="highlight"><code> #import "GDAppDelegate.h"
<span class="gi">+#import &lt;GitDawg/GitDawg.h&gt;
</span>
 @implementation GDAppDelegate

 - (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions
 {
<span class="gd">-    // Override point for customization after application launch.
</span><span class="gi">+    NSURL *packagerURL = [NSURL URLWithString:@"http://localhost:8081/src/index.bundle?platform=ios"];
+    GitDawg *dawg = [[GitDawg alloc] initWithPackagerURL:packagerURL];
+    [GitDawg setSharedInstance:dawg];
+
</span>     return YES;
 }
</code></pre></div></div>

<p>These changes give you the ability to switch between a dev mode and a release mode. Consider that React Native just
runs your JavaScript, the source of that could be anything, including from a local dev server. Well, almost.</p>

<p>Because of Apple’s HTTP security, you cannot connect to localhost in an app by default. To fix this, open up
<code class="language-plaintext highlighter-rouge">GitDawg-info.plist</code> and right-click to add a new row. Paste in <code class="language-plaintext highlighter-rouge">NSAppTransportSecurity</code> as the name, and Xcode will
switch it to “App Transport Security Settings”. Hit the <code class="language-plaintext highlighter-rouge">+</code> and add “Allow arbitrary loads” then set it to true.</p>

<p>From here: run the GitDawg app and you should see a red screen. This will be telling you to start the React Native
Packager. Let’s do that. From the root of the GitDwag repo run <code class="language-plaintext highlighter-rouge">$ yarn start</code>. This will start up a server. Once it
says “Metro Bundler Ready.” you can go back into your simulator for GitDawg and hit the reload button at the bottom.</p>

<p>That’s it.</p>

<p>We’re done.</p>

<p>So, there’s obviously a lot more to learn here. You’ve successfully set up a Pod that you can deploy to an app. To
make a real version you’d need to do a bit more process like creating a repo, and making tags.</p>

<p>We use our root view controller in Emission to trigger loading any of our view controllers, in different states. We
also mix that with some admin options, the ability to run someone’s PRs and <a href="https://storybook.js.org">storybooks</a>.</p>

<center><img src="/images/making_cp_pod/emission.png" width="100%" /></center>

<p>So good luck! Something like this probably easily scripted, but there’s a lot of value in understanding how every
piece comes together. So let me know if you make something cool - we’ve been using this structure for 2 years now
and I think it’s the right way to integrate React Native into an existing complex app. It keeps your JS tooling in a
completely different repo from your iOS tooling.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[React Native, 2 years later]]></title>
    <link href="https://artsy.github.io/blog/2018/03/17/two-years-of-react-native/"/>
    <updated>2018-03-17T00:00:00+00:00</updated>
    <id>https://artsy.github.io/blog/2018/03/17/two-years-of-react-native</id>
    <content type="html"><![CDATA[<p><a href="https://twitter.com/alloy/">@alloy</a> first mentioned React Native as an option for Artsy back <a href="https://github.com/artsy/mobile/issues/22">in March 2015</a>, and in February 2016 he
made <a href="https://github.com/artsy/emission/commit/b9154d4145feb49b38e713ee84594de04ea377e3#diff-9879d6db96fd29134fc802214163b95a">our first commit</a> to get the ball rolling. Since then, we’ve grown a new codebase, <a href="https://github.com/artsy/emission/">Emission</a>,
which has slowly taken over the responsibility for creating the UIViewControllers presented inside our iOS app.</p>

<p>We’ve come quite far from where we started, and I was asked if I could give a talk to summerize what we’ve learned in
the last 2 years as a set of native developers using React Native.</p>

<p>The <a href="https://speakerdeck.com/orta/react-native-2-years-later">slides are on speakerdeck</a>, and I’ve <a href="https://github.com/artsy/artsy.github.io/issues/420">opened comments</a> for this post if people have questions. Jump
through to get to the video or watch it <a href="https://www.prolificinteractive.com/iosoho/">on Prolific’s site</a> for <a href="https://www.meetup.com/iOSoho/">iOSoho</a>.</p>

<!-- more -->

<p>Table of Contents for the Video:</p>

<ul id="timers">
  <li><a href="#video" data-time="330">Why move? 5:30</a></li>
  <li><a href="#video" data-time="520">Why not Swift? 8:40</a></li>
  <li><a href="#video" data-time="590">What we expected vs what we have: 9:50</a></li>
  <li><a href="#video" data-time="960">Downsides: 16:00</a></li>
  <li><a href="#video" data-time="1235">Artsy Omakase: 20:35</a></li>
  <li><a href="#video" data-time="1420">Upsides: 23:40</a></li>
  <li><a href="#video" data-time="1645">In-App demo of Emission: 27:25</a></li>
  <li><a href="#video" data-time="2195">RN Brownfield Apps: 36:35</a></li>
  <li><a href="#video" data-time="2379">Our Deployment: 39:30</a></li>
</ul>

<center id="video">
  <iframe src="https://player.vimeo.com/video/260417482" width="100%" height="600" frameborder="0" webkitallowfullscreen="" mozallowfullscreen="" allowfullscreen=""></iframe>
</center>

<script src="https://player.vimeo.com/api/player.js"></script>

<script>
  $(() => {
    $('#timers a').click( function(e) {
      var time = $(this).attr("data-time");
      var iframe = document.querySelector('iframe');
      var player = new Vimeo.Player(iframe);
      player.setCurrentTime(time)
      e.stopPropagation()
    });
  })
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Modernizing Force]]></title>
    <link href="https://artsy.github.io/blog/2017/09/05/Modernizing-Force/"/>
    <updated>2017-09-05T00:00:00+00:00</updated>
    <id>https://artsy.github.io/blog/2017/09/05/Modernizing-Force</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/artsy/force">Force</a> is Artsy’s main website, <a href="https://www.artsy.net">artsy.net</a>. In the three years since it was <a href="http://artsy.github.io/blog/2014/09/05/we-open-sourced-our-isomorphic-javascript-website/">open-sourced</a>, it has provided a solid foundation to build features on top of without a lot of the costs associated with growth. It is an early example of Isomorphic (“universal”) JavaScript, built on top of Express, Backbone, CoffeeScript, Stylus and Jade. It is also highly modular, adopting patterns laid down by its parent project,  <a href="https://github.com/artsy/ezel">Ezel</a>.</p>

<p>When first developed these technologies made a lot of sense; CoffeeScript fixed many of the problems with JavaScript pre-ES6, and Jade / Stylus made working with HTML / CSS much more elegant. As time progressed and new technologies became a thing these solutions starting feeling more burdensome to continue building features with and many of our developers longed to start using next-generation tools like React.</p>

<!-- more -->

<p>Looking at output from <code class="language-plaintext highlighter-rouge">cloc</code>, the question is “But how?”</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">[</span><span class="nx">artsy</span><span class="o">/</span><span class="nx">force</span><span class="p">]</span> <span class="nx">$</span> <span class="nx">cloc</span> <span class="nx">desktop</span> <span class="nx">mobile</span>

<span class="o">--------------------------------------------------------</span>
<span class="nx">Language</span>                     <span class="nx">files</span>                  <span class="nx">code</span>
<span class="o">--------------------------------------------------------</span>
<span class="nx">CoffeeScript</span>                  <span class="mi">1828</span>                 <span class="mi">81569</span>
<span class="nx">CSS</span>                              <span class="mi">9</span>                 <span class="mi">76632</span>
<span class="nx">Stylus</span>                         <span class="mi">577</span>                 <span class="mi">32324</span>
<span class="nx">JavaScript</span>                     <span class="mi">274</span>                 <span class="mi">18310</span>
<span class="nx">JSON</span>                            <span class="mi">30</span>                  <span class="mi">6145</span>
<span class="nx">Markdown</span>                        <span class="mi">41</span>                  <span class="mi">1097</span>
<span class="nx">HTML</span>                             <span class="mi">3</span>                    <span class="mi">25</span>
<span class="nx">XML</span>                              <span class="mi">3</span>                    <span class="mi">24</span>
<span class="o">--------------------------------------------------------</span>
<span class="nx">SUM</span><span class="p">:</span>                          <span class="mi">2765</span>                <span class="mi">216126</span>
<span class="o">--------------------------------------------------------</span>

</code></pre></div></div>

<p>216k+ LOC, spread across multiple languages and formats. Given finite resources and a small team rebuilds can be difficult to execute, and so we had to figure out a way to marry the old with the new while also maintaining backwards compatibility / interoperability. Out of this exercise came a few patterns, libraries and projects that I would like to describe in an effort to help those caught in similar situations.</p>

<h2 id="step-1-get-your-house-aka-compiler-in-order">Step 1: Get Your House (aka Compiler) in Order</h2>

<p><a href="https://babeljs.io/">Babel</a> has been around for a while, but lately their team has been putting effort into making it as easy as possible to use. By dropping a <a href="https://github.com/artsy/force/blob/master/.babelrc">.babelrc</a> file into the root of your project, server and client-side JavaScript can share the same configuration, including <a href="https://github.com/tleunen/babel-plugin-module-resolver">module resolution</a> (aka, no more <code class="language-plaintext highlighter-rouge">../../../</code>).</p>

<p>A simplified example:</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">//</span><span class="w"> </span><span class="err">.babelrc</span><span class="w">

</span><span class="p">{</span><span class="w">
  </span><span class="nl">"presets"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">"es2015"</span><span class="p">,</span><span class="w"> </span><span class="s2">"react"</span><span class="p">,</span><span class="w"> </span><span class="s2">"stage-3"</span><span class="p">],</span><span class="w">
  </span><span class="nl">"plugins"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
    </span><span class="p">[</span><span class="s2">"module-resolver"</span><span class="p">,</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="nl">"root"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">"./"</span><span class="p">]</span><span class="w">
    </span><span class="p">}]</span><span class="w">
  </span><span class="p">]</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// index.js</span>

<span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">coffee-script/register</span><span class="dl">'</span><span class="p">)</span>
<span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">babel-core/register</span><span class="dl">'</span><span class="p">)</span>

<span class="c1">// Start the app</span>
<span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">./boot</span><span class="dl">'</span><span class="p">)</span>

</code></pre></div></div>
<p>On the client, we use <a href="http://browserify.org/">Browserify</a> with <a href="https://github.com/substack/coffeeify">Coffeeify</a> and <a href="https://github.com/babel/babelify">Babelify</a>:</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">//</span><span class="w"> </span><span class="err">package.json</span><span class="w">

</span><span class="p">{</span><span class="w">
  </span><span class="nl">"scripts"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"assets"</span><span class="p">:</span><span class="w"> </span><span class="s2">"browserify -t babelify -t coffeeify -o bundle.js"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"start"</span><span class="p">:</span><span class="w"> </span><span class="s2">"yarn assets &amp;&amp; node index.js"</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>
<p>And then boot it up:</p>
<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>yarn start
</code></pre></div></div>

<p>By adding just a few lines, our existing CoffeeScript pipeline was augmented to support modern JavaScript on both the server and the client, with code that can be shared between.</p>

<h2 id="step-2-tune-up-iteration-time">Step 2: Tune-up Iteration Time</h2>
<p><a name="iteration-time"></a></p>

<p>A question that every developer should ask of their stack is:</p>

<blockquote>
  <p>“How long does it take for me to make a change and see that change reflected in a running process?”</p>
</blockquote>

<p>Does your code take one second to compile, or ten? When writing a back-end service, does your server <a href="https://github.com/remy/nodemon">automatically restart</a> after you make a change, or do you need to <code class="language-plaintext highlighter-rouge">ctrl+c</code> (stop it) and then restart manually?</p>

<p>For those of us working in Force, the bottleneck typically involved making changes to back-end code. Due to how we organize our sub-apps, client-side code compilation – after the server heats up – is pretty much instant, but that heat-up time can often take a while depending on which app we’re working on. So even with a “restart on code change” setup that listens for updates it still felt terribly slow, and this iteration time would often discourage developers from touching certain areas of the codebase. We needed something better!</p>

<p>Enter Webpack and React, which helped popularize the concept of HMR, or “Hot Module Replacement”.</p>

<p>From the Webpack docs:</p>
<blockquote>
  <p>“Hot Module Replacement (HMR) exchanges, adds, or removes modules while an application is running, without a full reload.”</p>
</blockquote>

<p>That’s more like it! But is there anything similar for the server given we don’t use Webpack? This was the question <a href="https://github.com/alloy">@alloy</a>, one of our Engineering Leads, asked himself while researching various setups that ultimately led to <a href="https://github.com/artsy/reaction">Reaction</a>, and for which he found an answer to in Glen Mailer’s excellent <a href="https://github.com/glenjamin/ultimate-hot-reloading-example">ultimate-hot-reloading-example</a>. Digging into the code, <a href="https://github.com/glenjamin/ultimate-hot-reloading-example/blob/master/server.js#L38-L45">this little snippet</a> jumped out:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">watcher</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="dl">'</span><span class="s1">ready</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
  <span class="nx">watcher</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="dl">'</span><span class="s1">all</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">Clearing /server/ module cache from server</span><span class="dl">"</span><span class="p">);</span>
    <span class="nb">Object</span><span class="p">.</span><span class="nx">keys</span><span class="p">(</span><span class="nx">require</span><span class="p">.</span><span class="nx">cache</span><span class="p">).</span><span class="nx">forEach</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">id</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">if</span> <span class="p">(</span><span class="sr">/</span><span class="se">[\/\\]</span><span class="sr">server</span><span class="se">[\/\\]</span><span class="sr">/</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="nx">id</span><span class="p">))</span> <span class="k">delete</span> <span class="nx">require</span><span class="p">.</span><span class="nx">cache</span><span class="p">[</span><span class="nx">id</span><span class="p">];</span>
    <span class="p">});</span>
  <span class="p">});</span>
<span class="p">});</span>
</code></pre></div></div>

<p>The code seemed simple enough – on change, iterate through Node.js’s internal require cache, look for the changed module, and clear it out. When the module is <code class="language-plaintext highlighter-rouge">require</code>‘d at a later point it will be like it was required for the first time, effectively hot-swapping out the code.</p>

<p>With this knowledge we wrapped a modified version of this snippet into <a href="https://github.com/artsy/express-reloadable">@artsy/express-reloadable</a>, a small utility package meant to be used with Express.</p>

<p>Here’s a full example:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">express</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">express</span><span class="dl">'</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">createReloadable</span><span class="p">,</span> <span class="nx">isDevelopment</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">@artsy/express-reloadable</span><span class="dl">'</span>

<span class="kd">const</span> <span class="nx">app</span> <span class="o">=</span> <span class="nx">express</span><span class="p">()</span>

<span class="k">if</span> <span class="p">(</span><span class="nx">isDevelopment</span><span class="p">)</span> <span class="p">{</span>

  <span class="c1">// Pass in app and current `require` context</span>
  <span class="kd">const</span> <span class="nx">reloadAndMount</span> <span class="o">=</span> <span class="nx">createReloadable</span><span class="p">(</span><span class="nx">app</span><span class="p">,</span> <span class="nx">require</span><span class="p">)</span>

  <span class="c1">// Note that if you need to mount an app at a particular root (`/api`), pass</span>
  <span class="c1">// in `mountPoint` as an option.</span>
  <span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="dl">'</span><span class="s1">/api</span><span class="dl">'</span><span class="p">,</span> <span class="nx">reloadAndMount</span><span class="p">(</span><span class="nx">path</span><span class="p">.</span><span class="nx">resolve</span><span class="p">(</span><span class="nx">__dirname</span><span class="p">,</span> <span class="dl">'</span><span class="s1">api</span><span class="dl">'</span><span class="p">),</span> <span class="p">{</span>
    <span class="na">mountPoint</span><span class="p">:</span> <span class="dl">'</span><span class="s1">/api</span><span class="dl">'</span>
  <span class="p">}))</span>

  <span class="c1">// Otherwise, just pass in the path to the express app and everything is taken care of</span>
  <span class="nx">reloadAndMount</span><span class="p">(</span><span class="nx">path</span><span class="p">.</span><span class="nx">resolve</span><span class="p">(</span><span class="nx">__dirname</span><span class="p">,</span> <span class="dl">'</span><span class="s1">client</span><span class="dl">'</span><span class="p">))</span>
<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
  <span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="dl">'</span><span class="s1">/api</span><span class="dl">'</span><span class="p">,</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">./api</span><span class="dl">'</span><span class="p">)</span>
  <span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">./client</span><span class="dl">'</span><span class="p">)</span>
<span class="p">}</span>

<span class="nx">app</span><span class="p">.</span><span class="nx">listen</span><span class="p">(</span><span class="mi">3000</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`Listening on port 3000`</span><span class="p">)</span>
<span class="p">})</span>
</code></pre></div></div>

<p>In Force, we mounted this library <a href="https://github.com/artsy/force/blob/master/lib/setup.js#L205">at the root</a>, allowing us to make changes anywhere within our numerous sub-apps and with a fresh page reload instantly see those changes reflected without a restart. This approach also works great with API servers, as this implementation from Artsy’s <a href="https://github.com/artsy/positron/blob/master/boot.js#L34">editorial app Positron</a> shows. Like magic, it “just works”. Why isn’t this trick more widely used and known?</p>

<h2 id="step-3-the-view-layer-or-how-i-stopped-worrying-and-learned-to-love-legacy-ui">Step 3: The View Layer, or: How I Stopped Worrying and Learned to Love Legacy UI</h2>

<p>This one was a bit tricky to solve, but ultimately ended up being fairly straightforward and conceptually simple. In Force, we’ve got dozens of apps built on top of hundreds of components supported by thousands of tests stretched across desktop and mobile. From the perspective of sheer code volume these things aren’t going anywhere any time soon. On top of that, our view templates are built using Jade (now known as <a href="https://pugjs.org">Pug</a>), which supports an interesting form of inheritance known as <a href="https://pugjs.org/language/inheritance.html">blocks</a>. What this means in practice is our UI has been extended in a variety of complex ways making alternative view engines difficult on the surface to interpolate.</p>

<p>What to do? It’s 2017 and the era of handlebars templates bound to Backbone MVC views is over. We want <a href="https://facebook.github.io/react/">React</a>! We want <a href="https://www.styled-components.com/">Styled Components</a>! And when those tools are surpassed by the Next Big Thing we want that too! But we also want our existing CoffeeScript and Jade and old-school <code class="language-plaintext highlighter-rouge">Backbone.View</code>s as well.</p>

<p>Thinking through this problem, <a href="https://github.com/artsy/stitch">@artsy/stitch</a> was born.</p>

<p>Stitch helps your Template and Component dependencies peacefully co-exist. You feed it a layout and some data and out pops a string of compiled html that can be passed down to the client. “Blocks” can be added that represent portions of UI, injected by key. It aims for maximum flexibility: templating engines supported by <a href="https://github.com/tj/consolidate.js">consolidate</a> can be installed and custom rendering engines <a href="https://github.com/artsy/stitch#custom-renderers">can be swapped out or extended</a>. With very little setup it unlocks UI configurations that have been lost to time.</p>

<p>A basic example:</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;div&gt;</span>
  {{title}}
<span class="nt">&lt;/div&gt;</span>
</code></pre></div></div>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">html</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">renderLayout</span><span class="p">({</span>
  <span class="na">layout</span><span class="p">:</span> <span class="dl">'</span><span class="s1">templates/layout.handlebars</span><span class="dl">'</span><span class="p">,</span>
  <span class="na">data</span><span class="p">:</span> <span class="p">{</span>
    <span class="na">title</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Hello!</span><span class="dl">'</span>
  <span class="p">}</span>
<span class="p">})</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">html</span><span class="p">)</span>

<span class="c1">// =&gt; Outputs:</span>
<span class="cm">/*
&lt;div&gt;
  Hello!
&lt;/div&gt;
*/</span>
</code></pre></div></div>

<p>By adding “blocks” you can begin assembling (or adapting to) more complex layouts. Blocks represent either a path to a template or a component (with “component” meaning a React or <a href="https://preactjs.com">React-like</a> function / class component):</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code>// templates/layout.handlebars

<span class="nt">&lt;html&gt;</span>
  <span class="nt">&lt;head&gt;</span>
    <span class="nt">&lt;title&gt;</span>
      {{title}}
    <span class="nt">&lt;/title&gt;</span>
  <span class="nt">&lt;/head&gt;</span>
  <span class="nt">&lt;body</span>
    <span class="err">{{{</span><span class="na">body</span><span class="err">}}}</span>
  <span class="err">&lt;/</span><span class="na">body</span><span class="nt">&gt;</span>
<span class="nt">&lt;/html&gt;</span>
</code></pre></div></div>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// index.js</span>

<span class="kd">const</span> <span class="nx">html</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">renderLayout</span><span class="p">({</span>
  <span class="na">layout</span><span class="p">:</span> <span class="dl">'</span><span class="s1">templates/layout.handlebars</span><span class="dl">'</span><span class="p">,</span>
  <span class="na">data</span><span class="p">:</span> <span class="p">{</span>
    <span class="na">title</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Hello World!</span><span class="dl">'</span><span class="p">,</span>
  <span class="p">},</span>
  <span class="na">blocks</span><span class="p">:</span> <span class="p">{</span>
    <span class="na">body</span><span class="p">:</span> <span class="p">(</span><span class="nx">props</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="k">return</span> <span class="p">(</span>
        <span class="o">&lt;</span><span class="nx">h1</span><span class="o">&gt;</span>
          <span class="p">{</span><span class="nx">props</span><span class="p">.</span><span class="nx">title</span><span class="p">}</span>
        <span class="o">&lt;</span><span class="sr">/h1</span><span class="err">&gt;
</span>      <span class="p">)</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">})</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">html</span><span class="p">)</span>

<span class="c1">// =&gt; Outputs:</span>
<span class="cm">/*
&lt;html&gt;
  &lt;head&gt;
    &lt;title&gt;Hello World!&lt;/title&gt;
  &lt;/head&gt;
  &lt;body&gt;
    &lt;h1&gt;
      Hello World!
    &lt;/h1&gt;
  &lt;/body&gt;
&lt;/html&gt;
*/</span>
</code></pre></div></div>

<p>In Force, we’re using this pattern to incrementally migrate portions of our app over to React, by taking existing block-based Jade layouts and injecting <code class="language-plaintext highlighter-rouge">ReactDOM.renderToString</code> output into them, and then rendering the layout into an HTML string that is passed down from the server and rehydrated on the client, isomorphically.</p>

<p>Our existing Backbone views take advantage of the <code class="language-plaintext highlighter-rouge">templates</code> key:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// server.js</span>

<span class="k">import</span> <span class="nx">LoginApp</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">apps/login/LoginApp</span><span class="dl">'</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">Provider</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react-redux</span><span class="dl">'</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">StaticRouter</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react-router</span><span class="dl">'</span>

<span class="kd">const</span> <span class="nx">html</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">renderLayout</span><span class="p">({</span>
  <span class="na">layout</span><span class="p">:</span> <span class="dl">'</span><span class="s1">templates/layout.handlebars</span><span class="dl">'</span><span class="p">,</span>
  <span class="na">data</span><span class="p">:</span> <span class="p">{</span>
    <span class="na">title</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Login / Sign-up</span><span class="dl">'</span><span class="p">,</span>
  <span class="p">},</span>
  <span class="na">templates</span><span class="p">:</span> <span class="p">{</span>
    <span class="na">login</span><span class="p">:</span> <span class="dl">'</span><span class="s1">templates/login.jade</span><span class="dl">'</span>
  <span class="p">},</span>
  <span class="na">blocks</span><span class="p">:</span> <span class="p">{</span>
    <span class="na">app</span><span class="p">:</span> <span class="p">(</span><span class="nx">props</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">(</span>
      <span class="o">&lt;</span><span class="nx">Provider</span> <span class="nx">store</span><span class="o">=</span><span class="p">{</span><span class="nx">store</span><span class="p">}</span><span class="o">&gt;</span>
        <span class="o">&lt;</span><span class="nx">StaticRouter</span><span class="o">&gt;</span>
          <span class="o">&lt;</span><span class="nx">LoginApp</span> <span class="p">{...</span><span class="nx">props</span><span class="p">}</span> <span class="sr">/</span><span class="err">&gt;
</span>        <span class="o">&lt;</span><span class="sr">/StaticRouter</span><span class="err">&gt;
</span>      <span class="o">&lt;</span><span class="sr">/Provider</span><span class="err">&gt;
</span>    <span class="p">)</span>
  <span class="p">}</span>
<span class="p">})</span>

<span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="nx">html</span><span class="p">)</span>
</code></pre></div></div>

<p>Similar to blocks, templates located in this object are pre-compiled and available to your components as <code class="language-plaintext highlighter-rouge">props.templates</code>.</p>

<p>Once the html has been sent over the wire, we mount it like so:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// client.js</span>

<span class="k">import</span> <span class="nx">LoginApp</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">apps/login/LoginApp</span><span class="dl">'</span>

<span class="nx">React</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span>
  <span class="o">&lt;</span><span class="nx">LoginApp</span> <span class="p">{...</span><span class="nb">window</span><span class="p">.</span><span class="nx">__BOOTSTRAP__</span><span class="p">}</span> <span class="sr">/&gt; /</span><span class="o">/</span> <span class="nx">Data</span> <span class="nx">passed</span> <span class="nx">down</span> <span class="k">from</span> <span class="s2">`data`</span> <span class="nx">key</span>
<span class="p">)</span>
</code></pre></div></div>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// apps/login/LoginApp.js</span>

<span class="k">import</span> <span class="nx">React</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react</span><span class="dl">'</span>
<span class="k">import</span> <span class="nx">Login</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">apps/login/Login</span><span class="dl">'</span>

<span class="k">export</span> <span class="k">default</span> <span class="kd">function</span> <span class="nx">LoginApp</span> <span class="p">(</span><span class="nx">props</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="p">{</span>
    <span class="na">templates</span><span class="p">:</span> <span class="p">{</span>
      <span class="nx">login</span>
    <span class="p">}</span>
  <span class="p">}</span> <span class="o">=</span> <span class="nx">props</span>

  <span class="k">return</span> <span class="p">(</span>
    <span class="o">&lt;</span><span class="nx">Login</span>
      <span class="nx">template</span><span class="o">=</span><span class="p">{</span><span class="nx">login</span><span class="p">}</span>
    <span class="sr">/</span><span class="err">&gt;
</span>  <span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>

<p>During the server-side render phase existing template code will be rendered with the component, and once the component is mounted on the client <code class="language-plaintext highlighter-rouge">componentDidMount</code> will fire and the Backbone view instantiated:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// apps/login/Login.js</span>

<span class="k">import</span> <span class="nx">React</span><span class="p">,</span> <span class="p">{</span> <span class="nx">Component</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react</span><span class="dl">'</span>
<span class="k">import</span> <span class="nx">LoginBackboneView</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">apps/login/views/LoginView</span><span class="dl">'</span>

<span class="k">export</span> <span class="k">default</span> <span class="kd">class</span> <span class="nx">Login</span> <span class="kd">extends</span> <span class="nx">Component</span> <span class="p">{</span>
  <span class="nx">componentDidMount</span> <span class="p">()</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">loginView</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">LoginBackboneView</span><span class="p">()</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">loginView</span><span class="p">.</span><span class="nx">render</span><span class="p">()</span>
  <span class="p">}</span>

  <span class="nx">componentWillUnmount</span> <span class="p">()</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">loginView</span><span class="p">.</span><span class="nx">remove</span><span class="p">()</span>
  <span class="p">}</span>

  <span class="nx">render</span> <span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="p">(</span>
      <span class="o">&lt;</span><span class="nx">div</span><span class="o">&gt;</span>
        <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">dangerouslySetInnerHtml</span><span class="o">=</span><span class="p">{{</span>
          <span class="na">__html</span><span class="p">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">template</span>
        <span class="p">}}</span><span class="o">&gt;</span>
      <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>    <span class="p">)</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>All of the possibilities that Stitch provides are too numerous to go over here, but check out the <a href="https://github.com/artsy/stitch#usage">documentation</a> and <a href="https://github.com/artsy/stitch/tree/master/examples">example apps</a> for more complete usage. While new, this pattern has worked quite well for us and has allowed Force to evolve alongside existing code with very little friction.</p>

<h2 id="moving-forward">Moving Forward</h2>

<p>A common thread that connects <a href="https://github.com/artsy/force">Force</a> to <a href="https://github.com/artsy/eigen">Eigen</a> (Artsy’s mobile app) is an understanding that while grand re-writes will gladly remove technical debt, technical debt is not our issue. A lot of the patterns we’ve laid down within our apps still work for us, and many of our implementations remain sufficient to the task. What we needed was an environment where <em>incremental revolution</em> was possible, where old ideas could merge with new and evolve. In terms of Eigen, we felt the best way forward was the adoption of <a href="https://facebook.github.io/react-native/">React Native</a> – and <a href="https://github.com/artsy/emission">Emission</a> was born. Likewise, for our web and web-based mobile apps, <a href="https://github.com/artsy/reaction">Reaction</a> is serving a similar role. Both of these projects are built with <a href="https://www.typescriptlang.org/">TypeScript</a>, and both rely heavily on functionality that our <a href="http://graphql.org/">GraphQL</a> interface <a href="https://github.com/artsy/metaphysics">Metaphysics</a> provides. But crucially, these projects <em>augment</em> our existing infrastructure; they don’t replace it. They fit in with existing ideas, tools and processes that have facilitated Artsy’s growth, including highly-specific domain knowledge that our engineers have built up over time.</p>

<p>In conclusion, I hope this post has provided a bit of a window into some of our processes here at Artsy for those facing similar challenges. If you want to take a deeper dive, check out the links below:</p>

<ul>
  <li><a href="https://github.com/artsy/express-reloadable">express-reloadable</a></li>
  <li><a href="https://github.com/artsy/stitch">stitch</a></li>
  <li><a href="https://github.com/artsy/reaction">reaction</a></li>
  <li><a href="https://github.com/artsy/emission">emission</a></li>
</ul>
]]></content>
  </entry>
  
</feed>
