<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: people | Artsy Engineering]]></title>
  <link href="https://artsy.github.io/blog/categories/people/atom.xml" rel="self"/>
  <link href="https://artsy.github.io/"/>
  <updated>2024-10-30T17:33:51+00:00</updated>
  <id>https://artsy.github.io/</id>
  <author>
    <name><![CDATA[]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Unstructured Knowledge Sharing]]></title>
    <link href="https://artsy.github.io/blog/2021/05/11/unstructured-knowledge-sharing/"/>
    <updated>2021-05-11T00:00:00+00:00</updated>
    <id>https://artsy.github.io/blog/2021/05/11/unstructured-knowledge-sharing</id>
    <content type="html"><![CDATA[<p>We have a handful of regularly scheduled meetings in place at Artsy devoted to knowledge sharing.</p>

<p>But what about the <em>unstructured</em> ways in which we share knowledge? If structured sharing time demonstrates that a
team is <em>interested</em> in spreading knowledge, <em>unstructured</em> sharing time demonstrates that spreading knowledge is
the default mode for the team. Instead of the team forming habits of working in isolation or hoarding expertise,
they’ve formed habits of learning from and teaching each other.</p>

<!-- more -->

<p>Regularly scheduled meetings we have for knowledge sharing include:</p>

<ul>
  <li>Team-based knowledge share meetings</li>
  <li>Open office hours for anyone to bring questions</li>
  <li>Lunch &amp; learns for presenting across all of Artsy engineering</li>
  <li>Show &amp; tell, where attendees bring recent learnings or explorations to demo to the group</li>
  <li>Peer learning groups that are dedicated to learning a specific topic in development</li>
</ul>

<p>As <a href="https://twitter.com/ashfurrow">Ash</a> mentioned in <a href="https://artsy.github.io/blog/2020/12/09/share-your-knowledge/">his article on knowledge shares</a>, these are all great opportunities
for us to share knowledge. Learning is easy to de-prioritize in the face of shipping features, and scheduling these
meetings reinforces learning as a priority.</p>

<p>Recently <a href="https://github.com/damassi">Chris Pappas</a> pointed out the incredible value we get out of one specific Slack channel:</p>

<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Shortest blog post of all time:<br />“Add a <a href="https://twitter.com/hashtag/dev?src=hash&amp;ref_src=twsrc%5Etfw">#dev</a>-help channel to your slack where devs can pose questions to the wider team. You won’t regret it!”<br />-- Chris Pappas</p>&mdash; Artsy Open Source (@ArtsyOpenSource) <a href="https://twitter.com/ArtsyOpenSource/status/1357819867638812672?ref_src=twsrc%5Etfw">February 5, 2021</a></blockquote>
<script async="" src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>

<p>This piqued my interest. What unstructured/unscheduled things do we do at Artsy to demonstrate our emphasis on
learning?</p>

<h2 id="the-dev-help-slack-channel">The #dev-help Slack Channel</h2>

<p>We have many dev-specific channels set up in the Artsy Slack, but one in particular has become a massively
important knowledge-base for the entire team: the #dev-help channel.</p>

<p>This channel is a place for engineers to post when they’re stuck. All engineers watch the #dev-help channel (to
some degree) and offer support when they can. Each issue is threaded to avoid noise in the channel. When the
question is answered, it gets marked as “solved” by applying a ✅ reaction. <a href="https://github.com/pvinis">Pavlos</a> set up a Slack app
that auto-applies the ✅ reaction when someone says “solved” in the thread.</p>

<p><img src="/images/2021-05-11-unstructured-knowledge-sharing/dev-help.png" alt="A question asked and answered in our #dev-help slack" /></p>

<p>The cumulative result of the questions asked and answered in this channel is an incredible knowledge base for all
engineers. When I run into a new issue, the first place I search is #dev-help. More often than not I find my exact
problem already solved.</p>

<p>This knowledge base is so important and powerful that it’s no longer only a place to <em>ask</em> for help. Engineers will
also share problems they’ve <em>already solved</em> in a new thread in the channel, in case someone else runs into the
problem. Usually we’ll tag these problems up front with <code class="language-plaintext highlighter-rouge">[already solved]</code> or similar, to make it obvious no one
should spend cycles trying to solve this problem.</p>

<p><img src="/images/2021-05-11-unstructured-knowledge-sharing/already-solved.png" alt="An already-solved thread in our #dev-help slack" /></p>

<p>One other important thing to say about the #dev-help channel: as engineers it’s tempting to solve problems with new
and novel tooling, but in the case of #dev-help we found a way to use our existing tooling in a slightly different
way. Sometimes the best solution is one you already have. We could have investigated dedicated software like Stack
Overflow for Teams, or we could have built our own knowledge-base tool. Instead we put some rules around how we
would use a Slack channel, and gained a huge benefit at a fraction of the cost.</p>

<h2 id="internal-live-streaming">Internal Live-Streaming</h2>

<p>Occasionally an Artsy engineer will broadcast that they’re taking on work that is ripe for knowledge-sharing, and
they’ll spin up a Zoom call for others to join. It might be something they know how to solve — like when
<a href="https://github.com/anandaroop">Roop</a> spun up a call to walk through how he’d use <a href="https://observablehq.com/">Observable</a> to explore search index
weighting. There might be more uncertainty to the problem, like when <a href="https://github.com/pvinis">Pavlos</a> started up a call to
investigate a CI build failure using <a href="https://git-scm.com/docs/git-bisect"><code class="language-plaintext highlighter-rouge">git bisect</code></a>. It might be somewhere in between, like when
<a href="https://github.com/admbtlr">Adam</a> was doing some refactoring of our React Native navigation.</p>

<p>Sometimes this looks like a pairing or mobbing session, but sometimes it looks more like live-streaming. An
engineer is demonstrating by solving a real problem. If audience members can contribute, great — but they are also
welcome to tag along and learn.</p>

<h2 id="pairing">Pairing</h2>

<p><a href="https://github.com/yuki24">Yuki</a> wrote on this blog <a href="https://artsy.github.io/blog/2018/10/19/pair-programming/">about pair-programming at Artsy</a>. Pairing isn’t an unusual practice
for development teams….but there is something notable in regards to knowledge-sharing.</p>

<p>We’re somewhere in the middle on the pairing frequency spectrum at Artsy. We don’t have dedicated pairs working on
problems together all day/every day. But we also don’t only pair when we’re stuck.</p>

<p>Pairing when you’re stuck is great, and it can help move you forward on a problem. If that’s the only time you
pair, though, you’re missing out on a massive learning opportunity.</p>

<p>Pairing to build a feature gives you exposure to an entire toolbox you might never have used before. How does your
pair approach a problem? How do they manage their time? What development tools do they use? What techniques do they
use for testing and debugging? How do they tighten their feedback loop? This is knowledge-sharing beyond the code
or the product you’re building — it’s knowledge-sharing of tools, skills, and habits.</p>

<hr />

<p>What are the unstructured/unscheduled ways in which your team shares knowledge? Leave us a note in the comments!</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Knowledge Shares For Great Good]]></title>
    <link href="https://artsy.github.io/blog/2020/12/09/share-your-knowledge/"/>
    <updated>2020-12-09T00:00:00+00:00</updated>
    <id>https://artsy.github.io/blog/2020/12/09/share-your-knowledge</id>
    <content type="html"><![CDATA[<p>Sharing knowledge! What a concept! <a href="/blog/2020/09/29/becoming-mobile-first-at-artsy/">In my recent blog post</a>, I discussed “Knowledge Share” meetings (also known simply as “Knowledge Shares”, or abbreviated “KS”) and I want to dive deeper into them today. Last time, I described them as follows:</p>

<blockquote>
  <p>Knowledge Shares are a <u>structured</u> time to facilitate <u>unstructured learning</u>. Anyone can bring a topic to Knowledge Share, from a ticket that they’re stuck on to an idea they have to a neat trick they recently learned.</p>
</blockquote>

<p>These meetings were really instrumental in ramping up the Mobile Experience team, but their history goes back a bit further. Today, we’re going to discuss the origins of Knowledge Shares at Artsy, how they’ve evolved, the value they provide us as engineers, and how I’d recommend you adopt them on your team.</p>

<p>Let’s go!</p>

<!-- more -->

<p>To my recollection, the Auctions team was the first at Artsy to start doing “Knowledge Share” meetings. It was late 2016, I think. We were a small team of about five engineers, but were spread across many different front-end apps and back-end microservices. To make sure Artsy’s nascent auction business was a success, every engineer on the team had to have a working understanding of every one of our codebases. The team’s lead, Alan, suggested that devote an hour each week to sharing knowledge so no one person would become a silo.</p>

<p>The idea is simple enough: spend time working on something together. Kind of like pair programming, but with a slightly bigger group. Maybe there would be a ticket someone had that we would start together. Or maybe there had been a production incident that we wanted to investigate together. Maybe someone had an idea for a new technical approach to some problem and they wanted early feedback.</p>

<p>I think this forum worked well for us because our team was small and had a high level of interpersonal trust. Leading a five-person <a href="https://en.wikipedia.org/wiki/Mob_programming">mobbing session</a> could be really intimidating, and later I’ll discuss how I’ve since structured the Knowledge Shares that I lead to make everyone feel welcome contributing.</p>

<p>And they worked great! Other engineers learned about the iOS front-end code that I had written, and I learned about the back-end systems that powered that front-end. This was important for the team because our response time to production incidents was critical – one extra minute of looking up docs or finding a specific URL could make the difference between a happy user winning their lot, or an unhappy user taking their business elsewhere.</p>

<p>As time went on, other product teams started their own Knowledge Shares. They proliferated naturally throughout Artsy Engineering. When I started the Mobile Experience team in 2019, Knowledge Shares were one of the first recurring team meetings I scheduled. After a few months, I got really positive feedback about them. In fact, engineers wanted more of them. So I scheduled a second hour-long Knowledge Share each week.</p>

<p>Today, Knowledge Shares are for more than just engineers. They are for product managers, designers, data analysts, and other team stakeholders. Sometimes engineers from other teams even join my team’s Knowledge Shares, though scheduling becomes a hassle at a certain scale. We start each Knowledge Share with team-wide topics that apply to more than only engineers; we then move on to engineering-specific topics. This lets non-engineers still contribute while also letting them drop off so the engineers can dig into code.</p>

<p>Here are some examples of things that we have used Knowledge Shares for:</p>

<ul>
  <li>Sharing early designs for upcoming project work.</li>
  <li>Going over work-in-progress pull requests and soliciting feedback on the technical approach.</li>
  <li>Spiking on big-picture projects together, to help us plan what work needs to happen and in which order.</li>
  <li>Exploring anonymized user sessions to learn more about how our product actually gets used in the real world.</li>
  <li>Investigating small quality-of-life problems with our codebase’s developer experience and working on solutions.</li>
  <li>Brainstorming about how to address specific pieces of technical debt.</li>
</ul>

<p>Topics range from the technical to the product-focused, from what has already shipped to what is still on the drawing board. This breadth of focus helps everyone on the team feel like they can contribute. We keep a shared document of evergreen topic ideas and everyone is encouraged to add to it. As Tech Lead, I also send Slack reminders before each meeting to solicit for timely topics.</p>

<p>Throughout the normal course of our week, topics will naturally come up for discussion – topics that would normally need their own meeting to be scheduled. But instead, we can use the time we already have scheduled. For example: if an engineer has feedback on a new feature’s design, we don’t need to schedule a dedicated meeting for that conversation – we can use a Knowledge Share. It might feel like having recurring “Knowledge Share” meetings only adds more meetings to everyone’s already-busy calendars. But in our experience, these Knowledge Shares prevent us from scheduling <em>yet more</em> one-off meetings, so it balances out as a time-saver.</p>

<p>As a Tech Lead, I like to use Knowledge Shares as an opportunity to reinforce the shared understanding that <em>learning</em> is our paramount goal. That is to say, our goal isn’t to <em>build</em> some new feature, but is rather to <em>learn <strong>how</strong> to build</em> that new feature. That’s why I emphasize in our Knowledge Shares that <em>learning is contributing</em> (language which I added to our engineering onboarding docs). New team members might not have topics of their own, but they’re encouraged to contribute by learning and by asking questions.</p>

<p>When I described the origins of Knowledge Shares above, I said that they worked well on the early Auctions team because the team already had a high level of interpersonal trust. But looking back at those early days, I have to admit that I’m not sure which came first: the Knowledge Shares, or the trust? Having now bootstrapped two product teams at Artsy, I can tell you that Knowledge Shares are a key tool I use as Tech Lead to get teams working well together, quickly. The experience of being confused (together) and then gaining understanding (together) is great for building up <a href="https://ashfurrow.com/blog/building-better-software-by-building-better-teams/">the interpersonal trust that makes teams perform well</a>. I just can’t recommend Knowledge Shares enough!</p>

<p>Today, Knowledge Shares at Artsy provide a variety of benefits. Among others, those benefits are:</p>

<ul>
  <li>De-siloing information, to prevent any one engineer from becoming a single-point-of-failure for Artsy’s systems.</li>
  <li>Getting the team used to working together, used to communicating with one another, and used to providing and accepting feedback.</li>
  <li>Surfacing problems developers commonly run into during day-to-day work – and then fixing them permanently, together.</li>
  <li>Fostering a sense that everyone “owns” this meeting (and, by extension, everyone “owns” the team’s culture).</li>
</ul>

<p>Okay, so, let’s imagine I’ve sold you on the idea of Knowledge Shares. Great! So where do you start? How do you get your team on board?</p>

<p>If you are the team’s lead then adopting Knowledge Shares is quite easy: send your team this blog post, tell them you want to try Knowledge Shares, try them out, and discuss what everyone thinks in an upcoming retrospective. Whether you make the Knowledges Shares mandatory, or just encourage everyone’s participation, is up to you. They are mandatory for engineers on my team, but I accept the responsibility of making sure the meetings providing value to all engineers. I trust you to make these work well for however your team works.</p>

<p>What if you’re <em>not</em> the team lead? That’s okay, you have options. If you’re comfortable, I would recommend following the same steps as above. Send your team this blog post, express interest in trying out a weekly Knowledge Share, and schedule something. (By showing this kind of leadership initiative, it won’t be long before you find yourself leading your own team!) But if you want to avoid stepping on toes, you can also discuss this with your team’s lead privately. Every team is different and I trust you to navigate your own team best.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[From engineering to product management, and back again]]></title>
    <link href="https://artsy.github.io/blog/2020/07/23/from-engineering-to-product-management-and-back-again/"/>
    <updated>2020-07-23T00:00:00+00:00</updated>
    <id>https://artsy.github.io/blog/2020/07/23/from-engineering-to-product-management-and-back-again</id>
    <content type="html"><![CDATA[<p>A year and a half ago I decided to become a product manager after 5 years as a software engineer. This past June,
however, I decided to switch back into engineering.</p>

<p>What happened, and what did I learn?</p>

<!-- more -->

<h1 id="why-i-became-a-product-manager">Why I became a product manager</h1>

<p>When I started at Artsy, I hadn’t planned on becoming a product manager. As I onboarded and worked on projects like
building Artsy’s ecommerce backend <a href="https://www.github.com/artsy/exchange">Exchange</a>, I found myself wanting to be
involved in the “what” and “why” of our product and not just the “how.” <a href="https://willdoenlen.com">I’m an artist</a>,
and so art and the art market are special topics for me. I felt like I would have more impact as a product manager,
and I definitely wanted to have greater impact on the art world.</p>

<p>My previous job had me doing a blend of product management and engineering work, and so I had already had a taste
of PMing. I spoke with our VP of Product at the time and she agreed to let me try it out. And just like that, in
January 2019 I became the product manager for the Auctions team.</p>

<h1 id="becoming-a-product-manager">Becoming a product manager</h1>

<p>Product management is a surprisingly difficult job to define. Everyone agrees on one thing: product managers lead
the product development process. However, what product development actually entails differs from company to company
because of differences in resources, culture and priorities. In practice, product managers may find themselves
doing a lot of things that on the surface have nothing to do with product development.</p>

<p>Product management can be distilled down into two tasks:</p>

<ol>
  <li>Ensuring that the right feature / product is being built for your users, and</li>
  <li>Doing whatever it takes to make (1) happen.</li>
</ol>

<p>A product manager’s sole job is to do whatever it takes to make sure your users are getting the right product.
That’ll almost certainly involve talking to users to understand their needs, analyzing product usage data and
working with your team and stakeholders to create the next great feature, but there’s nothing in those two tasks
that says you need to do any of that. You can do this job any way you’d like as long as you get results. If I knew
that I could have built a better product for my users by pogo sticking across the Brooklyn Bridge then you would
have found me out there pogo sticking all day, every day.</p>

<p>All that to say, the job is highly ambiguous by design. <strong>Any problem could be your problem</strong>, and it’s up to you
to judge whether or not that’s the best use of your time for your users.</p>

<h2 id="redefining-work">Redefining work</h2>

<p>Compared to engineering, this ambiguity was a huge shift for me. As an engineer, my thinking was previously limited
to our systems and our codebase, and I largely thought about <em>how</em> to use them to build products. The “how” was now
largely abstracted away from me. It took me a long time to get out of that mindset, largely because I was
uncomfortable with how ambiguous PMing was.</p>

<p>There are a few reasons why the ambiguity was uncomfortable. The first was that the actual output of a product
manager didn’t <em>feel</em> like work. As an engineer, you can write code and instantly see the results of your work.
There’s a clear pipeline of progress, from initial commit to opening a pull request and deploying your code.</p>

<p>As a product manager, though, your output is much more amorphous. You might spend your time reading up on user
feedback, or you might make docs or comment on other docs. You might spend your whole day in meetings talking about
the same thing over and over again with different groups of people. You might get interrupted repeatedly throughout
the day with questions and problems. Days would fly by and I would have no idea what I did even though I was busy
all day. I just couldn’t get that feeling of progress.</p>

<p>I worked through that by keeping a detailed journal. For the first three or four months I recorded what I was doing
every hour of every day. That practice gradually transformed into a more manageable daily journal as I got used to
the work style. No one ever saw those notes – it was just so I could keep track of what I was doing, what I was
thinking about and feel some accomplishment by writing things down. It helped bridge the gap, and it’s a practice I
still maintain.</p>

<p>Another thing that helped me with the “feeling” of work was reading the perspectives of other managers. Andrew
Grove’s <em>High Output Management</em> was especially useful. Somewhere along the line I read the phrase “the meeting
<em>is</em> the work,” and it clicked for me. A core output of my job was to communicate with others (more on that later).
As an engineer, it’s counterintuitive. The more time you spend in a meeting, the less time you spend writing code.
Product managers need quiet thinking time too, but a significant portion of the job is working with others.
Meetings are how the work gets done. That framing helped me feel more productive.</p>

<p>Compounding the problem of not knowing what work “felt” like was not really even knowing what my work was. Here’s a
great journal entry from my second or third week as a PM:</p>

<blockquote>
  <p>What I don’t have clarity on:</p>

  <ul>
    <li>Am I taking on too much for the first quarter?</li>
    <li>How do I narrow down the work that I want to do next?</li>
    <li>How do I organize everything?</li>
    <li>What am I supposed to be doing?</li>
  </ul>
</blockquote>

<p>It felt as existential as it looked!</p>

<p>Before I understood that part of my job was to systemtically remove any and every roadblock getting in the way of
shipping a great product, I tended to focus my energies solely on going through the product development cycle. I
could prioritize and propose a feature, but if something wasn’t possible it just wasn’t possible. As my
understanding evolved, though, I began to see that a lot of what wasn’t possible actually <em>was</em> possible. It just
depended on me creating change.</p>

<p>Knowing that felt both enormously empowering and terrifying. If I was unclear before on what my job was, I felt
even less clear now that any problem could be my problem. But I got used to it, and over time and with coaching
from my manager I was able to suss out what not only <em>could</em> be my problem but what <em>should</em> be my problem. There
are some things nobody can change, but there’s a surprising amount a single person can do. In the end, I think this
expansive view of work is the right framing for not only product management but really any job.</p>

<h2 id="from-data-paralyzed-to-data-informed">From data paralyzed to data informed</h2>

<p>I studied a hard science in school and have always valued rigorous, quantitative reasoning. That kind of reasoning
is valuable in science and engineering, but when faced with the fuzzy world of business it can only take you so
far. The data you might want to make a decision frequently doesn’t exist, and even if you can get it you probably
don’t have the time to get it. I found myself initially in loops of analysis paralysis, struggling to find a
rigorous justification for why we should build what we were building.</p>

<p>I found my way out of that loop by focusing on finding the best possible <em>outcome</em>. Instead of getting caught up
trying to maximize my quantitative understanding of an opportunity, I focused on getting just enough information to
understand the relative upside and downside profiles of the opportunities in front of me. I used a rule of thumb
that 70% confidence is usually good enough to make a call. I didn’t always know what the exact impact of a feature
would be, but I knew enough to know that whatever we were doing had the highest impact out of anything on the
table. That allowed me to make decisions with confidence.</p>

<p>With that frame of mind, my quantitative skills turned into a huge asset instead of a hindrance. I feel confident
navigating Artsy’s database and running my own SQL queries, which helped me work alongside our Data team to analyze
performance and potential impact for a new feature. And when that work was impossible, I was able to take the data
we had and still make an informed decision with it.</p>

<h2 id="learning-to-focus-on-users">Learning to focus on users</h2>

<p>That style of thinking didn’t just extend to <em>why</em> we should build a feature, but also <em>what</em> we should build. When
considering a feature, I found myself jumping immediately to how the feature would work on a systems level rather
than what the user experience should be. That was a double-edged sword. While it made discussions with the
engineers on my team seamless, I sometimes would rule out features in my head because I knew they “weren’t
possible.” Of course, that did an injustice to both our users and the engineers on my team. Our users deserve the
best experience on Artsy, even if it feels impossible to me. And the engineers on my team could really find a
creative solution for just about anything I threw at them.</p>

<p>Similar to my data paralysis, part of the problem here was that creating a great user experience was fuzzy for me,
and I subconsciously rejected fuzzy things because they didn’t align with my version of rigorous knowledge. It was
easier for me think about systems than it was to think about creating a truly delightful user experience, and so I
thought about systems.</p>

<p>That changed as I really dug into user needs. I cultivated user empathy to an entirely new level by immersing
myself in user feedback and user research. I began to really <em>feel</em> that the choices we made impacted the
livelihoods and passions of collectors, institutions and artists. And that helped snap me out of it: our users
needed a better product, not better systems, and so I began to focus much more on how to make a better product.</p>

<p>To understand how to build a better product, I spent a lot of time examining other products to understand what made
them compelling. How did a product meet users’ needs? How did it delight them? Where did it fall short? What would
I do to improve it? Doing this over and over again sharpened my product sense and made it easier to think through
how we could build a better experience for Artsy’s users.</p>

<h2 id="influence-and-communication">Influence and communication</h2>

<p>Influence is the currency of product managers. Good product managers work to expand their influence within an
organization so that they can quickly mobilize the organization towards the right goals. Since product managers
don’t make anything themselves, a product manager that nobody listens to simply can’t be effective.</p>

<p>The interpersonal skills I had built up and practiced as a software engineer didn’t directly translate to the
skills I needed to build influence. As a baseline, engineering communication requires precision and clarity of
thought. Since you’re typically talking with other engineers, you have shared language and set of tools to help get
your point across. For example, if you can’t succinctly express your idea in words you can just write that thought
out in code and other engineers will get it.</p>

<p>Product managers work with a lot of different kinds of people: engineers, designers, marketers, sales people,
operations, executives, users, enterprise customers, vendors… the list goes on and on. Each person has a
different perspective, both from their organizational role and their own life experiences. You have to meet them
wherever they are, so your communication style needs to be highly adaptive.</p>

<p>Good communication feels seamless but is typically accompanied by a lot of planning and foresight. There was a lot
I needed to learn to be an effective communicator and, in turn, an effective leader. How to write a good document,
how to run a meeting, how to craft a compelling story, how to be just the right amount of direct, how to be just
the right amount of concise… and, as a fairly verbal person how to draw good diagrams and pictures to communicate
my ideas. There’s no shortcut to improving these skills. Getting better is a matter of practice and feedback.</p>

<h2 id="learning-to-say-no">Learning to say no</h2>

<p>One of the most difficult things for me to learn was how and when to say “no.” As an engineer, I prided myself on
having a can-do attitude and making seemingly impossible things happen. As a product manager, though, I have to
make sure that we’re always building the right thing for our users. Since my job is to make sure we’re doing that,
I usually have conviction that we’re currently doing the right thing. That means that, on average, when someone
requests product resources or proposes a new feature, I have to say no.</p>

<p>I like to be helpful, and so I was terrible at saying no at first. I wanted to help anyone and everyone who came to
me because, like when I was an engineer, I wanted solve everyone’s problems. But as I focused more and more on user
needs, it became clear what we should be working on to have the best impact on our users. That gave me the
conviction I needed to start saying no.</p>

<p>That still didn’t make it easier to <em>say</em> no. Prioritization decisions can have a big impact on other teams, and
it’s hard to see your coworkers feel disappointed when something they want won’t be prioritized. Learning how to
say no kindly and empathetically is an art form. But in general, it’s best done by clearly communicating priorities
and correctly setting expectations in the first place so that people don’t come with requests that won’t get
fulfilled. Doing that involves educating your coworkers on how the product prioritization process works,
socializing your product roadmap and spending lots of time to answer questions. It also may involve looping
stakeholders into the prioritization process so that their voices are clearly heard and they feel ownership over
the roadmap. It’s much easier to get things done when everyone is in alignment from the beginning.</p>

<h1 id="coming-back-to-engineering">Coming back to engineering</h1>

<p>After the first six months of working as a product manager I felt like I had gained my “product legs.” I had
launched some successful features, had weathered major organizational change and had a clear idea of what our users
needed and what the future ought to look like. Over the next year I continued to hone my skills and expand my scope
as a product manager. Overall, things were going well.</p>

<p>I never stopped coding, though. I did small projects here and there, both inside and outside of work, but I never
really had the time to do anything big. After a year of being out of engineering I started to get an itch to build
and do technical work. I even had a few dreams where I was coding! I have dreams about all sorts of weird things
and don’t dwell on them, but something about my surreal dream edition of Visual Studio Code stuck with me.</p>

<p>I reflected on this more and looked through my personal journal to remember my prior experiences as an engineer,
when I’ve felt happy and why I wanted to transition into product management. One thing I realized is that, as an
engineer, I didn’t always feel empowered. I felt like my role was just to code. But having worked as a product
manager, I knew that it didn’t have to be that way. I worked with engineers who had solid product skillsets and saw
how empowering and useful it could be. Being actively involved in coding and defining the right user experience
felt exciting to me.</p>

<p>I also reflected on what kind of work I wanted to have and how I wanted to spend my time. In general, my favorite
days at work have been when I do a blend of people / business work and creative technical work. I enjoyed the
strategic and people-focused work of product management but I missed making things and technical problem solving.
While I did get to exercise technical thinking as a product manager it was rarely a good use of my time to go deep.
I realized I could achive that balance better as an empowered engineer rather than as a product manager.</p>

<p>After a lot of thought, I decided that my longer term career direction made more sense as an engineering leader
rather than as a product leader. Fortunately, Artsy’s leadership agreed to let me transition back into engineering,
and at the beginning of June I was re-minted as a software engineer.</p>

<h2 id="onboarding-the-second-time">Onboarding the second time</h2>

<p>At this point, I’m six weeks back into engineering and my experience feels very different than before. I’ve spent
most of my time ramping up and onboarding for the second time. Relearning our stack has been both a humbling and
rewarding experience. I’ve forgotten a lot of the details of the frameworks we use, but this time instead of racing
to get through tickets I’ve decided to really slow down and take the time to read the docs and do tutorials to make
sure I fully understand what’s going on. While it comes at the expense of speed in the short-term, it’ll make me a
stronger engineer down the road, and I know that tradeoff is worth it. I also can’t speak highly enough of my
fellow engineers, who have been incredibly supportive while I learn.</p>

<h2 id="provide-value-not-code">Provide value, not code</h2>

<p>I’ve also found my perspective is very different than before. While previously I would have seen my role as writing
great code, now I see my role as leveraging technology to provide value to users. What’s the difference? In the
former, I’m doing a <em>task</em> while in the latter I’m driving <em>outcomes</em>. It feels much more empowering as a mental
model for what I should do as an engineer. It’s also helped me shed any hint of perfectionism I had before since
writing “perfect” code or building the “perfect” system usually isn’t relevant to providing value to our users.</p>

<h2 id="developer-experience-is-a-product">Developer experience is a product</h2>

<p>Working as a product manager really taught me the value of engineering, which is frequently the bottleneck in
delivering value to your users. Creating the right strategy and vision for a product is critical work, but none of
that work matters if you can’t quickly get it to market. The faster you can move the more quickly you can create
the ideal product your users want, which in turn dictates how successful your product will be. Gains in engineering
efficiency snowball into massive benefits for users over time.</p>

<p>That’s led me to start seeing our developer experience as part of our product. It’s much more than just our
toolchain – it’s the end-to-end cycle of working with a designer and product manager to understand product
requirements to building the feature to shipping it and monitoring in production. What does the ideal process look
like? Where are our bottlenecks? What investments will result in the best outcome for our users? These are
questions I’m asking myself as I ramp up, and I’m excited to dig into this more.</p>

<h1 id="should-you-be-a-product-manager">Should you be a product manager?</h1>

<p>If you’re an engineer wondering whether to make the jump to product management, my advice is to try it out. Product
management and engineering are complementary skillsets that build off of each other. Knowing how to do one role
absolutely helps with the other. You may find that you love being a product manager and continue on that track, or
you may discover instead that you love being an engineer empowered with a product skillset. In either case, it’ll
turn out great.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Team Working Agreements]]></title>
    <link href="https://artsy.github.io/blog/2020/04/01/team-working-agreements/"/>
    <updated>2020-04-01T00:00:00+00:00</updated>
    <id>https://artsy.github.io/blog/2020/04/01/team-working-agreements</id>
    <content type="html"><![CDATA[<p>Good team culture strives for cohesion. Once organizations get large enough, a tension emerges between the culture
of individual teams and the culture of the larger organization. How do you achieve team cohesion across small teams
<em>and</em> the larger organizations they comprise?</p>

<p>The culture at Artsy is driven by every team member, not mandated or handed down from above. This adds another
level of tension, between individuals and their smaller teams. Team working agreements embrace that tension to
provide a framework for converting tension into healthy culture.</p>

<!-- more -->

<p>Artsy Engineering is part of a larger organization we call PDDE (Product, Design, Data, and Engineering). PDDE is
divided into several product teams, and each team contains at least one representative from product, design, data,
and engineering. Each PDDE team delivers product solutions targeted to a specific product need.</p>

<p>Until recently, those teams could expect a significant change in team members at the start of every quarter, as we
encouraged engineers to explore other teams. The purpose of this practice was to spread knowledge throughout the
organization, and give folks the opportunity to keep themselves aligned with projects they found most interesting.</p>

<p>The downside of this practice was that it made teams feel short-lived, impermanent, and unstable. Some teams were
hit harder than others - they’d see their team completely turn over every quarter. This was felt most strongly by
our product managers who would take the time to learn the skills and strengths of each engineer on their team over
the course of a quarter, just to have to start the process all over again, making it difficult to plan projects or
set goals for the following quarter.</p>

<p>To address these challenges, PDDE decided to set the expectation that engineers would stay on the same team each
quarter, with the option to request a team change, when necessary, to fill a skill, capacity, or growth need
elsewhere. This effectively ended the practice of shuffling teams every quarter. It was too much change, too often.</p>

<p>As a result, our teams feel more stable and long-lived. We’re able to build deeper team identity. We’ve found one
tool particularly helpful in finding and building team identity: team working agreements.</p>

<h2 id="how-did-team-working-agreements-come-about-at-artsy">How did team working agreements come about at Artsy?</h2>

<p>The current breakdown of our PDDE organization is relatively new; it’s also an on-going process. We are still
feeling out how these teams will/should work together. One of the core beliefs at Artsy is that when you are a part
of something - a process, a team, a culture - you are empowered to make impactful changes to it.</p>

<aside class="dialogue">
  <div class="answer">
    <img src="/images/dialogue/adam.jpg" />
    <p class="intro">Adam Iskounen says...</p>
    <p>
      Team cohesion and unity was a common theme that kept surfacing during the retrospective meeting that led to 
      PDDE ending the quarterly shuffling of teams. During my onboarding, I noticed in retros that teams were
      strong on "what went well" and light on "what could be improved." We'd have 1 or 2 "didn't go well" tickets, 
      but they were usually something light-hearted/benign like "team lunch was cancelled". One team in particular 
      seemed like they were dancing around each other a bit, and important things like "not getting stuff done"
      wasn't being brought up.
    </p>
    <p>I remembered that team working agreements were a tool used by 
      a scrum master at my previous job to help a particular team that was struggling to gel, and brought it up 
      without really knowing what was involved in the process. Fortunately my product manager - who was eager to 
      form a team where each member felt empowered and excited to take ownership of our work - encouraged me to 
      research and share the process for coming up with a team working agreement. At first I was nervous that some 
      team members, especially those who I perceived to be more interested in technical challenges than on team-building, 
      would not be interested in this and find that it was a waste of time. I was pleasantly surprised that not only did 
      everyone on the team participate, but that those team members ended up being some of the more enthusiastic 
      proponents for following-up on the team working agreement after our initial brainstorm.
    </p>
  </div>
</aside>

<p>Since being pioneered by Adam’s team, team working agreements have spread to most of our engineering teams. They’ve
been a learning opportunity for all of us, and a chance for our team members to share experiences and practices
with each other.</p>

<h2 id="whats-a-team-working-agreement">What’s a team working agreement?</h2>

<p>A team working agreement is a written set of guidelines for an engineering team. It enumerates the habits and
practices that the team requires to be productive and successful. The agreement is a living document, and every
member of the team has a part in shaping it.</p>

<p><a href="https://en.wikipedia.org/wiki/Tuckman%27s_stages_of_group_development">According to Bruce Tuckman, a team moves through four phases of development: forming, storming, norming, and performing</a>.
Team working agreements can help a team move more quickly through the stages. A team in the “forming” stage will
quickly uncover areas of disagreement and move to “storming” when they attempt to align on a working agreement. A
“storming” team might move to “norming” more quickly when their points of friction are arbitrated in a working
agreement.</p>

<p>Examples of habits or practices on a team working agreement might include:</p>

<ul>
  <li>Any change to the sprint backlog requires product manager approval.</li>
  <li>Everyone owns the backlog and should add tickets for untracked work.</li>
  <li>Update the backlog before each day’s standup.</li>
</ul>

<p>We’ve been using a fairly consistent process to develop team working agreements at Artsy.</p>

<h3 id="step-1-educate-the-team-about-team-working-agreements">Step 1: Educate the team about team working agreements</h3>

<p>We want every team member to recognize the importance of creating an agreement.</p>

<p>Each team reviews
<a href="https://github.com/artsy/README/blob/master/playbooks/agile/team-working-agreement.md">our docs on the process of creating a working agreement</a>
before creating one. They might also review an existing working agreement.</p>

<h3 id="step-2-conduct-a-brainstorming-meeting">Step 2: Conduct a brainstorming meeting</h3>

<p>The team meets for an hour to brainstorm ideas that promote success from each individual or the team as a whole.
Some of our teams have met fully in-person and used physical sticky notes for brainstorming; many have used an
online tool like <a href="https://miro.com/">Miro</a> to include remote members.</p>

<p>It’s vital that <em>all</em> members of the team attend the brainstorm. For us, that includes engineers and product
managers, but also designers and data analysts. This is a discussion of how the entire team works together -
everyone’s voice should be heard.</p>

<p>A sample brainstorm agenda is
<a href="https://github.com/artsy/README/blob/master/playbooks/agile/team-working-agreement.md#sample-meeting-agenda">shared in our docs</a>.
The output of the brainstorm is a set of ideas that everyone has contributed to.</p>

<h3 id="step-3-distill-brainstorming-ideas-into-discrete-digestible-habits">Step 3: Distill brainstorming ideas into discrete, digestible habits</h3>

<p>The ideas from the brainstorming process can be sorted into themes. Within themes, we work to condense ideas into
habits and practices that are agreeable to the entire team. We have found success in keeping the language for these
habits small, discrete, and slogan-like.</p>

<p>The distillation step might take several round-trips of gathering feedback and wordsmith-ing.</p>

<h3 id="step-4-commit-the-most-important-habits-to-a-team-working-agreement-document">Step 4: Commit the most important habits to a “Team Working Agreement” document</h3>

<p>The team votes on which habits should be included in the agreement and a document is circulated.</p>

<p>It’s not done, though. Remember: it’s a living document.</p>

<h3 id="step-5-revisit-the-working-agreement">Step 5: Revisit the working agreement</h3>

<p>As a team, decide how often the agreement should be revisited, and what “revisiting the agreement” means. When
should we amend it? When should we do another brainstorm? It probably doesn’t make sense to scrap the old agreement
when one new team member joins, but how much change on a team would inspire us to recreate our agreement?</p>

<h2 id="why-establish-a-team-working-agreement">Why establish a team working agreement?</h2>

<h3 id="the-brainstorm-itself-is-incredibly-valuable">The brainstorm itself is incredibly valuable.</h3>

<p>Dedicated time to talk about values, habits, and processes is incredibly helpful to a team, yet rarely scheduled.
The brainstorm for a team working agreement can fill this void.</p>

<p>During the team agreement brainstorm the team looks at <em>how</em> they work, instead of looking at <em>what</em> work they’re
doing. It’s similar to what you might get out of a retro but at a higher level. It offers time to discuss “soft”
skills that you don’t often discuss, in a context that you don’t usually discuss them - with other individual
contributors, and with your closest collaborators.</p>

<aside class="dialogue">
  <div class="answer">
    <img src="/images/dialogue/steve.jpg" />
    <p class="intro">Steve Hicks says...</p>
    <p>
      When joining a new team, there's often a period of "feeling it out" - where I'm afraid to verbalize an
      opinion because I'm not sure how the team feels about it. The team working agreement process has definitely
      helped lessen this feeling.
    </p>
    <p>
      There's a [great talk by Katherine Wu named "Ask vs Guess Culture"](https://www.youtube.com/watch?v=FxTXf6qyaGk). 
      "Guess" culture is when you try to guess what a person wants or is thinking; "Ask" culture is when you flat out 
      ask them. Team agreement brainstorms are a really neat way to *ask* your team how they want to work, instead of
      spending many sprints trying to guess.
    </p>
    <p>
      So far, I have seen the most value out of *the actual brainstorm* than the working agreement itself. My teams 
      have learned so much about each others' habits and values.
    </p>
  </div>
  <div class="answer">
    <img src="/images/dialogue/adam.jpg" />
    <p class="intro">Adam Iskounen says...</p>
    <p>
      The process has helped confirm that the team shared interest in team dynamics &amp; the process of collaboration 
      across the team. As a new member it's nice to know that information.
    </p>
    <p>
      It's been great to see teammates bring up the team agreement in different contexts. It wasn't just a one-hour 
      brainstorm, it's something our team is living. Hearing our slogan-like habits recited during team meetings
      long after the brainstorm is a testament to the value of the agreement.
    </p>
  </div>
</aside>

<h3 id="it-can-lead-to-better-engagement-in-sprint-activities">It can lead to better engagement in sprint activities.</h3>

<p>One of our teams established in their working agreement that sprint meetings were valuable. This might seem too
obvious to put in a team working agreement, but it portrays clearly to everyone that they should attend all sprint
meetings and be actively engaged.</p>

<p>The same team got a lot out of making slogans for the items in their working agreement. Phrases like “Pair by
default” and “Incremental improvement over consistency” were introduced during the brainstorm. They’ve since become
mantras for the team to refer to during sprint work and ceremonies. Team values and habits solidify through this
kind of repetition.</p>

<h3 id="the-team-working-agreement-provides-on-boarding-documentation">The team working agreement provides on-boarding documentation.</h3>

<p>When new members join a team, it takes time for them to adjust. A team working agreement provides an up-to-date
reference on the team’s preferred methods of working. The working agreement isn’t set in stone, and as the team
changes it’s important to update it… but having it in writing helps new members acclimate quickly.</p>

<h2 id="what-are-some-challenges-with-team-working-agreements">What are some challenges with team working agreements?</h2>

<h3 id="uncertainty-about-what-the-team-agreement-should-include">Uncertainty about what the team agreement should include.</h3>

<p>Some teams have struggled to identify what belongs on a team working agreement. Should it describe our team values?
Habits? Procedures? Rules? Favorite afternoon snacks?</p>

<p>It likely varies from team to team what you want here. Some teams might require guidance around working with JIRA;
others might be more focused on taking ownership of problems. These differences are likely a reflection of the
problems the team is currently facing or has recently faced.</p>

<p>It’s definitely important that you identify what you’re looking for up front, and make it clear heading into the
brainstorm. Suggest categories, sample habits, &amp; questions to ask heading into the brainstorm, and keep them
visible during the meeting.</p>

<p>Take notice of known problem areas: are they addressed or avoided in the agreement? It is easy for a team to avoid
confrontation at their own expense.</p>

<p>Also be cautious about introducing individual bias.</p>

<aside class="dialogue">
  <div class="answer">
    <img src="/images/dialogue/steve.jpg" />
    <p class="intro">Steve Hicks says...</p>
    <p>
      During my first team agreement brainstorm, I felt like we spent a lot of time talking about details 
      related to specific incidents. On my next team, I made a strong effort to constrain the suggestions 
      to avoid this. To me, team values were really important for this new team - and I did such a good 
      job of encouraging those types of suggestions that it's pretty much all we ended up with.
    </p>
    <p>
      As a result, our initial working agreement lacked important procedural and tactical definition. We've 
      been adding things like JIRA hygiene and responsibilities of project leaders as they come up, but I would
      not push a working agreement brainstorm so strongly in one direction again.
    </p>
  </div>
</aside>

<p>Remember that the working agreement is a living document. If the team learns that it missed something in the
brainstorm, don’t hesitate to update the agreement. Team retros are a great time to make updates.</p>

<h3 id="working-agreements-are-hard-to-define-for-teams-without-a-well-established-identity">Working agreements are hard to define for teams without a well-established identity.</h3>

<p>For a team that has a strong and cohesive identity, the agreement is likely to affirm many things the team is
already believing and doing. For a less cohesive team the agreement is harder to pin down. Many opinions will
surface, and they may be in conflict with each other.</p>

<p>While this is indeed challenging, it is also important to note that teams that lack identity benefit <em>greatly</em> from
the team agreement brainstorm. Provided there is
<a href="https://github.com/artsy/README/blob/master/culture/engineering-principles.md#psychological-safety">psychological safety</a>,
this is a really great time for the team to learn about what matters to each other, and move toward establishing an
identity.</p>

<h3 id="facilitating-the-brainstorm-can-be-difficult-on-a-distributed-team">Facilitating the brainstorm can be difficult on a distributed team.</h3>

<p>Some of our teams were able to brainstorm with everyone on-site. They were able to rely on post-it notes and
in-person conversations, and read each other’s non-verbal communication. Other teams have a mix of on-site and
remote members, and used tools like <a href="http://miro.com/">Miro</a> to facilitate. This <em>can</em> present a challenge…but if
you’re already a distributed team, they are likely the same types of challenges you’ve worked to overcome for <em>all</em>
meetings.</p>

<p>The differences are worth noting, though. The importance of reading each other’s non-verbal communication is
magnified when you’re having conversations about identity. It’s quicker to organize and re-organize real-life
post-its than virtual post-its in an online tool. These are all opportunities to get better at being a distributed
team.</p>

<h3 id="it-takes-effort-to-make-sure-one-person-isnt-introducing-their-bias-into-the-working-agreement">It takes effort to make sure one person isn’t introducing their bias into the working agreement.</h3>

<p>It’s important for the team agreement brainstorm to provide an environment in which every team member is heard.
Even if your team is successful at this, there are still opportunities for individual bias to affect the working
agreement.</p>

<p>We saw earlier how bias can appear when the examples provided for the brainstorm are too narrowly scoped.</p>

<p>We recognized another bias vector in the distillation of the brainstorm into an actual agreement. If this is
handled by a single person, it’s very possible for them to produce a working agreement that misrepresents <em>the
rest</em> of the team. To counter this, we’ve had multiple team members pair on the distillation process. Feedback on
the initial draft of the agreement is also important to ensure it does not misrepresent the team’s ideas.</p>

<p>The problem of introducing bias to the distillation process is most challenging with topics that are disputed
across the team. One of our teams spent a lot of time talking about meetings in their brainstorm, but struggled to
come to consensus on them. No single person, or even a pair, could add a disputed topic like this to the working
agreement without introducing their personal bias. In this specific case, the team chose to leave meetings off the
working agreement until they could reach consensus. Topics that are disputed across the team are important to talk
about at <em>some</em> point, but the brainstorm is probably not the time.</p>

<h3 id="team-health-is-easy-to-postpone-when-you-have-important-product-work-to-do">Team health is easy to postpone when you have important product work to do.</h3>

<p>One of our teams put the act of distilling the brainstorm notes into an agreement on one person. That person became
busier than expected, didn’t have time to write the agreement, and the team’s agreement stalled.</p>

<p>Just as personal self-care gets put on the back burner during stressful times, creating a working agreement is easy
to bump down the backlog during intense periods of sprint work. The longer a team drags out the working agreement
process, the more context is lost from the original brainstorm. We recommend not letting your working agreement
linger.</p>

<p>It’s also important to revisit the working agreement often. It is a living document, not one-and-done. Review the
agreement as a team occasionally; update the agreement as your team learns how to collaborate better; cultivate the
agreement. If an agreement gets stale, it will become inaccurate, meaningless, and unused.</p>

<h3 id="what-does-it-even-mean-to-have-a-team-working-agreement">What does it even mean to have a team working agreement?</h3>

<p>A team working agreement is a neat artifact. The brainstorm process has great value. But there is non-obvious work
involved in turning a team working agreement into the team culture. We have many questions that we aren’t sure how
to answer:</p>

<ul>
  <li>How do you enforce the agreement?</li>
  <li><em>Should</em> you enforce the agreement?</li>
  <li>How do you get the entire team to embrace it?</li>
  <li>What happens when the agreement is violated or disrespected?</li>
</ul>

<p>If you’re using working agreements on your team and you’ve got answers for us, or you want to start using them and
have more questions, we’d love to hear from you!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Diagnosing our Radiation Problems]]></title>
    <link href="https://artsy.github.io/blog/2019/11/14/diagnosing-our-radiation-problems/"/>
    <updated>2019-11-14T00:00:00+00:00</updated>
    <id>https://artsy.github.io/blog/2019/11/14/diagnosing-our-radiation-problems</id>
    <content type="html"><![CDATA[<p>Email! Electronic mail! What a concept! Like many companies, Artsy has built products on top of email, but this is
a decision that (like many companies) Artsy periodically regrets. But overall, our email systems work well!</p>

<p>But what about when it doesn’t? Well that’s what today’s blog post is about: what happens when things break and you
don’t know why?</p>

<!-- more -->

<p>I have learned a lot
<a href="https://artsy.github.io/blog/2018/05/30/my-first-week-on-call/">since my first on-call shift</a>, but going on call
still gives me a little stage fright. As I start a shift, I’m on the look-out for things that might break, and soon
after starting a recent on-call shift, “breaking” is exactly what things did.</p>

<p><img src="/images/2019-11-07-diagnosing-our-radiation-problems/alert.png" alt="Screenshot of Slack alert" /></p>

<p>We got an automated alert on Slack that one of our email services, code-named “Radiation”, had really high response
times. We <em>then</em> received an alert that too many requests to Radiation were failing completely. Yikes. The next
twenty two hours was a deep dive into Heroku, New Relic, Rails, and PostgreSQL, all to isolate the problem and
produce a solution.</p>

<p>The nice thing about email, as a protocol, is that it’s based on a store-and-forward concept. That means that if a
message delivery fails, email servers will try again later (typically with an exponential backoff). SendGrid, our
email processor, has built their REST API around this same store-and-forward concept. While the Radiation server
was unresponsive, SendGrid wouldn’t receive successful HTTP responses from the webhook deliveries, so it would
attempt to re-deliver the failing emails later. Email deliveries would be delayed, but the emails themselves would
not be dropped. We wasted no time addressing the problem, but we were also confident that once we fixed the issue,
the data would be okay.</p>

<p>After the alert, Ashkan (Radiation’s point-person) and I communicated with our colleagues (engineers and affected
non-engineers) about the problem. With the help of Chung-Yi, we began investigating the immediate problem (with a
focus on <em>mitigating</em> it, rather than necessarily <em>fixing</em> it). Oh, we tried it all: spinning up more Heroku Dynos
to handle requests, increasing concurrency on the individual Dynos, restarting Redis and PostgreSQL stores. Each
time, things would work briefly before the Radiation API would begin timing out again. More accurately, the
requests sent to Radiation were taking longer than the Heroku router was giving them (30 seconds) before the router
gave up and timed out the request. We started examining the Radiation code and database (keeping our <em>ion the
prize</em>: mitigation).</p>

<p>Ashkan investigated slow database queries. We added new PostgreSQL indexes to speed up queries, and restructured
others to avoid expensive joins. Unfortunately, all this accomplished was extending the time after a Dyno reboot
that things would work (before beginning to timeout again). Because
<a href="https://artsy.github.io/blog/2017/05/30/database-encryption/">Artsy stores emails as encrypted-at-rest</a>, it was
difficult to pinpoint which exact message could be causing the timeouts. And Radiation itself didn’t have much in
the way of logging, which would normally help us debug the problem.</p>

<p>It was frustrating to try to fix something but only manage to improve how long it took to break again. We had
enhanced Radiation’s performance to the point where it was taking 10 minutes after a Dyno reboot to begin timing
out again, up from 30 seconds at the beginning of the incident. Despite an afternoon and evening spent trying to
fix the problem, we were stuck. We decided that the best course of action was a good night’s sleep; we would ask
for help in the morning.</p>

<p>The next day, Ashkan and I got <em>up and atom</em> to address the problem. We brought my on-call partner Devon up to
speed, detailing the incident symptoms and what we had tried so far. While Devon and Ashkan worked on additional
logging and new timeout strategies, I took another approach.</p>

<p>Artsy has been moving to <a href="https://www.datadoghq.com">DataDog</a> for server performance monitoring, but Radiation was
still using <a href="https://newrelic.com">New Relic</a>. My background is in iOS app development and I had never really dug
into New Relic before, but I <em>am</em> very experienced at profiling iOS applications, and the Ruby and Objective-C
runtimes have more in common than they have have differences. I used New Relic to profile a production Radiation
Dyno for five minutes and, to our collective surprise, we found that more than 90% of CPU time was being spent in
<a href="https://github.com/thoughtbot/griddler/blob/ff2ad16949bf5190f93df1a3e83eb0192f136c6d/app/controllers/griddler/emails_controller.rb#L4-L10">an innocuous function of a dependency</a>,
the open source library <a href="https://github.com/thoughtbot/griddler">Griddler</a>.</p>

<p>Artsy uses Griddler to parse and sanitize emails that we receive from <a href="https://sendgrid.com">SendGrid</a>. Griddler
contained the problematic code, which was responsible for parsing email responses from threaded replies. So if an
email body received by Radiation looks like this:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>This is the most recent reply in this email conversation.

On September 28th, 2019, Someone Else Wrote:

[The rest of the email thread]
</code></pre></div></div>

<p>Then Griddler parses out the string “This is the most recent reply in this email conversation.” for Radiation to
process. This is really important because some of the threads in Radiation are <em>thousands</em> of emails long. In fact,
I learned that Radiation has Artsy’s largest production database.</p>

<p>Griddler does this processing via regular expressions. Ashkan had the insight to look for existing issues from
other Griddler users who ran into similar problems, and to our delight,
<a href="https://github.com/thoughtbot/griddler/pull/310">we found a pull request</a> that appeared to address the <em>exact</em>
issue that we were having.</p>

<p>It turns out that emails with large amounts of repeated newline characters would totally stall Griddler’s regex.
Heroku’s router would timeout any request after 30 seconds, but would leave the Ruby code churning on that regex.
That would leave the Rails server unable to respond to subsequent HTTP requests, causing more timeouts. And because
of email’s store-and-forward nature, SendGrid would begin sending more problematic emails pretty quickly after any
Radiation reboot. A small change to add a regex group was all that was necessary to fix the issue.</p>

<p>Phew! We forked Griddler to Artsy’s GitHub organization and applied the change from the pull request. We were
concerned about security implications of using a different regex, but my
<a href="https://artsy.github.io/blog/2018/02/06/apogee-technical-retrospective/">previous work in regular expressions</a>
helped me vet the change. We pointed Radiation’s Gemfile to Artsy’s fork and deployed the change.</p>

<p><img src="/images/2019-11-07-diagnosing-our-radiation-problems/heroku.png" alt="Screenshot of Heroku Dashboard, indicating a drop in load" /></p>

<p>Then, we waited. Would the system start timing out again? It took a half hour for any of us to breathe a sigh of
relief. But things appeared to be stable: response times were normal and Dyno load dropped precipitously. Our
<em>Curie</em> worked. (Okay, enough radiation puns.)</p>

<p>During our weekly incident review, Devon guided the rest of our team through our incident response and what we
learned. Radiation is now in a much better state, so that future problems will be easier to track down. We
responded to the Griddler pull request, encouraging the maintainers to merge the commit so other teams would avoid
this problem. The incident review meeting explored a number of options to mitigate future issues, including
migrating Radiation to our Kubernetes cluster, and Sam (our VP of Engineering) suggested writing this post. So here
we are.</p>

<p>Ashkan also followed up with peer feedback for Devon, Chung-Yi, and myself. In part, it read:</p>

<blockquote>
  <p>It’s rare and odd to say dealing with incident was fun, but with your help it actually was productive and fun.</p>
</blockquote>

<p>Which, honestly? One of my proudest accomplishments at Artsy.</p>

<p>In the end, we solved the problem and restored access to our email systems in under 24 hours. We kept our cool, we
communicated effectively with our non-engineering colleagues, and we learned a lot. What more could you want from a
Radiation incident?</p>
]]></content>
  </entry>
  
</feed>
