<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: publishing | Artsy Engineering]]></title>
  <link href="https://artsy.github.io/blog/categories/publishing/atom.xml" rel="self"/>
  <link href="https://artsy.github.io/"/>
  <updated>2024-08-06T19:48:16+00:00</updated>
  <id>https://artsy.github.io/</id>
  <author>
    <name><![CDATA[]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[The Anatomy of an Editorial Feature]]></title>
    <link href="https://artsy.github.io/blog/2019/03/05/custom-editorial-features/"/>
    <updated>2019-03-05T00:00:00+00:00</updated>
    <id>https://artsy.github.io/blog/2019/03/05/custom-editorial-features</id>
    <content type="html"><![CDATA[<p><img src="http://files.artsy.net/images/2018-visual-culture-screengrab.gif" alt="The Year in Visual Culture 2018" title="The Year in Visual Culture 2018" /></p>

<p>On select occasions since 2015, Artsy Editorial has created a number of custom, one-off articles featuring unique layouts, styles and experiences. After trying a number of implementations, the <a href="https://github.com/artsy/reaction/tree/master/src/Components/Publishing/EditorialFeature"><code class="language-plaintext highlighter-rouge">EditorialFeature</code></a> component was introduced to the process during Artsy’s 2018 year-in-review projects.</p>

<p>By moving the implementation of custom articles to Artsy’s component library, we were able to remove some of the friction and time investment necessary for engineers to spin up these articles, and enable bespoke layouts to be housed in Artsy.net’s Article domain rather than a custom Express app. Acting essentially as a wrapper to accept article data, any component can be rendered as a child of the <code class="language-plaintext highlighter-rouge">EditorialFeature</code> component, allowing for flexible combinations of new and existing features, and for minimal or maximal interventions.</p>

<!-- more -->

<p>For a light-weight customization, a developer might add props for unique text or background colors. Medium-touch could involve wrapping an existing layout in a styled-component declaring further css interventions to font-size, borders, margins or other layout properties. The space is an open canvas, so the option is available to build every element from scratch, introduce JS interactivity, and to interact with any data saved to the article model in a completely new way. The scale of a project can vary widely, but determined by weighing priorities of editorial intent, proposed designs, engineering capabilities/availability, and budget.</p>

<p>Some examples of articles created with the <code class="language-plaintext highlighter-rouge">EditorialFeature</code> component include:</p>

<ul>
  <li>
    <table>
      <tbody>
        <tr>
          <td>The Most Influential Artists of 2018 - <a href="https://github.com/artsy/reaction/tree/master/src/Components/Publishing/EditorialFeature/Components/Eoy2018Artists">Components</a></td>
          <td><a href="https://www.artsy.net/article/artsy-editorial-influential-artists-2018">Article</a></td>
        </tr>
      </tbody>
    </table>
  </li>
  <li>
    <table>
      <tbody>
        <tr>
          <td>The Year in Visual Culture 2018 - <a href="https://github.com/artsy/reaction/blob/master/src/Components/Publishing/EditorialFeature/Components/Eoy2018Culture.tsx">Components</a></td>
          <td><a href="https://www.artsy.net/article/artsy-editorial-people-defined-visual-culture-2018">Article</a></td>
        </tr>
      </tbody>
    </table>
  </li>
</ul>

<h1 id="custom-articles-by-domain">Custom articles by domain:</h1>

<p><strong>1. <a href="https://github.com/artsy/force">In Force (Artsy.net)</a></strong></p>

<ul>
  <li>Whether an article requires a custom layout is determined in Force’s <a href="https://github.com/artsy/force/blob/master/src/desktop/apps/article/routes.ts">article routing</a>. This is achieved by passing the prop <code class="language-plaintext highlighter-rouge">customEditorial</code>– a string shorthand for a specific article– to Reaction’s top-level <code class="language-plaintext highlighter-rouge">Article</code> component. The <code class="language-plaintext highlighter-rouge">customEditorial</code> prop is pulled from Force’s editorial feature “<a href="https://github.com/artsy/force/blob/master/src/desktop/apps/article/editorial_features.ts">master list</a>”, which ties an <code class="language-plaintext highlighter-rouge">article._id</code> to a communicative string that will be received by Reaction. In addition to data saved to an article model, the component will also receive all data displayed in the footer including related articles and display ads. Custom articles are rendered as a standalone page, meaning they are excluded from infinite scroll and do not render the main site header.</li>
</ul>

<p><strong>2. <a href="https://github.com/artsy/reaction">In Reaction (Artsy’s component library)</a></strong></p>

<ul>
  <li>In Reaction’s top-level <a href="https://github.com/artsy/reaction/blob/master/src/Components/Publishing/Article.tsx"><code class="language-plaintext highlighter-rouge">Article</code></a> component, the presence of a <code class="language-plaintext highlighter-rouge">customEditoral</code> prop routes an article to the <a href="https://github.com/artsy/reaction/blob/master/src/Components/Publishing/Layouts/ArticleWithFullScreen.tsx"><code class="language-plaintext highlighter-rouge">ArticleWithFullScreen</code></a> component. From here, the article is given context for image slideshows and tooltip helpers, and the  <code class="language-plaintext highlighter-rouge">EditorialFeature</code> component is rendered rather than the component designated by the article’s specified layout. A <code class="language-plaintext highlighter-rouge">FeatureLayout</code> is displayed by default, but any article can be converted into a custom feature, regardless of the <code class="language-plaintext highlighter-rouge">article.layout</code> value. Inside the <code class="language-plaintext highlighter-rouge">EditorialFeature</code> component, a switch statement is used to associate the string variable for the feature with its affiliated top-level component.</li>
</ul>

<p><strong>3. <a href="https://github.com/artsy/positron">In Writer/Positron (CMS &amp; API for articles)</a></strong></p>

<ul>
  <li>Because <code class="language-plaintext highlighter-rouge">EditorialFeature</code> accepts an article data-model, it can be edited using the Writer CMS. However it is important to note that a custom layout is rendered by Force only. While editing, what users see is dicated by the <code class="language-plaintext highlighter-rouge">article.layout</code> property. Writer’s features are exposed based on this property, so a particular custom article’s layout should be determined by the features most suited to the content and design.  For example, if you need a header-image or video, a feature article would be a logical choice because that content can easily be created and edited in Writer. If the article relies heavily on content from related articles, you might choose to customize a series article instead.</li>
</ul>

<h1 id="creating-a-custom-feature">Creating a custom feature</h1>

<p><img src="http://files.artsy.net/images/2018-influentual-artists-screengrab.gif" alt="The Most Influential Artists of 2018" title="The Most Influential Artists of 2018" /></p>

<p><strong>A custom layout is enabled via three steps:</strong></p>

<ul>
  <li>Add a new object to the <code class="language-plaintext highlighter-rouge">customEditorialArticles</code> <a href="https://github.com/artsy/force/blob/master/src/desktop/apps/article/editorial_features.ts">master list</a>, indicating the <code class="language-plaintext highlighter-rouge">article._id</code> and <code class="language-plaintext highlighter-rouge">name</code>. Names are usually a shorthand for the content, and used because they are descriptive (unlike an <code class="language-plaintext highlighter-rouge">_id</code>), and will not change over time like a title or slug has potential to do.
    <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="p">{</span>
    <span class="nl">name</span><span class="p">:</span> <span class="dl">"</span><span class="s2">MY_CUSTOM_FEATURE</span><span class="dl">"</span><span class="p">,</span>
    <span class="nx">id</span><span class="p">:</span> <span class="dl">"</span><span class="s2">12345</span><span class="dl">"</span> <span class="c1">// mongo _id</span>
  <span class="p">}</span>
</code></pre></div>    </div>
  </li>
  <li>Create your custom component in the <code class="language-plaintext highlighter-rouge">EditorialFeature/Components</code> directory</li>
  <li>Add your <code class="language-plaintext highlighter-rouge">customEditorial</code> string to <code class="language-plaintext highlighter-rouge">EditorialFeature</code>’s switch statement to enable rendering custom component
    <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="k">case</span> <span class="dl">"</span><span class="s2">MY_CUSTOM_FEATURE</span><span class="dl">"</span><span class="p">:</span> <span class="p">{</span>
    <span class="k">return</span> <span class="o">&lt;</span><span class="nx">MyCustomFeature</span> <span class="p">{...</span><span class="nx">props</span><span class="p">}</span> <span class="sr">/</span><span class="err">&gt;
</span>  <span class="p">}</span>
</code></pre></div>    </div>
  </li>
</ul>

<p>Although these features historically receive high traffic via search and other channels, they usually have little internal visibility a few months after they are published. For this reason it is recommended that, in addition to any unit tests, developers create a snapshot of the custom article so that unexpected regressions are flagged in a test failure.</p>

<h1 id="history--context">History &amp; Context</h1>
<p>Previously we have used multiple strategies to implement these features, using two sometimes overlapping concepts: Curations and SuperArticles.</p>

<p><img src="http://files.artsy.net/images/2017-gender-equality-screengrab.gif" alt="Artists for Gender Equality" title="Artists for Gender Equality" /></p>

<p><strong>Curations:</strong></p>

<p>A <a href="https://github.com/artsy/positron/tree/master/src/api/apps/curations">Curation</a> is a model in Positron’s API that has no schema– meaning it accepts any data shape. This can be a handy solution for content that does not conform to the existing article model. However, this strategy comes with significant overhead and a few quirks:</p>

<ul>
  <li>A <a href="https://github.com/artsy/positron/tree/master/src/client/apps/settings/client/curations">custom edit UI must be created</a> and maintained indefinitely</li>
  <li>A custom Express app is required by Force to render the content</li>
  <li>Because data is in a unique shape, components often must be fully custom</li>
  <li>It is difficult to track visual changes over time</li>
</ul>

<p>Despite these pitfalls, Curations remain useful for special cases, especially those which involve interactive navigation through content.</p>

<p>Published examples of custom articles that use curations are:</p>

<ul>
  <li><a href="https://www.artsy.net/gender-equality">Artists for Gender Equality</a></li>
  <li><a href="https://www.artsy.net/venice-biennale">Inside the Biennale</a></li>
  <li><a href="https://www.artsy.net/2016-year-in-art">The Year in Art 2016</a></li>
</ul>

<p><em>See <a href="http://artsy.github.io/blog/2017/02/01/year-in-art/">previous blog post</a> on creating The Year in Art 2016.</em></p>

<p><strong>SuperArticles:</strong></p>

<p>An article where the <code class="language-plaintext highlighter-rouge">is_super_article</code> field is set to true includes the ability to attach related articles and sponsor-related fields to an article. It also exempts an article from the infinite scroll feed, and renders a custom header (in place of the main site navigation) and footer. The SuperArticle <a href="https://github.com/artsy/force/blob/master/src/desktop/components/article/templates/super_article_sticky_header.jade">header</a> and <a href="https://github.com/artsy/force/blob/master/src/desktop/components/article/templates/super_article_footer.jade">footer</a> both include navigation options to view and visit related, aka sub-article, content.</p>

<p>The first SuperArticle was also the <a href="https://www.artsy.net/2015-year-in-art">first custom feature</a>, and its attributes were made available to all articles when launched. However, its weakness lies in a conflation of a series and a sponsor as a single concept. In practice we have seen that they are not mutually exclusive. Additionally, support for this feature was built in Backbone, and hasn’t always behaved as expected when inserted into our React-heavy ecosystem. Since the SuperArticle was created, we have extended the ability for any article to accept either or both sponsor and related article data, and we are currently in the process of deprecating this concept.</p>

<p>Existing SuperArticles include:</p>

<ul>
  <li><a href="https://www.artsy.net/2016-year-in-art">The Year in Art 2016</a></li>
  <li><a href="https://www.artsy.net/2015-year-in-art">The Year In Art 2015</a></li>
  <li><a href="https://www.artsy.net/article/artsy-editorial-the-100-most-expensive-artists">The 100 Most Expensive Artists at Auction</a></li>
</ul>

<h1 id="takeaways-for-developers">Takeaways for developers</h1>
<ul>
  <li>We try to work with our editorial and design teams to ensure new editorial content maps as closely to our existing article data-model and CMS features as possible. That way, we can have an upfront conversation about the constraints our systems might impose on designs.</li>
  <li>Relying heavily on existing article and system components ensures that system-wide changes (for example, changes to breakpoints) will be inherited</li>
  <li>Always create snapshot tests to monitor how an article changes over time</li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Making Artsy Editorial Accessible]]></title>
    <link href="https://artsy.github.io/blog/2017/08/29/Making-Artsy-Editorial-Accessible/"/>
    <updated>2017-08-29T00:00:00+00:00</updated>
    <id>https://artsy.github.io/blog/2017/08/29/Making-Artsy-Editorial-Accessible</id>
    <content type="html"><![CDATA[<p>During Artsy’s recent 2017 Hackathon we tackled making all of our editorial content <a href="https://en.wikipedia.org/wiki/Accessibility">accessible</a>. The idea was hatched at  Berlin JSConf this spring, where <a href="https://youtu.be/H4FzW9oFObs">Laura Carvajal gave a talk</a> following the <em>Financial Times</em>’ experience implementing better accessibility requirements, and how they built these considerations into their testing process.</p>

<p>What does accessibility mean in a browser? Generally the term refers to supporting the wide range of assistive technologies for users with vision or motor impairments. These include screen readers, as well as mouseless navigation using a keyboard, eye tracking and other devices. Interestingly these technologies are implemented at the OS level rather than the browser itself. Mac’s OS includes a built in screen-reader, and <a href="http://www.freedomscientific.com/Products/Blindness/JAWS">JAWS</a> is the most popular application in this vein. It is also notable that browsers do not track users who employ assistive tools.</p>

<p>Two users on <a href="http://webaim.org/discussion/mail_thread?thread=6326">WebAIM’s forum</a> excellently present the case for accessibility as a developer’s responsibility:</p>

<blockquote>
  <p>“Users may be highly resistant to having their disabilities identified as they go throughout the web. Most persons with disabilities would really just rather that <em>the Web just work</em> for them.”</p>
</blockquote>

<blockquote>
  <p>“Looking at accessibility as a way to serve a specific population is missing the point that accessibility is about inclusion of all people.”</p>
</blockquote>

<p>A central tenant of Artsy’s mission is to ‘make art as accessible as music’. By expanding accessibility for the visually and motor impaired to writing on art and culture, this projects allows us to follow through on this statement in a very literal way. Furthermore, there’s no reason to ignore this audience; accommodating use of assistive technologies is an ethically responsible thing to do.</p>

<!-- more -->

<h2 id="putting-it-into-practice">Putting it into practice</h2>

<p>Smartly structured HTML is essential for screen readers. They take note of semantic elements like headings or <code class="language-plaintext highlighter-rouge">&lt;nav&gt;</code>, and interpret our page’s elements in the order they are written. Absolute and fixed spacing are ignored in this context, so it is important to realize non-visual reading of your site may prioritize different information, or present it in a different order than expected. This means that in JavaScript-oriented environments, and anywhere elements are inserted on the client, it is important to keep all elements necessary to navigating available in a semantic form at all times, including drop downs.</p>

<p>We used three tools to evaluate pain points on our site: the npm module <a href="https://github.com/pa11y/pa11y">pa11y</a>, Chrome’s <a href="https://chrome.google.com/webstore/detail/accessibility-developer-t/fpkknkljclfencbdbgkenhalefipecmb?utm_source=chrome-ntp-icon">Accessibility Developer Tools</a>, and <a href="http://wave.webaim.org/">WAVE</a>— a web accessibility evaluation tool by <a href="http://webaim.org/">WebAIM</a>, a non-profit dedicated to “empowering organizations to make their own content accessible”.  All three work similarly. Input a web address, and an error report is generated. Pa11y works in the terminal, and can export to a CSV, and even create a dashboard tracking separate URLs. Chrome handily provides a color-coded scorecard in addition to an accessibility audit report. Because Chrome’s reporting lives in the browser’s console, it is especially easy to inspect your code directly from an error. However, each tool brought up unique issues, so it is prudent to try a few.</p>

<p>We found a range of warnings and errors on our first run, where Chrome gave us a failing grade of 62, and pa11y raked up 48 errors, not counting a sizeable number of warnings. Luckily, most of the changes were fast and easy:</p>

<ul>
  <li>Use meta language property (<code class="language-plaintext highlighter-rouge">&lt;html lang="en"&gt;</code>)</li>
  <li>Increase the meta property for maximum scale to 5</li>
  <li>Add hidden text to icon-only links and UI elements</li>
  <li>Add alt text to all images</li>
  <li>Include aria form attributes on input fields</li>
  <li>Use semantic roles for the article body (<code class="language-plaintext highlighter-rouge">&lt;div role='article'&gt;</code>)</li>
  <li>Remove of duplicate IDs from pages</li>
  <li>Remove vendor-generated ids from SVGs, which in our case were often duplicates.</li>
</ul>

<p>A summary of changes implemented can be seen in pull requests <a href="https://github.com/artsy/force/pull/1730">here</a> and <a href="https://github.com/artsy/force/pull/1732">here</a>.</p>

<p>There were several places on our site where we wanted to include text that was intended only for screen readers. However, <code class="language-plaintext highlighter-rouge">display: none</code> is not necessarily acceptable in this context. Instead we opted for absolute positing of screen-reader targeted elements far out of the screen.</p>

<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">//</span> <span class="nt">hides</span> <span class="nt">text</span> <span class="nt">that</span> <span class="nt">is</span> <span class="nt">only</span> <span class="nt">for</span> <span class="nt">screen-readers</span>

<span class="nc">.screen-reader-text</span> <span class="p">{</span>
  <span class="nl">position</span><span class="p">:</span> <span class="nb">absolute</span><span class="p">;</span>
  <span class="nl">left</span><span class="p">:</span> <span class="m">10000px</span><span class="p">;</span>
  <span class="nl">top</span><span class="p">:</span> <span class="nb">auto</span><span class="p">;</span>
  <span class="nl">width</span><span class="p">:</span> <span class="m">1px</span><span class="p">;</span>
  <span class="nl">height</span><span class="p">:</span> <span class="m">1px</span><span class="p">;</span>
  <span class="nl">overflow</span><span class="p">:</span> <span class="nb">hidden</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>A few challenges were encountered as we worked through the error reports. My research brought up mixed messages on <code class="language-plaintext highlighter-rouge">display: none</code>. For example, Artsy renders the main menu in both desktop and mobile versions, but hides one view based on the user agent. We saw errors with all testing frameworks for having duplicate IDs, despite the fact that these elements were hidden via <code class="language-plaintext highlighter-rouge">display: none</code>.  This is a problem that would be well solved with React, where we could render content based to screen width rather than hiding a duplicate.</p>

<p><img src="/images/2017-08-29-Making-Artsy-Editorial-Accessible/Chrome-Accessibility-Dashboard.png" alt="Chrome Accessibility Audit Score" /></p>

<p>Another road block encountered was for headers that contain links— which the error reports recognized as empty headers, rather than reading the link. We use linked headings frequently for section titles in our articles, so this is an issue we are still mitigating. Lastly, using a screen reader is a skill set all its own! While our Chrome audit score is now far higher than where we started, my own experience using a screen reader proved far more difficult than expected. To be completely sure our implementation is working, I hope to find an experienced screen-reader user to give it a spin.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Animating the Year In Art]]></title>
    <link href="https://artsy.github.io/blog/2017/02/01/year-in-art/"/>
    <updated>2017-02-01T14:21:00+00:00</updated>
    <id>https://artsy.github.io/blog/2017/02/01/year-in-art</id>
    <content type="html"><![CDATA[<p>Artsy’s end of year features are an annual chance to walk through highlights of the year while also exploring front-end experiments. Created in collaboration with UBS and designed by Owen Dodd, <a href="https://www.artsy.net/2016-year-in-art">The Year In Art 2016</a> presents an interactive timeline of singular moments in art and culture over the past year.</p>

<p><img src="/images/2017-02-01-year-in-art/blog-eoy-headeranimation.gif" alt="2017 Year In Art Animation Sample" /></p>

<p>The piece opens with header animation, a series of transparent sliding boxes that presented a unique challenge. The finalized look is somewhat like a slinky- a stack of containers that are stretched open from the bottom, and compress again as they reach the top of the viewport, collapsing inward without ever crossing outside the screen.</p>

<p>Achieving this effect required animating elements in response both to the size of other elements in the viewport, and to the client’s scroll interactions, all while sitting transparently over a video background.</p>

<!-- more -->

<p>Because each element in the animation opens out from the center, and because the entire container is transparent, the sections needed to adjust their height rather than simply sliding out of view. Furthermore, the entire animation needed to be responsive, and able to adjust it’s place easily on page when refreshing or resized.</p>

<p>Essentially we needed a way to know where in our scroll position the top of each section ‘enters’ the window, which is also the point at which it should become visible. This functionality is close to <a href="https://github.com/imakewebthings/waypoints">Waypoints</a>, a library we use often at Artsy, but that option wasn’t going to work in this case. Because each section was actually in the viewport already, just at 0px tall, the library wouldn’t recognize an element’s ‘entering’ the frame (because it’s already there).</p>

<p><img src="/images/2017-02-01-year-in-art/blog-eoy-diagram.png" alt="DOM Element Diagram" /></p>

<p>The sections we would be animating were a known element- we had 10 pieces of content with a target height of 33% of the container. Additionally, a title card would be included at a different dimension, 100% container height.</p>

<p>So how can we establish when each element should be visible?</p>

<p>First we can declare the expected heights for each section:</p>

<div class="language-coffeescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">setupSliderHeight</span><span class="o">:</span> <span class="o">=&gt;</span>
   <span class="c1">#height of bounding container (and title section)</span>
   <span class="vi">@</span><span class="na">containerHeight</span> <span class="o">=</span> <span class="vi">@</span><span class="na">windowHeight</span> <span class="o">-</span> <span class="vi">@</span><span class="na">headerHeight</span>

   <span class="c1">#height of a single open section</span>
   <span class="vi">@</span><span class="na">activeHeight</span> <span class="o">=</span> <span class="vi">@</span><span class="na">windowHeight</span> <span class="o">-</span> <span class="vi">@</span><span class="na">headerHeight</span> <span class="o">-</span> <span class="p">(</span><span class="vi">@</span><span class="na">windowHeight</span> <span class="o">*</span> <span class="p">.</span><span class="mi">33</span><span class="p">)</span>
</code></pre></div></div>

<p>Next, we need to find at what scroll position each element should appear. Using the getScrollZones method below, we are able to return an array of ‘zones’ corresponding to the top each section.</p>

<div class="language-coffeescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">getScrollZones</span><span class="o">:</span> <span class="p">(</span><span class="nx">sections</span><span class="p">)</span>  <span class="o">=&gt;</span>
    <span class="nx">scrollZones</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="nx">scrollZones</span><span class="p">.</span><span class="na">push</span> <span class="vi">@</span><span class="na">containerHeight</span>  <span class="c1">#title section</span>
    <span class="k">for</span> <span class="nx">i</span> <span class="o">in</span> <span class="nx">sections</span>
      <span class="nx">scrollZones</span><span class="p">.</span><span class="na">push</span><span class="p">(</span> <span class="p">(</span> <span class="p">(</span><span class="nx">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">*</span> <span class="vi">@</span><span class="na">activeHeight</span><span class="p">)</span> <span class="o">+</span> <span class="vi">@</span><span class="na">containerHeight</span> <span class="o">+</span> <span class="mi">20</span><span class="p">)</span>
    <span class="k">return</span> <span class="nx">scrollZones</span>
</code></pre></div></div>

<p>getScrollZones returns an array from which we are also able to deduce another important variable, the height of the entire container if each section were ‘active’ or open:</p>

<div class="language-coffeescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>	<span class="vi">@</span><span class="na">openHeight</span> <span class="o">=</span> <span class="vi">@</span><span class="na">getScrollZones</span><span class="p">().</span><span class="na">last</span> <span class="o">+</span> <span class="vi">@</span><span class="na">headerHeight</span>
</code></pre></div></div>

<p>Our container is a fixed position box, but to simulate scrolling, we can put it inside another container whose height corresponds to @openHeight, allowing us to scroll the full length or our ‘scrollZones’ without any visible change on screen.</p>

<p>Now that we’re able to scroll, how do we know where we are?  This calls for another method, called as the user scrolls, to constantly let us know which element in our animation should be active.</p>

<div class="language-coffeescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="na">closestSection</span><span class="o">:</span> <span class="p">(</span><span class="nx">scrollTop</span><span class="p">,</span> <span class="nx">scrollZones</span><span class="p">)</span> <span class="o">=&gt;</span>
    <span class="nx">closest</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="na">max</span><span class="p">.</span><span class="na">apply</span><span class="p">(</span><span class="no">null</span><span class="p">,</span> <span class="nx">scrollZones</span><span class="p">)</span>
    <span class="k">for</span> <span class="nx">i</span> <span class="o">in</span> <span class="p">[</span><span class="mi">0</span><span class="p">..(</span><span class="nx">scrollZones</span><span class="p">.</span><span class="na">length</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)]</span>
      <span class="k">if</span> <span class="nx">scrollZones</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">&gt;=</span> <span class="nx">scrollTop</span> <span class="o">and</span> <span class="nx">scrollZones</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">&lt;</span> <span class="nx">closest</span>
        <span class="nx">closest</span> <span class="o">=</span> <span class="nx">i</span>
    <span class="k">return</span> <span class="nx">closest</span>
</code></pre></div></div>

<p>This method gives us the index of the section nearest to the top of our window at any given moment, allowing us to identify and manipulate both the active element and the ones immediately surrounding it. Check out the full implementation of this project on <a href="https://github.com/artsy/force/tree/master/apps/editorial_features/components/eoy">GitHub</a>.</p>

<p>Additionally, be sure to check out previous features created by Artsy in collaboration with UBS:</p>

<ul>
  <li><a href="https://www.artsy.net/venice-biennale-2015">Venice Biennale 2015</a></li>
  <li><a href="https://www.artsy.net/2015-year-in-art">2015 Year in Art</a>..</li>
  <li><a href="https://www.artsy.net/article/artsy-editorial-uncovering-the-surprisingly-secret-world-of-art-auctions">Video Series: The Art Market (in Four Parts)</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
