<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ActionMailer | Artsy Engineering]]></title>
  <link href="https://artsy.github.io/blog/categories/actionmailer/atom.xml" rel="self"/>
  <link href="https://artsy.github.io/"/>
  <updated>2024-10-30T17:33:51+00:00</updated>
  <id>https://artsy.github.io/</id>
  <author>
    <name><![CDATA[]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Generating Automatic Plain Text MIME Parts with Rails ActionMailer]]></title>
    <link href="https://artsy.github.io/blog/2012/05/16/generating-automatic-plain-text-mime-parts-with-rails-actionmailer/"/>
    <updated>2012-05-16T20:52:00+00:00</updated>
    <id>https://artsy.github.io/blog/2012/05/16/generating-automatic-plain-text-mime-parts-with-rails-actionmailer</id>
    <content type="html"><![CDATA[<p>E-mail is one of the most important ways to engage your users. And every time you touch a user’s inbox, it reflects on your brand. But getting email right has become increasing difficult due to the complexities introduced by the thousands of web-based, desktop and mobile mail clients. Email formatting is like the “Hunger Games” where the major players include online services such as GMail, Yahoo, Hotmail or AOL, desktop clients such as Outlook and a myriad mobile devices ranging from iPhone and Android to Blackberry.</p>

<p>To deal with this landscape, the MIME standard allows systems to send e-mail with multiple parts: <code class="language-plaintext highlighter-rouge">plain/text</code> for business-efficient devices such as the Blackberry, and <code class="language-plaintext highlighter-rouge">text/html</code> for web-based e-mail readers, such as GMail. Furthermore, <code class="language-plaintext highlighter-rouge">ActionMailer</code> supports multiple template formats: create an <code class="language-plaintext highlighter-rouge">.html.haml</code> template along with a <code class="language-plaintext highlighter-rouge">.txt.haml</code> template to generate both. We also know that <code class="language-plaintext highlighter-rouge">text/plain</code> email helps deliverability, but we believe a disproportionately small amount of text e-mails are actually read - the vast majority of devices are capable of parsing some HTML.</p>

<p>Is it possible to avoid having to maintain two separate templates without sacrificing deliverability? How can we inject a <code class="language-plaintext highlighter-rouge">text/plain</code> part into HTML e-mail that is both useful and “free”?</p>

<!--more-->

<p><code class="language-plaintext highlighter-rouge">ActionMailer::Base</code> defines an internal method called <code class="language-plaintext highlighter-rouge">collect_responses_and_parts_order</code> (<a href="http://apidock.com/rails/ActionMailer/Base/collect_responses_and_parts_order">#ref</a>), which iterates over templates and renders them. Let’s override that method and examine the contents of the generated parts.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">collect_responses_and_parts_order</span><span class="p">(</span><span class="n">headers</span><span class="p">)</span>
    <span class="n">responses</span><span class="p">,</span> <span class="n">parts_order</span> <span class="o">=</span> <span class="k">super</span><span class="p">(</span><span class="n">headers</span><span class="p">)</span>
    <span class="p">[</span><span class="n">responses</span><span class="p">,</span> <span class="n">parts_order</span><span class="p">]</span>
<span class="k">end</span>
</code></pre></div></div>

<p>Each <code class="language-plaintext highlighter-rouge">response</code> is a MIME part with its boundary and the <code class="language-plaintext highlighter-rouge">parts_order</code> is the order in which the parts appear in the final e-mail. The <a href="http://www.ietf.org/rfc/rfc1341.txt">MIME RFC 1341</a> says that the parts must be generated in the increasing order of preference, ie. <code class="language-plaintext highlighter-rouge">text/html</code> content-type part last, provided you want it to be the preferred format of your email.</p>

<p>We can find whether the generated e-mail contains a <code class="language-plaintext highlighter-rouge">plain/text</code> part and otherwise generate one.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">html_part</span> <span class="o">=</span> <span class="n">responses</span><span class="p">.</span><span class="nf">detect</span> <span class="p">{</span> <span class="o">|</span><span class="n">response</span><span class="o">|</span> <span class="n">response</span><span class="p">[</span><span class="ss">:content_type</span><span class="p">]</span> <span class="o">==</span> <span class="s2">"text/html"</span> <span class="p">}</span>
<span class="n">text_part</span> <span class="o">=</span> <span class="n">responses</span><span class="p">.</span><span class="nf">detect</span> <span class="p">{</span> <span class="o">|</span><span class="n">response</span><span class="o">|</span> <span class="n">response</span><span class="p">[</span><span class="ss">:content_type</span><span class="p">]</span> <span class="o">==</span> <span class="s2">"text/plain"</span> <span class="p">}</span>
<span class="k">if</span> <span class="n">html_part</span> <span class="o">&amp;&amp;</span> <span class="o">!</span> <span class="n">text_part</span>
  <span class="c1"># generate a text/plain part</span>
<span class="k">end</span>
</code></pre></div></div>

<p>Generating the text part means stripping all HTML with links preserved. <a href="http://nokogiri.org/">Nokogiri</a> has a very convenient deep <code class="language-plaintext highlighter-rouge">traverse</code> iterator.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">body_parts</span> <span class="o">=</span> <span class="p">[]</span>
<span class="no">Nokogiri</span><span class="o">::</span><span class="no">HTML</span><span class="p">(</span><span class="n">html_part</span><span class="p">[</span><span class="ss">:body</span><span class="p">]).</span><span class="nf">traverse</span> <span class="k">do</span> <span class="o">|</span><span class="n">node</span><span class="o">|</span>
  <span class="k">if</span> <span class="n">node</span><span class="p">.</span><span class="nf">text?</span> <span class="n">and</span> <span class="o">!</span> <span class="p">(</span><span class="n">content</span> <span class="o">=</span> <span class="n">node</span><span class="p">.</span><span class="nf">content</span> <span class="p">?</span> <span class="n">node</span><span class="p">.</span><span class="nf">content</span><span class="p">.</span><span class="nf">strip</span> <span class="p">:</span> <span class="kp">nil</span><span class="p">).</span><span class="nf">blank?</span>
    <span class="n">body_parts</span> <span class="o">&lt;&lt;</span> <span class="n">content</span>
  <span class="k">elsif</span> <span class="n">node</span><span class="p">.</span><span class="nf">name</span> <span class="o">==</span> <span class="s2">"a"</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">href</span> <span class="o">=</span> <span class="n">node</span><span class="p">.</span><span class="nf">attr</span><span class="p">(</span><span class="s2">"href"</span><span class="p">))</span> <span class="o">&amp;&amp;</span> <span class="n">href</span><span class="p">.</span><span class="nf">match</span><span class="p">(</span><span class="sr">/^https?:/</span><span class="p">)</span>
    <span class="n">body_parts</span> <span class="o">&lt;&lt;</span> <span class="n">href</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>Once we have all the parts, assemble them, get rid of duplicate text and links, and re-insert into the email as a <code class="language-plaintext highlighter-rouge">text/plain</code> multipart block.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">responses</span><span class="p">.</span><span class="nf">insert</span> <span class="mi">0</span><span class="p">,</span> <span class="p">{</span>
  <span class="ss">content_type: </span><span class="s2">"text/plain"</span><span class="p">,</span>
  <span class="ss">body: </span><span class="n">body_parts</span><span class="p">.</span><span class="nf">uniq</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="s2">"</span><span class="se">\n</span><span class="s2">"</span><span class="p">)</span>
<span class="p">}</span>
<span class="n">parts_order</span><span class="p">.</span><span class="nf">insert</span> <span class="mi">0</span><span class="p">,</span> <span class="s2">"text/plain"</span>
</code></pre></div></div>

<p>This has been extracted into the <a href="https://github.com/dblock/actionmailer-text">actionmailer-text</a> gem. Include <code class="language-plaintext highlighter-rouge">ActionMailer::Text</code> in your mailers.</p>
]]></content>
  </entry>
  
</feed>
