<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Continuous Integration | Artsy Engineering]]></title>
  <link href="https://artsy.github.io/blog/categories/continuous-integration/atom.xml" rel="self"/>
  <link href="https://artsy.github.io/"/>
  <updated>2024-08-06T19:48:16+00:00</updated>
  <id>https://artsy.github.io/</id>
  <author>
    <name><![CDATA[]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Splitting up a large test suite]]></title>
    <link href="https://artsy.github.io/blog/2015/09/24/splitting-up-a-large-test-suite/"/>
    <updated>2015-09-24T22:13:00+00:00</updated>
    <id>https://artsy.github.io/blog/2015/09/24/splitting-up-a-large-test-suite</id>
    <content type="html"><![CDATA[<p>A while back, we wrote about <a href="/blog/2012/10/09/how-to-run-rspec-test-suites-in-parallel-with-jenkins-ci-build-flow/">How to Run RSpec Test Suites in Parallel with Jenkins CI Build Flow</a>. A version of that still handles our largest test suite, but over time the initial division of specs became unbalanced. We ended up with some tasks that took twice as long as others. Even worse, in an attempt to rebalance task times, we ended up with awkward file patterns like <code class="language-plaintext highlighter-rouge">'spec/api/**/[a-m]*_spec.rb'</code>.</p>

<p>To keep our parallel spec tasks approximately equal in size and to support arbitrary concurrency, we’ve added a new <code class="language-plaintext highlighter-rouge">spec:sliced</code> task:</p>

<!-- more -->

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">namespace</span> <span class="ss">:spec</span> <span class="k">do</span>
  <span class="n">task</span> <span class="ss">:set_up_spec_files</span> <span class="k">do</span>
    <span class="n">spec_files</span> <span class="o">=</span> <span class="no">Dir</span><span class="p">[</span><span class="s1">'spec/**/*_spec.rb'</span><span class="p">]</span>
    <span class="vi">@spec_file_digests</span> <span class="o">=</span> <span class="no">Hash</span><span class="p">[</span><span class="n">spec_files</span><span class="p">.</span><span class="nf">map</span> <span class="p">{</span> <span class="o">|</span><span class="n">f</span><span class="o">|</span> <span class="p">[</span><span class="n">f</span><span class="p">,</span> <span class="no">Zlib</span><span class="p">.</span><span class="nf">crc32</span><span class="p">(</span><span class="n">f</span><span class="p">)]</span> <span class="p">}]</span>
  <span class="k">end</span>

  <span class="no">RSpec</span><span class="o">::</span><span class="no">Core</span><span class="o">::</span><span class="no">RakeTask</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="ss">:sliced</span><span class="p">,</span> <span class="p">[</span><span class="ss">:index</span><span class="p">,</span> <span class="ss">:concurrency</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="ss">:set_up_spec_files</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">t</span><span class="p">,</span> <span class="n">args</span><span class="o">|</span>
    <span class="n">index</span> <span class="o">=</span> <span class="n">args</span><span class="p">[</span><span class="ss">:index</span><span class="p">].</span><span class="nf">to_i</span>
    <span class="n">concurrency</span> <span class="o">=</span> <span class="n">args</span><span class="p">[</span><span class="ss">:concurrency</span><span class="p">].</span><span class="nf">to_i</span>
    <span class="n">t</span><span class="p">.</span><span class="nf">pattern</span> <span class="o">=</span> <span class="vi">@spec_file_digests</span><span class="p">.</span><span class="nf">select</span> <span class="p">{</span> <span class="o">|</span><span class="n">f</span><span class="p">,</span> <span class="n">d</span><span class="o">|</span> <span class="n">d</span> <span class="o">%</span> <span class="n">concurrency</span> <span class="o">==</span> <span class="n">index</span> <span class="p">}.</span><span class="nf">keys</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>As you can see, the <code class="language-plaintext highlighter-rouge">set_up_spec_files</code> helper task builds a hash of spec file paths and corresponding checksums. When we invoke the <code class="language-plaintext highlighter-rouge">sliced</code> task with <code class="language-plaintext highlighter-rouge">index</code> and <code class="language-plaintext highlighter-rouge">concurrency</code> values (e.g., <code class="language-plaintext highlighter-rouge">0</code> and <code class="language-plaintext highlighter-rouge">5</code>), only the spec files with checksums equal to <code class="language-plaintext highlighter-rouge">0</code> when mod-ed by <code class="language-plaintext highlighter-rouge">5</code> are run. Thus, the Jenkins build flow would look like:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">parallel</span> <span class="o">(</span>
  <span class="o">{</span><span class="n">build</span><span class="o">(</span><span class="s">"master-ci-task"</span><span class="o">,</span> <span class="nl">tasks:</span> <span class="s">"spec:sliced[0,5]"</span><span class="o">)},</span>
  <span class="o">{</span><span class="n">build</span><span class="o">(</span><span class="s">"master-ci-task"</span><span class="o">,</span> <span class="nl">tasks:</span> <span class="s">"spec:sliced[1,5]"</span><span class="o">)},</span>
  <span class="o">{</span><span class="n">build</span><span class="o">(</span><span class="s">"master-ci-task"</span><span class="o">,</span> <span class="nl">tasks:</span> <span class="s">"spec:sliced[2,5]"</span><span class="o">)},</span>
  <span class="o">{</span><span class="n">build</span><span class="o">(</span><span class="s">"master-ci-task"</span><span class="o">,</span> <span class="nl">tasks:</span> <span class="s">"spec:sliced[3,5]"</span><span class="o">)},</span>
  <span class="o">{</span><span class="n">build</span><span class="o">(</span><span class="s">"master-ci-task"</span><span class="o">,</span> <span class="nl">tasks:</span> <span class="s">"spec:sliced[4,5]"</span><span class="o">)}</span>
<span class="o">)</span>
<span class="n">build</span><span class="o">(</span><span class="s">"master-ci-succeeded"</span><span class="o">)</span>
</code></pre></div></div>

<p>Now, spec times <em>might</em> continue to be unbalanced despite files being split up approximately evenly. (For a more thorough approach based on recording spec times, see <a href="https://github.com/ArturT/knapsack">knapsack</a>.) However, this little bit of randomness was a big improvement over our previous approach, and promises to scale in a uniform manner.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Releasecop Tracks Stale Releases]]></title>
    <link href="https://artsy.github.io/blog/2015/09/01/releasecop-tracks-stale-releases/"/>
    <updated>2015-09-01T17:30:00+00:00</updated>
    <id>https://artsy.github.io/blog/2015/09/01/releasecop-tracks-stale-releases</id>
    <content type="html"><![CDATA[<p>Artsy practices a sort of <a href="http://en.wikipedia.org/wiki/Continuous_delivery">continuous delivery</a>. We keep release cycles short and the process of reviewing, testing, and deploying our software as reliable, fast, and automated as possible. (This blog has touched on these practices <a href="http://artsy.github.io/blog/categories/testing/">multiple</a> <a href="http://artsy.github.io/blog/categories/continuous-integration">times</a>.)</p>

<p>Usually, commits that have been reviewed and merged are immediately built and tested. Successfully built versions of the codebase are often automatically deployed to a staging environment. On an automated or frequent-but-manual basis, that version is deployed to a production environment. Thus, commits form a pipeline:</p>

<ul>
  <li>From developers’ working branches</li>
  <li>To the master branch</li>
  <li>Through a hopefully-successful build</li>
  <li>To a staging environment</li>
  <li>To production</li>
</ul>

<p>The number of apps and services we deploy has grown to <em>dozens</em> per team, so sometimes things fall through the cracks. We’ve been using <a href="https://github.com/joeyAghion/releasecop">Releasecop</a> for the last few months to get gentle email reminders when an environment could use a deploy.</p>

<!-- more -->

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>gem install releasecop
releasecop edit
</code></pre></div></div>

<p>This opens a <em>manifest</em> file where you can describe the sequence of git remotes and branches that make up your own release pipeline. For example:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>{
  "projects": {
    "charge": [
      { "name": "master", "git": "git@github.com:artsy/charge.git" },
      { "name": "staging", "git": "git@heroku.com:charge-staging.git" },
      { "name": "production", "git": "git@heroku.com:charge-production.git" }
    ],
    "gravity": [
      { "name": "master", "git": "git@github.com:artsy/gravity.git" },
      { "name": "master-succeeded", "git": "git@github.com:artsy/gravity.git", "branch": "master-succeeded" },
      { "name": "staging", "git": "git@github.com:artsy/gravity.git", "branch": "staging" },
      { "name": "production", "git": "git@github.com:artsy/gravity.git", "branch": "production" }
    ]
  }
}
</code></pre></div></div>

<p>The <code class="language-plaintext highlighter-rouge">charge</code> app is a typical deployment to Heroku. Work progresses from the <code class="language-plaintext highlighter-rouge">master</code> branch to a <code class="language-plaintext highlighter-rouge">charge-staging</code> app to a <code class="language-plaintext highlighter-rouge">charge-production</code> app. The <code class="language-plaintext highlighter-rouge">gravity</code> app is a more complicated, non-Heroku deployment. It updates git branches to reflect what has been merged (<code class="language-plaintext highlighter-rouge">master</code>), tested (<code class="language-plaintext highlighter-rouge">master-succeeded</code>), deployed to staging, and deployed to production.</p>

<p>Run the <code class="language-plaintext highlighter-rouge">releasecop check [app]</code> command to report the status of your apps’ releases:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ releasecop check --all
charge...
  staging is up-to-date with master
  production is up-to-date with staging
gravity...
  master-succeeded is up-to-date with master
  staging is up-to-date with master-succeeded
  production is behind staging by:
    06ca969 2015-09-04 [config] Replace Apple Push Notification certificates that expire today. (Eloy Durán)
    171121f 2015-09-03 Admin-only API for cancelling a bid (Matthew Zikherman)
    4c5feea 2015-09-02 install mongodb client in Docker so that import rake tasks can run (Barry Hoggard)
    95347d1 2015-08-31 Update to delayed_job cookbook that works with Chef 11.10 (Joey Aghion)
2 project(s) checked. 1 environment(s) out-of-date.
</code></pre></div></div>

<p>A nightly <a href="https://jenkins-ci.org/">Jenkins</a> job emails us the results, but a cron job could work equally well.</p>

<p><a href="https://github.com/joeyAghion/releasecop">Releasecop</a> reminds us to deploy ready commits and close the loop on in-progress work. We hope you find it useful. (Pull requests are welcome!)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using CocoaPods Caching with Travis CI]]></title>
    <link href="https://artsy.github.io/blog/2014/08/08/CocoaPods-Caching/"/>
    <updated>2014-08-08T11:46:00+00:00</updated>
    <id>https://artsy.github.io/blog/2014/08/08/CocoaPods-Caching</id>
    <content type="html"><![CDATA[<p>As <a href="http://artsy.github.io/blog/2014/08/07/taking-a-snapshot-with-second-curtain/">Ash said earlier</a> we like using Continuous Integration. Today I spent a large amount of time migrating us to use the new CocoaPods caching system in Travis CI. To make up for my lost time I’m passing on what I’ve learned and also showing how we do CI at Artsy with Objective-C apps. If you’re interested in how we do it in Swift, you can just check <a href="https://github.com/artsy/eidolon">Eidolon</a>.</p>

<!-- more -->

<p>First and foremost, this only works if you are paying for Travis CI.</p>

<p>Travis CI recently merged in support for <a href="http://docs.travis-ci.com/user/caching/">Caching of CocoaPods</a> - this is great! By using this, we’ve reduced our build times from an average of about 10 minutes, to about 7 minutes. It works by using your <code class="language-plaintext highlighter-rouge">Podfile.lock</code> as a key to cache your <code class="language-plaintext highlighter-rouge">Pods</code> directory, if the lock hasn’t changed then there’s no need to update the Cache and so <code class="language-plaintext highlighter-rouge">pod install</code> is not called on your project. This caused me an issue as the <code class="language-plaintext highlighter-rouge">[Project].xcworkspace</code> file that CocoaPods generates was not in source control, and the app wouldn’t build. Useful note, if you’re using <a href="http://guides.cocoapods.org/syntax/podfile.html#pod">development pods</a> in your build you probably shouldn’t use this as your Pods directory can get out of sync with the cached version.</p>

<p>We use a <a href="https://github.com/artsy/eidolon/blob/master/Makefile">Makefile</a> to separate the tasks required to build, test and deploy an app. The general structure of our Makefile is:</p>

<table>
  <thead>
    <tr>
      <th>Action</th>
      <th>Reason</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Constants</td>
      <td>A collection of constants that get resued by different make tasks.</td>
    </tr>
    <tr>
      <td>CI Tasks</td>
      <td>Separate commands necessary for running Xcode projects from the terminal.</td>
    </tr>
    <tr>
      <td>Actions</td>
      <td>Commands that manipulate your project state, or maintainance commands.</td>
    </tr>
    <tr>
      <td>Deployment</td>
      <td>Commands to get your app ready for the App Store, or Hockey.</td>
    </tr>
  </tbody>
</table>

<p>If you don’t know the syntax for Make, essentially if it’s on the same line you’re either setting constants or calling other make commands. If it’s on a separate line then you are running a shell command.</p>

<p>This is the <a href="http://orta.io/#folio-header-unit">Artsy Folio</a> Makefile in full:</p>

<div class="language-make highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Constants
</span>
<span class="nv">WORKSPACE</span> <span class="o">=</span> Artsy Folio.xcworkspace
<span class="nv">XCPROJECT</span> <span class="o">=</span> Artsy<span class="se">\ </span>Folio.xcodeproj
<span class="nv">SCHEME</span> <span class="o">=</span> ArtsyFolio
<span class="nv">CONFIGURATION</span> <span class="o">=</span> Beta
<span class="nv">APP_PLIST</span> <span class="o">=</span> Info.plist
<span class="nv">PLIST_BUDDY</span> <span class="o">=</span> /usr/libexec/PlistBuddy
<span class="nv">TARGETED_DEVICE_FAMILY</span> <span class="o">=</span> <span class="se">\"</span>1,2<span class="se">\"</span>

<span class="nv">BUNDLE_VERSION</span> <span class="o">=</span> <span class="nf">$(</span><span class="nb">shell</span> <span class="nv">$(PLIST_BUDDY)</span> <span class="nt">-c</span> <span class="s2">"Print CFBundleVersion"</span> <span class="nv">$(APP_PLIST)</span><span class="nf">)</span>
<span class="nv">GIT_COMMIT</span> <span class="o">=</span> <span class="nf">$(</span><span class="nb">shell</span> git log <span class="nt">-n1</span> <span class="nt">--format</span><span class="o">=</span><span class="s1">'%h'</span><span class="nf">)</span>
<span class="nv">ALPHA_VERSION</span> <span class="o">=</span> <span class="nv">$(BUNDLE_VERSION)</span>-<span class="nv">$(BUILD_NUMBER)</span>-<span class="nv">$(GIT_COMMIT)</span>

<span class="nv">GIT_COMMIT_REV</span> <span class="o">=</span> <span class="nf">$(</span><span class="nb">shell</span> git log <span class="nt">-n1</span> <span class="nt">--format</span><span class="o">=</span><span class="s1">'%h'</span><span class="nf">)</span>
<span class="nv">GIT_COMMIT_SHA</span> <span class="o">=</span> <span class="nf">$(</span><span class="nb">shell</span> git log <span class="nt">-n1</span> <span class="nt">--format</span><span class="o">=</span><span class="s1">'%H'</span><span class="nf">)</span>
<span class="nv">GIT_REMOTE_ORIGIN_URL</span> <span class="o">=</span> <span class="nf">$(</span><span class="nb">shell</span> git config <span class="nt">--get</span> remote.origin.url<span class="nf">)</span>

<span class="nv">DATE_MONTH</span> <span class="o">=</span> <span class="nf">$(</span><span class="nb">shell</span> <span class="nb">date</span> <span class="s2">"+%e %h"</span><span class="nf">)</span>
<span class="nv">DATE_VERSION</span> <span class="o">=</span> <span class="nf">$(</span><span class="nb">shell</span> <span class="nb">date</span> <span class="s2">"+%Y.%m.%d"</span><span class="nf">)</span>

<span class="nv">CHANGELOG</span> <span class="o">=</span> CHANGELOG.md
<span class="nv">CHANGELOG_SHORT</span> <span class="o">=</span> CHANGELOG_SHORT.md

<span class="nv">IPA</span> <span class="o">=</span> ArtsyFolio.ipa
<span class="nv">DSYM</span> <span class="o">=</span> ArtsyFolio.app.dSYM.zip

<span class="c"># Phony tasks are tasks that could potentially have a file with the same name in the current folder
</span><span class="nl">.PHONY</span><span class="o">:</span> <span class="nf">build clean test ci</span>

<span class="c"># CI Tasks
</span>
<span class="nl">ci</span><span class="o">:</span> <span class="nf">CONFIGURATION = Debug</span>
<span class="nl">ci</span><span class="o">:</span> <span class="nf">pods build</span>

<span class="nl">build</span><span class="o">:</span>
	<span class="nb">set</span> <span class="nt">-o</span> pipefail <span class="o">&amp;&amp;</span> xcodebuild <span class="nt">-workspace</span> <span class="s2">"</span><span class="nv">$(WORKSPACE)</span><span class="s2">"</span> <span class="nt">-scheme</span> <span class="s2">"</span><span class="nv">$(SCHEME)</span><span class="s2">"</span> <span class="nt">-sdk</span> iphonesimulator <span class="nt">-destination</span> <span class="s1">'name=iPad Retina'</span> build | xcpretty <span class="nt">-c</span>

<span class="nl">clean</span><span class="o">:</span>
	xctool <span class="nt">-workspace</span> <span class="s2">"</span><span class="nv">$(WORKSPACE)</span><span class="s2">"</span> <span class="nt">-scheme</span> <span class="s2">"</span><span class="nv">$(SCHEME)</span><span class="s2">"</span> <span class="nt">-configuration</span> <span class="s2">"</span><span class="nv">$(CONFIGURATION)</span><span class="s2">"</span> clean

<span class="nl">test</span><span class="o">:</span>
	<span class="nb">set</span> <span class="nt">-o</span> pipefail <span class="o">&amp;&amp;</span> xcodebuild <span class="nt">-workspace</span> <span class="s2">"</span><span class="nv">$(WORKSPACE)</span><span class="s2">"</span> <span class="nt">-scheme</span> <span class="s2">"</span><span class="nv">$(SCHEME)</span><span class="s2">"</span> <span class="nt">-configuration</span> Debug <span class="nb">test</span> <span class="nt">-sdk</span> iphonesimulator <span class="nt">-destination</span> <span class="s1">'name=iPad Retina'</span> | second_curtain | xcpretty <span class="nt">-c</span> <span class="nt">--test</span>

<span class="nl">lint</span><span class="o">:</span>
	bundle <span class="nb">exec </span>fui <span class="nt">--path</span> Classes find

	<span class="err">bundle</span> <span class="err">exec</span> <span class="err">obcd</span> <span class="err">--path</span> <span class="err">Classes</span> <span class="err">find</span> <span class="err">HeaderStyle</span>
	<span class="err">bundle</span> <span class="err">exec</span> <span class="err">obcd</span> <span class="err">--path</span> <span class="s2">"ArtsyFolio Tests"</span> <span class="err">find</span> <span class="err">HeaderStyle</span>

<span class="c"># Actions
</span>
<span class="nl">ipa</span><span class="o">:</span>
	<span class="nv">$(PLIST_BUDDY)</span> <span class="nt">-c</span> <span class="s2">"Set CFBundleDisplayName </span><span class="nv">$(BUNDLE_NAME)</span><span class="s2">"</span> <span class="nv">$(APP_PLIST)</span>
	<span class="nv">$(PLIST_BUDDY)</span> <span class="nt">-c</span> <span class="s2">"Set CFBundleVersion </span><span class="nv">$(DATE_VERSION)</span><span class="s2">"</span> <span class="nv">$(APP_PLIST)</span>
	ipa build <span class="nt">--scheme</span> <span class="nv">$(SCHEME)</span> <span class="nt">--configuration</span> <span class="nv">$(CONFIGURATION)</span> <span class="nt">-t</span>

<span class="nl">alpha_version</span><span class="o">:</span>
	<span class="nv">$(PLIST_BUDDY)</span> <span class="nt">-c</span> <span class="s2">"Set CFBundleVersion </span><span class="nv">$(ALPHA_VERSION)</span><span class="s2">"</span> <span class="nv">$(APP_PLIST)</span>

<span class="nl">change_version_to_date</span><span class="o">:</span>
	<span class="nv">$(PLIST_BUDDY)</span> <span class="nt">-c</span> <span class="s2">"Set CFBundleVersion </span><span class="nv">$(DATE_VERSION)</span><span class="s2">"</span> <span class="nv">$(APP_PLIST)</span>

<span class="nl">set_git_properties</span><span class="o">:</span>
	<span class="nv">$(PLIST_BUDDY)</span> <span class="nt">-c</span> <span class="s2">"Set GITCommitRev </span><span class="nv">$(GIT_COMMIT_REV)</span><span class="s2">"</span> <span class="nv">$(APP_PLIST)</span>
	<span class="nv">$(PLIST_BUDDY)</span> <span class="nt">-c</span> <span class="s2">"Set GITCommitSha </span><span class="nv">$(GIT_COMMIT_SHA)</span><span class="s2">"</span> <span class="nv">$(APP_PLIST)</span>
	<span class="nv">$(PLIST_BUDDY)</span> <span class="nt">-c</span> <span class="s2">"Set GITRemoteOriginURL </span><span class="nv">$(GIT_REMOTE_ORIGIN_URL)</span><span class="s2">"</span> <span class="nv">$(APP_PLIST)</span>

<span class="nl">pods</span><span class="o">:</span> <span class="nf">remove_debug_pods</span>
<span class="nl">pods</span><span class="o">:</span>
	<span class="nb">rm</span> <span class="nt">-rf</span> Pods
	bundle <span class="nb">install</span>
	bundle <span class="nb">exec </span>pod <span class="nb">install</span>

<span class="nl">remove_debug_pods</span><span class="o">:</span>
	perl <span class="nt">-pi</span> <span class="nt">-w</span> <span class="nt">-e</span> <span class="s2">"s{pod 'Reveal-iOS-SDK'}{}g"</span> Podfile

<span class="nl">update_bundle_version</span><span class="o">:</span>
	<span class="p">@</span><span class="nb">printf</span> <span class="s1">'What is the new human-readable release version? '</span><span class="p">;</span> <span class="se">\</span>
		<span class="nb">read </span>HUMAN_VERSION<span class="p">;</span> <span class="se">\</span>
		<span class="nv">$(PLIST_BUDDY)</span> <span class="nt">-c</span> <span class="s2">"Set CFBundleShortVersionString </span><span class="nv">$$</span><span class="s2">HUMAN_VERSION"</span> <span class="nv">$(APP_PLIST)</span>

<span class="nl">mogenerate</span><span class="o">:</span>
	<span class="p">@</span><span class="nb">printf</span> <span class="s1">'What is the new Core Data version? '</span><span class="p">;</span> <span class="se">\</span>
		<span class="nb">read </span>CORE_DATA_VERSION<span class="p">;</span> <span class="se">\</span>
		mogenerator <span class="nt">-m</span> <span class="s2">"Resources/CoreData/ArtsyPartner.xcdatamodeld/ArtsyFolio v</span><span class="nv">$$</span><span class="s2">CORE_DATA_VERSION.xcdatamodel/"</span> <span class="nt">--base-class</span> ARManagedObject <span class="nt">--template-path</span> config/mogenerator/artsy <span class="nt">--machine-dir</span> Classes/Models/Generated/ <span class="nt">--human-dir</span> /tmp/ <span class="nt">--template-var</span> <span class="nv">arc</span><span class="o">=</span><span class="nb">true</span>

<span class="c"># Deployment
</span>
<span class="nl">deploy</span><span class="o">:</span> <span class="nf">ipa distribute</span>

<span class="nl">alpha</span><span class="o">:</span> <span class="nf">BUNDLE_NAME = 'Folio α'</span>
<span class="nl">alpha</span><span class="o">:</span> <span class="nf">NOTIFY = 0</span>
<span class="nl">alpha</span><span class="o">:</span> <span class="nf">alpha_version deploy</span>

<span class="nl">appstore</span><span class="o">:</span> <span class="nf">BUNDLE_NAME = 'Artsy Folio'</span>
<span class="nl">appstore</span><span class="o">:</span> <span class="nf">TARGETED_DEVICE_FAMILY = 2</span>
<span class="nl">appstore</span><span class="o">:</span> <span class="nf">remove_debug_pods update_bundle_version set_git_properties change_version_to_date</span>

<span class="nl">next</span><span class="o">:</span> <span class="nf">TARGETED_DEVICE_FAMILY = </span>\"<span class="nf">1</span><span class="p">,</span><span class="nf">2</span>\"
<span class="nl">next</span><span class="o">:</span> <span class="nf">update_bundle_version set_git_properties change_version_to_date</span>

<span class="nl">distribute</span><span class="o">:</span>
  <span class="err">cat</span> <span class="err">$(CHANGELOG)</span> <span class="err">|</span> <span class="err">head</span> <span class="err">-n</span> <span class="err">50</span> <span class="err">|</span> <span class="err">awk</span> <span class="s1">'{ print } END { print "..." }'</span> <span class="err">&gt;</span> <span class="err">$(CHANGELOG_SHORT)</span>
  <span class="err">curl</span> <span class="err">\</span>
   <span class="err">-F</span> <span class="nv">status</span><span class="o">=</span>2 <span class="se">\</span>
   <span class="nt">-F</span> <span class="nv">notify</span><span class="o">=</span><span class="nv">$(NOTIFY)</span> <span class="se">\</span>
   <span class="nt">-F</span> <span class="s2">"notes=&lt;</span><span class="nv">$(CHANGELOG_SHORT)</span><span class="s2">"</span> <span class="se">\</span>
   <span class="nt">-F</span> <span class="nv">notes_type</span><span class="o">=</span>1 <span class="se">\</span>
   <span class="nt">-F</span> <span class="nv">ipa</span><span class="o">=</span>@<span class="nv">$(IPA)</span> <span class="se">\</span>
   <span class="nt">-F</span> <span class="nv">dsym</span><span class="o">=</span>@<span class="nv">$(DSYM)</span> <span class="se">\</span>
   <span class="nt">-H</span> <span class="s1">'X-HockeyAppToken: </span><span class="nv">$(HOCKEYAPP_TOKEN)</span><span class="s1">'</span> <span class="se">\</span>
   https://rink.hockeyapp.net/api/2/apps/upload <span class="se">\</span>
   | <span class="nb">grep</span> <span class="nt">-v</span> <span class="s2">"errors"</span>

</code></pre></div></div>

<p>That gives you a sense of the commands that you can run from the terminal in our projects, next we need to look at the <code class="language-plaintext highlighter-rouge">.travis.yml</code> file.</p>

<div class="language-make highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nl">language</span><span class="o">:</span> <span class="nf">objective-c</span>
<span class="nl">cache</span><span class="o">:</span>
  <span class="err">-</span> <span class="err">bundler</span>
  <span class="err">-</span> <span class="err">cocoapods</span>

<span class="nl">env</span><span class="o">:</span>
  <span class="err">-</span> <span class="nv">UPLOAD_IOS_SNAPSHOT_BUCKET_NAME</span><span class="o">=</span>eigen-ci UPLOAD_IOS_SNAPSHOT_BUCKET_PR...

<span class="nl">before_install</span><span class="o">:</span>
  <span class="nl">- 'echo ''gem</span><span class="o">:</span> <span class="nf">--no-ri --no-rdoc'' &gt; ~/.gemrc'</span>
  <span class="err">-</span> <span class="err">cp</span> <span class="err">.netrc</span> <span class="err">~</span>
  <span class="err">-</span> <span class="err">chmod</span> <span class="err">600</span> <span class="err">.netrc</span>
  <span class="nl">- pod repo add artsy https</span><span class="o">:</span><span class="nf">//github.com/artsy/Specs.git</span>

<span class="nl">before_script</span><span class="o">:</span>
  <span class="err">-</span> <span class="err">gem</span> <span class="err">install</span> <span class="err">second_curtain</span>
  <span class="err">-</span> <span class="err">make</span> <span class="err">ci</span>

<span class="nl">script</span><span class="o">:</span>
  <span class="err">-</span> <span class="err">make</span> <span class="err">test</span>
  <span class="err">-</span> <span class="err">make</span> <span class="err">lint</span>

</code></pre></div></div>

<p>This is nice and simple. It was built to use multiple travis build steps. This makes the CI output a lot more readable as an end user. Travis will by default collapse the shell output for different build stages leaving only the <code class="language-plaintext highlighter-rouge">script</code> stage defaulting to being exposed. Here is an example of what you see on a failing test:</p>

<center>
<img src="/images/2014-08-08-CocoaPods-Caching/failing_travis_screenshot.png" alt="Travis CI Failure" />
</center>

<p>We use a gem with a binary in <a href="https://github.com/AshFurrow/second_curtain/">second_curtain</a>, and this came with bundler caching issues in Travis. The solution was to ignore bundler and run <code class="language-plaintext highlighter-rouge">gem install second_curtain</code> each time. To increase the speed we also ensured that documentation is not being generated. If you are interested in what’s going on with the <code class="language-plaintext highlighter-rouge">.netrc</code>, read my blog post on <a href="http://artsy.github.io/blog/2014/06/20/artsys-first-closed-source-pod/">Artsy’s first Closed Source Pod</a>.</p>

<p>We will continue pushing the state of the art in iOS deployment, in building our own tools and using everything available to increase developer happiness. If you’re into this we’re always looking to hire people with a good open source track record or street smarts. Here’s <a href="https://artsy.net/job/mobile-engineer">the jobs page</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Taking a Snapshot with Second Curtain]]></title>
    <link href="https://artsy.github.io/blog/2014/08/07/taking-a-snapshot-with-second-curtain/"/>
    <updated>2014-08-07T11:46:00+00:00</updated>
    <id>https://artsy.github.io/blog/2014/08/07/taking-a-snapshot-with-second-curtain</id>
    <content type="html"><![CDATA[<p>At Artsy, we try hard to <a href="https://speakerdeck.com/orta/getting-eigen-out?slide=35">test</a>
our iOS applications to ensure that we avoid regressions and have a clearly
defined spec of how our apps should look and behave. One of the core pieces of
our testing setup is <a href="https://github.com/facebook/ios-snapshot-test-case">FBSnapshotTestCase</a>,
a library written by Facebook to compare views at runtime with images of those
views that are known to be correct. If the images differ, the test fails. We
also use <a href="https://travis-ci.org">Travis</a> for continuous integration.</p>

<p>Lately, we’ve been noticing a friction between the developers on the iOS team
and the tools we’re using to test our apps: while Travis allows us to easily
access the logs of test runs, it can only indicate that a snapshot test failed,
not why it failed. That’s because the images that are compared are locked on
Travis’ machine – we cannot access those images, so we can’t see the
differences. This is <em>really</em> promblematic when the tests pass locally but fail
only on Travis.</p>

<!-- more -->

<p>A few weeks ago, <a href="http://twitter.com/orta">Orta</a> and I were discussing this
problem and we came up with a potential solution. Since the images were stored
on disk on Travis’ machine, why not just upload them somewhere we <em>can</em> see
them? Like an S3 bucket. We could even generate a basic HTML page showing you
the different test failures.</p>

<p>Time passed and, later on, I had tests passing locally but failing on Travis.
I saw an opportunity to build something new. I’m not a proficient Ruby developer,
but I enjoy learning new things, so I decided to create a Ruby gem that could
fit within our existing testing pipeline. A lot of the structure for the code
came from an existing gem we already use with Travis, <a href="https://github.com/supermarin/xcpretty">xcpretty</a>.
With an example of how gems that support iOS testing are written, I was on my
way to creating my own.</p>

<p>At first, things were very difficult. While I had contributed small patches to
existing Ruby projects before, I had never created a brand new one from scratch.
The existing <a href="http://guides.rubygems.org/make-your-own-gem/">guides</a> were very
helpful, and I found help from the CocoaPods developers when I had questions
about things like the arcane semantics of Ruby’s <code class="language-plaintext highlighter-rouge">require</code> syntax.</p>

<p>Eventually, I had a working proof-of-concept. Everything seemed ready to go, and
I prepared to incorporate my new tool, which I called <a href="https://github.com/AshFurrow/second_curtain">Second Curtain</a>,
into my pull request on the Artsy repo. But there was a problem.</p>

<p>Second Curtain relies on environment variables to get access to the S3 bucket
where it stores the images. I planned on using Travis’ system to <a href="http://docs.travis-ci.com/user/encryption-keys/">encrypt</a>
those credentials. It turns out, for very good reasons, encrypted environment
variables are not available on pull requests created on forks of repositories.
This is a problem because of the way that <a href="http://artsy.github.io/blog/2012/01/29/how-art-dot-sy-uses-github-to-build-art-dot-sy/">Artsy uses GitHub</a>.
While it’s not a problem for a closed-source repository to have (restrictive)
access to an S3 bucket, it would be irresponsible to expose S3 credentials for
an open-source project. I’m <a href="https://github.com/AshFurrow/second_curtain/issues/5">working</a>
on a solution.</p>

<p>Orta helped with the design aspect of the tool; while uploading the images was
sufficient, we could make the process of seeing the differences between the two
images even easier. He created a <a href="https://eigen-ci.s3.amazonaws.com/snapshots/2014-08-04--15-47/index.html">HTML page</a>
that would allow developers to see the before-and-after versions by moving their
mouse cursor over the different images.</p>

<p><img src="http://static.ashfurrow.com/github/second_curtain.png" alt="Image Diff" /></p>

<p>In the end, I got Second Curtain to work with Artsy’s iOS repository and I
discovered the discrepency between the two images: due to a timezone difference
between my computer and Travis’, a date was being formatted differently. Not a
difficult thing to fix, but not something I would have ever been able to
discover had I not been able to see the images side-by-side.</p>

<p>So after all that, one line of Objective-C was changed and the tests passed – my
pull request was merged. I learnt a lot about how Ruby developers structure
their code and what tools they use to write software. While I’m happy to return
to iOS apps for a while, it was a great experience and I’m hoping to bring some
of the ideas I discovered writing Ruby back to Objective-C.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Continuous integration for service-oriented architectures]]></title>
    <link href="https://artsy.github.io/blog/2014/05/12/continuous-integration-for-service-oriented-architectures/"/>
    <updated>2014-05-12T10:50:00+00:00</updated>
    <id>https://artsy.github.io/blog/2014/05/12/continuous-integration-for-service-oriented-architectures</id>
    <content type="html"><![CDATA[<p>Whatever you have against monolithic architectures, at least they’re easy to test. And when those tests succeed, you can be reasonably confident the live app will work the same way.</p>

<p>Artsy began as one such monolithic app, but we’ve been refactoring into an ecosystem of related APIs and sites. Today, when you search for <a href="https://artsy.net/gene/cultural-commentary">“cultural commentary”</a> or visit <a href="https://artsy.net/artist/robert-longo">Robert Longo</a> on <a href="https://artsy.net">artsy.net</a>, the page is rendered by a web app, sources data from an API, retrieves recommendations from a separate service, tracks trends in another, and records analytics in yet another.</p>

<p>This was a boost for developer productivity and scaling, but eviscerated the value of our tests. We repeatedly encountered bugs that were failings of <em>the interaction between codebases</em> rather than failings of individual ones. Test libraries and tools typically concern themselves with one isolated app. When you have services that consume services that consume services, those isolated tests (with their stubs of everything else) don’t necessarily reflect production’s reality.</p>

<p>So how should we develop our small, focused apps (or <a href="http://en.wikipedia.org/wiki/Service-oriented_architecture">service-oriented architecture</a>, or <a href="http://martinfowler.com/articles/microservices.html">microservices</a>…) with confidence? We set out to build a dedicated acceptance test suite that would run tests across multiple services, configuring and integrating them in a way that closely matches the production environment.</p>

<!-- more -->

<h2 id="the-code">The code</h2>

<p>We’ll take the simplest example possible of 2 related applications: a trivial Ruby API serving a Node.js-based web app. (You can also go directly to <a href="https://github.com/joeyAghion/multiapp_example-tests">the source</a>.)</p>

<p><a href="http://david.heinemeierhansson.com/2014/tdd-is-dead-long-live-testing.html">Recent</a> <a href="http://blog.8thlight.com/uncle-bob/2014/04/25/MonogamousTDD.html">debates</a> <a href="https://news.ycombinator.com/item?id=7659251">aside</a>, I like to start with a test:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">feature</span> <span class="s2">"home"</span><span class="p">,</span> <span class="ss">js: </span><span class="kp">true</span> <span class="k">do</span>

  <span class="n">scenario</span> <span class="s2">"welcomes visitor"</span> <span class="k">do</span>
    <span class="n">visit</span> <span class="s2">"/"</span>
    <span class="n">expect</span><span class="p">(</span><span class="n">page</span><span class="p">).</span><span class="nf">to</span> <span class="n">have_content</span><span class="p">(</span><span class="s2">"Browse products"</span><span class="p">)</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>We’re using the popular [and familiar] <a href="https://github.com/jnicklas/capybara">Capybara</a> with <a href="https://relishapp.com/rspec">RSpec</a> and <a href="http://docs.seleniumhq.org/">Selenium</a>. Naturally, our test fails right away:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>bundle <span class="nb">exec </span>rspec
<span class="c"># ...</span>
     Failure/Error: visit <span class="s2">"/"</span>
     Selenium::WebDriver::Error::UnknownError:
       Target URL / is not well-formed.
</code></pre></div></div>

<p>There are a few steps to getting our projects installed and running as part of the test suite. First, we’ll add git submodules in the <code class="language-plaintext highlighter-rouge">/api</code> and <code class="language-plaintext highlighter-rouge">/web</code> subdirectories that <a href="http://stackoverflow.com/questions/9189575/git-submodule-tracking-latest">track the master branch</a> of each project.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git submodule add <span class="nt">-b</span> master git@github.com:joeyAghion/multiapp_example-api.git api
git submodule add <span class="nt">-b</span> master git@github.com:joeyAghion/multiapp_example-web.git web
</code></pre></div></div>

<p>Next, create Rake tasks to install prerequisites for each project.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Rakefile</span>
<span class="nb">require</span> <span class="s1">'childprocess'</span>
<span class="nb">require</span> <span class="s1">'rspec/core/rake_task'</span>

<span class="no">RSpec</span><span class="o">::</span><span class="no">Core</span><span class="o">::</span><span class="no">RakeTask</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="ss">:spec</span><span class="p">)</span>

<span class="n">task</span> <span class="ss">:ci</span> <span class="o">=&gt;</span> <span class="p">[</span><span class="s1">'checkout'</span><span class="p">,</span> <span class="s1">'install'</span><span class="p">,</span> <span class="s1">'spec'</span><span class="p">]</span>

<span class="n">task</span> <span class="ss">:checkout</span> <span class="k">do</span>
  <span class="n">sh</span> <span class="sx">%{git submodule update --remote --init}</span> <span class="k">do</span> <span class="o">|</span><span class="n">ok</span><span class="p">,</span> <span class="n">res</span><span class="o">|</span>
    <span class="k">raise</span> <span class="s2">"Submodule update failed with status </span><span class="si">#{</span><span class="n">res</span><span class="p">.</span><span class="nf">exitstatus</span><span class="si">}</span><span class="s2">"</span> <span class="k">unless</span> <span class="n">ok</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="n">task</span> <span class="ss">:install</span> <span class="o">=&gt;</span> <span class="p">[</span><span class="s1">'api:install'</span><span class="p">,</span> <span class="s1">'web:install'</span><span class="p">]</span>

<span class="n">namespace</span> <span class="ss">:api</span> <span class="k">do</span>
  <span class="n">task</span> <span class="ss">:install</span> <span class="k">do</span>
    <span class="no">Bundler</span><span class="p">.</span><span class="nf">with_clean_env</span> <span class="k">do</span>
      <span class="nb">proc</span> <span class="o">=</span> <span class="no">ChildProcess</span><span class="p">.</span><span class="nf">build</span><span class="p">(</span><span class="s1">'bundle'</span><span class="p">,</span> <span class="s1">'install'</span><span class="p">)</span>
      <span class="nb">proc</span><span class="p">.</span><span class="nf">io</span><span class="p">.</span><span class="nf">inherit!</span>
      <span class="nb">proc</span><span class="p">.</span><span class="nf">cwd</span> <span class="o">=</span> <span class="s1">'./api'</span>
      <span class="nb">proc</span><span class="p">.</span><span class="nf">start</span>
      <span class="nb">proc</span><span class="p">.</span><span class="nf">wait</span>
      <span class="k">raise</span> <span class="s2">"bundle install exited with status </span><span class="si">#{</span><span class="nb">proc</span><span class="p">.</span><span class="nf">exit_code</span><span class="si">}</span><span class="s2">"</span> <span class="k">unless</span> <span class="nb">proc</span><span class="p">.</span><span class="nf">exit_code</span> <span class="o">==</span> <span class="mi">0</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="n">namespace</span> <span class="ss">:web</span> <span class="k">do</span>
  <span class="n">task</span> <span class="ss">:install</span> <span class="k">do</span>
    <span class="nb">proc</span> <span class="o">=</span> <span class="no">ChildProcess</span><span class="p">.</span><span class="nf">build</span><span class="p">(</span><span class="s1">'npm'</span><span class="p">,</span> <span class="s1">'install'</span><span class="p">)</span>
    <span class="nb">proc</span><span class="p">.</span><span class="nf">io</span><span class="p">.</span><span class="nf">inherit!</span>
    <span class="nb">proc</span><span class="p">.</span><span class="nf">cwd</span> <span class="o">=</span> <span class="s1">'./web'</span>
    <span class="nb">proc</span><span class="p">.</span><span class="nf">start</span>
    <span class="nb">proc</span><span class="p">.</span><span class="nf">wait</span>
    <span class="k">raise</span> <span class="s2">"npm install existed with status </span><span class="si">#{</span><span class="nb">proc</span><span class="p">.</span><span class="nf">exit_code</span><span class="si">}</span><span class="s2">"</span> <span class="k">unless</span> <span class="nb">proc</span><span class="p">.</span><span class="nf">exit_code</span> <span class="o">==</span> <span class="mi">0</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>The new <code class="language-plaintext highlighter-rouge">checkout</code> and <code class="language-plaintext highlighter-rouge">install</code> tasks make sure we have the latest code and all prerequisites installed. Note how we use <code class="language-plaintext highlighter-rouge">Bundler.with_clean_env</code> to isolate the API (which has its own Gemfile and bundler environment) from the test suite.</p>

<p>Now that the API and web apps are set up, we’ll use RSpec’s <code class="language-plaintext highlighter-rouge">before(:suite)</code> and <code class="language-plaintext highlighter-rouge">after(:suite)</code> hooks to start and stop them around each test run.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># spec/spec_helper.rb</span>
<span class="nb">require</span> <span class="s1">'capybara/rspec'</span>
<span class="nb">require</span> <span class="s1">'childprocess'</span>

<span class="no">API_PORT</span> <span class="o">=</span> <span class="mi">7000</span>
<span class="no">WEB_PORT</span> <span class="o">=</span> <span class="mi">7001</span>

<span class="no">Capybara</span><span class="p">.</span><span class="nf">configure</span> <span class="k">do</span> <span class="o">|</span><span class="n">config</span><span class="o">|</span>
  <span class="n">config</span><span class="p">.</span><span class="nf">current_driver</span> <span class="o">=</span> <span class="ss">:selenium</span>
  <span class="n">config</span><span class="p">.</span><span class="nf">run_server</span> <span class="o">=</span> <span class="kp">false</span>
  <span class="n">config</span><span class="p">.</span><span class="nf">app_host</span> <span class="o">=</span> <span class="s2">"http://localhost:</span><span class="si">#{</span><span class="no">WEB_PORT</span><span class="si">}</span><span class="s2">"</span>
<span class="k">end</span>

<span class="no">RSpec</span><span class="p">.</span><span class="nf">configure</span> <span class="k">do</span> <span class="o">|</span><span class="n">config</span><span class="o">|</span>
  <span class="c1"># ...</span>
  <span class="n">config</span><span class="p">.</span><span class="nf">before</span><span class="p">(</span><span class="ss">:suite</span><span class="p">)</span> <span class="k">do</span>
    <span class="n">start_api</span>
    <span class="n">start_web</span>
  <span class="k">end</span>

  <span class="n">config</span><span class="p">.</span><span class="nf">after</span><span class="p">(</span><span class="ss">:suite</span><span class="p">)</span> <span class="k">do</span>
    <span class="n">stop_api</span>
    <span class="n">stop_web</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="k">def</span> <span class="nf">start_api</span>
  <span class="vg">$stderr</span><span class="p">.</span><span class="nf">puts</span> <span class="s2">"Starting API..."</span>
  <span class="no">Bundler</span><span class="p">.</span><span class="nf">with_clean_env</span> <span class="k">do</span>
    <span class="vg">$api</span> <span class="o">=</span> <span class="no">ChildProcess</span><span class="p">.</span><span class="nf">build</span><span class="p">(</span><span class="s1">'bundle'</span><span class="p">,</span> <span class="s1">'exec'</span><span class="p">,</span> <span class="s1">'ruby'</span><span class="p">,</span> <span class="s1">'app.rb'</span><span class="p">)</span>
    <span class="vg">$api</span><span class="p">.</span><span class="nf">cwd</span> <span class="o">=</span> <span class="s1">'./api'</span>
    <span class="vg">$api</span><span class="p">.</span><span class="nf">io</span><span class="p">.</span><span class="nf">inherit!</span>
    <span class="vg">$api</span><span class="p">.</span><span class="nf">environment</span><span class="p">[</span><span class="s1">'PORT'</span><span class="p">]</span> <span class="o">=</span> <span class="no">API_PORT</span>
    <span class="vg">$api</span><span class="p">.</span><span class="nf">start</span>
    <span class="vg">$stderr</span><span class="p">.</span><span class="nf">puts</span> <span class="s2">"Waiting for API to start listening..."</span>
    <span class="nb">sleep</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="k">while</span> <span class="o">!</span><span class="n">listening_on?</span><span class="p">(</span><span class="no">API_PORT</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="vg">$api</span><span class="p">.</span><span class="nf">alive?</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="k">def</span> <span class="nf">stop_api</span>
  <span class="vg">$stderr</span><span class="p">.</span><span class="nf">puts</span> <span class="s2">"Stopping API..."</span>
  <span class="vg">$api</span><span class="p">.</span><span class="nf">stop</span>
<span class="k">end</span>

<span class="k">def</span> <span class="nf">start_web</span>
  <span class="vg">$stderr</span><span class="p">.</span><span class="nf">puts</span> <span class="s2">"Starting web..."</span>
  <span class="vg">$web</span> <span class="o">=</span> <span class="no">ChildProcess</span><span class="p">.</span><span class="nf">build</span><span class="p">(</span><span class="s1">'node'</span><span class="p">,</span> <span class="s1">'app.js'</span><span class="p">)</span>
  <span class="vg">$web</span><span class="p">.</span><span class="nf">cwd</span> <span class="o">=</span> <span class="s1">'./web'</span>
  <span class="vg">$web</span><span class="p">.</span><span class="nf">io</span><span class="p">.</span><span class="nf">inherit!</span>
  <span class="vg">$web</span><span class="p">.</span><span class="nf">environment</span><span class="p">[</span><span class="s1">'API_URL'</span><span class="p">]</span> <span class="o">=</span> <span class="s2">"http://localhost:</span><span class="si">#{</span><span class="no">API_PORT</span><span class="si">}</span><span class="s2">"</span>
  <span class="vg">$web</span><span class="p">.</span><span class="nf">environment</span><span class="p">[</span><span class="s1">'PORT'</span><span class="p">]</span> <span class="o">=</span> <span class="no">WEB_PORT</span>
  <span class="vg">$web</span><span class="p">.</span><span class="nf">start</span>
  <span class="vg">$stderr</span><span class="p">.</span><span class="nf">puts</span> <span class="s2">"Waiting for web to start listening..."</span>
  <span class="nb">sleep</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="k">while</span> <span class="o">!</span><span class="n">listening_on?</span><span class="p">(</span><span class="no">WEB_PORT</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="vg">$web</span><span class="p">.</span><span class="nf">alive?</span>
<span class="k">end</span>

<span class="k">def</span> <span class="nf">stop_web</span>
  <span class="vg">$stderr</span><span class="p">.</span><span class="nf">puts</span> <span class="s2">"Stopping web..."</span>
  <span class="vg">$web</span><span class="p">.</span><span class="nf">stop</span>
<span class="k">end</span>

<span class="k">def</span> <span class="nf">listening_on?</span><span class="p">(</span><span class="n">port</span><span class="p">)</span>
  <span class="nb">system</span><span class="p">(</span><span class="s2">"netstat -an | grep </span><span class="si">#{</span><span class="n">port</span><span class="si">}</span><span class="s2"> | grep LISTEN"</span><span class="p">)</span>
<span class="k">end</span>
</code></pre></div></div>

<p>Running <code class="language-plaintext highlighter-rouge">rake spec</code> now starts up and waits for both apps, runs our test, and…</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Starting API...
Waiting for API to start listening...
# ...
Starting web...
Waiting for web to start listening...
# ...
home
  welcomes visitor
Stopping API...
# ...
Stopping web...

Finished in 4.67 seconds
1 example, 0 failures
</code></pre></div></div>

<p>Success!</p>

<p>Well, sort of. Our test of the home page doesn’t even depend on both systems. Let’s try a more meaningful test, listing products from the API.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">feature</span> <span class="s2">"shop"</span><span class="p">,</span> <span class="ss">js: </span><span class="kp">true</span> <span class="k">do</span>

  <span class="n">scenario</span> <span class="s2">"list widgets"</span> <span class="k">do</span>
    <span class="n">visit</span> <span class="s2">"/"</span>
    <span class="n">click_link</span> <span class="s2">"Browse products"</span>
    <span class="n">expect</span><span class="p">(</span><span class="n">page</span><span class="p">).</span><span class="nf">to</span> <span class="n">have_content</span><span class="p">(</span><span class="s2">"Foo Widget"</span><span class="p">)</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>Will it work?</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Failures:

  1<span class="o">)</span> shop list widgets
     Failure/Error: expect<span class="o">(</span>page<span class="o">)</span>.to have_content<span class="o">(</span><span class="s2">"Foo Widget"</span><span class="o">)</span>
       expected to find text <span class="s2">"Foo Widget"</span> <span class="k">in</span> <span class="s2">""</span>
     <span class="c"># ./spec/shop_spec.rb:8:in `block (2 levels) in &lt;top (required)&gt;'</span>
</code></pre></div></div>

<p>The web app isn’t authenticated to use the API! This brings up a more general question:</p>

<h2 id="how-to-bootstrap-test-data">How to bootstrap test data</h2>

<p>Most testing frameworks offer fixtures or direct access to the database. Because the API runs in a separate process, things are a little more difficult. We opt for 1 of 2 approaches, depending on the context:</p>

<ul>
  <li><strong>Insert data directly into the API’s database.</strong> We tend to do this only as a last resort, because tests would presume knowledge of the API’s implementation.</li>
  <li><strong>Perform test set-up via the API.</strong> Slightly nicer, and closer to real-life clients. (However, the API must be fairly complete.)</li>
</ul>

<p>In practice, we “cheat” and use direct database-insertion to initially bootstrap an API client application, then perform further test set-up through the API. You should choose what’s most convenient.</p>

<p>Our simple example will register the web application as an API client, then pass a key via basic authentication. We’ll have to modify the <code class="language-plaintext highlighter-rouge">start_web</code> helper:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">start_web</span>
  <span class="vg">$stderr</span><span class="p">.</span><span class="nf">puts</span> <span class="s2">"Starting web..."</span>
  <span class="vg">$web</span> <span class="o">=</span> <span class="no">ChildProcess</span><span class="p">.</span><span class="nf">build</span><span class="p">(</span><span class="s1">'node'</span><span class="p">,</span> <span class="s1">'app.js'</span><span class="p">)</span>
  <span class="vg">$web</span><span class="p">.</span><span class="nf">cwd</span> <span class="o">=</span> <span class="s1">'./web'</span>
  <span class="vg">$web</span><span class="p">.</span><span class="nf">io</span><span class="p">.</span><span class="nf">inherit!</span>
  <span class="vg">$api_base_url</span> <span class="o">=</span> <span class="s2">"http://</span><span class="si">#{</span><span class="n">api_client</span><span class="p">[</span><span class="s1">'key'</span><span class="p">]</span><span class="si">}</span><span class="s2">:@localhost:</span><span class="si">#{</span><span class="no">API_PORT</span><span class="si">}</span><span class="s2">"</span>
  <span class="vg">$web</span><span class="p">.</span><span class="nf">environment</span><span class="p">[</span><span class="s1">'API_URL'</span><span class="p">]</span> <span class="o">=</span> <span class="vg">$api_base_url</span>
  <span class="vg">$web</span><span class="p">.</span><span class="nf">environment</span><span class="p">[</span><span class="s1">'PORT'</span><span class="p">]</span> <span class="o">=</span> <span class="no">WEB_PORT</span>
  <span class="vg">$web</span><span class="p">.</span><span class="nf">start</span>
  <span class="vg">$stderr</span><span class="p">.</span><span class="nf">puts</span> <span class="s2">"Waiting for web to start listening..."</span>
  <span class="nb">sleep</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="k">while</span> <span class="o">!</span><span class="n">listening_on?</span><span class="p">(</span><span class="no">WEB_PORT</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="vg">$web</span><span class="p">.</span><span class="nf">alive?</span>
<span class="k">end</span>

<span class="k">def</span> <span class="nf">api_client</span>
  <span class="vg">$api_client</span> <span class="o">||=</span> <span class="k">begin</span>
    <span class="n">response</span> <span class="o">=</span> <span class="no">Net</span><span class="o">::</span><span class="no">HTTP</span><span class="p">.</span><span class="nf">post_form</span><span class="p">(</span><span class="no">URI</span><span class="p">(</span><span class="s2">"http://localhost:</span><span class="si">#{</span><span class="no">API_PORT</span><span class="si">}</span><span class="s2">/api/clients"</span><span class="p">),</span> <span class="p">{})</span>
    <span class="no">JSON</span><span class="p">.</span><span class="nf">parse</span><span class="p">(</span><span class="n">response</span><span class="p">.</span><span class="nf">body</span><span class="p">)</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>And the test will need to set up the data it expects to find listed:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">feature</span> <span class="s2">"shop"</span><span class="p">,</span> <span class="ss">js: </span><span class="kp">true</span> <span class="k">do</span>

  <span class="n">scenario</span> <span class="s2">"list widgets"</span> <span class="k">do</span>
    <span class="n">create_widget</span><span class="p">(</span><span class="ss">name: </span><span class="s1">'Foo Widget'</span><span class="p">,</span> <span class="ss">price_cents: </span><span class="mi">100_00</span><span class="p">)</span>
    <span class="n">visit</span> <span class="s2">"/"</span>
    <span class="n">click_link</span> <span class="s2">"Browse products"</span>
    <span class="n">expect</span><span class="p">(</span><span class="n">page</span><span class="p">).</span><span class="nf">to</span> <span class="n">have_content</span><span class="p">(</span><span class="s2">"Foo Widget"</span><span class="p">)</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="c1"># spec/spec_helper.rb</span>
<span class="k">def</span> <span class="nf">create_widget</span><span class="p">(</span><span class="n">params</span> <span class="o">=</span> <span class="p">{})</span>
  <span class="no">Net</span><span class="o">::</span><span class="no">HTTP</span><span class="p">.</span><span class="nf">post_form</span><span class="p">(</span><span class="no">URI</span><span class="p">(</span><span class="s2">"</span><span class="si">#{</span><span class="vg">$api_base_url</span><span class="si">}</span><span class="s2">/api/widgets"</span><span class="p">),</span> <span class="n">params</span><span class="p">)</span>
<span class="k">end</span>
</code></pre></div></div>

<p>Lo and behold, our entire “suite” now passes:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>2 examples, 0 failures
</code></pre></div></div>

<p>This basic structure has accommodated dozens of test scenarios. We’ve extended it with database- and cache-clearing between tests, and organized helpers into modules under <code class="language-plaintext highlighter-rouge">spec/support</code>. The suite is built nightly against the latest versions of our codebases, and has caught a few significant bugs.</p>

<p>A caveat: with so many layers and dependencies involved, there are often spurious failures. We’ve picked up a few practices that help:</p>

<ul>
  <li><a href="http://artsy.github.io/blog/2012/05/15/how-to-organize-over-3000-rspec-specs-and-retry-test-failures/">Automatic retries</a></li>
  <li><a href="http://artsy.github.io/blog/2014/01/30/isolating-spurious-and-nondeterministic-tests/">Quarantine for problematic tests</a></li>
  <li><a href="https://github.com/mattheworiordan/capybara-screenshot">Failure screenshots</a></li>
</ul>

<p>You can <a href="https://github.com/joeyAghion/multiapp_example-tests">grab the example code</a>. And make sure to let us know in the comments how <em>you</em> approach testing across applications.</p>
]]></content>
  </entry>
  
</feed>
