<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: geospatial | Artsy Engineering]]></title>
  <link href="https://artsy.github.io/blog/categories/geospatial/atom.xml" rel="self"/>
  <link href="https://artsy.github.io/"/>
  <updated>2024-05-17T14:49:02+00:00</updated>
  <id>https://artsy.github.io/</id>
  <author>
    <name><![CDATA[]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Are you using the right Mongo geospatial query?]]></title>
    <link href="https://artsy.github.io/blog/2023/02/10/mongo-geospatial-queries/"/>
    <updated>2023-02-10T00:00:00+00:00</updated>
    <id>https://artsy.github.io/blog/2023/02/10/mongo-geospatial-queries</id>
    <content type="html"><![CDATA[<p>We recently got a report from one of our galleries in the Los Angeles area that
they weren’t showing up on our
<a href="https://www.artsy.net/shows/los-angeles-ca-usa">Los Angeles exhibition listings</a>.</p>

<p>I fielded the report and right away confirmed: when we asked our core API for
<code class="language-plaintext highlighter-rouge">/shows?near=&lt;los angeles coordinates&gt;</code>, sure enough this gallery partner didn’t
make the cut.</p>

<p>Turns out they are based in Santa Monica, a separate and neighboring
municipality. They must not be within the 25km radius that we use by default for
these sorts of queries.</p>

<p><em>Case closed</em>. Or so I thought.</p>

<!-- more -->

<p>After some back and forth with our partner I decided to investigate more
thoroughly, this time using some tricks of the trade from
<a href="https://www.anandarooproy.com">my other life</a> outside of Artsy.</p>

<h2 id="casting-a-wider-net">Casting a wider net</h2>

<p>If there was something wrong with our 25km radius query, I wanted to start by
casting a wider net and visualizing the results.</p>

<p>I consulted our Rails application code to find the query logic in question, and
then issued the same query directly to MongoDB. Something like the following
query (simplified for clarity):</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// a $geoWithin $center query</span>

<span class="nx">db</span><span class="p">.</span><span class="nx">events</span><span class="p">.</span><span class="nx">find</span><span class="p">({</span>
  <span class="na">coordinates</span><span class="p">:</span> <span class="p">{</span>
    <span class="na">$geoWithin</span><span class="p">:</span> <span class="p">{</span>
      <span class="na">$center</span><span class="p">:</span> <span class="p">[[</span><span class="o">-</span><span class="mf">118.24</span><span class="p">,</span> <span class="mf">34.05</span><span class="p">],</span> <span class="mi">25</span> <span class="o">/</span> <span class="mf">111.32</span><span class="p">],</span>
    <span class="p">},</span>
  <span class="p">},</span>
<span class="p">})</span>
</code></pre></div></div>

<p>In the query above we are asking MongoDB to give us all events within a 25km
radius around the point 34.05°N, 118.24°W which we have designated as a central
point within Los Angeles. For our purposes in this post we can consider “events”
≈ “exhibitions” ≈ “shows.”</p>

<p>We are not asking for the 25km radius directly, but rather converting it into an
equivalent amount of geographic degrees by using a conversion factor of 1° ≈
111.32 kilometers, a factor which is true at enough the equator.</p>

<p>I modified the above query to cast a 50km net in order to see if there were some
edges cases that needed scrutiny. Taking the resulting JSON response, I fired up
<a href="https://www.placemark.io/">Placemark</a>, my favorite new tool for wrangling
geospatial data.</p>

<p>(Incidentally I recommend reading Tom Macwright’s
<a href="https://macwright.com/2023/01/28/placemark.html">recent reflection on creating Placemark</a>
as a bootstrapped indie developer.)</p>

<figure class="illustration">
  <img src="/images/2023-02-10-mongo-geospatial-queries/1.png" alt="Screenshot of a visualization in Placemark showing Los Angeles area exhibitions within a 50km radius." />
  <figcaption>All shows within a 50km radius</figcaption>
</figure>

<h2 id="ball-of-confusion">Ball of confusion</h2>

<p>One nice feature of Placemark is that it lets us place geodesic circles on the
map, that is, circles that represent a constant radius around a point, as
plotted on a globe.</p>

<p>When I placed a 25km radius circle on the map, something stood out immediately.</p>

<figure class="illustration">
  <img src="/images/2023-02-10-mongo-geospatial-queries/2.png" alt="Screenshot of a visualization in Placemark showing Los Angeles area exhibitions within a 50km radius, with a 25km radius superimposed." />
  <figcaption>25km radius superimposed. <a style="padding-bottom: 1px; border-bottom: solid 1px lightgray" href="https://en.wikipedia.org/wiki/Ball_of_Confusion_%28That%27s_What_the_World_Is_Today%29">Ball of Confusion</a>, that's what the world was that day.</figcaption>
</figure>

<p>The partner in question is highlighted in pink — and is clearly within the 25km
radius. <strong>What gives?</strong></p>

<p>By spot-checking a few points on the map against our current geo query I found
that edge cases near the top or bottom of the circle were likely to be evaluated
correctly, while edges cases at the left and right were being incorrectly
omitted, as our partner gallery was.</p>

<p>A fuller visualization of that finding would look like this:</p>

<figure class="illustration">
  <img src="/images/2023-02-10-mongo-geospatial-queries/3.png" alt="Screenshot of a visualization in Placemark showing the results of a $geoWithin $center query" />
  <figcaption>Results of a <code>$geoWithin $center</code> query around Los Angeles, evaluated against a grid of test points.</figcaption>
</figure>

<p>A distinctly <em>non</em>-circular circle — that rung a bell.</p>

<h2 id="more-than-one-way-to-draw-a-circle-on-the-earth">More than one way to draw a circle on the Earth</h2>

<p>It was at this point that I recalled the specific form of the geospatial query
our code was performing, and consulted the
<a href="https://www.mongodb.com/docs/manual/reference/operator/query/geoWithin/">MongoDB docs for the $geoWithin query</a>.</p>

<p>Turns out that you can invoke this as a radius query in one of two ways, by
specifying
<a href="https://www.mongodb.com/docs/manual/reference/operator/query/center/">$center</a>
or
<a href="https://www.mongodb.com/docs/manual/reference/operator/query/centerSphere/">$centerSphere</a>.</p>

<p>Per the
<a href="https://www.mongodb.com/docs/manual/reference/operator/query/center/#behavior">docs</a>
for <code class="language-plaintext highlighter-rouge">$center</code>, this query…</p>

<blockquote>
  <p>calculates distances using flat (planar) geometry</p>
</blockquote>

<p>Let us pause for a moment to note that while only some maps are
<a href="https://press.uchicago.edu/ucp/books/book/chicago/H/bo27400568.html">deceitful</a>,
<em>all</em> maps are untruths. In the sense that they flatten three dimensions down to
two, and inevitably distort the world in the process.</p>

<p>The surface of a three-dimensional globe cannot be flattened down to a
two-dimensional plane without some stretching or tearing, any more than an
orange peel can be. The mathematical algorithms for turning those three
dimensions into two are what we know as map projections. (Ah, the good old days
when “dimensionality reduction” meant <em>from three to two</em>.)</p>

<p>If you do your distance calculations in such a flattened, projected coordinate
system — as the <code class="language-plaintext highlighter-rouge">$geoWithin $center</code> query does — then you are accepting
whatever distortions are inherent to that projection.</p>

<p>That’s the situation we were in. We thought we were catching everything inside
the green circle, but in fact we were only catching everything inside the red
egg:</p>

<figure class="illustration">
  <img src="/images/2023-02-10-mongo-geospatial-queries/5.png" alt="Screenshot of a visualization in Placemark showing the results of a $geoWithin $center query compared to the expected results" />
  <figcaption>Actual <code>$geoWithin $center</code> results vs. expected results.</figcaption>
</figure>

<p>And our unfortunate partner was <em>just</em> outside the egg, thus being incorrectly
omitted.</p>

<h2 id="fixing-the-query">Fixing the query</h2>

<p>Luckily the solution was simple.</p>

<p>As noted above MongoDB supports a second variant for radius queries using a
<code class="language-plaintext highlighter-rouge">$centerSphere</code> operator instead of the <code class="language-plaintext highlighter-rouge">$center</code> that we were using.</p>

<p>Per the
<a href="https://www.mongodb.com/docs/manual/reference/operator/query/centerSphere/">docs</a>
for <code class="language-plaintext highlighter-rouge">$centerSphere</code>, this version…</p>

<blockquote>
  <p>defines a circle for a geospatial query that uses spherical geometry</p>
</blockquote>

<p>In other words, this query effectively draws our circle on the three-dimensional
globe rather than on the stretched and distorted two-dimensional map.</p>

<p>We just need to rewrite our query as follows:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// a $geoWithin $centerSphere query</span>

<span class="nx">db</span><span class="p">.</span><span class="nx">events</span><span class="p">.</span><span class="nx">find</span><span class="p">({</span>
  <span class="na">coordinates</span><span class="p">:</span> <span class="p">{</span>
    <span class="na">$geoWithin</span><span class="p">:</span> <span class="p">{</span>
      <span class="c1">// $center: [[-118.24, 34.05], 25 / 111.32],    /* BEFORE */</span>
      <span class="na">$centerSphere</span><span class="p">:</span> <span class="p">[[</span><span class="o">-</span><span class="mf">118.24</span><span class="p">,</span> <span class="mf">34.05</span><span class="p">],</span> <span class="mi">25</span> <span class="o">/</span> <span class="mf">6378.1</span><span class="p">]</span> <span class="cm">/* AFTER */</span><span class="p">,</span>
    <span class="p">},</span>
  <span class="p">},</span>
<span class="p">})</span>
</code></pre></div></div>

<p>There is a new conversion factor in play here, this time denoting that the
radius of the earth is approximately 6378.1 km. In this <code class="language-plaintext highlighter-rouge">$centerSphere</code> flavor
of the query we are working in unprojected
<a href="https://en.wikipedia.org/wiki/Spherical_coordinate_system">spherical coordinates</a>,
measured in <a href="https://en.wikipedia.org/wiki/Radian">radians</a>. Thus we need to
account for the size of the sphere that we are calculating upon.</p>

<p>We can re-run
<a href="https://gist.github.com/anandaroop/a1b794559615b2bbdea097678321c93f">our test</a>
with this version of the query, and now we see that the results are finally in
line with what we were expecting:</p>

<figure class="illustration">
  <img src="/images/2023-02-10-mongo-geospatial-queries/4.png" alt="Screenshot of a visualization in Placemark showing the results of a $geoWithin $centerSphere query" />
  <figcaption>Results of a <code>$geoWithin $centerSphere</code> query around Los Angeles, evaluated against a grid of test points.</figcaption>
</figure>

<p>Having updated our API to use this variant of the query, we solved the problem
and returned our partner gallery to its rightful place in our listings, as shown
by the pink highlight above.</p>

<p>That was the happy ending we were looking for.</p>

<h2 id="a-postscript-on-map-distortion">A postscript on map distortion</h2>

<p>But if you’re curious to learn a little more about map distortion, let’s dig a
bit deeper into the nature of the problem that we were encountering.</p>

<p>Returning to <a href="https://www.placemark.io/">Placemark</a>’s ability to draw different
kinds of circles on the map, let’s now place a <em>geographic</em> circle on the map
rather than a geodesic one. This one is computed in the simplest possible map
projection — a geographic projection where we simply treat the longitude as the
X coordinate and the latitude as the Y coordinate. (This projection goes by many
names, such as “geographic”, “equirectangular”, “Plate Carrée” or even
<em>“unprojected”</em>, which is not quite accurate.)</p>

<p>This corresponds to what you get when you use MongoDB’s <code class="language-plaintext highlighter-rouge">$geoWithin</code> <code class="language-plaintext highlighter-rouge">$center</code>
query on geospatial data:</p>

<figure class="illustration">
  <img src="/images/2023-02-10-mongo-geospatial-queries/6.gif" alt="Animation showing the distortion a geographic circle encounters at various latitudes" />
  <figcaption>Animation showing the distortion a geographic circle encounters at various latitudes.</figcaption>
</figure>

<p>As you can see, we get: a moderately oblong egg at the latitude of Los Angeles;
a nice circle as we get close to the equator; and a very oblong egg as we
approach the poles.</p>

<p>If you are wondering why you should trust my claims about the egginess of <em>this</em>
two-dimensional image after I just said that all such maps are lies — good
question!</p>

<p>It just so happens that nearly all web-based interactive maps, including
Placemark, use a variation of the Mercator projection, the one you might
remember from schoolroom maps. Mercator is a so-called
“<a href="https://en.wikipedia.org/wiki/Conformal_map_projection">conformal</a>”
projection, meaning that <em>its</em> particular lie is to sacrifice area in favor of
shape.</p>

<p>A shape drawn on a globe will be correctly maintained in a Mercator map, but the
scale will vary across the map: true at the equator and very incorrect towards
the poles. This is the reason for the common complaint that
<a href="https://www.nature.com/nature-index/news-blog/data-visualisation-animated-map-mercater-projection-true-size-countries">Mercator maps show Greenland as about the same size as Africa</a>,
when in fact Africa is about 14 times larger.</p>

<p>The amount and nature of the distortion introduced by map projections is such an
important topic that cartographers have long relied on a clever technique for
communicating this distortion visually, known as
“<a href="https://en.wikipedia.org/wiki/Tissot%27s_indicatrix">Tissot’s indicatrix</a>.”</p>

<p>To give you a sense of the kind of distortion we encountered with the <code class="language-plaintext highlighter-rouge">$center</code>
query, here is what Tissot’s indicatrix looks like for the geographic
projection. This shows essentially the inverse of the animation above — what
does a true circle plotted on the globe look like at various locations on this
map projection?</p>

<figure class="illustration">
  <img src="/images/2023-02-10-mongo-geospatial-queries/7.png" alt="Tissot's indicatrix for equirectangular projection" />
  <figcaption>Tissot's indicatrix for equirectangular projection. Credit: Justin Kunimune, <a href="https://creativecommons.org/licenses/by-sa/4.0">CC BY-SA 4.0</a>, via Wikimedia Commons</figcaption>
</figure>

<p>Now, imagine the inverse operation of this ⤴︎, drawing <em>true</em> circles on this
planar space, in order to get a sense of how distorted your query results on a
globe would be.</p>

<p>Finally, here is Tissot’s indicatrix for the Mercator projection, demonstrating
its ability to preserve shapes at the expense of sizes.</p>

<figure class="illustration">
  <img src="/images/2023-02-10-mongo-geospatial-queries/8.png" alt="Tissot's indicatrix for Mercator projection" />
  <figcaption>Tissot's indicatrix for Mercator projection. Credit: Eric Gaba, <a href="http://creativecommons.org/licenses/by-sa/4.0/">CC BY-SA 4.0</a>, via Wikimedia Commons</figcaption>
</figure>

<p>An interesting recent development is that the web’s reliance on Mercator is
changing, but only very slowly.
<a href="https://www.theverge.com/2018/8/5/17653122/google-maps-update-mercator-projection-earth-isnt-flat">Google began to make this change</a>
a few years ago, and
<a href="https://www.mapbox.com/blog/adaptive-projections">Mapbox has written about their approach</a>
as well.</p>

<p>Hopefully this digression into the display of geospatial data has been
illuminating. There is much more to say on this topic, since geospatial is more
or less one asterisk after another. For example, we haven’t mentioned that the
Mercator projection above is incapable of depicting the north or south poles at
all! Nor have we touched on MongoDB’s various geospatial
<a href="https://www.mongodb.com/docs/manual/geospatial-queries/#geospatial-data">data formats</a>,
<a href="https://www.mongodb.com/docs/manual/geospatial-queries/#geospatial-indexes">indexes</a>,
or
<a href="https://www.mongodb.com/docs/manual/reference/operator/query/near/">the $near query</a>
and its spherical sibling
<a href="https://www.mongodb.com/docs/manual/reference/operator/query/nearSphere/">the $nearSphere query</a>,
all worthy topics.</p>

<p>But we hope that understanding this crucial distinction between planar
(<code class="language-plaintext highlighter-rouge">$center</code>) and spherical (<code class="language-plaintext highlighter-rouge">$centerSphere</code>) calculations will help you make the
right choice when devising your own radius queries with MongoDB or other
geospatial engines.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mashing Data, Making Maps]]></title>
    <link href="https://artsy.github.io/blog/2017/01/25/mashing-maps/"/>
    <updated>2017-01-25T14:00:00+00:00</updated>
    <id>https://artsy.github.io/blog/2017/01/25/mashing-maps</id>
    <content type="html"><![CDATA[<p>We have a lot of really awesome data. Things worth exploring, and visualizing. We have an entire team devoted to it, <a href="https://www.artsy.net/article/artsy-jobs-data-analyst">looks like they’re hiring too</a>. Not all of the output of the data comes from that team though, 2 years ago our Director of Product Engineering, <a href="https://github.com/craigspaeth">Craig Spaeth</a> created a <a href="https://github.com/artsy/partner-map">static-site generator</a> that mapped our partners around the globe. Last week I’ve been improving it.</p>

<p><img src="/images/mappings/preview.gif" alt="An animated map of galleries" /></p>

<p>Projects like these happen in most companies, quick hacks for one offs that are opened 2 years later by someone completely different to build on top of it. In trying to follow <a href="http://programmer.97things.oreilly.com/wiki/index.php/The_Boy_Scout_Rule">the Boy Scout rule</a>, I’ve cleaned it up and consolidated some other similar projects. This post is a rough road-map of what making <a href="https://github.com/artsy/partner-map/pull/3">this PR</a> looked like.</p>

<!-- more -->

<p>The aim was to visualise data we had created on when galleries were founded. Then to be able to see how that corresponds with our artwork inquiry data.</p>

<h2 id="coming-back-to-an-npm-app-2-years-later">Coming back to an npm app 2 years later</h2>

<p>Straight off the bat, nothing worked :D</p>

<p>This isn’t too surprising, I’m pretty sure we’d have the same problem with an iOS project too. This was mainly due to dependencies switching between major versions due to zero locking on any of the versions.</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="err">...</span><span class="w">
  </span><span class="nl">"dependencies"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"async"</span><span class="p">:</span><span class="w"> </span><span class="s2">"*"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"browserify"</span><span class="p">:</span><span class="w"> </span><span class="s2">"*"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"coffee-script"</span><span class="p">:</span><span class="w"> </span><span class="s2">"*"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"coffeeify"</span><span class="p">:</span><span class="w"> </span><span class="s2">"*"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"d3"</span><span class="p">:</span><span class="w"> </span><span class="s2">"*"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"datamaps"</span><span class="p">:</span><span class="w"> </span><span class="s2">"git://github.com/markmarkoh/datamaps.git"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"mongojs"</span><span class="p">:</span><span class="w"> </span><span class="s2">"*"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"topojson"</span><span class="p">:</span><span class="w"> </span><span class="s2">"*"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"watchify"</span><span class="p">:</span><span class="w"> </span><span class="s2">"*"</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p><a href="/blog/2016/11/14/JS-Glossary/#yarn">Switching to Yarn</a> fixed this by introducing a lock file, this means that the next time someone else comes along they’ll get the exact same setup that I’ve been working against.</p>

<h2 id="coffeescript">CoffeeScript</h2>

<p>I have zero experience with <a href="http://coffeescript.org">CoffeeScript</a>. My high-level JavaScript experience only comes from the last 6 months, and it’s a different world at the minute. Two years ago CoffeeScript was in it’s prime, as the first of the JavaScript transpilers - if this is new to you, I’d strongly recommend watching this talk:</p>

<iframe width="640" height="360" src="https://www.youtube.com/embed/DspYurD75Ns" frameborder="0" allowfullscreen=""></iframe>

<p> </p>

<p>We have a lot of CoffeeScript in production, here’s a few key parts of Artsy’s infrastructure:</p>

<ul>
  <li><a href="https://github.com/artsy/force">artsy/force</a> - our website</li>
  <li><a href="https://github.com/artsy/microgravity">artsy/microgravity</a> - our mobile website</li>
  <li><a href="https://github.com/artsy/positron">artsy/positron</a> - our editorial staff’s CMS</li>
</ul>

<p><a href="https://github.com/artsy?language=coffeescript">..and there’s more</a>. Thus having an understanding of it is pretty essential to writing code across all of Artsy’s businesses. The TLDR for CoffeeScript is that it applies a lot of the elegance in Ruby to JavaScript. You should feel comfortable with JavaScript before using it, as it requires understanding what the language facade is doing.</p>

<p>A lot of the best ideas from CoffeeScript have been migrated into <a href="/blog/2016/11/14/JS-Glossary/#es6">modern JavaScript</a>. My favourite is ease in how functions can be created:</p>

<div class="language-coffee highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">random</span> <span class="o">=</span> <span class="p">(</span><span class="nx">min</span><span class="p">,</span> <span class="nx">max</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">Math</span><span class="p">.</span><span class="na">round</span><span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="na">random</span><span class="p">()</span> <span class="o">*</span> <span class="p">(</span><span class="nx">max</span> <span class="o">-</span> <span class="nx">min</span><span class="p">)</span> <span class="o">+</span> <span class="nx">min</span><span class="p">)</span>
</code></pre></div></div>

<p>It also supports my favourite part of <a href="http://danger.systems/guides/a_quick_ruby_overview.html#variables-and-keyword-syntax">Ruby’s handling of code-flow</a> using single-line reverse ifs:</p>

<div class="language-coffee highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">pgClient</span><span class="p">.</span><span class="na">connect</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="o">-&gt;</span> 
  <span class="nx">console</span><span class="p">.</span><span class="na">error</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="k">if</span> <span class="nx">err</span>
</code></pre></div></div>

<p>Which gets to the crux of CoffeeScript’s ideology, I would often start with writing it in JavaScript in my head, then slowly remove syntax. When I got stuck I visited <a href="http://js2.coffee">js.coffee</a> to see how something I know what I want to write would look.</p>

<h2 id="databases">Databases</h2>

<p>You want to convert all data your companies data into something useful? You better get that data available locally or you’re going to spend a long time iterating. As a side-effect of Artsy converting <a href="/blog/2014/05/12/continuous-integration-for-service-oriented-architectures/">to microservices</a> I needed three separate databases to connect all the data I needed. It covers over two types of databases: MongoDB and Postgres.</p>

<h3 id="mongodb">MongoDB</h3>

<p>MongoDB is a NoSQL document store database, this means it has no formal data-structure. It feels very JavaScript-y because of this. I host it <a href="http://gcollazo.github.io/mongodbapp/">inside an app</a>, and I <a href="https://robomongo.org">use RoboMongo</a> to inspect it.</p>

<p>&lt;/div&gt;&lt;/div&gt;<a href="/images/mappings/robomongo.png"><img src="/images/mappings/robomongo.png" /></a>&lt;div class='meta-container'&gt;&lt;header&gt; &lt;/header&gt;&lt;/div&gt;&lt;div class='date-container'&gt; &lt;/div&gt;&lt;div class='content-container'&gt;&lt;div class='entry-content'&gt;</p>

<p>This works out nicely, I needed to make a local copy of the databases, so I used the answers from this <a href="http://stackoverflow.com/questions/23652402/how-to-copy-a-collection-from-one-mongodb-to-another">stack overflow</a></p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># You'll need to figure out how to connect to your database</span>
mongoexport <span class="nt">-d</span> gravity_staging <span class="nt">-c</span> artworks <span class="nt">-o</span> artworks_collection.json

<span class="c"># Then into merge it into your development machine</span>
mongoimport <span class="nt">-d</span> gravity_development <span class="nt">-c</span> artworks <span class="nt">--file</span> artworks_collection.json
</code></pre></div></div>

<p>Doing this for the specific collections you’re interested in will help get you set up.</p>

<h3 id="postgres">Postgres</h3>

<p>Other databases I needed access to were Postgres databases, I don’t know much about databases but Postgres seems to be <a href="https://blog.heroku.com/postgres-essentials">Heroku’s favourite database</a> so I’ll take that endorsement as gold. It’s an SQL database, which you can do <a href="https://github.com/calebmer/postgraphql">amazing things with</a>. I host it <a href="http://postgresapp.com">inside an app</a> and use <a href="https://eggerapps.at/postico/">Postico</a> to inspect it.</p>

<p>&lt;/div&gt;&lt;/div&gt;<a href="/images/mappings/postico.png"><img src="/images/mappings/postico.png" /></a>&lt;div class='meta-container'&gt;&lt;header&gt; &lt;/header&gt;&lt;/div&gt;&lt;div class='date-container'&gt; &lt;/div&gt;&lt;div class='content-container'&gt;&lt;div class='entry-content'&gt;</p>

<p>I grabbed a <a href="https://devcenter.heroku.com/articles/heroku-postgres-backups">backup</a> of our databases, they come down as a <a href="https://www.commandprompt.com/blog/a_better_backup_with_postgresql_using_pg_dump/">pg_dump file</a> file which you can replicate locally in your postgres using a command like:</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pg_restore <span class="nt">--verbose</span> <span class="nt">--clean</span> <span class="nt">--no-acl</span> <span class="nt">--no-owner</span> <span class="nt">-h</span> localhost <span class="nt">-U</span> <span class="o">[</span>your_name] <span class="nt">-d</span> <span class="o">[</span>db_name] <span class="o">[</span>filepath]
</code></pre></div></div>

<h3 id="database-as-csv">Database as CSV</h3>

<p>This almost gave me all the data necessary to start work. The other part is a good chunk of new data we wanted mapping was not in a database, it was in a collection of spreadsheet files and occasionally hosted on google docs. Meaning it’s time to reach for a good parser. Whenever this happens I reach for Ruby, which ships with a great CSV parser/writer. I also open the CSV inside <a href="http://www.apple.com/numbers/">Numbers</a> from Apple, which does a great job of providing visibility ( and letting you make quick changes.)</p>

<p>I have a bunch of scripts like this, one which generate more CSV files - I’m keeping the filenames intact to give you a real sense of how much of a quick hack these are:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Create a new CSV file</span>
<span class="no">CSV</span><span class="p">.</span><span class="nf">open</span><span class="p">(</span><span class="s2">"/Users/orta/Downloads/end-result.csv"</span><span class="p">,</span> <span class="s2">"wb"</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">csv</span><span class="o">|</span>
  <span class="c1"># Loop through both derived tables</span>
  <span class="n">tables</span> <span class="o">=</span> <span class="p">[</span><span class="s2">"Partners-Table 1.csv"</span><span class="p">,</span> <span class="s2">"Non-Partners-Table 1.csv"</span><span class="p">]</span>
  <span class="n">tables</span><span class="p">.</span><span class="nf">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">t</span><span class="o">|</span> 
    <span class="no">CSV</span><span class="p">.</span><span class="nf">foreach</span><span class="p">(</span><span class="s2">"/Users/orta/Documents/Gallery</span><span class="se">\ </span><span class="s2">Date</span><span class="se">\ </span><span class="s2">Research/"</span> <span class="o">+</span> <span class="n">t</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">row</span><span class="o">|</span>
      <span class="k">next</span> <span class="k">unless</span> <span class="n">row</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="c1"># bad data</span>
      <span class="k">next</span> <span class="k">unless</span> <span class="n">row</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="c1"># no dates</span>

      <span class="c1"># don't trust the CSV</span>
      <span class="n">query</span> <span class="o">=</span> <span class="no">Regexp</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="n">row</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="no">Regexp</span><span class="o">::</span><span class="no">IGNORECASE</span><span class="p">)</span>
      <span class="n">partner</span> <span class="o">=</span> <span class="no">Partner</span><span class="p">.</span><span class="nf">where</span><span class="p">(</span><span class="ss">given_name: </span><span class="n">query</span><span class="p">).</span><span class="nf">first</span>
      <span class="n">partner</span> <span class="o">||=</span> <span class="no">Partner</span><span class="p">.</span><span class="nf">where</span><span class="p">(</span><span class="ss">display_name: </span><span class="n">query</span><span class="p">).</span><span class="nf">first</span>

      <span class="n">start_date</span> <span class="o">=</span> <span class="n">row</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>

      <span class="c1"># did we find a partner &amp; a location?</span>
      <span class="k">if</span> <span class="n">partner</span> <span class="n">and</span> <span class="n">partner</span><span class="p">.</span><span class="nf">location_coordinates</span> <span class="n">and</span> <span class="n">partner</span><span class="p">.</span><span class="nf">location_coordinates</span><span class="p">.</span><span class="nf">first</span>
        <span class="n">loc</span> <span class="o">=</span> <span class="n">partner</span><span class="p">.</span><span class="nf">location_coordinates</span><span class="p">.</span><span class="nf">first</span>
        <span class="n">csv</span> <span class="o">&lt;&lt;</span> <span class="p">[</span><span class="n">partner</span><span class="p">.</span><span class="nf">name</span><span class="p">,</span> <span class="n">start_date</span><span class="p">,</span> <span class="n">loc</span><span class="p">[</span><span class="ss">:lat</span><span class="p">],</span> <span class="n">loc</span><span class="p">[</span><span class="ss">:lon</span><span class="p">]]</span>
      <span class="k">else</span>
        <span class="n">csv</span> <span class="o">&lt;&lt;</span> <span class="p">[</span><span class="n">row</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">start_date</span><span class="p">,</span> <span class="kp">nil</span><span class="p">,</span> <span class="kp">nil</span><span class="p">]</span>
        <span class="c1"># look up org in burden inside postgres</span>
        <span class="c1"># go from org -&gt; lat, long via location's organization_id</span>
      <span class="k">end</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>Once this was ready I created a new script to pull things from another databasea, in theory this code could have gone inside the previous script, but it felt like a good time to get up and make a tea during a pairing session.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">require</span> <span class="s1">'CSV'</span>
<span class="n">conn</span> <span class="o">=</span> <span class="no">PG</span><span class="p">.</span><span class="nf">connect</span><span class="p">(</span><span class="ss">host: </span><span class="s2">"localhost"</span><span class="p">,</span> <span class="ss">dbname: </span><span class="s1">'burden'</span><span class="p">)</span>

<span class="c1"># Write to another end-results</span>
<span class="no">CSV</span><span class="p">.</span><span class="nf">open</span><span class="p">(</span><span class="s2">"/Users/orta/Downloads/end-result-2.csv"</span><span class="p">,</span> <span class="s2">"wb"</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">csv</span><span class="o">|</span>
  <span class="no">CSV</span><span class="p">.</span><span class="nf">foreach</span><span class="p">(</span><span class="s2">"/Users/orta/Downloads/end-result.csv"</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">row</span><span class="o">|</span>
    <span class="c1"># gravity lookups passed, don't need to do anything</span>
    <span class="k">if</span> <span class="n">row</span> <span class="o">&amp;&amp;</span> <span class="n">row</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span>
      <span class="c1"># put in the normal row</span>
      <span class="n">csv</span> <span class="o">&lt;&lt;</span> <span class="n">row</span>
      <span class="k">next</span>
    <span class="k">end</span>
    
    <span class="c1"># Galleries  have ' in their names, breaking SQL</span>
    <span class="nb">name</span> <span class="o">=</span> <span class="n">row</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nf">gsub</span><span class="p">(</span><span class="sr">/'/</span><span class="p">,</span> <span class="s2">"</span><span class="se">\\</span><span class="s2">'"</span><span class="p">)</span>
    <span class="n">result</span> <span class="o">=</span> <span class="n">conn</span><span class="p">.</span><span class="nf">exec</span><span class="p">(</span> <span class="s2">"SELECT latitude, longitude FROM locations WHERE organization_id in (SELECT id FROM organizations WHERE name = '</span><span class="si">#{</span><span class="nb">name</span><span class="si">}</span><span class="s2">') "</span> <span class="p">)</span>

    <span class="c1"># If we've found something, set it</span>
    <span class="k">if</span> <span class="n">result</span><span class="p">.</span><span class="nf">cmd_tuples</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="n">and</span> <span class="n">result</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
      <span class="n">row</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="n">result</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="s2">"latitude"</span><span class="p">]</span>
      <span class="n">row</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span> <span class="o">=</span> <span class="n">result</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="s2">"longitude"</span><span class="p">]</span>
    <span class="k">end</span>
    <span class="n">result</span><span class="p">.</span><span class="nf">clear</span>
    
    <span class="n">csv</span> <span class="o">&lt;&lt;</span> <span class="n">row</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>Then finally with a fully fleshed out CSV, I could convert that into something that’s useful for this project, JSON:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">require</span> <span class="s1">'CSV'</span>
<span class="nb">require</span> <span class="s1">'JSON'</span>

<span class="n">data</span> <span class="o">=</span> <span class="p">[]</span>
<span class="no">CSV</span><span class="p">.</span><span class="nf">foreach</span><span class="p">(</span><span class="s2">"/Users/orta/Downloads/end-result-2.csv"</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">row</span><span class="o">|</span>
  <span class="n">created_at</span> <span class="o">=</span> <span class="n">row</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
  <span class="k">if</span> <span class="n">row</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">&amp;&amp;</span> <span class="n">created_at</span><span class="p">.</span><span class="nf">strip</span><span class="p">.</span><span class="nf">length</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">row</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="n">and</span> <span class="n">row</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span>
    <span class="n">data</span> <span class="o">&lt;&lt;</span> <span class="p">{</span> <span class="ss">name: </span><span class="n">row</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="ss">radius: </span><span class="mi">4</span><span class="p">,</span> <span class="ss">created_at: </span><span class="n">created_at</span><span class="p">.</span><span class="nf">to_i</span><span class="p">,</span> <span class="ss">latitude: </span><span class="n">row</span><span class="p">[</span><span class="mi">2</span><span class="p">].</span><span class="nf">to_f</span><span class="p">,</span> <span class="ss">longitude: </span><span class="n">row</span><span class="p">[</span><span class="mi">3</span><span class="p">].</span><span class="nf">to_f</span> <span class="p">}</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="no">File</span><span class="p">.</span><span class="nf">open</span><span class="p">(</span><span class="s2">"/Users/orta/dev/js/sites/partner-map/data/jsons/galleries-subset.json"</span><span class="p">,</span><span class="s2">"w"</span><span class="p">)</span> <span class="p">{</span> <span class="o">|</span><span class="n">f</span><span class="o">|</span> <span class="n">f</span><span class="p">.</span><span class="nf">write</span><span class="p">(</span> <span class="n">data</span><span class="p">.</span><span class="nf">sort_by</span> <span class="p">{</span> <span class="o">|</span><span class="n">h</span><span class="o">|</span> <span class="n">h</span><span class="p">[</span><span class="ss">:created_at</span><span class="p">]</span> <span class="p">}.</span><span class="nf">to_json</span><span class="p">)</span> <span class="p">}</span>
</code></pre></div></div>

<p>And that gives me the raw data that I can now use with our mapping system.</p>

<h2 id="d3--datamaps">D3 + Datamaps</h2>

<p>There are concepts that you can just pick up, because they are simple evolutions of something you know. <a href="https://d3js.org">D3 is not one of these</a>. D3 is a system for making data-based graphical documents. Learning how to do D3 properly takes time and a perspective change. Luckily we had a Lunch &amp; Learn <a href="https://twitter.com/orta/status/809451441882628096">2 weeks ago on D3</a> and now I am a total domain expert.</p>

<p>I jest. However, the talk was definitely enough to do the majority of what I wanted to do. Which was take some static data, and animate it over time. In these cases I get out the trusty <code class="language-plaintext highlighter-rouge">setTimeout</code> API call in JavaScript which gets the ball rolling.</p>

<p>I had a few thousand datapoints with a <code class="language-plaintext highlighter-rouge">date_created</code> attribute, so it was pretty simple to pull that out and  group them according to a time interval. I wanted the freedom to decide how long each animation should last, there probably is a D3 API for this kind of thing but I never spent the time researching. Maybe the next developer can do that.</p>

<p>We use the <em>amazing</em> library <a href="http://datamaps.github.io">Datamaps</a> to show the globe and handle a lot of the lat/long -&gt; pixel mathematics. It is built in a D3 mindset, so with each interval of the animation, I added all of the locations or arcs to it and D3/Datamaps will derive the difference between what it has and what is new and animate those. This makes thinking about the animation simple.</p>

<h2 id="too-much-data">Too much data</h2>

<p>One problem I kept hitting against was that we were working with a dataset that couldn’t fit into memory. Initially a direct port of our algorithm to get all of Artsy’s partners and locations would crash node due to memory pressure. Originally we were working with a much smaller data-set, now it’s multiple orders of magnitude bigger. These were pretty easy to fix with a bit of understanding about all the asynchronous callbacks and by finding the <code class="language-plaintext highlighter-rouge">async.eachOfLimit</code> <a href="http://caolan.github.io/async/docs.html#eachOfLimit">function</a>.</p>

<p>Another issue with the amount of data came through trying to visualise them. It would bring down my computer, in the end after trying a few ideas (looking for averages, grouping similar data-points) I found the simplest option to be the one worth shipping. <code class="language-plaintext highlighter-rouge">rand(x, y)</code>.</p>

<div class="language-coffee highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#</span>
<span class="c1"># Take a set of arcs, and pick a random 1 in x</span>
<span class="c1"># yarn run coffee -- data/inquiries/inquiry-random-subsets.coffee</span>
<span class="c1">#</span>

<span class="nx">fs</span> <span class="o">=</span> <span class="nx">require</span> <span class="s">'fs'</span>

<span class="c1"># Random number between min, max</span>
<span class="nx">random</span> <span class="o">=</span> <span class="p">(</span><span class="nx">min</span><span class="p">,</span> <span class="nx">max</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">Math</span><span class="p">.</span><span class="na">round</span><span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="na">random</span><span class="p">()</span> <span class="o">*</span> <span class="p">(</span><span class="nx">max</span> <span class="o">-</span> <span class="nx">min</span><span class="p">)</span> <span class="o">+</span> <span class="nx">min</span><span class="p">)</span>

<span class="c1"># Take an array or arcs, and reduce it to one in amount, then save to path</span>
<span class="nx">derive</span> <span class="o">=</span> <span class="p">(</span><span class="nx">amount</span><span class="p">,</span> <span class="nx">arcs</span><span class="p">,</span> <span class="nx">path</span><span class="p">)</span> <span class="o">-&gt;</span>
  <span class="nx">luckyOnes</span> <span class="o">=</span> <span class="nx">arcs</span><span class="p">.</span><span class="na">filter</span> <span class="p">(</span><span class="nx">arc</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nx">random</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nx">amount</span><span class="p">)</span> <span class="o">==</span> <span class="mi">23</span>
  <span class="nx">console</span><span class="p">.</span><span class="na">log</span> <span class="s">"There are </span><span class="si">#{</span><span class="nx">luckyOnes</span><span class="p">.</span><span class="na">length</span><span class="si">}</span><span class="s"> arcs from </span><span class="si">#{</span><span class="nx">arcs</span><span class="p">.</span><span class="na">length</span><span class="si">}</span><span class="s"> in </span><span class="si">#{</span><span class="nx">path</span><span class="si">}</span><span class="s">"</span>
  <span class="nx">fs</span><span class="p">.</span><span class="na">writeFileSync</span> <span class="nx">__dirname</span> <span class="o">+</span> <span class="s">'/'</span> <span class="o">+</span> <span class="nx">path</span><span class="p">,</span> <span class="nx">JSON</span><span class="p">.</span><span class="na">stringify</span> <span class="nx">luckyOnes</span>

<span class="nx">all_arcs</span> <span class="o">=</span> <span class="nx">require</span> <span class="s">'../jsons/every-inquiry-arcs.json'</span>
<span class="nx">derive</span><span class="p">(</span><span class="mi">1500</span><span class="p">,</span> <span class="nx">all_arcs</span><span class="p">,</span> <span class="s">"../jsons/all-inquiries-random-subset.json"</span><span class="p">)</span>
</code></pre></div></div>

<p>This ended up creating a pretty useful representation of the whole data-set, in a way that is actually renderable without killing the browser’s process.</p>

<h2 id="code-cleanup--docs">Code Cleanup + Docs</h2>

<p>I spent most of my time inside <a href="https://github.com/artsy/partner-map">artsy/partner-map</a> but we had another repo with very similar code, <a href="https://github.com/artsy/inquiry-map">partner/inquiry-map</a>. So I took the time to merge the two of them, officially deprecating inquiry-map. Now those maps can be generated by partner-map, and there’s space for more expansion.</p>

<p>Other than that, I took the time to improve the repo and to do this write-up, so that the next person who comes along can have an idea of some of the scripts and how they all fit together.</p>

<h2 id="going-solo">Going solo</h2>

<p>For a project like this, I did no code review, no testing or other staples of engineering culture at Artsy. This is fine for a project of this scope and pace.</p>

<p>However, I think it’s always worth throwing in an extra 2-3 hours at the end of a hack project to write up some of the tricky parts and cleaning up the codebase for the next person. If you don’t write some tests, then writing some docs or do a <a href="http://artsy.github.io/blog/2015/11/05/Emergence-Code-Review/">quick video</a>.</p>

]]></content>
  </entry>
  
</feed>
