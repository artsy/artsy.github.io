<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: rails | Artsy Engineering]]></title>
  <link href="https://artsy.github.io/blog/categories/rails/atom.xml" rel="self"/>
  <link href="https://artsy.github.io/"/>
  <updated>2024-10-30T17:33:51+00:00</updated>
  <id>https://artsy.github.io/</id>
  <author>
    <name><![CDATA[]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Rosalind and The Art Genome Project]]></title>
    <link href="https://artsy.github.io/blog/2019/05/09/rosalind/"/>
    <updated>2019-05-09T00:00:00+00:00</updated>
    <id>https://artsy.github.io/blog/2019/05/09/rosalind</id>
    <content type="html"><![CDATA[<p>We recently bade a fond farewell to two <a href="https://code.dblock.org">of</a> <a href="http://orta.io">the</a> champions of our ‚Äúopen source by default‚Äù ethos, but
this spirit lives on at Artsy.</p>

<p>Today we open-source one of our key metadata apps, and explain how it fits into Artsy‚Äôs ecosystem.</p>

<!-- more -->

<h2 id="open-source-by-default-or-at-least-eventually">Open source by default‚Ä¶ or at least eventually</h2>

<p>Even when we don‚Äôt start a project by building in the open, we encourage ourselves to question why that is so. Can
we go ahead and open things up? If the answer is no (and it might be), are we clear on why not?</p>

<p>We‚Äôve even added a <a href="https://github.com/artsy/peril-settings/pull/96">light bit of process</a> to promote this kind of questioning. Our robots will periodically
trawl our GitHub org and file an issue against any closed-source repo that doesn‚Äôt include a rationale for its
closed nature in the project README.</p>

<figure class="illustration">
  <img alt="Peril issue" src="/images/2019-05-09-rosalind/issue.png" />
  <figcaption>Robot would like to have a word with you</figcaption>
</figure>

<p>One of our repos got this <a href="https://github.com/artsy/rosalind/issues/179">treatment</a> recently. I‚Äôm the point person on this project, and while I considered
adding a rationale of ‚Äú<em>primary author will die of acute impostor syndrome if this repo is open-sourced, he will
just stop living</em> üòÖ,‚Äù instead we‚Äôve gone ahead and made this repo public.</p>

<p>Meet <a href="https://github.com/artsy/rosalind">Rosalind</a>, an admin app for large-batch genoming operations on Artsy‚Äôs database of artworks.</p>

<h2 id="the-art-genome-project-and-the-genome-team">The Art Genome Project, and the Genome Team</h2>

<p>Rosalind is a close cousin of <a href="https://github.com/artsy/helix">Helix</a>, our original dedicated genoming app. (That project is private for
now, but was described by <a href="https://artsy.github.io/author/sarahweir/">Sarah</a> in an an <a href="/blog/2015/04/08/creating-a-dynamic-single-page-app-for-our-genome-team-using-react">earlier blog post</a>.)</p>

<p>What‚Äôs genoming, you ask, and what‚Äôs it got to do with art?</p>

<p>Artsy‚Äôs discovery and recommendation capabilites are powered in large part by <a href="https://www.artsy.net/about/the-art-genome-project">The Art Genome Project</a>,
a comprehensive system of classification that uses our homegrown art-historical controlled vocabulary to describe
the artists and artworks in our database. (Here‚Äôs an <a href="https://www.artsy.net/article/the-art-genome-project-seven-facts-about-the-art-genome-project">explainer</a> and our full list of
<a href="https://www.artsy.net/categories">categories</a>. You can even view a <a href="https://github.com/artsy/the-art-genome-project">structured data export</a> of the ‚Äúgenes‚Äù which make
up our controlled vocabulary.)</p>

<figure class="illustration">
  <img alt="Helix" src="/images/2019-05-09-rosalind/helix.png" />
  <figcaption>Screenshot of Helix, an app for genoming artists and artworks, and an early foray into React</figcaption>
</figure>

<p>For a long time, our team of art historians ‚Äî the Genome Team ‚Äî bore sole responsibility for applying this
vocabulary, using Helix, to the artworks that entered our platform. This was always a daunting task, and only
became more so as our network of partner galleries and institutions continued to grow and upload more artworks.</p>

<p>Artsy is now home to over 1,000,000 artworks by over 100,000 artists, described by over 1,000 genes. A few years
ago, it became clear to us that in order to continue applying high-quality metadata at scale, we were going to need
some new processes and some new tools.</p>

<p>On the process side, we decided to share a simplified genoming interface with our gallery partners, so that they
could start contributing the metadata that would be most relevant to our audience of collectors. We called it
‚ÄúPartner Applied Categories.‚Äù</p>

<figure class="illustration">
  <img alt="Partner applied categories" src="/images/2019-05-09-rosalind/cms-pac.png" />
  <figcaption>Partner Applied Categories interface from Artsy‚Äôs partner CMS, showing choices for works of photography</figcaption>
</figure>

<p>Note that this is a tiny subset of our full genome vocabulary, and that values are applied as on/off, versus the
more nuanced 0-100 score that our own Genome Team would apply.</p>

<p>This was a good step, a fundamental building block in scaling artwork metadata on our platform, but it created new
problems as well as new opportunities.</p>

<p>This is where Rosalind came in.</p>

<h2 id="about-rosalind">About Rosalind</h2>

<p>We started work on this tool in earnest in early 2017, at a time when we felt an internal need for the ability to,
among other things:</p>

<ul>
  <li>
    <p>Perform boolean searches against our database of artworks using The Art Genome Project‚Äôs vocabulary ‚Äì a general
purpose superpower that would be useful for our art historians, our editorial team, and our collector relations
and marketing teams, among others</p>
  </li>
  <li>
    <p>Make large-batch modifications to artworks‚Äô genomes (whether genomed by us, or by our gallery partners via
Partner Applied Categories), in order to maintain metadata quality</p>
  </li>
</ul>

<p>The user experience we built looks something like this:</p>

<figure class="illustration">
  <img alt="Rosalind session" src="/images/2019-05-09-rosalind/rosalind.gif" style="outline: solid 1px #eee" />
  <figcaption>A sample admin interaction in Rosalind</figcaption>
</figure>

<p>Under the hood this is a Rails 5 application that talks to our core API server and our Elasticsearch cluster on the
backend, and serves up a React single page app on the frontend.</p>

<figure class="illustration">
  <img alt="Rosalind architecture" src="/images/2019-05-09-rosalind/architecture.png" />
  <figcaption>Bird‚Äôs eye view of Rosalind‚Äôs architecture</figcaption>
</figure>

<p>Among the tactical goals of this project were to support heavy-duty admin workflows by:</p>

<ul>
  <li>offering a featureful interface tailored to power users</li>
  <li>adding a useful complement of keyboard navigation capabilities</li>
  <li>making it as blazingly fast as possible</li>
</ul>

<p>That last goal led to the somewhat quirky decision to have Rosalind talk to the Elasticsearch cluster directly,
instead of making a search request to our core API server.</p>

<p>While this entails some risk of drift from our accumulated search best practices as encapsulated in our API, in
reality this has not been a problem yet. Rosalind‚Äôs search needs are fairly straightforward and using
Elasticsearch‚Äôs REST API has been working out just fine. And it is fast as heck.</p>

<p>Although the project was mostly built out in early 2017, we‚Äôve periodically revisited it for upkeep and
maintenance. Along the way we‚Äôve ridden some of the larger trends in the React+Rails ecosystem, as well as internal
trends.</p>

<ul>
  <li>
    <p>We started out on <a href="https://github.com/mipearson/webpack-rails">webpack-rails</a>, an early pioneer in nudging Rails away from the Asset Pipeline
provided by Sprockets, and toward Webpack</p>
  </li>
  <li>
    <p>We <a href="https://github.com/artsy/rosalind/pull/157">migrated</a> over to the <a href="https://github.com/rails/webpacker">Webpacker</a> gem once that became a core Rails concern</p>
  </li>
  <li>
    <p>We <a href="https://github.com/artsy/rosalind/pull/158">migrated</a> from RSpec feature specs to <a href="https://guides.rubyonrails.org/testing.html#system-testing">Rails system tests</a>, after that was
rolled out</p>
  </li>
  <li>
    <p>We experimented with adopting <a href="https://github.com/artsy/reaction">Reaction</a>, our shared internal React component library</p>
  </li>
  <li>
    <p>We more recently switched to using <a href="https://github.com/artsy/palette">Palette</a>, our nascent design system library</p>
  </li>
</ul>

<p>After being in maintenance mode for a couple of years, we‚Äôre excited to start up new feature work again, and plan
to bring even more bits of the <a href="https://artsy.github.io/series/omakase">Artsy Omakase</a> into this project. Maybe this project will even be a
good proving ground for <a href="https://github.com/prettier/plugin-ruby">prettier-ruby</a>.</p>

<p>Whatever happens, Rosalind will continue to play an important role in maintaining Artsy‚Äôs high-quality metadata and
in making Artsy the best online destination for art.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Switch from Capybara Webkit to Chrome]]></title>
    <link href="https://artsy.github.io/blog/2018/11/27/switch-from-capybara-webkit-to-chrome/"/>
    <updated>2018-11-27T00:00:00+00:00</updated>
    <id>https://artsy.github.io/blog/2018/11/27/switch-from-capybara-webkit-to-chrome</id>
    <content type="html"><![CDATA[<p>Volt is the internal app name of Artsy CMS, and our partners use it to manage their inventory and presence on artsy.net. It‚Äôs a Rails-based UI app that talks to many API services. We use <a href="https://github.com/rspec/rspec">RSpec</a> extensively to cover controller, model, view, and feature specs. As of Jun. 2018, Volt had 3751 specs and 495 of them were run with JavaScript enabled. It took about 16 mins to run on CircleCI with 6x parallelism.</p>

<p>Capybara-webkit was introduced from the very beginning of Volt for testing JavaScript-enabled specs via headless WebKit browser. It‚Äôs been providing a lot of confidence for the past 4+ years; however, a few reasons/growing concerns have encouraged us to look for (more modern) alternatives:</p>

<!-- more -->

<h2 id="the-problem">The Problem</h2>

<ul>
  <li>The <a href="https://github.com/thoughtbot/capybara-webkit/tree/v1.14.0#qt-dependency-and-installation-issues">dependency of a specific versions of Qt</a> has been causing frustrations to set it up properly both on engineers‚Äô local machines and on CI.</li>
  <li>The roadmap of capybara-webkit development is <a href="https://github.com/thoughtbot/capybara-webkit/issues/885#issuecomment-193988527">unclear</a>.</li>
  <li>It‚Äôs been hard to truly identify the root cause of ‚Äúflickering‚Äù feature specs (i.e. tests that fail intermittently and are hard to reliably reproduce), while retrying tended to resolve it on CI.</li>
  <li>The entire RSpec tests took about 16 mins to complete on CI, with 6 parallelism. The slowness made it unrealistic to run the whole tests locally.</li>
</ul>

<h2 id="the-goal">The Goal</h2>

<p>Headless Chrome has gained a lot of attention in the past few years and migrations done by companies such as <a href="https://about.gitlab.com/2017/12/19/moving-to-headless-chrome/">GitLab</a> and <a href="https://robots.thoughtbot.com/headless-feature-specs-with-chrome">thoughtbot</a> have proven it to be a promising alternative to capybara-webkit. In fact, it‚Äôs been <a href="http://guides.rubyonrails.org/5_1_release_notes.html#system-tests">officially included in Rails 5.1</a> for <a href="https://guides.rubyonrails.org/testing.html#system-testing">system tests</a>.</p>

<p>The goal of this project is to switch to Headless Chrome and maintain the same feature sets we have now. This includes:</p>

<ul>
  <li>Making all existing specs pass</li>
  <li>Running in container environments and using Artsy <a href="https://github.com/artsy/hokusai">Hokusai</a></li>
  <li>Supporting mechanisms to debug specs, e.g. examining browser console logs for JavaScript behavior, taking screenshots on demand and automatically on failure, etc.</li>
  <li>Bonus point to improve the stability of feature specs</li>
  <li>Bonus point to improve the speed of running the entire test suite</li>
</ul>

<h2 id="the-how">The How</h2>

<p>First, we replaced <code class="language-plaintext highlighter-rouge">capybara-webkit</code> with <code class="language-plaintext highlighter-rouge">selenium-webdriver</code> and <code class="language-plaintext highlighter-rouge">chromedriver-helper</code>:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">gem</span> <span class="s1">'selenium-webdriver'</span>
<span class="n">gem</span> <span class="s1">'chromedriver-helper'</span>
</code></pre></div></div>

<p><a href="https://github.com/flavorjones/chromedriver-helper"><code class="language-plaintext highlighter-rouge">chromedriver-helper</code></a> was useful to help install <a href="https://sites.google.com/a/chromium.org/chromedriver/">chromedriver</a> in different environments, e.g. an engineer‚Äôs local machine, CI, etc.</p>

<p>Second, we registered both <code class="language-plaintext highlighter-rouge">:chrome</code> and <code class="language-plaintext highlighter-rouge">:headleass_chrome</code> drivers. By default, it used Headless Chrome as the JavaScript driver, and we could easily switch to Chrome and observe the actual interaction happening in a real browser.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">Capybara</span><span class="p">.</span><span class="nf">register_driver</span> <span class="ss">:chrome</span> <span class="k">do</span> <span class="o">|</span><span class="n">app</span><span class="o">|</span>
  <span class="no">Capybara</span><span class="o">::</span><span class="no">Selenium</span><span class="o">::</span><span class="no">Driver</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="n">app</span><span class="p">,</span> <span class="ss">browser: :chrome</span><span class="p">)</span>
<span class="k">end</span>

<span class="no">Capybara</span><span class="p">.</span><span class="nf">register_driver</span> <span class="ss">:headless_chrome</span> <span class="k">do</span> <span class="o">|</span><span class="n">app</span><span class="o">|</span>
  <span class="n">caps</span> <span class="o">=</span> <span class="no">Selenium</span><span class="o">::</span><span class="no">WebDriver</span><span class="o">::</span><span class="no">Remote</span><span class="o">::</span><span class="no">Capabilities</span><span class="p">.</span><span class="nf">chrome</span><span class="p">(</span><span class="ss">loggingPrefs: </span><span class="p">{</span> <span class="ss">browser: </span><span class="s1">'ALL'</span> <span class="p">})</span>
  <span class="n">opts</span> <span class="o">=</span> <span class="no">Selenium</span><span class="o">::</span><span class="no">WebDriver</span><span class="o">::</span><span class="no">Chrome</span><span class="o">::</span><span class="no">Options</span><span class="p">.</span><span class="nf">new</span>

  <span class="n">chrome_args</span> <span class="o">=</span> <span class="sx">%w[--headless --window-size=1920,1080 --no-sandbox --disable-dev-shm-usage]</span>
  <span class="n">chrome_args</span><span class="p">.</span><span class="nf">each</span> <span class="p">{</span> <span class="o">|</span><span class="n">arg</span><span class="o">|</span> <span class="n">opts</span><span class="p">.</span><span class="nf">add_argument</span><span class="p">(</span><span class="n">arg</span><span class="p">)</span> <span class="p">}</span>
  <span class="no">Capybara</span><span class="o">::</span><span class="no">Selenium</span><span class="o">::</span><span class="no">Driver</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="n">app</span><span class="p">,</span> <span class="ss">browser: :chrome</span><span class="p">,</span> <span class="ss">options: </span><span class="n">opts</span><span class="p">,</span> <span class="ss">desired_capabilities: </span><span class="n">caps</span><span class="p">)</span>
<span class="k">end</span>

<span class="no">Capybara</span><span class="p">.</span><span class="nf">configure</span> <span class="k">do</span> <span class="o">|</span><span class="n">config</span><span class="o">|</span>
  <span class="c1"># change this to :chrome to observe tests in a real browser</span>
  <span class="n">config</span><span class="p">.</span><span class="nf">javascript_driver</span> <span class="o">=</span> <span class="ss">:headless_chrome</span>
<span class="k">end</span>
</code></pre></div></div>

<p>We were on Rails v5.0.2 and Capybara v2.18.0 during the migration. We will be able to simplify the configuration by using the default <code class="language-plaintext highlighter-rouge">:selenium_chrome</code> and <code class="language-plaintext highlighter-rouge">:selenium_chrome_headless</code> drivers introduced in <a href="https://github.com/teamcapybara/capybara/blob/3.11.1/lib/capybara.rb#L535-L545">Capybara v3.11.1</a>. In addition, Rails v5.1 introduced the new system tests, and it‚Äôll be even simpler by using the <a href="https://api.rubyonrails.org/v5.1.3/classes/ActionDispatch/SystemTestCase.html#method-c-driven_by"><code class="language-plaintext highlighter-rouge">driven_by</code></a> method.</p>

<h2 id="lessons-learned">Lessons Learned</h2>

<p>Naively switching to Headless Chrome caused about 60 spec failures on my local machine. We simply went through them one by one and fixed them. A big part of failures was due to <a href="https://github.com/thoughtbot/capybara-webkit/tree/v1.14.0#non-standard-driver-methods">capybara-webkit‚Äôs non-standard driver methods</a>, such as setting cookies, inspecting console logs, etc., and we just had to migrate to Selenium WebDriver‚Äôs equivalents.</p>

<p>However, we still observed flickering specs on CI, while the exact failures seemed to be different than previously observed with Capybara Webkit. We will have to investigate further for possible causes. Regarding speed, we didn‚Äôt see significant improvement after switching to Headless Chrome, as mentioned in GitLab‚Äôs and others‚Äô blog post, too.</p>

<h2 id="next-steps">Next Steps</h2>

<p>The naive migration to Chrome (and removal of the Qt dependency) already improved the developer experience quite a lot (e.g. no more wrestling with installing Capybara Webkit and Qt 5.5 on every engineer‚Äôs local machine <em>and</em> CI.) There are many next steps we can keep experimenting with and improving our tests, for example</p>

<ul>
  <li>Updating Volt to Rails &gt;= 5.1 and switching to system tests</li>
  <li>Investigating the causes of the flickering specs by looking into intermittent failures reported on CI</li>
  <li>Improving speed by using Docker <a href="https://docs.docker.com/develop/develop-images/multistage-build/">multi-stage builds</a>, caching, writing the right type and amount of tests, etc.</li>
</ul>

<p>It‚Äôs a long journey, and we were all excited about the migration and the new future. We‚Äôd love to hear your experience, too!</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How hard could it be to create an email?]]></title>
    <link href="https://artsy.github.io/blog/2018/11/19/mjml/"/>
    <updated>2018-11-19T00:00:00+00:00</updated>
    <id>https://artsy.github.io/blog/2018/11/19/mjml</id>
    <content type="html"><![CDATA[<!-- OUTLINE -->

<p>Let‚Äôs talk about email HTML.</p>

<p>If you‚Äôve never worked on emails before, you might think the process works something like this:</p>

<ol>
  <li>Write some HTML, but maybe with a few more tables than you usually use since emails like those.</li>
  <li>Render it in your browser. Nice! Looking great.</li>
  <li>Send yourself a quick test. Just like in your browser! Sweet!</li>
  <li>Send that PR and move on to the next thing.</li>
</ol>

<p><img src="/images/2018-11-19-mjml/example.png" alt="/images/2018-11-19-mjml/example.png" /></p>

<p>In reality, it‚Äôs more like this:</p>

<ol>
  <li>Write some HTML with more tables than you think could possibly be necessary. There‚Äôs no way it‚Äôll break with all
these tables, right?</li>
  <li>Render it in the browser. Cool, looks fine.</li>
  <li>Send yourself a test, and send one to a service like <a href="https://www.litmus.com">Litmus</a> or
<a href="https://www.emailonacid.com">Email on Acid</a> that renders the email in dozens of clients</li>
  <li>Looking good in Gmail‚Ä¶good in Apple mail‚Ä¶wait why is it completely broken in Outlook 2007 (and 2010, 2013,
and 2019)? And Yahoo Mail on Internet Explorer? Shoot.</li>
  <li>Better add some more tables. That‚Äôs usually the solution.</li>
  <li>Well‚Ä¶that didn‚Äôt work. Find a post from 2009 in a forum for Netscape enthusiasts that implies you might want
to add an extra Outlook-only table using <code class="language-plaintext highlighter-rouge">&lt;!--[if mso | IE]&gt;</code> with
<code class="language-plaintext highlighter-rouge">role="presentation" and cellpadding="0" cellspacing="0"</code>. Maybe that‚Äôll work.</li>
  <li>Outlook 2007 is fixed! Nice! Oh‚Ä¶but now it looks broken on iPhones. Back to the drawing board.</li>
</ol>

<p><img src="/images/2018-11-19-mjml/outlook-2019-broken.png" alt="/images/2018-11-19-mjml/outlook-2019-broken.png" /></p>

<!-- more -->

<p>And after a few hours, you‚Äôve probably squished most bugs on most clients and are ready to ship it, but also ready
to tear your hair out. Creating emails that render gracefully in clients that were built 15 years ago and in
clients that were built this year isn‚Äôt easily done. That‚Äôs where MJML comes in.</p>

<h2 id="what-is-mjml">What is MJML?</h2>

<p><a href="https://mjml.io">MJML</a>, short for Mailjet Markup Language, is a markup language that is written like simplified
HTML/CSS and renders email-friendly, responsive HTML. So instead of having to code a few thousand lines of complex
HTML, you code a couple hundred lines of MJML, and it outputs code that looks good on <em>every single client</em>.</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;mjml&gt;</span>
  <span class="nt">&lt;mj-head&gt;</span>
    <span class="c">&lt;!-- global styles --&gt;</span>
    <span class="nt">&lt;mj-attributes&gt;</span>
      <span class="nt">&lt;mj-text</span>
        <span class="na">font-family=</span><span class="s">"HelveticaNeue, Helvetica, Arial, sans-serif"</span>
        <span class="na">font-size=</span><span class="s">"14px"</span>
        <span class="na">line-height=</span><span class="s">"21px"</span>
        <span class="na">padding=</span><span class="s">"0"</span>
      <span class="nt">/&gt;</span>
      <span class="nt">&lt;mj-section</span> <span class="na">padding=</span><span class="s">"0"</span> <span class="nt">/&gt;</span>
    <span class="nt">&lt;/mj-attributes&gt;</span>
  <span class="nt">&lt;/mj-head&gt;</span>
  <span class="nt">&lt;mj-body</span> <span class="na">width=</span><span class="s">"450px"</span> <span class="na">background-color=</span><span class="s">"#fff"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;mj-section</span> <span class="na">padding=</span><span class="s">"20px"</span> <span class="na">border=</span><span class="s">"1px solid #e5e5e5"</span> <span class="na">border-bottom=</span><span class="s">"0"</span><span class="nt">&gt;</span>
      <span class="nt">&lt;mj-group&gt;</span>
        <span class="nt">&lt;mj-column</span> <span class="na">vertical-align=</span><span class="s">"middle"</span> <span class="na">width=</span><span class="s">"19%"</span><span class="nt">&gt;</span>
          <span class="nt">&lt;mj-image</span> <span class="na">width=</span><span class="s">"66px"</span> <span class="na">align=</span><span class="s">"left"</span> <span class="na">padding=</span><span class="s">"0"</span> <span class="na">src=</span><span class="s">"jared-french-prose.png"</span> <span class="nt">/&gt;</span>
        <span class="nt">&lt;/mj-column&gt;</span>
        <span class="nt">&lt;mj-column</span> <span class="na">padding-left=</span><span class="s">"20px"</span> <span class="na">vertical-align=</span><span class="s">"middle"</span> <span class="na">width=</span><span class="s">"81%"</span><span class="nt">&gt;</span>
          <span class="nt">&lt;mj-text&gt;</span>Order #B135790<span class="nt">&lt;/mj-text&gt;</span>
          <span class="nt">&lt;mj-text&gt;</span>Jared French<span class="nt">&lt;/mj-text&gt;</span>
          <span class="nt">&lt;mj-text&gt;</span>Prose, ca. 1948<span class="nt">&lt;/mj-text&gt;</span>
        <span class="nt">&lt;/mj-column&gt;</span>
      <span class="nt">&lt;/mj-group&gt;</span>
    <span class="nt">&lt;/mj-section&gt;</span>
  <span class="nt">&lt;/mj-body&gt;</span>
<span class="nt">&lt;/mjml&gt;</span>
</code></pre></div></div>

<p>Looking good in Outlook 2007:
<img src="/images/2018-11-19-mjml/outlook-2007-fixed.png" alt="/images/2018-11-19-mjml/outlook-2007-fixed.png" /></p>

<p>It feels pretty magical.</p>

<p>When the marketing team was getting ready to revamp our user-facing emails in summer 2017, we found MJML and
thought, ‚Äúhey, this could make life a lot simpler in the long run.‚Äù It took some time to get comfortable with it,
but maybe not as much as you‚Äôd think due to its similarities with HTML.</p>

<p>It can be tricky figuring out how to accomplish something really, really specific in MJML. Our design team sent
over templates with pretty specific needs‚Äîmobile vs. desktop padding, for example, and it took us a while to learn
how to make those types of tricky changes (though still less time than it would have taken in raw HTML, I‚Äôm sure).</p>

<h2 id="limitations">Limitations</h2>

<p>Of course, MJML is still limited by the boundaries of email clients. It can‚Äôt make gifs render in old versions of
Outlook, or fix the way Lotus Notes ignores stated image widths in favor of actual widths. We‚Äôve run into issues
with background images that MJML couldn‚Äôt completely alleviate on all clients (they‚Äôre pretty poorly supported),
and because lots of mobile clients don‚Äôt support media queries, we‚Äôve had to develop in a way that makes sure our
desktop layouts and sizes will look good on small screens.</p>

<p>And it‚Äôs worth noting that the HTML file output by MJML is going to be large. On our biggest emails, the ones
featuring articles, artists, artworks, events, ads, and more, we‚Äôve had to deal with clipping by minifying our
output (which comes with its own share of difficulties, since again, things that work fine when minifying for web
will break email clients). If you‚Äôre curious, we use the <a href="http://kangax.github.io/html-minifier/">Kangax Minifier</a>
with <a href="/images/2018-11-19-mjml/kangax-settings.png">these particular settings</a>.</p>

<p>One thing that‚Äôs helped tremendously with these issues is MJML‚Äôs great
<a href="https://slacking-inviter.herokuapp.com/">Slack community</a>. Both the devs of MJML and several avid users (including
both of us) are good about answering questions from new and seasoned users alike.</p>

<h2 id="bringing-mjml-to-engineering">Bringing MJML to Engineering</h2>

<p>Part of what the email marketing team appreciated about MJML is that it could be written by someone who just knew
HTML and CSS‚Äîyou don‚Äôt have to be an experienced programmer to make it work. The engineering team wasn‚Äôt much
involved with the development of the Marketing team‚Äôs emails in MJML, but when they began working on new
transactional emails for <a href="https://www.artsy.net/collect?acquireable=true">Buy Now</a> inventory, Erik (on Engineering)
and Matt (on Marketing) sat down together to see if it could be a good fit for them as well.</p>

<p>Artsy‚Äôs transactional emails cover everything from internal reporting to messaging for gallery partners, art
collectors and auction bidders. As these emails have evolved and become more complex, our approaches to balancing
beauty with stability have pushed the limits of reasonable human effort. Similar to how frontend frameworks like
<a href="https://getbootstrap.com/">Bootstrap</a> added a level of comfortable abstraction to stylesheets, or the way your
React.js <code class="language-plaintext highlighter-rouge">&lt;Button /&gt;</code> component became so much more than a plain old <code class="language-plaintext highlighter-rouge">&lt;button /&gt;</code>, MJML‚Äôs xml ‚Äòcomponents‚Äô abstract
the messy bits away.</p>

<h2 id="state-of-the-email-union">State of the (Email) Union</h2>

<p>Today, we‚Äôre using MJML for all of our B2C emails, a few of our B2B emails, and our new transactional emails (all
three are generated by different mail services, so it takes some time to bring them all up to date). We‚Äôve found
that we‚Äôre able to iterate on designs much faster, and our emails look better in more clients than they ever have
before.</p>

<p>What else have we learned during this process? MJML takes a bit of time to master, especially the idea of
<code class="language-plaintext highlighter-rouge">&lt;mj-head&gt;</code> as a kind of global stylesheet and the <code class="language-plaintext highlighter-rouge">body --&gt; section --&gt; column</code> flow. Once we got comfortable with
conventions like this, though, life before MJML became hard to imagine. It has offered Artsy the chance to raise
the level of accessibility of design <em>and</em> speed of development in this niche area, a major win for the engineering
team and cross-team collaboration as a whole.</p>

<p>For more information or to get started using MJML, <a href="https://mjml.io">check out their website</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Apogee Technical Retrospective]]></title>
    <link href="https://artsy.github.io/blog/2018/02/06/apogee-technical-retrospective/"/>
    <updated>2018-02-06T00:00:00+00:00</updated>
    <id>https://artsy.github.io/blog/2018/02/06/apogee-technical-retrospective</id>
    <content type="html"><![CDATA[<p>We‚Äôve previously covered <a href="/blog/2018/02/02/artsy-apogee/">what Apogee is</a> and <a href="/blog/2018/01/24/kubernetes-and-hokusai/">how it‚Äôs deployed</a>, so all that‚Äôs left to cover is the technology used to build it. As a refresher: Apogee is a Google Sheets Add-on we built to help our Auctions Ops team transform the data given to us by our partners into a format that our CMS can understand. This process, done manually up until now, takes a long time and is a perfect candidate for automation.</p>

<p>Apogee had some really interesting technical challenges that I enjoyed solving, and I‚Äôm excited to share some lessons I learned. So let‚Äôs dive in!</p>

<!-- more -->

<p>We built a prototype as a ‚Äúpure‚Äù Add-on, written only inside Google‚Äôs sandbox, but that approach wouldn‚Äôt work for us in production: the Add-on environment was just too difficult to work with. Google expects you to write Add-ons in their in-browser <a href="http://script.google.com">Script Editor</a> and ‚Äì while whether or not that editor is <em>good</em> is a matter of preference ‚Äì the environment isn‚Äôt suited for collaborating or unit testing. Additionally, we could not get Add-on deploys automated, so we‚Äôd like to minimize how often we <em>have</em> to deploy.</p>

<p>So we split things up. Instead of building all Apogee‚Äôs logic into an Add-on, we decided to build two pieces: a very thin Add-on and a Rails server with all the real logic.</p>

<p>(Because Apogee necessarily includes information about how our partners format their data, we decided not to open source it. Data formats are <em>probably</em> not sensitive, but that‚Äôs a judgement best left up to our partners.)</p>

<h2 id="apogee-add-on">Apogee Add-on</h2>

<p>The Add-on we built is very simple, by design. Our goal was to make an Add-on that was flexible enough such that we would need to deploy it less frequently than adding new parsers.</p>

<p>Add-on responsibilities include:</p>

<ul>
  <li>fetching the available parsers from the server.</li>
  <li>setting up an Add-on user interface (a menu of partners, each with available parsers).</li>
  <li>responding to invocations from that interface.</li>
</ul>

<p>Based on the parser selected by the user, Apogee gathers the required data from the current spreadsheet, sends it to the server for processing, and appends the results to the sheet. Pretty straightforward, you‚Äôd think.</p>

<p>Unfortunately, Google Add-ons are a bit‚Ä¶ strange. The Add-on itself is executed in Google‚Äôs datacentres (not the user‚Äôs browser) and is written in <a href="https://developers.google.com/apps-script/guides/services/#basic_javascript_features">JavaScript 1.6-ish</a>. Specifically, it runs with JavaScript 1.6, plus some features from 1.7, plus some other features from 1.8, and also <a href="https://developers.google.com/apps-script/guides/services/advanced">‚ÄúGoogle Advanced Services‚Äù</a>. The execution environment also lacks an event loop, which makes sense from Google‚Äôs perspective (their servers need to know if a script execution has completed) but is still a bit unusual.</p>

<p>Rather than deal with a weird version of JavaScript, we decided to write the Add-on in <a href="https://www.typescriptlang.org">TypeScript</a> and compile down to something Google can execute. We also found <a href="https://www.npmjs.com/package/@types/google-apps-script">open source typings</a> for the Google APIs, which helped a lot. Google also provides access to certain allowlisted libraries, including <a href="https://lodash.com">Lodash</a>, which is handy.</p>

<p>Add-ons also have a somewhat complex permissions and authentication model. The <a href="https://developers.google.com/apps-script/add-ons/lifecycle">documentation</a> provided is a great illustration of why <em>complete</em> documentation is not necessarily <em>effective</em> documentation. If you already understand what you‚Äôre doing, the docs are a good reference, but I found them difficult to learn from. I really like <a href="https://twitter.com/kosamari/status/852319140060823553">this explanation</a> of how to structure documentation like unit tests.</p>

<p>Permissions vary wildly depending on the execution context. For example, the <code class="language-plaintext highlighter-rouge">onOpen</code> callback is able to make network requests when the script is run as an attachment to a spreadsheet, but not when deployed. This makes it difficult to populate our menu UI, which is based off an API response. I learned to not have confidence everything was working until I saw it work end-to-end.</p>

<p>One other peculiarity of Google‚Äôs API is how UI callbacks work. You could create a menu for your Add-on with the following code:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">SpreadsheetApp</span><span class="p">.</span><span class="nx">getUi</span><span class="p">()</span>
  <span class="p">.</span><span class="nx">createAddonMenu</span><span class="p">()</span>
  <span class="p">.</span><span class="nx">addItem</span><span class="p">(</span><span class="dl">'</span><span class="s1">Do something</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">doSomething</span><span class="dl">'</span><span class="p">)</span>
  <span class="p">.</span><span class="nx">addToUi</span><span class="p">()</span>
  
<span class="kd">function</span> <span class="nx">doSomething</span><span class="p">()</span> <span class="p">{</span>
<span class="p">}</span>
</code></pre></div></div>

<p>You‚Äôll notice that the callback function is specified by a <em>string</em> representing a function name (and not as a function itself, which would be more idiomatic). So, for every menu item, there must exist a corresponding function in the global scope with a corresponding name. Sadly, no parameters are passed to these callbacks, so it‚Äôs impossible for a function to determine which menu item it was invoked by. Therefore, every menu item <em>must</em> have exactly <em>one</em> corresponding function. That presents a problem for an Add-on with a dynamic menu.</p>

<p>The Add-on isn‚Äôt executed in a browser; we‚Äôre running on Google‚Äôs datacentres so let‚Äôs just brute-force this. Our menu is a list of partner names, which is itself a submenu of parsers specific to that partner. That means that each menu item (and corresponding callback) can be indexed by two integers: a partner index and a operation index. So now we have a way to map from our user interface to a specific operation to perform inside <em>one</em> common menu handler.</p>

<p>Let‚Äôs take a look at the actual code.</p>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kr">interface</span> <span class="nx">Operation</span> <span class="p">{</span>
  <span class="nl">name</span><span class="p">:</span> <span class="kr">string</span>
  <span class="nx">columns</span><span class="p">:</span> <span class="kr">string</span><span class="p">[]</span>
  <span class="nx">token</span><span class="p">:</span> <span class="kr">string</span>
<span class="p">}</span>

<span class="kr">interface</span> <span class="nx">Partner</span> <span class="p">{</span>
  <span class="nl">name</span><span class="p">:</span> <span class="kr">string</span>
  <span class="nx">operations</span><span class="p">:</span> <span class="nx">Operation</span><span class="p">[]</span>
<span class="p">}</span>

<span class="c1">// Sets up the Add-on menu and submenus.</span>
<span class="kd">function</span> <span class="nx">setupAddon</span><span class="p">(</span><span class="nx">ui</span><span class="p">:</span> <span class="nx">Partner</span><span class="p">[])</span> <span class="p">{</span>
  <span class="c1">// Reduce the ui to a list of submenus.</span>
  <span class="kd">const</span> <span class="nx">addOnMenu</span> <span class="o">=</span> <span class="nx">ui</span><span class="p">.</span><span class="nx">reduce</span><span class="p">((</span><span class="nx">menu</span><span class="p">,</span> <span class="nx">partner</span><span class="p">,</span> <span class="nx">partnerIndex</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="c1">// Reduce the operations list to a list of menu items.</span>
    <span class="k">return</span> <span class="nx">menu</span><span class="p">.</span><span class="nx">addSubMenu</span><span class="p">(</span><span class="nx">partner</span><span class="p">.</span><span class="nx">operations</span><span class="p">.</span><span class="nx">reduce</span><span class="p">((</span><span class="nx">memo</span><span class="p">,</span> <span class="nx">operation</span><span class="p">,</span> <span class="nx">operationIndex</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="k">return</span> <span class="nx">memo</span><span class="p">.</span><span class="nx">addItem</span><span class="p">(</span><span class="nx">operation</span><span class="p">.</span><span class="nx">name</span><span class="p">,</span> <span class="s2">`partner</span><span class="p">${</span><span class="nx">partnerIndex</span><span class="p">}</span><span class="s2">Operation</span><span class="p">${</span><span class="nx">operationIndex</span><span class="p">}</span><span class="s2">`</span><span class="p">)</span>
    <span class="p">},</span> <span class="nx">SpreadsheetApp</span><span class="p">.</span><span class="nx">getUi</span><span class="p">().</span><span class="nx">createMenu</span><span class="p">(</span><span class="nx">partner</span><span class="p">.</span><span class="nx">name</span><span class="p">)))</span>
  <span class="p">},</span> <span class="nx">SpreadsheetApp</span><span class="p">.</span><span class="nx">getUi</span><span class="p">().</span><span class="nx">createAddonMenu</span><span class="p">())</span>
  <span class="c1">// Add the generated menu to the Add-on UI.</span>
  <span class="nx">addOnMenu</span><span class="p">.</span><span class="nx">addToUi</span><span class="p">()</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Each menu has a callback function named something like <code class="language-plaintext highlighter-rouge">partnerXOperationY</code>. Then we just generated a few thousand functions that match that format and call a shared handler <em>with</em> <code class="language-plaintext highlighter-rouge">X</code> and <code class="language-plaintext highlighter-rouge">Y</code> as parameters. The generated code looks like this:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">partner0Operation0</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">sharedHandler</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
<span class="p">}</span>
<span class="kd">function</span> <span class="nx">partner0Operation1</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">sharedHandler</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
<span class="p">}</span>
<span class="kd">function</span> <span class="nx">partner0Operation2</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">sharedHandler</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">2</span><span class="p">);</span>
<span class="p">}</span>

<span class="kd">function</span> <span class="nx">sharedHandler</span><span class="p">(</span><span class="nx">partnerIndex</span><span class="p">,</span> <span class="nx">operationIndex</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// TODO: Look up the appropriate parser to use.</span>
<span class="p">}</span>
</code></pre></div></div>

<p>It‚Äôs not elegant, but it works. Actually, I think it does have a certain elegance, given the constraints it has to operate within.</p>

<p>So that‚Äôs it! The rest of the challenges were just weird permissions issues or config problems, but the Add-on was pretty easy to build. The file generated by the TypeScript compiler is only 166 lines long, and the file with all our menu callbacks is ‚Äúonly‚Äù 8000 lines long. Next, let‚Äôs talk about the server.</p>

<h2 id="apogee-server">Apogee Server</h2>

<p>So, Rails‚Äô philosophy is ‚Äú<a href="https://en.wikipedia.org/wiki/Convention_over_configuration">convention over configuration</a>‚Äù, which is pretty great as long as you know the conventions. I‚Äôd never run <code class="language-plaintext highlighter-rouge">rails new</code> before. Also, that philosophy works best when you‚Äôre building <em>conventional</em> apps. Because Apogee is a bit unconventional, I was going to write Apogee in Sinatra before my colleague suggested I use Rails in <a href="http://guides.rubyonrails.org/api_app.html">API-only mode</a> instead. It seemed a bit overkill, but I also didn‚Äôt want to pass up the chance to finally learn Rails.</p>

<p>The server has two endpoints:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">/ui</code> provides a list of partners and their respective parsers.</li>
  <li><code class="language-plaintext highlighter-rouge">/columns</code> accepts spreadsheet columns and returns processed data (cell contents and a background colour to indicate our confidence in parsed results).</li>
</ul>

<p>We needed a way for the server to specify all its operations in a way that they could be invoked through the second endpoint. We decided to use a token-based approach: each parser has a token that can be used to invoke the parser later on. This dovetails with how I structured the parsers, too.</p>

<p>Each partner is defined by a submodule within the <code class="language-plaintext highlighter-rouge">Apogee::Parser</code> module, and each parser is defined by a class within that partner module. Let‚Äôs take a look at some code.</p>

<div class="language-rb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">module</span> <span class="nn">Apogee</span>
  <span class="k">module</span> <span class="nn">Parser</span>
    <span class="k">module</span> <span class="nn">Skinner</span>
      <span class="kp">extend</span> <span class="no">Apogee</span><span class="o">::</span><span class="no">BaseParser</span>
      
      <span class="k">class</span> <span class="nc">DimensionsParser</span>
        <span class="c1"># Name to show in Add-on UI.</span>
        <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">menu_name</span>
          <span class="s2">"Parse dimensions from Description column"</span>
        <span class="k">end</span>

        <span class="c1"># Columns required by the `/columns` endpoint.</span>
        <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">column_names</span>
          <span class="sx">%w[Description]</span>
        <span class="k">end</span>
        
        <span class="c1"># Parse the columns, called from the `/columns` endpoint.</span>
        <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">parse</span><span class="p">(</span><span class="n">columns</span><span class="p">)</span>
          <span class="c1"># TODO: parse the columns.</span>
        <span class="k">end</span>
      <span class="k">end</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>Each class within a partner is expected to have those three class methods.</p>

<p>So now that we have a defined structure for our parsers, we can use Ruby reflection to collect a list of partner modules:</p>

<div class="language-rb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">Parser</span><span class="p">.</span><span class="nf">constants</span>
  <span class="p">.</span><span class="nf">select</span> <span class="p">{</span> <span class="o">|</span><span class="n">c</span><span class="o">|</span> <span class="no">Parser</span><span class="p">.</span><span class="nf">const_get</span><span class="p">(</span><span class="n">c</span><span class="p">).</span><span class="nf">is_a?</span> <span class="no">Module</span> <span class="p">}</span>
  <span class="p">.</span><span class="nf">map</span> <span class="k">do</span> <span class="o">|</span><span class="n">c</span><span class="o">|</span>
    <span class="p">{</span>
      <span class="ss">name: </span><span class="n">c</span><span class="p">,</span>
      <span class="ss">operations: </span><span class="no">Parser</span><span class="p">.</span><span class="nf">const_get</span><span class="p">(</span><span class="n">c</span><span class="p">).</span><span class="nf">public_parsers</span>
    <span class="p">}</span>
<span class="k">end</span>
</code></pre></div></div>

<p>Each module also has a <code class="language-plaintext highlighter-rouge">public_parsers</code> function (inherited from <code class="language-plaintext highlighter-rouge">Apogee::BaseParser</code>) which also uses reflection:</p>

<div class="language-rb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">public_parsers</span>
  <span class="nb">constants</span>
    <span class="p">.</span><span class="nf">select</span> <span class="p">{</span> <span class="o">|</span><span class="n">c</span><span class="o">|</span> <span class="nb">const_get</span><span class="p">(</span><span class="n">c</span><span class="p">).</span><span class="nf">is_a?</span> <span class="no">Class</span> <span class="p">}</span>
    <span class="p">.</span><span class="nf">map</span> <span class="p">{</span> <span class="o">|</span><span class="n">c</span><span class="o">|</span> <span class="nb">const_get</span><span class="p">(</span><span class="n">c</span><span class="p">)</span> <span class="p">}</span>
    <span class="p">.</span><span class="nf">map</span> <span class="k">do</span> <span class="o">|</span><span class="n">klass</span><span class="o">|</span>
      <span class="p">{</span>
        <span class="ss">klass: </span><span class="n">klass</span><span class="p">.</span><span class="nf">to_s</span><span class="p">,</span>
        <span class="ss">name: </span><span class="n">klass</span><span class="p">.</span><span class="nf">menu_name</span><span class="p">,</span>
        <span class="ss">columns: </span><span class="n">klass</span><span class="p">.</span><span class="nf">column_names</span><span class="p">,</span>
        <span class="ss">token: </span><span class="no">Digest</span><span class="o">::</span><span class="no">SHA256</span><span class="p">.</span><span class="nf">base64digest</span><span class="p">(</span><span class="n">klass</span><span class="p">.</span><span class="nf">to_s</span><span class="p">)</span>
      <span class="p">}</span>
    <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>This code collects all the Ruby classes inside a module into a data structure that can be consumed by the Apogee Add-on through the <code class="language-plaintext highlighter-rouge">/ui</code> endpoint. As a bonus, the tokens are generated from the SHA256 hash of the fully-qualified parser class names. And we also avoid having to maintain a separate list of parsers that I would inevitably forget to update. Win-win.</p>

<p>All that‚Äôs left to do is to lookup a parser class from a token. This is as easy as finding the class with the matching token and calling its <code class="language-plaintext highlighter-rouge">parse</code> function.</p>

<div class="language-rb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">parser</span> <span class="o">=</span> <span class="n">partners</span>
  <span class="p">.</span><span class="nf">map</span> <span class="p">{</span> <span class="o">|</span><span class="nb">p</span><span class="o">|</span> <span class="nb">p</span><span class="p">[</span><span class="ss">:operations</span><span class="p">]</span> <span class="p">}</span>
  <span class="p">.</span><span class="nf">flatten</span>
  <span class="p">.</span><span class="nf">find</span> <span class="p">{</span> <span class="o">|</span><span class="n">op</span><span class="o">|</span> <span class="n">op</span><span class="p">[</span><span class="ss">:token</span><span class="p">]</span> <span class="o">==</span> <span class="n">token</span> <span class="p">}</span>
<span class="no">Object</span><span class="p">.</span><span class="nf">const_get</span><span class="p">(</span><span class="n">parser</span><span class="p">[</span><span class="ss">:klass</span><span class="p">]).</span><span class="nf">parse</span><span class="p">(</span><span class="n">columns</span><span class="p">)</span>
</code></pre></div></div>

<p>Neat!</p>

<p>This approach is <em>good</em>, but strikes me as overly object-oriented. <em>Most</em> of the parsers we‚Äôre going to write are going to do the same thing: they have the same three methods and the <code class="language-plaintext highlighter-rouge">parse</code> method is basically just matching each spreadsheet cell against a regular expression. We can make a better abstraction.</p>

<p>Since the parsers are defined by the presence of a class within a partner module, we can use metaprogramming to abstract away all the common pieces and add classes to the module programmatically. The implementation is too in-depth to explain in detail here, but our partner module above could be rewritten to look like the following:</p>

<div class="language-rb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">module</span> <span class="nn">Apogee</span>
  <span class="k">module</span> <span class="nn">Parser</span>
    <span class="k">module</span> <span class="nn">Skinner</span>
      <span class="kp">extend</span> <span class="no">Apogee</span><span class="o">::</span><span class="no">BaseParser</span>
      
      <span class="n">add_single_column_parser</span><span class="p">(</span>
        <span class="ss">class_name: </span><span class="s1">'DimensionsParser'</span><span class="p">,</span>
        <span class="ss">menu_name: </span><span class="s1">'Parse dimensions from Description column'</span><span class="p">,</span>
        <span class="ss">column_name: </span><span class="s1">'Description'</span><span class="p">,</span>
        <span class="ss">regex: </span><span class="sr">%r{REGEX GOES HERE}</span><span class="p">,</span>
        <span class="ss">new_columns: </span><span class="sx">%w[Height Width Depth Unit]</span>
      <span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">match</span><span class="o">|</span>
        <span class="c1"># TODO: Process each cell.</span>
      <span class="k">end</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>I created two such methods: one that uses a single regex, and another that uses multiple regexes (for more complex needs). I also wrote a handy <code class="language-plaintext highlighter-rouge">add_all_parser</code> method which adds a sort of meta-parser, which collates the results from calling <code class="language-plaintext highlighter-rouge">parse</code> on all the <em>other</em> parsers in that module. Our Ops team just needs to click ‚ÄúParse everything‚Äù and the entire spreadsheet is processed with all the parsers in seconds.</p>

<p>And of course, since all our parsers are just Ruby classes, they were easy to unit test.</p>

<p>I‚Äôve done metaprogramming in other languages, and it was a lot of fun to use it in Ruby. I ran the code by my colleagues who are more experienced in Ruby than I am, and documented everything thoroughly. It‚Äôs a real shame the codebase isn‚Äôt open source, because I‚Äôm really proud of the approach and would love to share it with you.</p>

<h2 id="apogee-authentication">Apogee Authentication</h2>

<p>We needed to make sure that only the Add-on itself was invoking the server‚Äôs endpoints. Not because the server has sensitive data ‚Äì Apogee‚Äôs server has no database and doesn‚Äôt access any APIs ‚Äì but just because it‚Äôs good practice to limit access to services to only who needs them.</p>

<p>We evaluated a bunch of prospective auth strategies, including (but not limited to) the following:</p>

<ul>
  <li>Whitelist Google datacentre IP addresses, block all others.</li>
  <li>HTTP Basic Auth.</li>
  <li>Shared secret.</li>
  <li>OAuth with Artsy‚Äôs API, by the user upon Add-on installation.</li>
  <li>Something totally custom, or a combination of any of these.</li>
</ul>

<p>After thoughtful discussion, we decided on a solution that works for us. I‚Äôm not going to specify what we used ‚Äì not because I‚Äôm that concerned about the security, but because each project and team will have their own needs. If you build a server, think carefully about what kind of authentication makes sense for you and your team.</p>

<h2 id="conclusion">Conclusion</h2>

<p>Apogee was a really fun project. It had a defined scope, so it was a good first Rails project for me to tackle. The Add-on helps my colleagues on the Auctions Ops team do their jobs easier, so it was intrinsically rewarding to build. And it turns out that our Gallery Partnerships team also has to import a lot of partner data into Artsy‚Äôs CMS, so I‚Äôm now exploring ways Apogee can help them, too.</p>

<p>As a closing note, I want to discuss something that‚Äôs been on my mind lately. I‚Äôve been developing iOS apps <a href="https://ashfurrow.com/blog/5-years-of-ios/">since 2009</a>, and have a <a href="https://ashfurrow.com/books/">very intimate knowledge</a> of Objective-C, Swift, and UIKit. For a long time, I actually avoided learning new languages and frameworks because they intimidated me ‚Äì starting over in a new framework, from scratch, felt like a step backward.</p>

<p>I think this is a common frame of mind, among iOS developers, among all developers. But now I regret avoiding new technology for so long. The languages and tools that I knew had become part of my identity: I was an ‚ÄúiOS Developer.‚Äù That identity was a source of strength, but was also a limitation.</p>

<p>Developers solve problems. Sometimes those problems are best solved with iOS apps. And sometimes, they‚Äôre best solved with spreadsheet plugins. After <a href="https://ashfurrow.com/blog/swift-vs-react-native-feels/">realizing</a> last year that I was limiting myself, I‚Äôm still coming to terms with how that impacts my identity. But I‚Äôll say this: if <em>I</em> can leave the safety blanket of the iOS world and build something completely new, so can you. Don‚Äôt let your expertise and experience limit what you think you can build.</p>

<hr />

<p><em>Editor‚Äôs Note: This post has been updated as part of an effort to adopt more inclusive language across Artsy‚Äôs
GitHub repositories and editorial content (<a href="https://github.com/artsy/README/issues/427">RFC</a>).</em></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Apogee: Doing More with Less]]></title>
    <link href="https://artsy.github.io/blog/2018/02/02/artsy-apogee/"/>
    <updated>2018-02-02T00:00:00+00:00</updated>
    <id>https://artsy.github.io/blog/2018/02/02/artsy-apogee</id>
    <content type="html"><![CDATA[<blockquote>
  <p>Apogee: the point in the orbit of two objects at which they are furthest apart.</p>
</blockquote>

<p>In 2017, the Artsy Auctions Operations team coordinated and ran 190+ sales on our platform. This year, our ambitions are set even higher. But scaling up the number of sales we run will require scaling up our tools and processes, too. This post describes Apogee, a tool I built to help us scale our businesses processes. I never thought I would be so excited to build a spreadsheet plugin, but I honestly had a blast. So let‚Äôs dive in!</p>

<!-- more -->

<p>Running a sale on Artsy is no small feat. I mean, after all the contract negotiations you might think things get easier, but that‚Äôs just the beginning of the work. All our auction partners have data in their own CMS systems, and they‚Äôre all formatted slightly differently. We need to get the information for each lot in a sale into Artsy‚Äôs CMS, and so a few years ago we built a batch-import app in Rails to do this (closed source, sorry). It works well, but expects data in a specific format.</p>

<p>A lot of work is done by our Ops team to reformat spreadsheets they get from our partners to match the structure our batch import tool expects. All of our partners have different formats, and sales can include hundreds of lots. The reformatting process can take one person over a day, for large sales.</p>

<p>Wouldn‚Äôt it be cool to build some kind of server to bridge the gulf between Artsy‚Äôs database and our partner‚Äôs myriad systems?</p>

<p>No, actually, it wouldn‚Äôt. It would be a tremendous amount of work, from our side and from theirs. Back to the drawing board.</p>

<p>In January, Ops arranged a meeting between us engineers and an auction partner. Ideally, a solution to <em>our</em> problem would also make our partners‚Äô lives easier, since exporting data from their systems is sometimes as arduous as importing it into ours. <a href="https://www.skinnerinc.com">Skinner</a> was kind enough to walk us through their export process and provide us with some representative data.</p>

<p>Perfect, now we have a starting point.</p>

<hr />

<blockquote>
  <p>If you‚Äôre not familiar the 80/20 rule says, ‚ÄòDo a job until it‚Äôs 80% done and then quit‚Äô.
‚Äî<a href="https://www.youtube.com/watch?v=MSgR-hJjdTo#t=2m36s">@searls</a></p>
</blockquote>

<p>The team‚Äôs early brainstorming to the Ops import workflow was hampered by a kind of perfectionism. We evaluated, but decided against solutions because they didn‚Äôt address all the edge cases. It finally clicked, for me anyway, when I realized that our tool didn‚Äôt need to bridge the gulf between two <em>systems</em>, but between two <em>workflows</em>.</p>

<p>And it didn‚Äôt need to be perfect, not at all. Even an 80% reduction in the amount of time spent wrangling spreadsheet data would translate to <em>hours</em> of time saved, per sale. That is, if we could find a way to make it ridiculously easy to add parsers for new partners.</p>

<p>We built a quick prototype ‚Äì less than two days work ‚Äì to pull out data from Skinner‚Äôs spreadsheets and format it into the structure that‚Äôs easiest to import into Artsy. The prototype itself was a <a href="https://developers.google.com/apps-script/add-ons/">Google Sheets Add-on</a>. There will be a follow-up post describing the technical evolution of this tool, but the important thing to note here is that we engineers had to go to where our Ops team already was. Previous discussions around improving Ops‚Äô import workflows were centred around building entirely new workflows instead of improving the existing, functional workflows.</p>

<p>The prototype was tested in production with two large sales Skinner and Artsy were running together. Parsing out <em>just</em> the dimensions of the lots, for <em>just</em> one of the sales, saved an hour of Ops‚Äô time. Clearly, there was promise in this tool.</p>

<p>Next steps were all technical, and we‚Äôll get into details in the next post, but building Apogee actually involved developing two pieces of technology: a Rails server, and an Add-on client. Because a tool to parse data from various partners necessarily contains those partners‚Äô data formats, we decided not to open source Apogee. That‚Äôs okay ‚Äì we practice <a href="https://ashfurrow.com/blog/open-source-ideology/">open source <em>by default</em></a>, not <em>by demand</em>.</p>

<h2 id="apogee-server">Apogee Server</h2>

<p>It‚Äôs difficult to discuss the server without first talking about the Add-on, so in short: Add-ons are difficult to maintain, to collaborate on, to unit test, and so on. So we decided early to build a very thin Add-on client and move all the heavy lifting to a backend server that we could develop within our existing technical framework. Our goal was to build an Add-on that needed to be updated less frequently than support for new partners was added.</p>

<p>We needed a server. Most of this server‚Äôs job was going to be running regular expressions, and Ruby‚Äôs regex features are still a step above Node‚Äôs. It‚Äôs critical that writing new parsers be <em>ridiculously</em> easy to write (and test!). That factored in a lot of technical decisions, which we‚Äôll discuss in more detail in the next Apogee post.</p>

<p>So it‚Äôs a Ruby server, but which framework?</p>

<p>I thought about using Sinatra, since our server is very simple and Sinatra is a tech I‚Äôve <a href="https://github.com/Moya/Aeryn">used before</a>, but after speaking with some colleagues, I decided on using Rails in API-only mode. Sticking to Rails would keep the project in-step with the rest of Artsy‚Äôs Ruby server code ‚Äì we don‚Äôt have any Sinatra apps, but everyone here already knows Rails. Plus, Rails is <em>very</em> boring and ‚Äì consequently ‚Äì <em>very</em> stable. I like stability.</p>

<p>Before a few weeks ago, I‚Äôd never even run <code class="language-plaintext highlighter-rouge">rails new</code>. Now, I‚Äôm the proud point-person for an entire Rails server. I owe a lot to my colleagues for helping me along the way.</p>

<h2 id="apogee-add-on">Apogee Add-on</h2>

<p>The Add-on is an interesting piece of code. In addition to the strange environment for building and deploying Add-ons, you also have to deal with a strange runtime. How strange? Well, it‚Äôs JavaScript, but not as we know it.</p>

<p>Google Docs Add-ons run as <a href="https://script.google.com">Google Scripts</a>, which are a more general-purpose cloud computing platform. They <a href="https://developers.google.com/apps-script/guides/services/#basic_javascript_features">execute a runtime</a> based on JavaScript 1.6, which specific features from JavaScripts 1.7 and 1.8 ported in. Similar to the <a href="http://danger.systems/js/">Danger-JS</a> 1.x runtime, there is no event loop. So, things are weird.</p>

<p>Just because we can‚Äôt fully automate deploys doesn‚Äôt mean we can‚Äôt automate <em>parts</em> of the process. Specifically, I built the Add-on using <a href="https://www.typescriptlang.org">TypeScript</a> which is compiled down to a version of JavaScript that Google Scripts plays nice with. There are even open-source <a href="https://www.npmjs.com/package/@types/google-apps-script">typings</a> available for the Google Scripts API.</p>

<hr />

<p>I learned a lot from building Apogee, from a technical perspective, but the lessons I‚Äôm most proud of learning have to do more with business processes. From the general approach of making data imports faster, to the specific programming languages used to build Apogee, all decisions were driven first and foremost by actual business needs (and not technology trends). Apogee is not exciting enough to make the front page of Hacker News, and in a weird way, I‚Äôm proud of that.</p>

<p>Artsy Auctions are at an inflection point; we need to scale up the number of auctions we run faster than we scale up the effort spends actually running them. 2018 is going to challenge the Auctions engineering team to help our colleagues accomplish more, while doing less. I‚Äôm excited for that challenge.</p>

]]></content>
  </entry>
  
</feed>
