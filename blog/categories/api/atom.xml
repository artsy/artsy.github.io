<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: api | Artsy Engineering]]></title>
  <link href="https://artsy.github.io/blog/categories/api/atom.xml" rel="self"/>
  <link href="https://artsy.github.io/"/>
  <updated>2024-08-06T19:48:16+00:00</updated>
  <id>https://artsy.github.io/</id>
  <author>
    <name><![CDATA[]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Where art thou, my error?]]></title>
    <link href="https://artsy.github.io/blog/2018/10/19/where-art-thou-my-error/"/>
    <updated>2018-10-19T00:00:00+00:00</updated>
    <id>https://artsy.github.io/blog/2018/10/19/where-art-thou-my-error</id>
    <content type="html"><![CDATA[<p><em>Note: This is the text of a presentation given at <a href="https://graphql-finland.fi">GraphQL Finland 2018</a>, as such the
language may in some cases be slightly awkward for a blog post. You can find those slides on
<a href="https://speakerdeck.com/alloy/where-art-thou-my-error">Speaker Deck</a>.</em></p>

<p>GraphQL is still in its early stages and thus these are very exciting times, indeed! Traditionally the GraphQL team
has taken the approach of defining the bare minimum in the specification that was deemed needed and otherwise
letting the community come-up with defining problems and experimenting with solutions for those. One such example
is how metadata about the location in the graph where errors occurred during execution were <a href="https://github.com/facebook/graphql/pull/230">added to the
specification</a>.</p>

<p>This is great in the sense that we still have the ability, as a community, to shape the future of a GraphQL
specification that we all <em>want</em> to use, but on the other hand it also means that we may need to spend significant
amounts of time on thinking about these problems and iterating. Seeing as we all strive to have backwards
compatible schemas, it’s of great importance that we know of the various iterations that people have experimented
with and what the outcome was.</p>

<p>This is our story of thinking about and working with errors, thus far.</p>

<!-- more -->

<p>NOTE: Throughout this talk I’ll use ‘query execution’ to indicate executing a GraphQL document, be it a query or
mutation operation. I have a hard time relating to ‘document execution’, mostly because I don’t see others using
it, but perhaps I’ve just missed it. Come at me, at the bar, and set me straight!</p>

<h2 id="errors-vs-errors">Errors vs errors</h2>

<p>First of all, I want to take a step back and talk about errors in general. The nomenclature around these can get
confusing, suffice to say that during this session we’ll talk about these two types:</p>

<ul>
  <li>
    <p>Errors that occur during query execution, that were unexpected, and <em>could</em> lead to corrupted data. We’ll refer
to these as (top-level) ‘GraphQL errors’, going forward.</p>

    <p>These could be due to hardware failures, such as running out of memory or disk space, network failures, or
unexpected upstream data etc.</p>

    <p>When these occur, <code class="language-plaintext highlighter-rouge">graphql-js</code> will return <code class="language-plaintext highlighter-rouge">null</code> for the field that triggered the error and serialize the error
into the top-level <code class="language-plaintext highlighter-rouge">errors</code> list, next to the successful response <code class="language-plaintext highlighter-rouge">data</code>. (Presumably other implementations
follow this reference implementation.)</p>
  </li>
</ul>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"data"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"artwork"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="nl">"artist"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
        </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Vincent van Gogh"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"leftEarSize"</span><span class="p">:</span><span class="w"> </span><span class="kc">null</span><span class="w">
      </span><span class="p">}</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">},</span><span class="w">
  </span><span class="nl">"errors"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
    </span><span class="p">{</span><span class="w">
      </span><span class="nl">"message"</span><span class="p">:</span><span class="w"> </span><span class="s2">"An unexpected error occurred"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"path"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">"artwork"</span><span class="p">,</span><span class="w"> </span><span class="s2">"artist"</span><span class="p">,</span><span class="w"> </span><span class="s2">"leftEarSize"</span><span class="p">]</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">]</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<ul>
  <li>
    <p>Exceptions to these are errors that are <em>known</em> to occur and are expected to be handled by the user of an API.
We’ll refer to these as ‘exceptions’, going forward.</p>

    <p>By default these are treated equally by <code class="language-plaintext highlighter-rouge">graphql-js</code> to top-level GraphQL errors, if uncaught.</p>
  </li>
</ul>

<p>We will <strong>not</strong> be speaking about errors that occur <em>outside</em> of query execution, such as network failures reaching
the GraphQL server, parsing a syntactically incorrect document, or passing variables that don’t satisfy the
type-system; as these will all lead to a query being rejected wholesale and are solve-able using traditional means,
such as a <code class="language-plaintext highlighter-rouge">4xx</code> HTTP status code or <code class="language-plaintext highlighter-rouge">5xx</code> in some cases.</p>

<h2 id="what-is-the-problem-were-trying-to-solve">What is the problem we’re trying to solve?</h2>

<p>Because with GraphQL we’re usually requesting data for multiple resources, there may be a situation where some
fields resolve successfully and some may fail. This is also why, when using an HTTP transport layer, the advice is
to always respond with a HTTP 200 (ok) status. Determining how to process the response is left up to the client.</p>

<p>So how <em>do</em> we model errors in such a way that they can be meaningful and in context of their origin?</p>

<ul>
  <li>
    <p>What if you want to render partial data?</p>

    <ul>
      <li>
        <p>Maybe the failed data is unrelated to other components that you were also requesting data for.</p>

        <p><img src="/images/2018-10-19-where-art-thou-my-error/partial-data-unrelated-annotated.png" alt="Unrelated component" /></p>
      </li>
      <li>
        <p>Or the data that failed was part of a list and other entries can still be rendered just fine.</p>

        <p><img src="/images/2018-10-19-where-art-thou-my-error/partial-data-list-annotated.png" alt="Partial list data" /></p>
      </li>
    </ul>
  </li>
  <li>
    <p>Or what if you’d (additionally) like to communicate the error in your interface?</p>

    <ul>
      <li>
        <p>When the query is in response to a mutation and you’d like to communicate input validation failures.</p>

        <p><img src="/images/2018-10-19-where-art-thou-my-error/mutation-validation-error.png" alt="Surface validation error" /></p>
      </li>
    </ul>
  </li>
</ul>

<h2 id="possible-solutions">Possible solutions</h2>

<h3 id="top-level-graphql-errors-and-treating-an-entire-response-as-unusable-when-such-errors-exist">Top-level GraphQL errors and treating an entire response as unusable when such errors exist</h3>

<p>Some clients, such as Apollo and Relay Classic, have made the decision to reject a response entirely, by default,
if any top-level GraphQL errors exist. This is because clients can really only fully assume that the response data
is incomplete, not whether or not your application could handle that case.</p>

<p>This may be an ok solution when you’re starting out or all the requested data is part of a single holistic view,
but it quickly breaks down when you want a little more than that.</p>

<h3 id="top-level-graphql-errors-with-extra-metadata">Top-level GraphQL errors with extra metadata</h3>

<p>GraphQL errors only have a single field in <a href="https://facebook.github.io/graphql/draft/#sec-Errors">the specification</a> to provide context around the cause of
the error, which is the <code class="language-plaintext highlighter-rouge">message</code> field. However, <a href="https://facebook.github.io/graphql/draft/#sec-Response-Format">the specification</a> also defines a top-level
<code class="language-plaintext highlighter-rouge">extensions</code> key, which may hold a map of freeform data for the schema implementors to extend the protocol however
they see fit.</p>

<p>Apollo Server 2.0, for instance, <a href="https://blog.apollographql.com/full-stack-error-handling-with-graphql-apollo-5c12da407210">introduced standardized errors</a> you can throw from your
resolvers, which end up being serialized into the <code class="language-plaintext highlighter-rouge">extensions</code> map. An example they give is for bad user input:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">UserInputError</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">apollo-server</span><span class="dl">"</span>

<span class="kd">const</span> <span class="nx">resolvers</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">Query</span><span class="p">:</span> <span class="p">{</span>
    <span class="nx">events</span><span class="p">(</span><span class="nx">root</span><span class="p">,</span> <span class="p">{</span> <span class="nx">zipCode</span> <span class="p">})</span> <span class="p">{</span>
      <span class="c1">// do custom validation for user inputs</span>
      <span class="kd">const</span> <span class="nx">validationErrors</span> <span class="o">=</span> <span class="p">{}</span>
      <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">isValidZipCode</span><span class="p">(</span><span class="nx">zipCode</span><span class="p">))</span> <span class="p">{</span>
        <span class="nx">validationErrors</span><span class="p">.</span><span class="nx">zipCode</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">This is not a valid zipcode</span><span class="dl">"</span>
      <span class="p">}</span>
      <span class="k">if</span> <span class="p">(</span><span class="nb">Object</span><span class="p">.</span><span class="nx">keys</span><span class="p">(</span><span class="nx">validationErrors</span><span class="p">).</span><span class="nx">length</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">throw</span> <span class="k">new</span> <span class="nx">UserInputError</span><span class="p">(</span><span class="dl">"</span><span class="s2">Failed to get events due to validation errors</span><span class="dl">"</span><span class="p">,</span> <span class="p">{</span> <span class="nx">validationErrors</span> <span class="p">})</span>
      <span class="p">}</span>
      <span class="c1">// actually query events here and return successfully</span>
      <span class="k">return</span> <span class="nx">getEventsByZipcode</span><span class="p">(</span><span class="nx">zipCode</span><span class="p">)</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Seeing as these extensions are freeform, however, this builds an <strong>implicit</strong> contract between the server and
client that then needs to be abstracted away by additional client code. This is unfortunate, when you think about
it, because GraphQL is meant to explicitly express shapes of data.</p>

<p>The Apollo team acknowledges this by adding:</p>

<blockquote>
  <p>While convenient, the weakness of this approach is that the format of the validation error messages is not
captured by your schema, making it brittle to changes. Unless you maintain tight control of both server and
client, you should keep the error responses as simple as possible.</p>

  <p>For mutations, it can be worthwhile defining these validation errors as first class citizens within your schema.</p>
</blockquote>

<p>(Which we’ll address next.)</p>

<h3 id="make-mutation-error-metadata-part-of-schema-as-separate-fields">Make (mutation) error metadata part of schema as separate fields</h3>

<p>One <a href="https://www.apollographql.com/docs/guides/schema-design.html#mutation-responses">commonly suggested approach</a> around mutations is to define status metadata on the
response type next to the field of the affected entity. For example, a response type could look like:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>type UpdateArtworkMutationResponse {
  success: Boolean!
  message: String!
  artwork: Artwork
}
</code></pre></div></div>

<p>Here there’s a boolean that indicates success, an extra message that sheds context on the situation when a failure
occurs, and finally the <code class="language-plaintext highlighter-rouge">artwork</code> that an update was attempted to be made to.</p>

<p>Adding these fields to the same namespace makes sense when we’re thinking of the failure case, but what about the
success case? Do we really need a <code class="language-plaintext highlighter-rouge">success</code> boolean to indicate that updates to the <code class="language-plaintext highlighter-rouge">artwork</code> were made? What
purpose serves the <code class="language-plaintext highlighter-rouge">message</code> field, other than possibly being a sign of an overly positive schema that sends you
happy messages?</p>

<p>Finally, this approach only really works for mutations, as their return type acts as a distinct root type to start
a query from. It would be hard to imagine how to apply this to queries.</p>

<h3 id="make-error-metadata-part-of-schema-as-separate-field">Make error metadata part of schema as separate field</h3>

<p>Similarly, <a href="https://itnext.io/the-definitive-guide-to-handling-graphql-errors-e0c58b52b5e1">another suggested approach</a> is to add an additional <code class="language-plaintext highlighter-rouge">error</code> field to the type in
question, which then describes the error that occurred. The previous example could be rewritten like so:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>type GenericError {
  message: String!
}

type UpdateArtworkMutationResponse {
  error: GenericError
  artwork: Artwork
}
</code></pre></div></div>

<p>If <code class="language-plaintext highlighter-rouge">error</code> is not <code class="language-plaintext highlighter-rouge">null</code>, something went wrong. This cleans up the namespace a bit, but more importantly this
approach can be applied to queries too:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>type PublishedArtworkNotification {
  artwork: Artwork
}

type PublishedArtworkNotificationsPayload {
  error: GenericError
  notifications: [PublishedArtworkNotification]
}

type Query {
  publishedArtworkNotificationsPayload: PublishedArtworkNotificationsPayload!
}
</code></pre></div></div>

<p>Neat.</p>

<p>However, and this may just be our use-case, we don’t have partial data at these stages. We’ve either resolved the
data or we have an error. Hence, this approach would mean we’d always have an unneeded <code class="language-plaintext highlighter-rouge">null</code> field, which pollutes
the namespace of the type unnecessarily.</p>

<p>Side-note: if you don’t control the server schema, and are using a client that can extend a server schema on the
client, you could try to retrofit top-level GraphQL errors to these suggested error fields into the schema where
they occurred based on the error <code class="language-plaintext highlighter-rouge">path</code>, as shown <a href="https://github.com/facebook/relay/issues/1913#issuecomment-358636018">here</a>.</p>

<h2 id="recap">Recap</h2>

<p>So to quickly recap, ideally we want a solution to:</p>

<ul>
  <li>Use GraphQL: Utilize GraphQL to explicitly describe the error data.</li>
  <li>In context: Present the error data exactly where the error occurred in the schema.</li>
  <li>All operations: Work for both mutations and queries.</li>
  <li>Explicit status: Be concise and encourage ‘clean’ types; that is, no pollution of namespaces with fields only
needed in some cases.</li>
</ul>

<h3 id="make-exceptions-first-class-citizens-of-your-schema">Make exceptions first-class citizens of your schema</h3>

<p>To that end, the final approach we’ll be discussing, and the one that we at Artsy have started adopting, is to give
exceptions their own type and return those instead of the success type, when they occur. To do this we make use of
a union of both the success and the exception type (or multiples thereof) and then query for those.</p>

<p>The benefits are:</p>

<ul>
  <li>
    <p>You can further model the exception in an explicit and introspect-able way.</p>

    <p>For example, in the case of an HTTP failure to an upstream service, your exception type could include an integer
status-code field and document it as such.</p>
  </li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>type Artwork {
  title: String!
}

type HTTPError {
  message: String!
  statusCode: Int!
}

union ArtworkOrError = Artwork | HTTPError

type Query {
  artworkOrError(id: ID!): ArtworkOrError
}
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>query {
  artworkOrError("mona-lisa") {
    ... on Artwork {
      title
    }
    ... on HTTPError {
      statusCode
    }
  }
}
</code></pre></div></div>

<ul>
  <li>You know exactly where the exception occurred in the graph.</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>type Artist {
  artworksOrErrors: [ArtworkOrError]
}

type Query {
  artist(id: ID!): Artist
}
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>query {
  artist("leonardo-da-vinci") {
    artworksOrErrors {
      ... on Artwork {
        title
      }
      ... on HTTPError {
        statusCode
      }
    }
  }
}
</code></pre></div></div>

<ul>
  <li>You can use it for both mutations and queries.</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>type UpdateArtworkMutationResponse {
  artworkOrError: ArtworkOrError
}
</code></pre></div></div>

<ul>
  <li>All fields will always be captured in the single <code class="language-plaintext highlighter-rouge">artworkOrError</code> field <em>or</em>, if no information about the error
is needed, you simply don’t query for it and get back <code class="language-plaintext highlighter-rouge">null</code> instead.</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>query {
  artworkOrError("mona-lisa") {
    ... on Artwork {
      title
    }
  }
}
</code></pre></div></div>

<h2 id="how-we-encode-it-into-our-schema">How we encode it into our schema</h2>

<p>I should preface this by clearly stating that while have been thinking about this problem for a while now, only
recently have we started rolling these changes out into our schema, so some of these are not yet discoverable in
<a href="http://github.com/artsy/metaphysics">our open-source GraphQL service</a>.</p>

<h3 id="types">Types</h3>

<p>As shown before, we define a union of the actual result type <em>and</em> the error type. However, we additionally (will)
define a set of error interfaces, which make it possible for clients to query for errors in a more generic way.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>interface Error {
  message: String!
}

interface HTTPError {
  message: String!
  statusCode: Int!
}

type HTTPErrorType implements Error &amp; HTTPError {
  message: String!
  statusCode: Int!
}

type Artwork {
  title: String!
}

union ArtworkOrError = Artwork | HTTPErrorType

type Query {
  artworkOrError(id: ID!): ArtworkOrError
}
</code></pre></div></div>

<p>We can now still query as shown in the earlier examples:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>query {
  artworkOrError("mona-lisa") {
    ... on Artwork {
      title
    }
    ... on HTTPError {
      message
      statusCode
    }
  }
}
</code></pre></div></div>

<p>…but we can now also have generic error components that would query like so:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>query {
  artworkOrError("mona-lisa") {
    ... on Artwork {
      title
    }
    ...GenericErrorComponent
    ...GenericHTTPErrorComponent
  }
}

fragment GenericErrorComponent on Error {
  message
}

fragment GenericHTTPErrorComponent on HTTPError {
  message
  statusCode
}
</code></pre></div></div>

<p>For the record, we have <em>not</em> yet put these interfaces into production, so the nomenclature is not set in stone yet
and I’d love to hear your input on this. Is <code class="language-plaintext highlighter-rouge">Error</code> <em>too</em> generic to use as the base error type? Is there a nicer
naming pattern that would allow us to avoid having to suffix concrete types of an error interface with <code class="language-plaintext highlighter-rouge">...Type</code>?</p>

<p>Side-note: there’s <a href="https://github.com/facebook/graphql/pull/373">an RFC</a> to the GraphQL specification that would make it possible to
have interfaces implement other interfaces, thus removing the need to keep repeating the fields of
super-interfaces. This RFC has recently been moved to the draft stage, yay!</p>

<h3 id="field-naming">Field naming</h3>

<p>As you may have noticed, we’re calling these fields <code class="language-plaintext highlighter-rouge">something</code> <em>or</em> <code class="language-plaintext highlighter-rouge">error</code>. We are mostly doing this to stay
backwards compatible with our existing schema. While we could certainly add exception types to existing union
fields, we can’t change a single type field into a union type field without breaking compatibility.</p>

<p>Instead we may now have 2 versions of a given field:</p>

<ul>
  <li>one with the single type field which is nullable, in case an exception occurred</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>query {
  artwork("mona-lisa") {
    title
  }
}
</code></pre></div></div>

<ul>
  <li>and another that has the error union type</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>query {
  artworkOrError("mona-lisa") {
    ... on Artwork {
      title
    }
    ... on HTTPError {
      statusCode
    }
  }
}
</code></pre></div></div>

<p>This duplication is slightly unfortunate, from a clean schema design perspective, but it’s similar to an existing
pattern in the community. For instance, many schemas provide 2 ways to retrieve lists:</p>

<ul>
  <li>one as an immediate list:</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>type Query {
  artworks: [Artwork]
}
</code></pre></div></div>

<ul>
  <li>and one as a ‘connection’ (as defined by the <a href="https://facebook.github.io/relay/graphql/connections.htm">Relay Connection specification</a>)</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>type ArtworkEdge {
  node: Artwork
}

type ArtworksConnection {
  edges: [ArtworkEdge]
}

type Query {
  artworksConnection: ArtworksConnection
}
</code></pre></div></div>

<p>So the jury is still out on whether or not that’s a bad way to name things. We’ll have to see after using this for a
while.</p>

<h3 id="downside-of-using-a-union">Downside of using a union</h3>

<p>One notable downside is that GraphQL scalar types can <em>not</em> be included in unions. Thus, if you have scalar fields
that could lead to exceptions, you will have to ‘box’ those in object types.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>type ArtworkPurchasableBox {
  value: Boolean!
}

union ArtworkPurchasableOrError = ArtworkPurchasableBox | HTTPError

type Artwork {
  currentlyPurchasableOrError: ArtworkPurchasableOrError
}
</code></pre></div></div>

<p>This is definitely a case where the pattern of defining 2 fields, one with and one without exception types, comes
in handy. Having to always query through the box type is inelegant, to put it softly.</p>

<p>Side-note: there actually is <a href="https://github.com/facebook/graphql/issues/215">an open RFC</a> to the specification to allow scalars in unions, but
it’s still in stage 0 and is in need of a champion in order to proceed. We may end up trying to do so, based on our
actual experiences with these cases where they may need to be boxed.</p>

<h3 id="example-of-how-we-consume-query-errors">Example of how we consume query errors</h3>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">OrderStatus_order</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">__generated__/OrderStatus_order.graphql</span><span class="dl">"</span>
<span class="k">import</span> <span class="nx">React</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react</span><span class="dl">"</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">createFragmentContainer</span><span class="p">,</span> <span class="nx">graphql</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react-relay</span><span class="dl">"</span>

<span class="kr">interface</span> <span class="nx">Props</span> <span class="p">{</span>
  <span class="nl">order</span><span class="p">:</span> <span class="nx">OrderStatus_order</span>
<span class="p">}</span>

<span class="kd">const</span> <span class="nx">OrderStatus</span><span class="p">:</span> <span class="nx">React</span><span class="p">.</span><span class="nx">SFC</span><span class="o">&lt;</span><span class="nx">Props</span><span class="o">&gt;</span> <span class="o">=</span> <span class="p">({</span> <span class="na">order</span><span class="p">:</span> <span class="nx">orderStatusOrError</span> <span class="p">})</span> <span class="o">=&gt;</span>
  <span class="nx">orderStatusOrError</span><span class="p">.</span><span class="nx">__typename</span> <span class="o">===</span> <span class="dl">"</span><span class="s2">OrderStatus</span><span class="dl">"</span> <span class="p">?</span> <span class="p">(</span>
    <span class="o">&lt;</span><span class="nx">div</span><span class="o">&gt;</span>
      <span class="p">{</span><span class="nx">orderStatusOrError</span><span class="p">.</span><span class="nx">deliveryDispatched</span>
        <span class="p">?</span> <span class="dl">"</span><span class="s2">Your order has been dispatched.</span><span class="dl">"</span>
        <span class="p">:</span> <span class="dl">"</span><span class="s2">Your order has not been dispatched yet.</span><span class="dl">"</span><span class="p">}</span>
    <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>  <span class="p">)</span> <span class="p">:</span> <span class="p">(</span>
    <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">error</span><span class="dl">"</span><span class="o">&gt;</span>
      <span class="p">{</span><span class="nx">orderStatusOrError</span><span class="p">.</span><span class="nx">code</span> <span class="o">===</span> <span class="dl">"</span><span class="s2">unpublished</span><span class="dl">"</span>
        <span class="p">?</span> <span class="dl">"</span><span class="s2">Please contact gallery services.</span><span class="dl">"</span>
        <span class="p">:</span> <span class="s2">`An unexpected error occurred: </span><span class="p">${</span><span class="nx">orderStatusOrError</span><span class="p">.</span><span class="nx">message</span><span class="p">}</span><span class="s2">`</span><span class="p">}</span>
    <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>  <span class="p">)</span>

<span class="k">export</span> <span class="kd">const</span> <span class="nx">OrderStatusContainer</span> <span class="o">=</span> <span class="nx">createFragmentContainer</span><span class="p">(</span>
  <span class="nx">OrderStatus</span><span class="p">,</span>
  <span class="nx">graphql</span><span class="s2">`
    fragment OrderStatus_order on Order {
      orderStatusOrError {
        __typename
        ... on OrderStatus {
          deliveryDispatched
        }
        ... on OrderError {
          message
          code
        }
      }
    }
  `</span>
<span class="p">)</span>
</code></pre></div></div>

<h3 id="example-of-how-we-consume-mutation-errors">Example of how we consume mutation errors</h3>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">SubmitOrder_order</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">__generated__/SubmitOrder_order.graphql</span><span class="dl">"</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">SubmitOrderMutation</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">__generated__/SubmitOrderMutation.graphql</span><span class="dl">"</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">Router</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">found-relay</span><span class="dl">"</span>
<span class="k">import</span> <span class="nx">React</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react</span><span class="dl">"</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">commitMutation</span><span class="p">,</span> <span class="nx">createFragmentContainer</span><span class="p">,</span> <span class="nx">graphql</span><span class="p">,</span> <span class="nx">RelayProp</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react-relay</span><span class="dl">"</span>

<span class="kr">interface</span> <span class="nx">Props</span> <span class="p">{</span>
  <span class="nl">order</span><span class="p">:</span> <span class="nx">SubmitOrder_order</span>
  <span class="nx">relay</span><span class="p">:</span> <span class="nx">RelayProp</span>
  <span class="nx">router</span><span class="p">:</span> <span class="nx">Router</span>
<span class="p">}</span>

<span class="kd">const</span> <span class="nx">SubmitOrder</span><span class="p">:</span> <span class="nx">React</span><span class="p">.</span><span class="nx">SFC</span><span class="o">&lt;</span><span class="nx">Props</span><span class="o">&gt;</span> <span class="o">=</span> <span class="nx">props</span> <span class="o">=&gt;</span> <span class="p">(</span>
  <span class="o">&lt;</span><span class="nx">button</span>
    <span class="nx">onClick</span><span class="o">=</span><span class="p">{()</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="nx">commitMutation</span><span class="o">&lt;</span><span class="nx">SubmitOrderMutation</span><span class="o">&gt;</span><span class="p">(</span><span class="nx">props</span><span class="p">.</span><span class="nx">relay</span><span class="p">.</span><span class="nx">environment</span><span class="p">,</span> <span class="p">{</span>
        <span class="na">mutation</span><span class="p">:</span> <span class="nx">graphql</span><span class="s2">`
          mutation SubmitOrderMutation($input: SubmitOrder!) {
            submitOrder(input: $input) {
              orderStatusOrError {
                __typename
                ... on OrderStatus {
                  submitted
                }
                ... on OrderError {
                  message
                  code
                }
              }
            }
          }
        `</span><span class="p">,</span>
        <span class="na">variables</span><span class="p">:</span> <span class="p">{</span> <span class="na">input</span><span class="p">:</span> <span class="p">{</span> <span class="na">orderID</span><span class="p">:</span> <span class="nx">props</span><span class="p">.</span><span class="nx">order</span><span class="p">.</span><span class="nx">id</span> <span class="p">}</span> <span class="p">},</span>
        <span class="na">onCompleted</span><span class="p">:</span> <span class="p">({</span> <span class="na">submitOrder</span><span class="p">:</span> <span class="p">{</span> <span class="nx">orderStatusOrError</span> <span class="p">}</span> <span class="p">},</span> <span class="nx">errors</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
          <span class="k">if</span> <span class="p">(</span><span class="nx">orderStatusOrError</span><span class="p">.</span><span class="nx">__typename</span> <span class="o">===</span> <span class="dl">"</span><span class="s2">OrderStatus</span><span class="dl">"</span><span class="p">)</span> <span class="p">{</span>
            <span class="nx">props</span><span class="p">.</span><span class="nx">router</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span>
              <span class="s2">`/orders/</span><span class="p">${</span><span class="nx">props</span><span class="p">.</span><span class="nx">order</span><span class="p">.</span><span class="nx">id</span><span class="p">}</span><span class="s2">/</span><span class="p">${</span><span class="nx">orderStatusOrError</span><span class="p">.</span><span class="nx">submitted</span> <span class="p">?</span> <span class="dl">"</span><span class="s2">submitted</span><span class="dl">"</span> <span class="p">:</span> <span class="dl">"</span><span class="s2">pending</span><span class="dl">"</span><span class="p">}</span><span class="s2">`</span>
            <span class="p">)</span>
          <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="nx">alert</span><span class="p">(</span>
              <span class="nx">orderStatusOrError</span><span class="p">.</span><span class="nx">code</span> <span class="o">===</span> <span class="dl">"</span><span class="s2">unpublished</span><span class="dl">"</span>
                <span class="p">?</span> <span class="dl">"</span><span class="s2">Please contact gallery services.</span><span class="dl">"</span>
                <span class="p">:</span> <span class="s2">`An unexpected error occurred: </span><span class="p">${</span><span class="nx">orderStatusOrError</span><span class="p">.</span><span class="nx">message</span><span class="p">}</span><span class="s2">`</span>
            <span class="p">)</span>
          <span class="p">}</span>
        <span class="p">}</span>
      <span class="p">})</span>
    <span class="p">}}</span>
  <span class="sr">/</span><span class="err">&gt;
</span><span class="p">)</span>

<span class="k">export</span> <span class="kd">const</span> <span class="nx">SubmitOrderContainer</span> <span class="o">=</span> <span class="nx">createFragmentContainer</span><span class="p">(</span>
  <span class="nx">SubmitOrder</span><span class="p">,</span>
  <span class="nx">graphql</span><span class="s2">`
    fragment SubmitOrder_order on Order {
      id
    }
  `</span>
<span class="p">)</span>
</code></pre></div></div>

<!--

### Show example of factory code that produces both single and union typed fields

TODO

-->

<h2 id="final-thoughts">Final thoughts</h2>

<p>As stated before, we having only recently begun rolling out these changes into our production schema. However, much
thought and experimentation has gone into this to ensure we will be able to address all of <em>our</em> needs, at least.</p>

<p>I would love to hear other people’s thoughts on this and definitely feedback if they try to adopt it themselves. As
a community we should openly iterate together, as much as possible, as we try to make the future of GraphQL a great
one and put legit questions to ‘REST’ ;)</p>

<p>For now, I’ll leave you with this message from some internet ‘rando’:</p>

<blockquote>
  <p>@alloy That diff makes a lot of sense to me. I’ve also seen user errors as a field on the mutation result, but I
like that union makes it explicit that there was either success or failure and in the case of failure provides
rich information that’s in your app’s domain.</p>
</blockquote>

<p>– <a href="https://twitter.com/leeb/status/1020054709694943232">Lee Byron</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Is GraphQL The Future?]]></title>
    <link href="https://artsy.github.io/blog/2018/05/08/is-graphql-the-future/"/>
    <updated>2018-05-08T00:00:00+00:00</updated>
    <id>https://artsy.github.io/blog/2018/05/08/is-graphql-the-future</id>
    <content type="html"><![CDATA[<p>I have seen the future, and it looks a lot like GraphQL. Mark my words: in 5
years, newly minted full-stack app developers won’t be debating <em>RESTfulness</em>
anymore, because REST API design will be obsolete. By the end of this post, I
hope you’ll see what I see in the promise of GraphQL as a new approach to
client-server interaction.</p>

<!-- more -->

<p>GraphQL is taking the full-stack world by storm. In case you’re not familiar,
GraphQL is a language-independent specification for client-server communication.
It lets you model the resources and processes provided by a server as a
<a href="https://en.wikipedia.org/wiki/Domain-specific_language">domain-specific language (DSL)</a>.
Clients can use it to send scripts written in your DSL to the server to process
and respond to as a batch.</p>

<p>That’s…different from how GraphQL’s own page describes it. GraphQL is better
known as a query language designed for clients to fetch exactly the data they
need. While this is sort of true, I would argue that GraphQL actually fails this
test in reality. It’s neither a query language, nor particularly graph-oriented.
I argue that it’s <em>not</em> a query language because it comes with no native
concepts of operators and expressions that build up to queries. <em>You</em> build
whatever facilities for specifying and fulfilling queries on your own. Likewise,
if your data is a graph, it’s on you to expose that structure. But your requests
are, if anything, trees.</p>

<p>I’m not trying to be pedantic. I believe GraphQL succeeds at something subtler
and more important than literally being a graph query language. I’m writing this
piece because I kept running into difficulties approaching GraphQL from the
standpoints of REST, graph theory, or typical query languages. As I read blog
posts, StackOverflow Q&amp;As, issues on the GraphQL repo and the GraphQL spec
itself, I developed a much more nuanced understanding, which I outline below.</p>

<p>For brevity, the following assumes a intermediate familiarity with GraphQL,
including its type system, syntax, and server-side implementation. If you don’t
have this level of familiarity, I recommend going through any tutorial that
requires you to set up a GraphQL server, not just play with the query language
(which is how I ended up with a lot of misconceptions).
<a href="https://graphql.org/graphql-js/">The docs for the official JavaScript server library</a>
are a good option. I’m going to start with the basics, but only so I can put my
own spin on those concepts, not to really illustrate them with examples.</p>

<h1 id="a-tree-of-fetches">A tree of fetches</h1>

<p>Most applications are designed in the form of discrete pages, which are seeded
with some tiny chunk of data—say, a key or slug for some domain object—and then
perform a cascade of contingent fetches to get the data needed to populate the
templates rendered to a user. This is the basis of designing applications driven
by URL-based routing and it has been a mainstay of the MVC approach to web
application architecture for the past decade.</p>

<blockquote>
  <p><strong>Example:</strong> At Artsy, the seed of data for rendering an artwork page could be
the slug identifying some artwork. From this slug, we need a whole bunch more
data: the metadata of the artwork, information about the artist(s), sales data
if it’s available for purchase, information about the Artsy partner that owns
it, and so on. In classic REST, this data is aggregated by a cascade of dozens
of HTTP fetches to our backend API.</p>
</blockquote>

<p>I wasn’t in the room when GraphQL was invented, but it seems to me that the team
that built it made a particularly crucial insight:</p>

<blockquote>
  <p>In most cases, all of this contingent fetching forms a tree, which is more or
less <em>fixed</em> for a given page.</p>
</blockquote>

<p>Data from early responses contain the keys for subsequent requests, but the
linkages between these requests are usually straightforward. So if it were
possible to factor all this disparate fetching into one spot and encode it into
one big “fetching tree” data structure ahead of time, this tree could be sent to
the the server, and the server could fulfill all of the data requirements in one
shot. This cuts out a tremendous amount of wasteful chatter between client and
server. Even in today’s broadband world, bandwidth and latency matter,
especially for mobile users.</p>

<h1 id="graphql-anatomy">GraphQL anatomy</h1>

<blockquote>
  <p><strong>Editorial note</strong> I’m going to use the term “operation” pretty liberally
here, but I mean it in the conceptual sense, not in the sense of the GraphQL
spec, where it defines the semantics of an entire GraphQL request.</p>
</blockquote>

<p>A GraphQL request always starts with at least <em>one root API operation</em> and some
finite number of follow-ups. Idiomatically, these follow-ups are queries,
meaning that they just retrieve data, without changing the server state in
observable ways. GraphQL models API operations as <strong>fields</strong>. How a field works
in GraphQL depends on its <strong>type</strong>, which falls into one of two basic
categories:</p>

<ul>
  <li><strong>Scalar</strong> types (<code class="language-plaintext highlighter-rouge">Int</code>, <code class="language-plaintext highlighter-rouge">Float</code>, <code class="language-plaintext highlighter-rouge">String</code>, <code class="language-plaintext highlighter-rouge">Boolean</code>, and <code class="language-plaintext highlighter-rouge">ID</code>, as well as
application-defined <code class="language-plaintext highlighter-rouge">enum</code> and <code class="language-plaintext highlighter-rouge">scalar</code> types) represent the individual pieces
of <em>data actually sent to the client</em>. Contrary how I think of the term scalar
in other contexts, the data can be arbitrarily complex. As far as the GraphQL
spec is concerned, scalars are just opaque blobs of data with validation and
serialization rules. As an operation, a scalar field is terminal data fetch,
with no follow-ups. They are the leaves of the request tree.</li>
  <li><strong>Object</strong> types (<code class="language-plaintext highlighter-rouge">type</code>, <code class="language-plaintext highlighter-rouge">union</code> and <code class="language-plaintext highlighter-rouge">interface</code>) are collections of fields.
As an operation, an object-typed field is an intermediate operation that
serves as the junction point for follow-up operations. But, it doesn’t
directly return any data. They are the branches of the request tree.</li>
</ul>

<p>The entire model for a given API is known as its <strong>schema</strong>. Every schema has a
root query type, whose fields serve as the API’s entry points.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># The root query object type
type Query {
  artwork(id: ID): Artwork
  artist(name: String)
  # … a whole bunch more root fields
}

type Artwork {
  title: String
  artist: Artist
}

type Artist {
  name: String
}
</code></pre></div></div>

<p>A GraphQL query request begins by mentioning at least one of the fields of the
root query object. This represents an initial query. And if that field is an
object, <em>its</em> fields are used to specify any number of follow-up queries.
Critically, <em>any</em> field in the request tree can take arguments, allowing a
request to be parameterized at all depths.</p>

<p>Take this query, for example:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>{
  artwork(id: "andy-warhol-campbells-soup-i-black-bean") {
    title
    artist {
      name
    }
  }
}
</code></pre></div></div>

<p>Here, we tell the server to look up an <code class="language-plaintext highlighter-rouge">Artwork</code> by its slug, and tell us the
title. So far, this is just like REST. But we <em>also</em> tell it to find us the
<code class="language-plaintext highlighter-rouge">Artist</code> for us. Importantly, object fields <em>must</em> be followed up with further
queries, and scalar fields <em>cannot</em> be. With that in mind, it’s easy to see that
<code class="language-plaintext highlighter-rouge">artwork</code> and <code class="language-plaintext highlighter-rouge">artist</code> are object fields, while <code class="language-plaintext highlighter-rouge">title</code> and <code class="language-plaintext highlighter-rouge">name</code> are scalar
fields.</p>

<p>Also note that the fact that there’s also an <code class="language-plaintext highlighter-rouge">artist</code> root query field actually
has nothing to do with its presence under <code class="language-plaintext highlighter-rouge">Artwork</code>. There can be multiple paths
to reach the same GraphQL type. This is defined explicitly by the schema.</p>

<p>Usefully, the server’s response to a GraphQL request will directly mirror the
shape of the request itself. The result of the request above looks like:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>{
  "data": {
    "artwork": {
      "title": "Campbell's Soup I: Black Bean",
      "artist": {
        "name": "Andy Warhol"
      }
    }
  }
}
</code></pre></div></div>

<h1 id="graphql-as-a-meta-scripting-language">GraphQL as a (meta-)scripting language</h1>

<p>Let’s dig a little deeper into the scripting language interpretation of GraphQL,
because this is the crux of how I think people should think of GraphQL. If I
were to guess, I think Facebook…</p>

<ul>
  <li>…knows this is true. After all, much of the spec is devoted to
<a href="http://facebook.github.io/graphql/October2016/#sec-Execution">the execution model of GraphQL</a>.</li>
  <li>…might have backed into this design. It’s well known that they think of their
data as a graph, so I suspect GraphQL might have begun literally as a “graph
query language”, analogous to <a href="https://en.wikipedia.org/wiki/SQL">SQL</a> for
relational databases.</li>
  <li>…thinks that this too difficult to explain, and thus, settled on the query
language paradigm.</li>
</ul>

<p>There are a couple reasons GraphQL might not look like a scripting language to
you. It didn’t to me, at first! After all, you don’t write your request as list
of statements. It doesn’t have a concept of variables, other than parameters to
the whole document. There are no looping constructs or recursion. But I think a
closer look might shift your perspective.</p>

<h2 id="control-flow">Control flow</h2>

<p>It’s true that a GraphQL request doesn’t follow the same vertical sequence of
steps model familiar to most programming languages. But sequencing <em>does</em> exist.
It’s just represented by calling nested fields of object types, terminating in a
scalar field. See this request:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>{
  step1(arg: “something”) {
    step2 {
      step3(arg: "something else”) {
        outputScalar
      }
    }
  }
</code></pre></div></div>

<p>In a more traditional language, this would look more like:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>step1(“something”)
step2()
return step3(“something else”)
</code></pre></div></div>

<p>So, sequencing got a bit more verbose, but it <em>is</em> there.</p>

<p>Interestingly, GraphQL reserves vertical stacking for something that’s an
afterthought in most languages: <em>concurrency</em>. (Granted, there’s no way to
<a href="https://en.wikipedia.org/wiki/Synchronization_(computer_science)">synchronize</a>
concurrent paths of execution.) I’m not going to quote
<a href="https://facebook.github.io/graphql/October2016/">the spec</a>, but search it
yourself, and you can find the word “parallel” in there several times. This
design is intentional.</p>

<h2 id="variables">Variables</h2>

<p>One of the core aspects of programming is the ability to pass intermediate data
around. The most basic way languages accomplish this is with named variables.
Many languages allow variables to be reassigned; some don’t. GraphQL doesn’t
have them at all! But that doesn’t mean data can’t be propagated.</p>

<p>GraphQL supports one kind of propagation, which is the propagation of context
down the sequence of resolvers. It happens implicitly and invisibly. Exactly
what data is propagated and what that means is up to you.</p>

<p>How does this work? Well, if you have worked on GraphQL server code, you know
that every field has a <strong>resolver</strong>.</p>

<ul>
  <li>For scalar fields, the resolver is responsible for returning the actual data
that the client sees.</li>
  <li>For object fields, the resolver instead returns a hidden chunk of data that is
forwarded along to the resolvers of the fields contained in the object. So
these resolvers get their parent object’s hidden data, the global context, and
any arguments, and they can use all of these values to produce their value.</li>
</ul>

<p>Often, we just resolve an object field to a domain object. Its scalar fields
might correspond to properties of that domain object and its object fields might
correspond to related objects. But the architecture is more powerful than this!
A deeply nested field can potentially be the result of the resolved values of
all its parents. It all depends on how you design your resolvers to work
together.</p>

<p>This pattern reminds me a bit of when <a href="https://api.jquery.com/">jQuery</a> first
clicked for me. A lot of details are propagated invisibly within your <code class="language-plaintext highlighter-rouge">jquery</code>
object as you chain method calls to refine your DOM selections.</p>

<h2 id="looping-and-recursion">Looping and recursion</h2>

<p>GraphQL doesn’t have them, plain and simple. Consequently, the GraphQL DSLs you
design are not
<a href="https://en.wikipedia.org/wiki/Turing_completeness">Turing-complete</a>–they will
always halt in a finite amount of steps. This is really important, because it
prevents clients from being able to send servers on errands that will never end.
Of course, the <em>implementations</em> of field resolvers on the server are free to do
whatever they want in full Turing-complete glory.</p>

<h2 id="putting-it-together">Putting it together</h2>

<p>My point here is that the execution model of GraphQL is in many ways just like a
scripting language interpreter. The limitations of its model are strategic, to
keep the technology focused on client-server interaction. What’s interesting is
that you as a developer provide nearly all of the definition of what operations
exist, what they mean, and how they compose. For this reason, I consider GraphQL
to be a <em>meta-scripting language</em>, or, in other words, a toolkit for building
scripting languages.</p>

<h1 id="the-post-rest-world">The post-REST world</h1>

<p>Subtly, this paradigm is a sharp step away from a whole body of knowledge that
models APIs as resources with fixed verbs, which we know as REST. It’s more
appropriate to think of GraphQL requests as a script of remote procedure calls
(RPC). From this perspective, the design of the schema is a lot less about data
modeling than it is a question of how you want your entire API to be traversed.
This encourages a verb-oriented mindset.</p>

<h2 id="verb-orientation">Verb orientation</h2>

<p>Speaking of verbs, you can think of “fetch” as being the default verb in
GraphQL. You model other verbs as <strong>mutations</strong>. I delayed learning about
mutations, because I thought they must be way more complex than queries. Quite
the opposite! They all sit in one big, flat bucket at the root of your schema,
as the fields of the root <code class="language-plaintext highlighter-rouge">mutation</code> type. These fields have a type too, and if
it is an object type, then you can issue effectively any number of follow-up
queries after your mutation completes. Learning about mutations was when it
really dawned on me that <em>fields are just function calls</em>.</p>

<p>Mutations are a major break with REST. In GraphQL, your mutations are defined
under root mutation object that is separate from your root query object.
Therefore, you are immediately asked to accept that they don’t represent verbs
on a resource, but verbs <em>on your entire service</em>. This eliminates one of REST’s
key weak points, namely that complex operations that touch multiple parts of an
application’s data model are difficult to model as a PUT, DELETE, POST, or PATCH
on a single resource. In my experience, this “impedance mismatch” between API
modeling and domain modeling has led to the worst aspects of my HTTP API
designs.</p>

<h2 id="rest-is-dead-long-live-rest">REST is dead. Long live REST!</h2>

<p>It is borderline heresy in some circles to suggest that REST API design is dead.
But I’m saying it. Don’t get me wrong, REST is still a great paradigm for
serving static assets. It’s the <em>API</em> part I have an issue with.</p>

<p>Ironically, I think there’s a strong argument that a GraphQL request document
maps very nicely to the concept of a resource:</p>

<ul>
  <li>It doesn’t change that often, and you could PUT it to store it, perhaps using
a hash of the request document to form the URL.</li>
  <li>GraphQL queries map elegantly to GET operations on a stored query request
document’s URL.</li>
  <li>GraphQL mutations map decently to POST operations to a stored mutation request
document’s URL.</li>
  <li>The arguments of a GraphQL request map elegantly to HTTP query parameters.</li>
</ul>

<p>In other words, GraphQL is simply another formalization layer of HTTP-based API
design. Think of it as being akin to the way JSON representation changed the way
we think about client-server communication in full-stack apps. It’s not so much
that REST will cease to exist, but that it will fade to the background, as an
implementation detail of GraphQL application frameworks.</p>

<h1 id="graphql-is-not-your-data-model">GraphQL is not your data model</h1>

<p>Another realization I’ve had in learning to apply GraphQL is that the schema is
<em>not</em> the actual data model, and therefore raw GraphQL responses cannot be
directly used by the client. You <em>could</em> choose to think of it this way, but
you’re likely to run into some conundrums:</p>

<ul>
  <li><a href="https://github.com/facebook/graphql/issues/101">There is no free-form map data structure</a>.
There are only objects with fixed fields, scalars, and lists.</li>
  <li>It is difficult to design abstractions over types.</li>
  <li>The object tree you get in return from a query request is neither normalized
nor is it an object graph (multiple copies of the same object may be
returned).</li>
  <li>Commonly used protocol patterns, like
<a href="https://facebook.github.io/relay/docs/graphql-connections.html">the connection pattern</a>,
require explicit modeling within your schema.</li>
  <li>The limitations of GraphQL’s type system make certain modeling techniques
difficult to directly model, such as
<a href="https://stackoverflow.com/questions/47933512/representing-enum-object-variant-type-in-graphql">singletons within unions</a>.</li>
  <li>Recursive data types can’t be queried to undefined depth in their nested form.
Think of your comment board with nested replies.</li>
</ul>

<p>The upshot of this is that there likely needs to be some process of conversion
from your native data model on your server to your GraphQL API, and then again
from your client’s API consumption code to its internal data model.
<a href="https://facebook.github.io/relay/">Relay</a> and
<a href="https://www.apollographql.com/client">Apollo</a> serve this purpose. Their utility
wasn’t immediately clear to me when I naively imagined GraphQL to literally be a
system for reproducing a slice of server-side object graph. (Hmm, where might I
have gotten that impression from?)</p>

<p>A lot of discussion in the GraphQL space centers on data modeling—the nouns.
There’s a lot of debate and worthwhile work to be done on that front, but one of
my primary reasons for writing this piece is to think about the verbs. What
happens when you think of GraphQL requests as not just verbs, but <em>chains</em> of
verbs? My inkling is that you start to be able to represent services in a much
more fluid way. Complex processes no longer have to be orchestrated by API
clients or hidden behind unwieldy black-box POST endpoints. Instead, clients can
compose processes from the easily inspectable building blocks that the server
provides via its GraphQL schema. That’s a whole different approach to API
design.</p>

<h1 id="so-where-to-now">So, where to now?</h1>

<p>I began by asserting that the future looks a lot <em>like</em> GraphQL. But I did not
say that GraphQL <em>is the future</em>. I hedge because there are a lot of unanswered
questions and some pain points within today’s GraphQL, even as it paints a
compelling picture of the future. I may write a follow-up piece bringing up some
of these gripes. At the moment, Facebook still largely controls the development
of the technology and it has been slow to evolve. Arguably, this is a good
thing, as the full-stack community continues to digest the basic concepts. But
I’m sure impatient folks will attempt forks or create parallel technologies. How
it all balances out is anybody’s guess.</p>

<p>Nonetheless, today’s GraphQL is already a tremendous leap forward from REST API
design. It much more directly models the sort of data traversals a client needs
to perform in order to do its job. I expect significant refinement within this
space over the next couple years. And after a couple more, the days before
GraphQL will be just another source of lore for grizzled vets like us.</p>
]]></content>
  </entry>
  
</feed>
