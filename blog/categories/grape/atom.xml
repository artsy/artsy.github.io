<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Grape | Artsy Engineering]]></title>
  <link href="https://artsy.github.io/blog/categories/grape/atom.xml" rel="self"/>
  <link href="https://artsy.github.io/"/>
  <updated>2024-05-17T14:49:02+00:00</updated>
  <id>https://artsy.github.io/</id>
  <author>
    <name><![CDATA[]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Adding API Docs with Grape and Swagger]]></title>
    <link href="https://artsy.github.io/blog/2013/06/21/adding-api-documentation-with-grape-swagger/"/>
    <updated>2013-06-21T12:21:00+00:00</updated>
    <id>https://artsy.github.io/blog/2013/06/21/adding-api-documentation-with-grape-swagger</id>
    <content type="html"><![CDATA[<p>The Artsy website, Partner CMS, mobile tools, and all our hackathon experiments are built on top of a core API. We’ve put a lot of effort into documenting it internally. But developers don’t want to have to grok through code. With <a href="https://github.com/intridea/grape">Grape</a> and <a href="https://developers.helloreverb.com/swagger">Swagger</a>, adding an API explorer and exposing the API documentation has never been easier.</p>

<p><img src="/images/2013-06-21-adding-api-documentation-with-grape-swagger/swagger-ui.png" /></p>

<!-- more -->

<h3 id="cross-origin-requests">Cross Origin Requests</h3>

<p>You don’t need to include the API explorer into your application. Instead, enable Cross-Origin Resource Sharing (CORS) with <a href="https://github.com/cyu/rack-cors">rack-cors</a>.</p>

<p>``` ruby Gemfile
gem “rack-cors”</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
``` ruby app.rb
use Rack::Cors do
  allow do
    origins '*'
    resource '*', headers: :any, methods: :get
  end
end
</code></pre></div></div>

<p>Your application will now respond to <code class="language-plaintext highlighter-rouge">OPTIONS</code> and <code class="language-plaintext highlighter-rouge">GET</code> requests with CORS headers. It’s also important to verify that errors still contain CORS headers, as shown in these RSpec tests.</p>

<p>``` ruby spec/cors_spec.rb
context “CORS” do
  it “supports options” do
    options “/”, {}, {
      “HTTP_ORIGIN” =&gt; “http://cors.example.com”,
      “HTTP_ACCESS_CONTROL_REQUEST_HEADERS” =&gt; “Origin, Accept, Content-Type”,
      “HTTP_ACCESS_CONTROL_REQUEST_METHOD” =&gt; “GET”
    }
    last_response.status.should == 200
    last_response.headers[‘Access-Control-Allow-Origin’].should == “http://cors.example.com”
    last_response.headers[‘Access-Control-Expose-Headers’].should == “”
  end
  it “includes Access-Control-Allow-Origin in the response” do
    get “/”, {}, “HTTP_ORIGIN” =&gt; “http://cors.example.com”
    last_response.status.should == 200
    last_response.headers[‘Access-Control-Allow-Origin’].should == “http://cors.example.com”
  end
  it “includes Access-Control-Allow-Origin in errors” do
    get “/invalid”, {}, “HTTP_ORIGIN” =&gt; “http://cors.example.com”
    last_response.status.should == 404
    last_response.headers[‘Access-Control-Allow-Origin’].should == “http://cors.example.com”
  end
end</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
### Grape-Swagger

There's a gem called [grape-swagger](https://github.com/tim-vandecasteele/grape-swagger) that exposes Swagger-compatible documentation from any Grape API with a one-liner, `add_swagger_documentation`.

``` ruby api.rb
module Acme
  class API &lt; Grape::API
    format :json

    desc "This is the root of our API."
    get "/" do

    end

    add_swagger_documentation api_version: 'v1'
  end
end
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">ruby spec/documentation_spec.rb
it "swagger documentation" do
  get "/api/swagger_doc"
  last_response.status.should == 200
  json_response = JSON.parse(last_response.body)
  json_response["apiVersion"].should == "v1"
  json_response["apis"].size.should &gt; 0
end
</code></p>

<h3 id="swagger-ui">Swagger UI</h3>

<p>Use the <a href="http://petstore.swagger.wordnik.com">Swagger Petstore</a>, start your application, enter <em>http://localhost:9292/api/swagger_doc</em> and explore your API!</p>

<p><img src="/images/2013-06-21-adding-api-documentation-with-grape-swagger/swagger-ping.png" /></p>

<h3 id="working-sample">Working Sample</h3>

<p>You can find a working sample in <a href="https://github.com/dblock/grape-on-rack">this demo application</a>, added in <a href="https://github.com/dblock/grape-on-rack/commit/004670804472812322b089fcf6a40b33d68c699c">this commit</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Measuring Performance in Grape APIs with NewRelic RPM]]></title>
    <link href="https://artsy.github.io/blog/2012/11/29/measuring-performance-in-grape-apis-with-new-relic/"/>
    <updated>2012-11-29T21:21:00+00:00</updated>
    <id>https://artsy.github.io/blog/2012/11/29/measuring-performance-in-grape-apis-with-new-relic</id>
    <content type="html"><![CDATA[<p>Knowing how well your API performs in real time is essential to any successful project. That’s because you can’t fix what you can’t measure.</p>

<p>We use and heavily contribute to <a href="http://github.com/intridea/grape">Grape</a>, a Ruby API DSL. Grape is a Rack middleware and we have been reporting API performance data to <a href="http://newrelic.com/">NewRelic</a> with code from <a href="http://code.dblock.org/new-relic-performance-instrumentation-with-grape-api">my older blog post</a>.</p>

<p>It’s time to improve the reporting implementation and address performance monitoring in both development and production environments. Here’s what a single API request breakdown is going to look like.</p>

<p><img src="/images/2012-11-29-measuring-performance-in-grape-apis-with-new-relic/transaction-detail.png" /></p>

<!-- more -->

<h2 id="newrelic-rpm">NewRelic RPM</h2>

<p>The first step is to add the <code class="language-plaintext highlighter-rouge">newrelic_rpm</code> gem to Gemfile, which implements the actual realtime performance reporting to NewRelic. We also use <a href="https://github.com/mongoid/mongoid">Mongoid</a> and the <a href="https://github.com/mongoid/moped">Moped</a> MongoDB Ruby driver, which can be instrumented with <code class="language-plaintext highlighter-rouge">newrelic_moped</code>.</p>

<p>``` ruby Gemfile
gem “newrelic_moped”, “0.0.3”
gem “newrelic_rpm”, “3.3.3”</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
You will need `config/newrelic.yml` in your application. Ours can be found in [this gist](https://gist.github.com/4170458) and works well both locally and on Heroku.

Instrumenting Grape
-------------------

In the past we used [NewRelic::Agent::Instrumentation::API](https://gist.github.com/1233422), which works for any generic Rack middleware. This would report all API calls to NewRelic, but would treat requests to */api/artist/andy-warhol* and */api/artist/wassily-kandinsky* as unrelated. That is because the instrumenter is a Rack middleware that wraps Grape requests *before* they reach Grape. The only information available is the request URL, and not the actual API route that is going to be matched when the request is processed.

We want both requests to */api/artist/andy-warhol* and */api/artist/wassily-kandinsky* to be treated as */api/artist/:id*. Lets insert a middleware inside Grape itself, once the URL has been matched to a route.

``` ruby api.rb
class API &lt;&lt; Grape::API
  use ApiNewRelicInstrumenter
  ...
end
</code></pre></div></div>

<p>The new instrumenter has access to the current API endpoint via <code class="language-plaintext highlighter-rouge">env['api.endpoint']</code> and reports data via NewRelic’s <code class="language-plaintext highlighter-rouge">ControllerInstrumentation</code>.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">ApiNewRelicInstrumenter</span> <span class="o">&lt;</span> <span class="no">Grape</span><span class="o">::</span><span class="no">Middleware</span><span class="o">::</span><span class="no">Base</span>
  <span class="kp">include</span> <span class="no">NewRelic</span><span class="o">::</span><span class="no">Agent</span><span class="o">::</span><span class="no">Instrumentation</span><span class="o">::</span><span class="no">ControllerInstrumentation</span>

  <span class="k">def</span> <span class="nf">call</span><span class="p">(</span><span class="n">env</span><span class="p">)</span>
    <span class="n">trace_options</span> <span class="o">=</span> <span class="p">{</span>
      <span class="ss">category: :rack</span><span class="p">,</span>
      <span class="ss">path: </span><span class="n">env</span><span class="p">[</span><span class="s1">'api.endpoint'</span><span class="p">].</span><span class="nf">routes</span><span class="p">.</span><span class="nf">first</span><span class="p">.</span><span class="nf">route_path</span><span class="p">,</span>
      <span class="ss">request: </span><span class="n">request</span><span class="p">,</span>
      <span class="o">...</span>
    <span class="p">}</span>

    <span class="n">perform_action_with_newrelic_trace</span><span class="p">(</span><span class="n">trace_options</span><span class="p">)</span> <span class="k">do</span>
      <span class="k">yield</span>
    <span class="k">end</span>

  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>The complete code for <code class="language-plaintext highlighter-rouge">ApiNewRelicInstrumenter</code> can be found in <a href="https://gist.github.com/4170469">this gist</a>. It supports enabling and disabling performance reporting by setting <code class="language-plaintext highlighter-rouge">NEW_RELIC_ID</code> and works around NewRelic’s method name limitations (these cannot contain slashes).</p>

<h2 id="development-environment">Development Environment</h2>

<p>You can now see NewRelic performance data in development mode, too. If you mount Grape inside Rails run <code class="language-plaintext highlighter-rouge">NEW_RELIC_ID=foo rails s</code>. Navigate to <em>http://localhost:3000/newrelic</em> to see your local traces.</p>

<p><img src="/images/2012-11-29-measuring-performance-in-grape-apis-with-new-relic/developer-mode.png" /></p>

<p>Drill into an individual request to find several detailed breakdowns of how time was spent, including specific MongoDB queries (under “SQL”, naturally).</p>

<p><img src="/images/2012-11-29-measuring-performance-in-grape-apis-with-new-relic/sql-detail.png" /></p>

<p>NewRelic is a commercial product, but you can run development mode for free! Note that enabling this will triple your local Rails boot time: we enable development mode by setting <code class="language-plaintext highlighter-rouge">development_mode: &lt;%= !!ENV['NEW_RELIC_ID'] %&gt;</code> in <a href="https://gist.github.com/4170458">newrelic.rpm</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Monitor 503s and Timeout Requests on Heroku]]></title>
    <link href="https://artsy.github.io/blog/2012/11/15/how-to-monitor-503s-and-timeout-on-heroku/"/>
    <updated>2012-11-15T21:21:00+00:00</updated>
    <id>https://artsy.github.io/blog/2012/11/15/how-to-monitor-503s-and-timeout-on-heroku</id>
    <content type="html"><![CDATA[<p>We have recently started hitting an unusually high number of “503: Service Unavailable” errors with one of our applications on Heroku. What are these? How can we monitor their quantity and frequency? What’s the fix?</p>

<p><img src="/images/2012-11-15-how-to-monitor-503s-and-timeout-on-heroku/503-error.png" /></p>

<!-- more -->

<h2 id="what-does-503-mean">What does 503 mean?</h2>

<p>A 503 error means “Service Unavailable”. Heroku returns a 503 error when an HTTP request times out between the Heroku routing mesh and your application, including when the application failed to boot. This timeout limit is set to 30 seconds, as <a href="https://devcenter.heroku.com/articles/request-timeout">documented by Heroku</a>, and shows up in the logs as follows.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Nov 14 12:10:50 production heroku/router:
 Error H12 (Request timeout) -&gt; GET artsy.net/api/spline
 dyno=web.11 queue= wait= service=30000ms status=503 bytes=0
</code></pre></div></div>

<p>This usually means that the application could not process the request fast enough, and in very rare cases, that there’s an infrastructure problem with Heroku itself. A 504 error which means “Gateway Timeout” would have probably been a more appropriate choice. Either way, the root cause could be something as simple as trying to run a very long database query or do too much work that doesn’t fit in a 30 seconds window. It could also involve an external service that didn’t respond quickly enough. Your mileage may vary.</p>

<h2 id="monitoring-503s">Monitoring 503s</h2>

<p>503 errors don’t happen within your application, they are reported by the routing mesh. They will not appear in internal monitoring systems attached to your app, including <a href="http://newrelic.com/">NewRelic</a>.</p>

<p>We get the frequency of 503s by sending our Heroku logs to <a href="https://papertrailapp.com/">Papertrail</a> and using their <a href="http://help.papertrailapp.com/kb/how-it-works/alerts">alerts feature</a> to push the number of 503s to <a href="http://www.geckoboard.com/">Geckoboard</a>. You can send these to <a href="http://graphite.wikidot.com/">Graphite</a> or any other monitoring system in the same manner.</p>

<p>This is what it looks like:</p>

<p><img src="/images/2012-11-15-how-to-monitor-503s-and-timeout-on-heroku/503-geckoboard.png" /></p>

<h2 id="aborting-requests">Aborting Requests</h2>

<p>When Heroku reports a 503 status code, it just gives up. Your application continues executing the request though, often to completion, which may take forever. In the meantime, Heroku will send a new request to the dyno that’s still busy, and get a new 503. This is known as a “stuck” dyno.</p>

<p>To prevent dynos from being stuck you must abort the request within the 30 second period. This can be accomplished with the <a href="https://github.com/kch/rack-timeout">rack-timeout</a> gem and setting <code class="language-plaintext highlighter-rouge">Rack::Timeout.timeout = 29</code> in an initializer (or a smaller value within which you want to guarantee a response). The gem automatically inserts itself into a Rails application, but you will need to manually mount it in other Rack apps, such as those using <a href="https://github.com/intridea/grape">Grape</a>.</p>

<p>``` ruby api.rb
class Api &lt; Grape::API
  use Rack::Timeout</p>

<p>desc “Returns a reticulated spline.”
  get “spline/:id”
    Spline.find(params[:id])
  end
end</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
Because your application is now getting a timeout exception, you can also report it in NewRelic. The following works in Grape.

``` ruby
rescue_from Timeout::Error, :backtrace =&gt; true do |e|
  NewRelic::Agent.instance.error_collector.notice_error e,
    uri: request.path,
    referer: request.referer,
    request_params: request.params
  rack_response({
    :type =&gt; "timeout_error",
    :message =&gt; "The request timed out."
  }.to_json, 503)
end
</code></pre></div></div>

<p>Don’t forget to write a test!</p>

<p>``` ruby api_spec.rb
require ‘spec_helper’</p>

<p>describe Api do
  it “times out after Rack::Timeout.timeout” do
    Rack::Timeout.stub(:timeout).and_return(1)
    Spline.stub(:find) { sleep 3 }
    get “/spline/1”
    response.status.should == 503
    response.body.should == ‘{“type”:”timeout_error”,”message”:”The request timed out.”}’
  end
end
```</p>

<h2 id="fixing-timeouts">Fixing Timeouts</h2>

<p>The root causes of timeouts are specific to your application. Our general approach for long running requests is to offload the request processing into a delayed job or background process and “cook” data in a way that makes it readily available to API endpoints. You can read more about this and related aspects of our system architecture in <a href="/blog/2012/10/10/artsy-technology-stack/">this earlier blog post</a>.</p>
]]></content>
  </entry>
  
</feed>
