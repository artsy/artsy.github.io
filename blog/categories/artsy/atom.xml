<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: artsy | Artsy Engineering]]></title>
  <link href="https://artsy.github.io/blog/categories/artsy/atom.xml" rel="self"/>
  <link href="https://artsy.github.io/"/>
  <updated>2024-08-07T18:22:11+00:00</updated>
  <id>https://artsy.github.io/</id>
  <author>
    <name><![CDATA[]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Kubernetes and Hokusai]]></title>
    <link href="https://artsy.github.io/blog/2019/10/18/kubernetes-and-hokusai/"/>
    <updated>2019-10-18T00:00:00+00:00</updated>
    <id>https://artsy.github.io/blog/2019/10/18/kubernetes-and-hokusai</id>
    <content type="html"><![CDATA[<p>When I joined Artsy Engineering a few months ago, I had roughly zero knowledge of Kubernetes. I’d heard the term
thrown around a few times, but had no idea how it worked or what it was used for.</p>

<p>Kubernetes is still a bit of a mystery to me, but I’m able to do a lot of Kubernetes operations quickly and easily
thanks to an open-source tool developed at Artsy: <a href="https://github.com/artsy/hokusai">Hokusai</a>.</p>

<p>In this post, I’ll give some background on <a href="https://kubernetes.io">Kubernetes</a>, a brief history of Hokusai, a
description of its functionality, and some pointers for how to get started using it.</p>

<!-- more -->

<h1 id="what-is-kubernetes">What is Kubernetes?</h1>

<p>On a high level, Kubernetes is a tool designed to <em>orchestrate containers at scale.</em></p>

<p>Let’s break that down a bit. First, some helpful vocab:</p>

<p><strong>Container</strong>: Effectively code + all necessary dependencies for an application. A
<a href="https://www.docker.com/resources/what-container">“standardized unit of software”</a>.</p>

<p><strong>Pods</strong>: A group of one or more containers. One container per pod is the most common use case.</p>

<p><strong>Deployment</strong>: A Kubernetes component (read: program) that provides declarative updates to pods and manages their
lifecycles (i.e. creating new pods when new code is rolled out, rolling back to an earlier state, scaling up to
more pods, etc.).</p>

<p><strong>Node</strong>: A physical or virtual machine that runs a pod or pods.</p>

<p><strong>Cluster</strong>: A node or group of nodes.</p>

<p><strong>Container orchestration</strong>: A systemized approach to managing containers. Allows for things like auto-scaling,
easy rollouts and rollbacks, and automation of container downtime (i.e. something goes wrong in your process and
causes your app to crash; a new container gets spun up immediately so that your app doesn’t go down).</p>

<p>Sources: <a href="https://kubernetes.io/docs/concepts/overview/what-is-kubernetes/">Kubernetes docs</a>,
<a href="https://www.infoworld.com/article/3268073/what-is-kubernetes-your-next-application-platform.html">Infoworld</a>,
<a href="https://www.docker.com/resources/what-container">Docker docs</a></p>

<p>Kubernetes, in a general sense, allows you to configure the containers in which your application will run. With a
properly configured Kubernetes cluster, this makes it easy to scale applications up or down as needed to deal with
traffic patters, maintain a zero-downtime deployment, and more. Very cool.</p>

<p>To sum up the structure of applications running on Kubernetes: clusters contain nodes which contain pods (which are
managed by deployments) which contain containers. This can be tricky to wrap your head around without
experimentation and personal experience—Hokusai aims to simplify the ways in which a developer can interact with
applications running on Kubernetes.</p>

<h1 id="what-is-hokusai">What is Hokusai?</h1>

<p>When Artsy’s Engineering team was contemplating a move to Kubernetes from Heroku, we had beef with a few things.</p>

<p>For one, we wanted to be able to do a few core things simply and easily using the command line. While Kubernetes
has a robust API and CLI tooling using <a href="https://kubernetes.io/docs/reference/kubectl/overview/">kubectl</a>, it’s also
very complex. We wanted to be able to quickly and easily do the things we were used to doing with Heroku; we
preferred <code class="language-plaintext highlighter-rouge">heroku logs</code> to <code class="language-plaintext highlighter-rouge">kubectl logs [POD]</code> (where we would have to either look up or know the specific pod
name we wanted, even though pods are being spun up and taken down all the time).</p>

<p><a href="https://helm.sh">Helm</a>, the de-facto package manager for Kubernetes, also didn’t quite fit our needs. Helm is
great for big, complex implementations with Kubernetes, and it’s very useful for managing releases. Artsy
Engineering wanted something that didn’t involve quite as many complex charts, and we’re not as concerned as some
orgs with versioned releases since our focus is mostly on web apps.</p>

<p>Basically, we wanted our commands to be application-level instead of pod- or node-level. We wanted a little more
abstraction than was offered by <code class="language-plaintext highlighter-rouge">kubectl</code>, and a little less than Helm.</p>

<p>And there was the issue of review apps. Review apps are basically standalone versions of an application that fall
completely outside a normal production pipeline. They allow you to test big or scary changes in functionality
without even putting them on a staging instance (which could affect other developers’ work or be deployed
accidentally).</p>

<p>Kubernetes doesn’t support review apps out of the box. There are some add-ons that offer them, but at the time
Artsy was looking to switch, I don’t think they existed or were widespread.</p>

<p>Thus was born Hokusai: a tool that makes interacting with applications deployed on Kubernetes from the command line
simple. Need logs? <code class="language-plaintext highlighter-rouge">hokusai production logs</code>. Need to run a rake task? <code class="language-plaintext highlighter-rouge">hokusai staging run 'rake db:migrate'</code>. Or
want to set up a review app? There are a
<a href="https://github.com/artsy/hokusai/blob/master/docs/Review_Apps.md">few steps involved</a>, but you can have a
fully-featured copy of your app up and running in a few minutes.</p>

<p>The end of this post has a larger cheatsheet for handy Hokusai commands, but for now, let’s talk about how you can
use it yourself.</p>

<h1 id="how-can-i-set-up-hokusai-with-my-project">How can I set up Hokusai with my project?</h1>

<p>I should begin by noting that Hokusai is developed to work with AWS—if your application is running on a different
provider, you might have to hold off on Hokusai for now :( (or
<a href="https://github.com/artsy/hokusai">open a PR in Hokusai</a> yourself!) We do aim to support more clouds in the future,
and Hokusai mostly interacts directly with Kubernetes or Docker APIs.</p>

<p>Installing hokusai is super easy! You can see full instructions in the README on
<a href="https://github.com/artsy/hokusai">GitHub</a>, but if you’re already set up with Python, pip, Docker, Docker Compose,
and Git, you can do a quick install of Hokusai packed by <a href="https://www.pyinstaller.org/">PyInstaller</a> with Homebrew:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ brew tap artsy/formulas
$ brew install hokusai
</code></pre></div></div>

<p>There’s more robust directions
<a href="https://github.com/artsy/hokusai/blob/master/docs/Getting_Started.md">in the Hokusai repo</a>, but the very short
version is that <code class="language-plaintext highlighter-rouge">hokusai setup</code> handles most of the basics (creation of a Dockerfile, a config folder, and a few
other bits and bobs). From there, you can customize according to the needs of your project. It’s also possible to
write boilerplate templates to share with developers in your organization—you can see Artsy’s
<a href="https://github.com/artsy/artsy-hokusai-templates">here</a>.</p>

<p>You should also check out Ash’s <a href="https://artsy.github.io/blog/2018/01/24/kubernetes-and-hokusai/">great post</a> on
setting up a new Hokusai project—he runs through the process of setting up a new Rails application with Hokusai in
an easy-to-follow way that also details small hitches he ran into along the way.</p>

<h1 id="whats-next-for-hokusai">What’s next for Hokusai?</h1>

<p>As Hokusai has grown and changed over the years (the GH repo was created in November 2016!), a few things have
changed.</p>

<p>For one, it’s been increasingly used in coordination with CircleCI. Hokusai has made it really easy to standardize
a lot of application configuration across Artsy’s applications. We have
<a href="https://github.com/artsy/orbs/blob/master/src/hokusai">CircleCI orbs</a> set up for Hokusai specifically, which
standardize the way Hokusai is invoked in our CI, among other things. Given how helpful it’s been to have a single
source of CircleCI config for many of our apps, we’re pondering the idea of a central source for Kubernetes Hokusai
config. In other words, we’d like to have a “baseline” for things like deployments—something that could be
overriden as necessary in specific projects but would make spinning up new projects easy. This would effectively
allow Hokusai to support functionality similar to Helm’s <a href="https://helm.sh/docs/chart_template_guide/">templates</a>,
but in a way that can be consumed across project repos.</p>

<h1 id="hokusai-and-beyond">Hokusai and beyond</h1>

<p>Personally, Hokusai has been very useful to me as a kind of “training wheels” for Kubernetes. To be able to quickly
and easily start interacting with Kubernetes, even as a complete Kubernetes noob, was very empowering and helped me
be less intimidated by it. As I’ve spent more time interacting with Hokusai, I’ve started to understand what’s
going on behind the scenes, and I’ve found myself poking around in the Kubernetes docs more than once. I’m excited
to keep learning more about Kubernetes and to start contributing to Hokusai!</p>

<p>Hokusai significantly lowers the barriers to interacting with Kubernetes apps and centralizes the complexity
inherent in doing so. It’s been invaluable in transitioning our engineering team to working with Kubernetes. If you
or your organization are in the midst of a similar transition—or if you have a sharp divide in Kubernetes knowledge
and comfort within your team—we suggest giving it a try! Our issues are open for bug reports and feature requests,
and we certainly welcome PRs with improvements.</p>

<h2 id="appendix-a-useful-hokusai-commands">Appendix A: Useful Hokusai commands</h2>

<p>These are the commands I find myself using on a regular basis. If you’re playing around with Hokusai, you can also
run most commands with <code class="language-plaintext highlighter-rouge">--help</code> to get more information on their usage.</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">hokusai [production|staging] env get</code>: Print all of the environment variables from your application’s pod</li>
  <li><code class="language-plaintext highlighter-rouge">hokusai [production|staging] env set "ENV=value"</code>: Set an environment variable on your application’s pod</li>
  <li><code class="language-plaintext highlighter-rouge">hokusai [production|staging] run 'rake db:migrate'</code>: run a Rails migration</li>
  <li><code class="language-plaintext highlighter-rouge">hokusai [production|staging] run 'bundle exec rails c' --tty</code>: Open a Rails console for your app (I have this
one aliased to <code class="language-plaintext highlighter-rouge">hokusai-[production|staging]-console</code>)</li>
  <li><code class="language-plaintext highlighter-rouge">hokusai [production|staging] refresh</code>: Refresh the application’s deployment by recreating its containers</li>
  <li><code class="language-plaintext highlighter-rouge">hokusai build</code>: Build your application’s Docker image as defined in a <code class="language-plaintext highlighter-rouge">hokusai/build.yml</code> file</li>
  <li><code class="language-plaintext highlighter-rouge">hokusai test</code>: Boot a test environment and run a test suite as defined in <code class="language-plaintext highlighter-rouge">hokusai/test.yml</code></li>
  <li><code class="language-plaintext highlighter-rouge">hokusai pipeline gitcompare --org-name [org]</code>: Spits out a URL for a git comparison between production and
staging images</li>
  <li><code class="language-plaintext highlighter-rouge">hokusai pipeline gitlog</code>: Print a git log for commits between the image deployed on production and the image on
staging. Handy if you need to get the SHA of a staged commit quickly, e.g. for rollback purposes (?)</li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[So You Want to Be an Engineer]]></title>
    <link href="https://artsy.github.io/blog/2019/03/12/so-you-want-to-be-an-engineer/"/>
    <updated>2019-03-12T00:00:00+00:00</updated>
    <id>https://artsy.github.io/blog/2019/03/12/so-you-want-to-be-an-engineer</id>
    <content type="html"><![CDATA[<p>First of all, that’s very exciting! Software engineering is pretty darn cool—you get to learn lots of new things,
understand the technology you use every day better, and contribute to the mysterious maw known as “the internet”.</p>

<p>Last February, I also decided that I wanted to pursue computer engineering. I’d been at Artsy for a bit less than
two years at that point, first as a marketing intern working on SEO and then as a coordinator on the CRM (read:
email) team. I’d consistently been working on small technical projects; first doing
<a href="https://github.com/artsy/positron/commit/3176282a3ea94c626e9d851b7c0dd27a1bb0fcb4">some work</a> on a tool for SEO
optimization for our Editorial team, then building
<a href="http://artsy.github.io/blog/2018/11/19/mjml/">emails with MJML</a>, and a few other bits and bobs. But I didn’t think
of it as a serious pursuit.</p>

<p>Mostly, that was due to my experience programming in the past—I did about half a CS major in undergrad. At the
time, I felt that programming wasn’t right for me, and I dropped the major during my third year.</p>

<p>It was Artsy’s Engineering team that convinced me that programming was something that I both wanted to and could
do. Our engineers have always welcomed learners and been happy to answer questions and empower other teams to do
technical work. I eventually realized that the parts of my work where I was coding were the parts I enjoyed the
most, and that I would likely feel more fulfilled if I made programming my full-time occupation.</p>

<p>Here’s what that journey looked like. Hopefully my experience proves helpful to you as you begin (or finish) yours!</p>

<!-- more -->

<h1 id="step-one-tell-people-what-you-want">Step One: Tell People What You Want</h1>

<p>This might’ve been the single biggest learning I took away from this experience: <em>if you tell people you want
something, you might just get it.</em></p>

<p>That may sound super obvious. It wasn’t for me. I’ve usually been very passive in my career decisions, taking the
path of least resistance and considering myself lucky when I was able to keep progressing. In this case, I was
making a substantial departure from that idea by being proactive about what it was I wanted.
<a href="https://engineering.gusto.com/i-didnt-want-to-be-a-manager-anymore-and-the-world-didnt-end/">This post</a> by
<a href="https://twitter.com/NoaElad">Noa Elad</a> does a great job with this topic and is certainly worth a read.</p>

<p>The first person I told at Artsy was <a href="https://twitter.com/orta">Orta</a>. He’d often encouraged me to develop my
technical skills, and since he knows Artsy’s engineering team and stack better than just about anyone, I figured
he’d be able to point me in the right direction when it came to learning resources and navigating company politics
to get to my eventual goal.</p>

<p>The second person I told was my manager on the CRM team. I fortunately had a very good relationship with my manager
and was confident that she would help me if she could. And by telling her early, I was giving her more opportunity
to advocate for me and making it easier for her to replace me in the event that I was able to switch teams.</p>

<p>The third person I told was Artsy’s CTO, <a href="https://www.dblock.org/">dB</a>. This was Orta’s recommendation—dB would be
able to tell me if and when a move might be possible, and he could suggest things I should do to improve my chances
of making the switch.</p>

<p>I also didn’t keep it a secret from the rest of my team or the company. I didn’t show up wearing a shirt that said
“ENGINEER” on it, but I told people, “I’m working on becoming an engineer. I’m really hoping to stay at Artsy, but
if there’s not a role open for me, that’s fine—I’ll search elsewhere.”</p>

<p>The net outcome of these conversations was that there wasn’t a role open right then (and that I still had lot to
learn before I’d be ready when one became available), but I also left with a better idea of what I should learn and
what I could expect from the coming months.</p>

<h1 id="step-two-figure-out-what-you-want-to-learn">Step Two: Figure Out What You Want to Learn</h1>

<p>The answer to that question really depends on who you are, where you work, and where you <em>want</em> to work.</p>

<p>I wanted to work at Artsy, and I felt that I was most interested in front-end work. So I asked a few of our
engineers to help me understand our stack and to recommend frameworks/languages I should learn.</p>

<p>If you’re interested in changing companies as well as careers, it’s worth seeing if your target company or
companies have open source code you can check out. See if you can find them on <a href="https://www.github.com">GitHub</a> and
look at some of their recently updated repos. If you already have some coding experience, see if you can contribute
a little bit—even fixing small bugs or typos is a good place to start, since you’re both contributing to their
codebase (which will help you if you land an interview) and learning more about their stack. dB recommended that I
do this with Artsy’s code.</p>

<p>As with most companies that have been around for more than a year or two, Artsy is home to projects with many
different stacks. However, most of our newer front-end stuff—things that are recently updated or currently in
development—is built on React using TypeScript. So my first question was “what do I need to know in order to write
TypeScript code in a React framework?”</p>

<p>Fortunately, a lot of other people have the same question.</p>

<h1 id="step-three-decide-how-you-want-to-learn-it">Step Three: Decide How You Want to Learn It</h1>

<p>First: <strong>there is no wrong way to go about learning to code</strong>. Whether it takes you 6 months or 6 years, whether
you learn one language or a dozen, whether you ask for a lot of help or do it all yourself, <strong>you are learning and
that is valuable</strong>. Learning to code is not a magical skill. Like just about everything, it’s a matter of putting
in time. Just keep trying, even small things, and you <em>will</em> make progress.</p>

<p>Lots of people who want to become engineers go to coding bootcamps like <a href="https://flatironschool.com/">Flatiron</a> or
<a href="https://generalassemb.ly/">General Assembly</a>. That’s a very reasonable thing to do! I had a decent grounding in CS
fundamentals thanks to my experience in undergrad, and as a result, I initially decided I wouldn’t do a coding
bootcamp—I felt I had enough experience to benefit from the multitude of online courses and open source projects
out there.</p>

<p>However, there are definitely real and significant benefits do doing a bootcamp. Here are three that I can think
of:</p>

<ol>
  <li>Clear curriculum. At times, I was overwhelmed by the possible ways to proceed and stopped making progress as a
result. Bootcamps take the guesswork out.</li>
  <li>Timeline. Because I didn’t have a hard date set for a transition or interview, it was up to me to determine how
fast/slow I worked on things, and I stagnated at times as a result.</li>
  <li>Community. While the open source community is very much a real thing, and you can find lovely people on the
internet who want to help learners like yourself, it’s not the same as having multiple people learning the same
thing at the same time in the same physical space.</li>
</ol>

<p>The downsides, of course, are that coding bootcamps are expensive and time-consuming. Most of us don’t have the
luxury to leave a job, pay $10K – $15K in fees, and spend a couple months at a full-time bootcamp with no income.
There are other models, such as online-only bootcamps or after-hours classes, but those come with challenges of
their own.</p>

<p>I’d say that If you can afford a bootcamp and have the time, it’s a great way to jumpstart a coding career, but you
don’t have to attend one to become a good engineer.</p>

<p>If you decide to go the non-bootcamp route, you also have a lot of good options. I did courses through
<a href="https://www.udemy.com">Udemy</a>, which has a lot of courses that are literally always on sale for $10 - $20. There
are many other similar services out there as well, like <a href="https://www.udacity.com">Udacity</a>,
<a href="https://www.codecademy.com/">Codecademy</a>, and <a href="https://teamtreehouse.com/">Treehouse</a>.</p>

<p>I also highly recommend attending IRL meetups, because that’s where you can make connections and learn from others
most easily. I’m a semi-regular attendee at the <a href="https://www.meetup.com/CocoaPods-NYC/">CocoaPods meetup</a> hosted by
<a href="https://twitter.com/ashfurrow">Ash</a> and Orta at Artsy HQ, and <a href="https://www.meetup.com/find/tech/">meetup.com</a> and
<a href="https://peerlab.community/">peerlab.community</a> are great places to find other events.</p>

<h1 id="step-four-get-comfortable-not-knowing-things">Step Four: Get Comfortable Not Knowing Things</h1>

<p>When learning engineering concepts (and practicalities), there’s a lot you’re not going to know.</p>

<p>This piece of advice is important both when learning and once you actually land an engineering job (it’s been one
of the hardest parts of my first ~3 months on Artsy engineering).</p>

<p>Part of what makes engineering so cool is that you are always challenged to learn new things and solve new
problems. But especially at first, the mental toolbox you have is pretty limited. When you don’t know a language or
framework, it’s very hard to solve problems using it—your first problems are likely to be syntax errors and
misunderstandings.</p>

<p>One of the best things you can do is learn how to ask good questions and then ask them. You might be asking them on
a forum, in GitHub issues, in meetings, or in conversation with your
<a href="https://en.wikipedia.org/wiki/Rubber_duck_debugging">favorite rubber duck</a>. Regardless, just asking them will
help, and asking lots of questions is one of the best way to learn things fast—but it takes humility and
self-awareness. <a href="https://twitter.com/b0rk">Julia Evans</a> has a <a href="https://jvns.ca/wizard-zine.pdf">great zine</a> that
has good advice on asking questions, among many other things. For a few more fun and helpful resources, see
<a href="https://github.com/artsy/README/blob/master/resources/tech-learning.md">Artsy’s README</a>.</p>

<h1 id="step-five-recognize-what-you-bring-to-the-table">Step Five: Recognize What You Bring to the Table</h1>

<p>Ok, so you’re reconciled to the fact that you have a lot to learn—but what about all the things you already know?
Those are important too!</p>

<p>Even if your past work and/or life experience has nothing to do with computers or programming, it can still have
value as you work towards engineering (and after you become an engineer). That value can take a lot of different
forms, and since everyone’s experiences are different, I can’t say for sure what impact your prior knowledge will
have.</p>

<p>For me, there are a few experiences I brought to engineering that were particularly helpful. Because I was
transitioning from one team at Artsy to another (Marketing → Engineering), I brought with me a broad understanding
of Artsy’s goals and needs, which helps with day-to-day prioritization. And when I’m in a sprint planning meeting
or a product review and someone has a question about email or marketing, I can often answer—or at least I know who
to talk to to get to the bottom of the issue quickly. Plus if at some point my team needs to code emails, my
<a href="http://artsy.github.io/blog/2018/11/19/mjml/">past experience</a> will come in very handy.</p>

<p>There are also life experiences that serve me well on the Engineering team. My work as a server and bartender made
me good at clear communication with stakeholders. Cooking for big groups of friends has made me better at
estimating how long I’ll need for tasks. Don’t underestimate the power of “soft skills”—even companies like Google
<a href="https://www.washingtonpost.com/news/answer-sheet/wp/2017/12/20/the-surprising-thing-google-learned-about-its-employees-and-what-it-means-for-todays-students">have come to recognize</a>
that it’s often the non-technical skills that separate good engineers from great ones.</p>

<p>————</p>

<p>Moving to engineering has been a tricky process, but one I’m very grateful to have experienced. I’m lucky to work
at an organization where moving from email marketing to engineering is possible, and I’m even luckier to have had
the support of engineers, friends, and engineer-friends in making the move. If you end up pursuing this course as
well, I wish you the best of luck!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Open Source by Default: Docs]]></title>
    <link href="https://artsy.github.io/blog/2018/08/21/OSS-by-Default-Docs/"/>
    <updated>2018-08-21T00:00:00+00:00</updated>
    <id>https://artsy.github.io/blog/2018/08/21/OSS-by-Default-Docs</id>
    <content type="html"><![CDATA[<p>Artsy is growing up. We have thousands of subscriber galleries paying 3 to 4 figure monthly fees. As we’re starting
to see a real market-fit, and have started to mature our organization. For example, this year we introduced product
managers into our 8 year old company to help us figure out how to build the right things. We actually started having
open headcount on Engineering again, for the first time <em>in years</em>.</p>

<p>As a part of maturing, our team has really had to start considering how to make parts of our culture explicit
instead of implicit. We have new, awesome folks wanting to understand why things are the way they are as well as
folk who are raising up to new responsibilities only to find them completely un-documented.</p>

<p>In-part, having a consistent team for so long hasn’t made it worth the time to document things everyone knows, but
growth is very happy to disrupt that balance. Now we’re shipping documentation updates weekly, to all sorts of
places. In trying to write an awesome document, which I’ll cover later, I looked at how we had consolidated our
documentation over the last few years, and saw that we had fragmented due the tensions around wanting to write
publicly.</p>

<p>This post covers that tension, and how we came about to the new docs setup.</p>

<!-- more -->

<h2 id="fragmentation">Fragmentation</h2>

<p>Prior to today, we had 4 main repos for documentation:</p>

<ul>
  <li>🔒 <code class="language-plaintext highlighter-rouge">artsy/potential</code> (2015) - Our onboarding repo, and general docs hub</li>
  <li><a href="https://github.com/artsy/mobile"><code class="language-plaintext highlighter-rouge">artsy/mobile</code></a> (2015) - The mobile team’s repo</li>
  <li><a href="https://github.com/artsy/guides"><code class="language-plaintext highlighter-rouge">artsy/guides</code></a> (2016) - A place for standards and guides</li>
  <li><a href="https://github.com/artsy/meta"><code class="language-plaintext highlighter-rouge">artsy/meta</code></a> (2017) - Externally-facing docs for non-Artsy folk</li>
</ul>

<p>Now we have two:</p>

<ul>
  <li>🔒 <code class="language-plaintext highlighter-rouge">artsy/potential</code> - Support docs, and private documentation</li>
  <li><a href="https://github.com/artsy/README"><code class="language-plaintext highlighter-rouge">artsy/README</code></a> - Documentation Hub, split into sections</li>
</ul>

<p>When we created potential, it started as an open repo with the focus of on-boarding information. Over time it’s
scope grew to cover more general team, repo and setup documentation. We ended up debating whether it should be a
private repo instead though.</p>

<p>The key arguments for closing it were:</p>

<ul>
  <li>There are sensitive things we want to document</li>
  <li>We can to write about info which lives in other private repos with full context</li>
  <li>By making potential private we could have one, authoritative source of truth for Artsy engineering newcomers</li>
</ul>

<p>These are all great, reasonable arguments and so we made the repo private - but with hindsight, closing the repo
split contributors to our documentation. For example, the mobile team split moved their documentation into separate
repo the week potential was made private. The web team used the blog, or kept notes in a per-project basis.
Culturally, potential was considered the domain of our platform team. The platform team had the most cross-cutting
concerns, and were also the team with the strongest need for documenting private information like domain models,
outages, system failures, server access details and contact details.</p>

<p>By 2016, we had successfully <a href="https://github.com/artsy/README/blob/master/culture/engineering-principles.md#de-silo-engineers">de-silo’d</a> mobile engineering at Artsy via React Native, so the mobile team
wasn’t a centralized team with resources anymore. This meant that new docs shouldn’t really live inside the
artsy/mobile repo. The front-end teams had been using the blog posts and public gists to keep track of
documentation, which isn’t really a good pattern. GitHub gists get lost, and blog posts aren’t living documents.</p>

<p>This eventually caused enough dissonance that the front-end folk called it quits and started a new docs repo. Our
discussion on what we want a GraphQL schema to look like definitely didn’t fit in the <a href="https://github.com/artsy/mobile"><code class="language-plaintext highlighter-rouge">artsy/mobile</code></a> repo and
we wanted to share it with the other GraphQL folk we were talking to, so having it in a private repo didn’t make
sense. We couldn’t do editorial review against a gist, and we eventually just started a new documentation repo:
<a href="https://github.com/artsy/guides"><code class="language-plaintext highlighter-rouge">artsy/guides</code></a>.</p>

<p>Once we had a space, then new docs started coming. We documented the RFC process, and how to run retrospectives in
the guides repo. As a guide on <em>how-to-do-x</em> - these all made sense. What didn’t make sense was that we were
regularly repeating ourselves when talking about Artsy Engineering to the public.</p>

<p>There wasn’t a good space for that in mobile nor guides, and so a new repo was created: <a href="https://github.com/artsy/meta"><code class="language-plaintext highlighter-rouge">artsy/meta</code></a>.</p>

<p>Soon, this became the home of docs from anyone that preferred writing in the public. <a href="https://github.com/artsy/meta"><code class="language-plaintext highlighter-rouge">artsy/meta</code>’s</a> domain
was vague enough that anyone could document any internal processes as being something externally facing. For example
documentation on how to run <a href="https://github.com/artsy/README/blob/master/playbooks/running-lunch-and-learn.md#running-a-lunch--learn">our Lunch &amp; Learn</a>, or <a href="https://github.com/artsy/README/blob/master/events/open-standup.md#dev-team-standup-at-artsy">Open Stand-up</a>.</p>

<h2 id="open-docs-by-default">Open Docs by Default</h2>

<p>This came to an inflection point when I joined the platform team, and felt the need to write cross-team
documentation that really didn’t fit with of our existing domains for documentation. I believe in <a href="https://github.com/artsy/README/blob/master/culture/engineering-principles.md#leverage-your-impact">leveraging my
impact</a>, so any time writing docs should be industry grade-stuff, not only available to those lucky enough to
be in <a href="https://www.artsy.net/jobs#engineering">our GitHub org</a>.</p>

<p>So I spent some time debating the merits of our current infrastructure for docs:</p>

<div class="language-diff highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gi">+ New folk know to start at artsy/potential
+ The platform team have a private space for writing any private details about architecture and security
+ The wiki is well used as a source for all information on our engineering support process
</span><span class="gd">- By having our primary source of docs being private, we fragmented into many sources
- New people have to figure out what team may have wrote docs to guess where docs might be
- The number of contributors is low to artsy/potential
</span></code></pre></div></div>

<p>I wanted to imagine what a world looked like where the docs were <a href="https://github.com/artsy/README/blob/master/culture/engineering-principles.md#open-source-by-default">open by default</a>. So, I consulted our
friends in openness: <a href="https://buffer.com">Buffer</a>. I found that they had <a href="https://github.com/bufferapp/README"><code class="language-plaintext highlighter-rouge">bufferapp/README</code></a> - which looked an awful lot
like what I was thinking.</p>

<p>I wondered about if we moved Artsy to have an open space for the initial docs, and treated potential as it’s private
sidekick:</p>

<div class="language-diff highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gi">+ New folk know to start at artsy/README
+ We can migrate all sources of docs into one place
+ artsy/potential can still be used as a place for writing private details
+ Our methodology for docs aligns with our methodology for source code
+ By consolidating, we can improve working via scripts/tooling to make it feel good
</span><span class="gd">- It gives up on the idea that you can have a single source of documentation
- You have to be a bit more cautious about what you write in docs
- It's a bunch of work, and you have to deprecate a lot of docs and handle re-directs for URLs
</span></code></pre></div></div>

<p>I opted to use our <a href="https://github.com/artsy/README/blob/master/playbooks/rfcs.md">RFC process</a> to discuss the idea of splitting, yet consolidating, documentation. We talked
about it for two weeks with some great points for and against. Mostly summed up above, but we also discussed the
idea of moving private docs into <a href="https://www.notion.so/">notion.so</a>. We’re still figuring out what the scope of notion is in</p>

<p>The RFC passed and I started work on a new docs hub last weekend. It was a nice shallow task I could do to keep my
mind busy. It’d been a hard week.</p>

<p>I wasn’t aiming to rock the boat, so I created a new private repo on GitHub ( turns out we were at our GitHub limit
for private repos, so I <a href="https://github.com/artsy/node-artsy-licenses/">open sourced another</a> to give us a free private slot - hah ) and <a href="https://github.com/artsy/README/pull/1">made a PR</a>.
This <a href="https://github.com/artsy/README/pull/1">artsy/README#1</a> outlined my thoughts on how the merge can work, and gave a chance for others to say “this
doc shouldn’t be public.”</p>

<p>I focused on making minimal changes, but on making sure that all docs were back up to date with whatever they were
covering. However, I set up tooling like <a href="https://prettier.io">prettier</a>, <a href="https://github.com/typicode/husky#husky---">commit-hooks</a> for tables of contents and <a href="https://danger.systems">danger</a> to
make life easier for anyone wanting to make larger changes, see the <a href="https://github.com/artsy/README/blob/master/CONTRIBUTING.md"><code class="language-plaintext highlighter-rouge">CONTRIBUTING.md</code></a>.</p>

<p>Once the opening PR was merged, I converted the repo to be public, sent off PRs closing <a href="https://github.com/artsy/meta/pull/45">meta</a>, <a href="https://github.com/artsy/guides/pull/8">guide</a>
and <a href="https://github.com/artsy/mobile/pull/106">mobile</a>, then marked them as archived, and started debating how to announce that this happened. What
better form than a blog post? So I started writing:</p>

<blockquote>
  <p>Artsy is growing up. We have
thou<img src="/images/ossdocs/small_blinking_text_cursor_by_neripixu-d6lwqe9.gif" height="28" width="4" style="width:4px; margin:0; top:5px; margin-left:2px;" /></p>
</blockquote>

]]></content>
  </entry>
  
</feed>
