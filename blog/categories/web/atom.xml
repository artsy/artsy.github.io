<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: web | Artsy Engineering]]></title>
  <link href="https://artsy.github.io/blog/categories/web/atom.xml" rel="self"/>
  <link href="https://artsy.github.io/"/>
  <updated>2024-05-17T14:49:02+00:00</updated>
  <id>https://artsy.github.io/</id>
  <author>
    <name><![CDATA[]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Server-Rendering Responsively]]></title>
    <link href="https://artsy.github.io/blog/2019/05/24/server-rendering-responsively/"/>
    <updated>2019-05-24T00:00:00+00:00</updated>
    <id>https://artsy.github.io/blog/2019/05/24/server-rendering-responsively</id>
    <content type="html"><![CDATA[<p>We use server-side rendering (SSR) to deliver every page you hit on <a href="https://artsy.net">artsy.net</a>. We decided on
using SSR for many reasons, amongst them performance.
<a href="https://artsy.github.io/blog/2013/11/30/rendering-on-the-server-and-client-in-node-dot-js/">We wrote about this all the way back in 2013</a>!</p>

<p>We’ve also built our site using responsive design, so you get a browsing experience optimized for your device.</p>

<p>Combining SSR and responsive design is a non-trivial problem. There are many concerns to manage, and they are
sometimes in conflict with each other. We server render for performance reasons, but we also want to be sure our
app is performant when your browser takes over, all while optimizing for accessibility and SEO.</p>

<p>This article describes the tools we use on <a href="https://artsy.net">artsy.net</a> to combine SSR and responsive design.</p>

<!-- more -->

<h2 id="tool-1-styled-system">Tool 1: <a href="https://styled-system.com"><code class="language-plaintext highlighter-rouge">styled-system</code></a></h2>

<p>We handle the majority of responsive styling differences with
<a href="https://styled-system.com/responsive-styles"><code class="language-plaintext highlighter-rouge">styled-system</code></a>. This has been a really great addition to our
toolbox. Here’s a component that would render a <code class="language-plaintext highlighter-rouge">div</code> (<code class="language-plaintext highlighter-rouge">Box</code>) with a width of 50% for small screens, 75% for
medium-sized screens, and 100% for anything larger:</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;Box</span> <span class="na">width=</span><span class="s">{["50%",</span> <span class="err">"75%",</span> <span class="err">"100%"]}</span><span class="nt">&gt;</span>
  ...
<span class="nt">&lt;/Box&gt;</span>
</code></pre></div></div>

<p>Another example:</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;Flex</span> <span class="na">flexDirection=</span><span class="s">{["column",</span> <span class="err">"row"]}</span><span class="nt">&gt;</span>
  <span class="nt">&lt;Box</span> <span class="na">px=</span><span class="s">{40}</span> <span class="na">background=</span><span class="s">"black10"</span><span class="nt">&gt;</span>
    ...
  <span class="nt">&lt;/Box&gt;</span>
<span class="nt">&lt;/Box&gt;</span>
</code></pre></div></div>

<p>While only one property in this example is specifying an array of values to be used at different breakpoints, all
of those properties <em>can</em> take an array for different breakpoints. As developers, we love this experience. We can
apply subtle differences to components across breakpoints with very little code and effort.</p>

<p>We use <a href="https://styled-system.com"><code class="language-plaintext highlighter-rouge">styled-system</code></a> extensively within
<a href="https://palette.artsy.net/">our design system</a>. You can
<a href="https://github.com/artsy/reaction/blob/32de03fe526355258655ded510d23335a456b9ce/src/Components/NavBar/Menus/MoreNavMenu.tsx#L23-L28">poke around our source</a>
to see how much we’ve embraced <a href="https://styled-system.com"><code class="language-plaintext highlighter-rouge">styled-system</code></a>’s responsive styles.</p>

<p>There’s one type of challenge with building a responsive app that <a href="https://styled-system.com"><code class="language-plaintext highlighter-rouge">styled-system</code></a>
can’t solve: when we need to emit different layouts across different breakpoints. In this case, we need something
that can render very different component sub-trees. We couldn’t find an approach that satisfied our needs, so we
wrote our own.</p>

<h2 id="tool-2-artsyfresnel">Tool 2: <a href="https://github.com/artsy/fresnel"><code class="language-plaintext highlighter-rouge">@artsy/fresnel</code></a></h2>

<p>First off, an announcement: we’ve just released <a href="https://github.com/artsy/fresnel"><code class="language-plaintext highlighter-rouge">@artsy/fresnel</code></a> version 1.0!</p>

<p><a href="https://github.com/artsy/fresnel"><code class="language-plaintext highlighter-rouge">@artsy/fresnel</code></a> allows you to define a set of breakpoint widths, then
declaratively render component sub-trees when those breakpoints are met. It looks something like this:</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">&lt;</span>&gt;
  <span class="nt">&lt;Media</span> <span class="na">at=</span><span class="s">"xs"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;MobileLayout</span> <span class="nt">/&gt;</span>
  <span class="nt">&lt;/Media&gt;</span>
  <span class="nt">&lt;Media</span> <span class="na">greaterThan=</span><span class="s">"xs"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;NonMobileLayout</span> <span class="nt">/&gt;</span>
  <span class="nt">&lt;/Media&gt;</span>
<span class="err">&lt;</span>/&gt;
</code></pre></div></div>

<p>In this example, we’re emitting the <code class="language-plaintext highlighter-rouge">MobileLayout</code> component for devices at or below our <code class="language-plaintext highlighter-rouge">xs</code> breakpoint, and the
<code class="language-plaintext highlighter-rouge">NonMobileLayout</code> for devices greater than our <code class="language-plaintext highlighter-rouge">xs</code> breakpoint. You can imagine that the <code class="language-plaintext highlighter-rouge">MobileLayout</code> and
<code class="language-plaintext highlighter-rouge">NonMobileLayout</code> components contain complicated sub-trees, with more significant differences than
<a href="https://styled-system.com"><code class="language-plaintext highlighter-rouge">styled-system</code></a> could handle.</p>

<h3 id="how-it-works">How it works</h3>

<p>The first important thing to note is that when server-rendering with
<a href="https://github.com/artsy/fresnel"><code class="language-plaintext highlighter-rouge">@artsy/fresnel</code></a>, <strong>all</strong> breakpoints get rendered by the server. Each <code class="language-plaintext highlighter-rouge">Media</code>
component is wrapped by plain CSS that will only show that breakpoint if it matches the user’s current browser
size. This means that the client can accurately start rendering the HTML/CSS <em>while</em> it receives it, which is long
before the React application has booted. This improves perceived performance for end-users.</p>

<p>Why not just the breakpoint that the current device needs? Because we can’t <em>accurately</em> identify which breakpoint
your device needs on the server. We could use a library to sniff the browser <code class="language-plaintext highlighter-rouge">user-agent</code>, but those aren’t always
accurate, and they wouldn’t give us all the information we need to know when we are server-rendering.</p>

<p>If you’re interested, you can
<a href="https://github.com/artsy/reaction/issues/1367">read the issue that originally inspired us to build <code class="language-plaintext highlighter-rouge">@artsy/fresnel</code></a>.
One of the neat things about Artsy being <a href="/series/open-source-by-default/">open-source by default</a> is that you can
see decisions being made and libraries being built <em>as they happen</em>; not just after they’re complete.</p>

<h2 id="tool-3-artsydetect-responsive-traits">Tool 3: <a href="https://github.com/artsy/detect-responsive-traits"><code class="language-plaintext highlighter-rouge">@artsy/detect-responsive-traits</code></a></h2>

<p>I mentioned above that it’s difficult to accurately detect devices by user agent to identify which breakpoint to
render. We didn’t want this to be our primary strategy for combining SSR with responsive design.</p>

<p>But with <a href="https://github.com/artsy/fresnel"><code class="language-plaintext highlighter-rouge">@artsy/fresnel</code></a> as our primary approach, we felt that we could make
some further optimizations with user agent detection. In the event that we don’t know your device by its user
agent, we’ll still render all breakpoints on the server. But if we are certain you are on a device that only ever
needs a subset of the breakpoints, we only render those on the server. This saves a bit of rendering time; more
importantly it reduces the number of bytes sent over the wire.</p>

<p>We really wanted to not maintain our own list of user agents. Alas, we found that none of the existing user agent
detection libraries surfaced all the information we needed in a single resource. We needed to know the minimum
width for a browser on a given device, and if it was resizable, and to what dimensions it was resizable. If any
existing libraries <em>did</em> have this data, they didn’t provide it to us easily.</p>

<p>So we did some experimentation, given the browsers and devices we knew we needed to support. And yeah…we
(reluctantly) created our own user-agent detection library,
<a href="https://github.com/artsy/detect-responsive-traits">@artsy/detect-responsive-traits</a>. We’re using this to determine
if your browser is likely going to use only the mobile breakpoint of our app, in which case we don’t have to also
render the desktop version. The library is currently targeting only the browsers and devices we support on
<a href="artsy.net">artsy.net</a>, but
<a href="https://github.com/artsy/detect-responsive-traits">we’re always open to contributions</a>!</p>

<p>We aren’t doing any detection of desktop browsers. They are more resizable than mobile browsers, and we are more
concerned with mobile users getting less content sent over their 3G connection.</p>

<h2 id="why-didnt-you-___">Why didn’t you ___?</h2>

<p>Those are our primary tools for combining SSR with responsive design! They work well for us. We considered many
many other options along the way. Here are a couple:</p>

<h3 id="react-media-or-react-responsive"><a href="https://github.com/ReactTraining/react-media"><code class="language-plaintext highlighter-rouge">react-media</code></a> or <a href="https://github.com/contra/react-responsive"><code class="language-plaintext highlighter-rouge">react-responsive</code></a></h3>

<p>We investigated both <a href="https://github.com/ReactTraining/react-media"><code class="language-plaintext highlighter-rouge">react-media</code></a> and
<a href="https://github.com/contra/react-responsive"><code class="language-plaintext highlighter-rouge">react-responsive</code></a>, but found that they didn’t approach the SSR side
of the problem as deeply as we needed.</p>

<p>We also weren’t fans of the imperative API in <a href="https://github.com/ReactTraining/react-media"><code class="language-plaintext highlighter-rouge">react-media</code></a>. We
started with a similar API when building <a href="https://github.com/artsy/fresnel"><code class="language-plaintext highlighter-rouge">@artsy/fresnel</code></a>, but found ourselves
inhibited by the restriction that only one branch can be rendered. This contradicted our strategy of emitting all
breakpoints from the server.</p>

<p>With <a href="https://github.com/contra/react-responsive"><code class="language-plaintext highlighter-rouge">react-responsive</code></a>, we didn’t like that it relied on user agent
detection as its primary method of handling SSR.</p>

<h3 id="rely-solely-on-css">Rely solely on CSS</h3>

<p>As mentioned before, we render all breakpoints from the server and hide the non-matching branches with CSS. The
issue with this approach, when combined with React, is that after
<a href="https://reactjs.org/docs/react-dom.html#hydrate">hydration</a> you have many components that are mounted and rendered
unnecessarily. There’s a performance hit you take for rendering components your user isn’t seeing, but even worse
is the potential for duplicate side-effects.</p>

<p>Imagine a component that, when rendered, emits a call to an analytics service. If this component exists in both a
mobile and desktop branch, you’re now double-stuffing your analytics. Hopefully your analytics service is smart
enough to count only one call, but it’s still a bad idea to duplicate components that have side-effects.</p>

<p><a href="https://github.com/artsy/fresnel"><code class="language-plaintext highlighter-rouge">@artsy/fresnel</code></a> will only client-render the breakpoint that matches your
browser dimensions, so you don’t have to worry about duplicate side-effects.</p>

<h2 id="whats-left-to-solve">What’s left to solve?</h2>

<p>Our SSR and responsive design toolbox does a lot of things well. We get great performance from both the server and
client. Our site looks great on any device.</p>

<p>We do have some SEO concerns, though. Since we’re server-rendering multiple breakpoints, it’s likely that search
engine bots are seeing double the content on our pages. We <em>think</em> this is okay.
<a href="https://youtu.be/WsgrSxCmMbM">Google WebMasters</a> says it’s okay. We haven’t noticed any awful side-effects from
this yet, but SEO is a bit of a dark art, yeah?</p>

<h2 id="our-advice">Our advice</h2>

<p>Responsive design is hard, especially when layouts change significantly between desktop and mobile. Server-side
rendering in React is hard to get right, period. Combining SSR with responsive design compounds the challenges.</p>

<p>At the end of the day, you should do everything you can to limit layout differences between mobile and desktop. Use
responsive props from <a href="https://styled-system.com"><code class="language-plaintext highlighter-rouge">styled-system</code></a>. Play around with <code class="language-plaintext highlighter-rouge">flexbox</code> and
<code class="language-plaintext highlighter-rouge">flex-direction</code>, start learning about CSS <code class="language-plaintext highlighter-rouge">grid</code>, and use CSS <code class="language-plaintext highlighter-rouge">@media</code> queries when you can. If you absolutely
must render different views on different breakpoints, render all the UI and hide what’s not needed for that
breakpoint. You want your users to see the right content as quickly as possible. Send them HTML and CSS from your
server that their client can use.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Making Artsy Editorial Accessible]]></title>
    <link href="https://artsy.github.io/blog/2017/08/29/Making-Artsy-Editorial-Accessible/"/>
    <updated>2017-08-29T00:00:00+00:00</updated>
    <id>https://artsy.github.io/blog/2017/08/29/Making-Artsy-Editorial-Accessible</id>
    <content type="html"><![CDATA[<p>During Artsy’s recent 2017 Hackathon we tackled making all of our editorial content <a href="https://en.wikipedia.org/wiki/Accessibility">accessible</a>. The idea was hatched at  Berlin JSConf this spring, where <a href="https://youtu.be/H4FzW9oFObs">Laura Carvajal gave a talk</a> following the <em>Financial Times</em>’ experience implementing better accessibility requirements, and how they built these considerations into their testing process.</p>

<p>What does accessibility mean in a browser? Generally the term refers to supporting the wide range of assistive technologies for users with vision or motor impairments. These include screen readers, as well as mouseless navigation using a keyboard, eye tracking and other devices. Interestingly these technologies are implemented at the OS level rather than the browser itself. Mac’s OS includes a built in screen-reader, and <a href="http://www.freedomscientific.com/Products/Blindness/JAWS">JAWS</a> is the most popular application in this vein. It is also notable that browsers do not track users who employ assistive tools.</p>

<p>Two users on <a href="http://webaim.org/discussion/mail_thread?thread=6326">WebAIM’s forum</a> excellently present the case for accessibility as a developer’s responsibility:</p>

<blockquote>
  <p>“Users may be highly resistant to having their disabilities identified as they go throughout the web. Most persons with disabilities would really just rather that <em>the Web just work</em> for them.”</p>
</blockquote>

<blockquote>
  <p>“Looking at accessibility as a way to serve a specific population is missing the point that accessibility is about inclusion of all people.”</p>
</blockquote>

<p>A central tenant of Artsy’s mission is to ‘make art as accessible as music’. By expanding accessibility for the visually and motor impaired to writing on art and culture, this projects allows us to follow through on this statement in a very literal way. Furthermore, there’s no reason to ignore this audience; accommodating use of assistive technologies is an ethically responsible thing to do.</p>

<!-- more -->

<h2 id="putting-it-into-practice">Putting it into practice</h2>

<p>Smartly structured HTML is essential for screen readers. They take note of semantic elements like headings or <code class="language-plaintext highlighter-rouge">&lt;nav&gt;</code>, and interpret our page’s elements in the order they are written. Absolute and fixed spacing are ignored in this context, so it is important to realize non-visual reading of your site may prioritize different information, or present it in a different order than expected. This means that in JavaScript-oriented environments, and anywhere elements are inserted on the client, it is important to keep all elements necessary to navigating available in a semantic form at all times, including drop downs.</p>

<p>We used three tools to evaluate pain points on our site: the npm module <a href="https://github.com/pa11y/pa11y">pa11y</a>, Chrome’s <a href="https://chrome.google.com/webstore/detail/accessibility-developer-t/fpkknkljclfencbdbgkenhalefipecmb?utm_source=chrome-ntp-icon">Accessibility Developer Tools</a>, and <a href="http://wave.webaim.org/">WAVE</a>— a web accessibility evaluation tool by <a href="http://webaim.org/">WebAIM</a>, a non-profit dedicated to “empowering organizations to make their own content accessible”.  All three work similarly. Input a web address, and an error report is generated. Pa11y works in the terminal, and can export to a CSV, and even create a dashboard tracking separate URLs. Chrome handily provides a color-coded scorecard in addition to an accessibility audit report. Because Chrome’s reporting lives in the browser’s console, it is especially easy to inspect your code directly from an error. However, each tool brought up unique issues, so it is prudent to try a few.</p>

<p>We found a range of warnings and errors on our first run, where Chrome gave us a failing grade of 62, and pa11y raked up 48 errors, not counting a sizeable number of warnings. Luckily, most of the changes were fast and easy:</p>

<ul>
  <li>Use meta language property (<code class="language-plaintext highlighter-rouge">&lt;html lang="en"&gt;</code>)</li>
  <li>Increase the meta property for maximum scale to 5</li>
  <li>Add hidden text to icon-only links and UI elements</li>
  <li>Add alt text to all images</li>
  <li>Include aria form attributes on input fields</li>
  <li>Use semantic roles for the article body (<code class="language-plaintext highlighter-rouge">&lt;div role='article'&gt;</code>)</li>
  <li>Remove of duplicate IDs from pages</li>
  <li>Remove vendor-generated ids from SVGs, which in our case were often duplicates.</li>
</ul>

<p>A summary of changes implemented can be seen in pull requests <a href="https://github.com/artsy/force/pull/1730">here</a> and <a href="https://github.com/artsy/force/pull/1732">here</a>.</p>

<p>There were several places on our site where we wanted to include text that was intended only for screen readers. However, <code class="language-plaintext highlighter-rouge">display: none</code> is not necessarily acceptable in this context. Instead we opted for absolute positing of screen-reader targeted elements far out of the screen.</p>

<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">//</span> <span class="nt">hides</span> <span class="nt">text</span> <span class="nt">that</span> <span class="nt">is</span> <span class="nt">only</span> <span class="nt">for</span> <span class="nt">screen-readers</span>

<span class="nc">.screen-reader-text</span> <span class="p">{</span>
  <span class="nl">position</span><span class="p">:</span> <span class="nb">absolute</span><span class="p">;</span>
  <span class="nl">left</span><span class="p">:</span> <span class="m">10000px</span><span class="p">;</span>
  <span class="nl">top</span><span class="p">:</span> <span class="nb">auto</span><span class="p">;</span>
  <span class="nl">width</span><span class="p">:</span> <span class="m">1px</span><span class="p">;</span>
  <span class="nl">height</span><span class="p">:</span> <span class="m">1px</span><span class="p">;</span>
  <span class="nl">overflow</span><span class="p">:</span> <span class="nb">hidden</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>A few challenges were encountered as we worked through the error reports. My research brought up mixed messages on <code class="language-plaintext highlighter-rouge">display: none</code>. For example, Artsy renders the main menu in both desktop and mobile versions, but hides one view based on the user agent. We saw errors with all testing frameworks for having duplicate IDs, despite the fact that these elements were hidden via <code class="language-plaintext highlighter-rouge">display: none</code>.  This is a problem that would be well solved with React, where we could render content based to screen width rather than hiding a duplicate.</p>

<p><img src="/images/2017-08-29-Making-Artsy-Editorial-Accessible/Chrome-Accessibility-Dashboard.png" alt="Chrome Accessibility Audit Score" /></p>

<p>Another road block encountered was for headers that contain links— which the error reports recognized as empty headers, rather than reading the link. We use linked headings frequently for section titles in our articles, so this is an issue we are still mitigating. Lastly, using a screen reader is a skill set all its own! While our Chrome audit score is now far higher than where we started, my own experience using a screen reader proved far more difficult than expected. To be completely sure our implementation is working, I hope to find an experienced screen-reader user to give it a spin.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Helping the Web Towards OSS by Default]]></title>
    <link href="https://artsy.github.io/blog/2016/09/06/Milestone-on-OSS-by-Default/"/>
    <updated>2016-09-06T12:17:00+00:00</updated>
    <id>https://artsy.github.io/blog/2016/09/06/Milestone-on-OSS-by-Default</id>
    <content type="html"><![CDATA[<p>The main Artsy.net website for the desktop, <a href="https://github.com/artsy/force">Force</a>, was our first Artsy application to open its source
code, <a href="http://artsy.github.io/author/craig">Craig</a> and <a href="http://artsy.github.io/author/brennan">Brennan</a> did it <a href="/blog/2014/09/05/we-open-sourced-our-isomorphic-javascript-website/">back in 2014</a>. Force’s public offering laid the
groundwork for the iOS OSS projects to come afterwards: <a href="/blog/2014/11/13/eidolon-retrospective/">Eidolon</a>, <a href="/blog/2015/04/28/how-we-open-sourced-eigen/">Eigen</a>,
<a href="/blog/2015/08/06/open-sourcing-energy/">Energy</a> and <a href="/blog/2015/11/05/Emergence-Code-Review/">Emergence</a>.</p>

<p>Though Force wasn’t quite Open Source by Default, it represented a <em>really</em> important step for Artsy’s OSS
perspective but was not the end goal. We were opening our source, but not opening our process.</p>

<p>This month both <a href="https://github.com/artsy/force">Force</a>, the desktop version of <a href="https://www.artsy.net/">Artsy.net</a> and <a href="https://github.com/artsy/microgravity">Microgravity</a>, the
mobile version - moved to being built entirely in the open. Read on to find out how.</p>

<!-- more -->

<h2 id="force">Force</h2>

<p>Over the course of the last month, I’ve sat on and off with Charles “<a href="http://charlesbroskoski.com/_/">Cab</a>” Broskoski, and figured out what it
would take to migrate Force to work in the public. Previous to this, work happened on a private repo, and we would
push that code to the public.</p>

<p>We scoped out what it would require, creating an issue that summarized the work. Then we waited for 2 weeks, to
give people the chance to discuss the idea and to offer examples for why we should delay or not move. Not all
projects <em>should</em> be OSS, and everyone should have a say when it affects them - giving some time let the team speak
their mind. Especially during summer, when people were less active at work.</p>

<p>&lt;/div&gt;&lt;/div&gt;<a href="/images/oss-milestone/force-oss.png"><img src="/images/oss-milestone/force-oss.png" /></a>&lt;div class='meta-container'&gt;&lt;header&gt; &lt;/header&gt;&lt;/div&gt;&lt;div class='date-container'&gt; &lt;/div&gt;&lt;div class='content-container'&gt;&lt;div class='entry-content'&gt;</p>

<p>It had been 9 months since the last commit to the public repo, and so auditing the commits was a matter of
investigating into configuration files, and seeing what’s changed since the last public commit.</p>

<p>Next up, we renamed the current <code class="language-plaintext highlighter-rouge">force</code> repo to <code class="language-plaintext highlighter-rouge">force-private</code>. This was to keep the old issues and PRs around
after we moved to working in the public. With <code class="language-plaintext highlighter-rouge">force</code> now available we re-named the already public project.</p>

<p>We then ensured all outstanding PRs were merged or closed, and pushed the commits from <code class="language-plaintext highlighter-rouge">force-private</code> to the now
OSS <code class="language-plaintext highlighter-rouge">force</code>.</p>

<h3 id="ci">CI</h3>

<p>To get back up to speed we needed to set up CI, figuring this out took time.</p>

<p>We got testing up and running in no time. However, Force is deployed via <a href="https://semaphoreci.com/">Semaphore CI</a>, and to deploy
we needed to push compiled assets to S3. To pull that off, we needed access to an S3 key, and token.</p>

<p>In our iOS projects, <a href="https://github.com/artsy/eidolon/pull/607">we do not expose environment variables</a> to PRs from forks, so we don’t expect
them to pass from external contributors. This is fine, because we have <a href="http://artsy.github.io/blog/2016/01/13/OSS-Expectations/">different expectations</a>
for OSS apps vs libraries. We do this to ensure that we don’t receive a PR that adds <code class="language-plaintext highlighter-rouge">printenv</code> to the CI scripts,
exposing our secret keys.</p>

<p>As we couldn’t add the keys to our testing environment, we added them to our heroku environment then took them from
that. Semaphore sets up our heroku environment only during deployment, so in the deployment phase, we can use a
line like:</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">export </span><span class="nv">FORCE_S3_KEY</span><span class="o">=</span><span class="si">$(</span>heroku config:get FORCE_S3_KEY <span class="nt">--app</span> force-production<span class="si">)</span>
</code></pre></div></div>

<p>This sets up the environment like we used to have it when force was private.</p>

<h3 id="team">Team</h3>

<p>We needed to move all the team members to using the OSS version of our apps. This is a little bit complicated as
<a href="/blog/2012/01/29/how-art-dot-sy-uses-github-to-build-art-dot-sy/">we work from forks</a>. <a href="http://www.anandarooproy.com/portfolio">Roop</a>, an engineer on the web team, created a “Force OSS Dance Script” (
sidenote: <a href="http://www.anandarooproy.com/portfolio">his site</a> is worth a visit, there’s 15 years of interesting maps. )</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">## RENAME THE OLD REPO</span>

<span class="c"># on GitHub</span>

<span class="c"># - Go to my fork https://github.com/&lt;username&gt;/force</span>
<span class="c"># - Go to Settings tab</span>
<span class="c"># - Rename repo to "force-private"</span>

<span class="c"># on my local machine</span>

<span class="nb">mv </span>force force-private
<span class="nb">cd </span>force-private
git remote set-url upstream git@github.com:artsy/force-private.git
git remote set-url origin git@github.com:&lt;username&gt;/force-private.git


<span class="c">## FORK AND CLONE THE NEW REPO</span>

<span class="c"># back to GitHub</span>

<span class="c"># - Go to the new Force repo https://github.com/artsy/force</span>
<span class="c"># - Fork it to my account</span>

<span class="c"># back to my local machine</span>

git clone git@github.com:&lt;username&gt;/force.git
<span class="nb">cd </span>force
git remote add upstream git@github.com:artsy/force.git
<span class="nb">cp</span> ../force-private/.env ./
<span class="nb">cp</span> ../force-private/node_modules ./ <span class="c"># or just 'npm install' again</span>


<span class="c"># all good now - both repos on local machine with correct remotes, envs, deps</span>
</code></pre></div></div>

<p>For Force, all the same commits existed in both repos, so it would be difficult to push secrets to the open repo by
accident. However, individuals did to sync up a new version of their forks.</p>

<p>And that, is how we moved force into OSS by Default. :+1: - We’ll cover the issues migration later.</p>

<h2 id="microgravity">Microgravity</h2>

<p>I have a lot of love for Microgravity. It’s the web project that made <a href="/blog/2015/04/28/how-we-open-sourced-eigen/">Eigen</a> possible. Once Force had
moved, I started spending time with Craig trying to understand what it would take to open up Microgravity.</p>

<p>&lt;/div&gt;&lt;/div&gt;<a href="/images/oss-milestone/micrograv-oss.png"><img src="/images/oss-milestone/micrograv-oss.png" /></a>&lt;div class='meta-container'&gt;&lt;header&gt; &lt;/header&gt;&lt;/div&gt;&lt;div class='date-container'&gt; &lt;/div&gt;&lt;div class='content-container'&gt;&lt;div class='entry-content'&gt;</p>

<p>It is no surprise to find a lot of overlap, both projects are based on the same foundations: <a href="https://github.com/artsy/ezel">Ezel.js</a>.</p>

<p>We didn’t trust the commit history for microgravity, so we nuked it. Same as our native OSS apps.</p>

<p>We came up with a pattern to make it easier for people to migrate issues, we created a <code class="language-plaintext highlighter-rouge">migrate</code> GitHub label that
anyone can apply to an issue in a private repo. Then we use <a href="https://github-issue-mover.appspot.com">Issue Mover for GitHub</a> with some inline
JavaScript to loop through all our issues to migrate. As it’s applying a label we can ask product owners and
designers to choose ones that are important to them too.</p>

<p>–</p>

<p>I love that I got to help make these changes, the web team started the process of opening our apps at Artsy, then
the mobile team took the next big step. Now the teams are both in lock-step, and if you work on the front-end at
Artsy - OSS by Default is the way we all work now.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Paw with Per-Developer Settings]]></title>
    <link href="https://artsy.github.io/blog/2016/04/14/net-working-with-paw/"/>
    <updated>2016-04-14T12:09:00+00:00</updated>
    <id>https://artsy.github.io/blog/2016/04/14/net-working-with-paw</id>
    <content type="html"><![CDATA[<p>I am a big fan of developer tooling, as spending time upfront on improving your process can pay a lot of dividends over time. I want to talk about one in particular: <a href="https://luckymarmot.com/paw">Paw</a>. Paw is a native HTTP client with a bunch of features. I want to cover one that means that we can now <a href="https://github.com/artsy/energy/pull/192">introduce</a> <code class="language-plaintext highlighter-rouge">[AppName].paw</code> files in our mobile projects, making it easy for us to discuss networking requests.</p>

<!-- more -->

<h3 id="ok-what-is-paw">OK, what is Paw?</h3>

<p>Paw is a tool that stores collections of API endpoints, along with all the metadata required to call them. We first started using Paw during the creation <a href="https://github.com/artsy/eidolon/blob/master/Kiosk/Stubbed%20Responses/Me.json">of Eidolon</a> as a way to keep track of the auction-related API calls we would need to stub for <a href="http://cocoapods.org/pods/moya">Moya</a>, an iOS networking library that required stubbed data. It made it easy for us to keep track of how all the different API routes work together, and to verify that we were doing things right.</p>

<p>&lt;/div&gt;&lt;/div&gt;<a href="/images/2016-04-14-Paw/eidolon.png"><img src="/images/2016-04-14-Paw/eidolon.png" title="paw tokens" /></a>&lt;div class='meta-container'&gt;&lt;header&gt; &lt;/header&gt;&lt;/div&gt;&lt;div class='date-container'&gt; &lt;/div&gt;&lt;div class='content-container'&gt;&lt;div class='entry-content'&gt;</p>

<p>We used environment variables to keep track of things we wanted to change, but in using them this way we couldn’t publicise our Paw files, the real versions contained secrets that should stay secret.</p>

<p><img src="/images/2016-04-14-Paw/eidolon-env.png" alt="Environments for Eidolon" /></p>

<p>The environment tooling made it easy to change the routes, users and settings easily, but were also the thing keeping us from being able to share the files in source. Because of this, we stopped using Paw to keep track of our routes as we had to ad-hoc share the file over chat.</p>

<h3 id="a-second-shot">A Second Shot</h3>

<p>This week, roughly a year and a half later, I started work on a <a href="https://github.com/artsy/energy/pull/189">large project</a> that I knew would involve using new networking APIs. So I took the time to look for ways to interpret what I was going to be working with. After exploring some alternatives, I came back to Paw, and discovered they had a <a href="https://blog.luckymarmot.com/posts/paw-23-keep-it-secret-keep-it-safe/">new feature</a>: Keychain integration. This stopped my search.</p>

<p>In our iOS projects, as they are all open source, we use <a href="https://github.com/orta/cocoapods-keys">CocoaPods-Keys</a> to ensure that our development configuration secrets are kept safe and outside of the project’s source code. It stores the per-project keys inside a developer’s Keychain. This means they can be accessed from inside the iOS app, but also from the <a href="/images/2016-04-14-Paw/keychain.png">developer’s computer</a> via a determinate location in the Keychain app.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>~/d/i/a/energy (master) ⏛  bundle exec pod keys
Keys for Folio
 ├  ArtsyAPIClientSecret - [***********]
 ├  ArtsyAPIClientKey - [***********]
 ├  HockeyAppBetaID - [***********]
 ├  HockeyAppLiveID - [***********]
 ├  IntercomAppID - [***********]
 ├  IntercomAPIKey - [***********]
 ├  SegmentProduction - [***********]
 ├  SegmentBeta - [***********]
 └  SegmentDev - [***********]
</code></pre></div></div>

<p>This means that we can use CocoaPods-Keys with Paw in order to use the same <code class="language-plaintext highlighter-rouge">ArtsyAPIClientSecret</code> and <code class="language-plaintext highlighter-rouge">ArtsyAPIClientKey</code> environment config variables. Great. This is almost enough to make the first API call to to get an access token.</p>

<p>I re-used this idea to allow developers to have unique username and passwords. I created two more entries in Keychain, username and <a href="/images/2016-04-14-Paw/keychain-password.png">password</a>. This is something that every developer using our Paw file has to do, otherwise Paw won’t know who to log you in as.</p>

<p><img src="/images/2016-04-14-Paw/keychain-username.png" alt="Keychain Email" /></p>

<p>With these all hooked up, I could set up Paw to use all of our Keychain entities:</p>

<p><img src="/images/2016-04-14-Paw/paw-adding-keychain.png" alt="Paw Adding Keychain" />
<img src="/images/2016-04-14-Paw/paw-setting-password.png" alt="Paw Setting Password" /></p>

<p>Tada! Now I can run my route, and I’ve got an access token to use with our API.</p>

<h3 id="route-resolving">Route Resolving</h3>

<p>Automating the route to get an access token is the first step because Paw allows you to use the output of one route inside any new route. I’ll show you, then talk it through.</p>

<p>&lt;/div&gt;&lt;/div&gt;<a href="/images/2016-04-14-Paw/paw-tokens.png"><img src="/images/2016-04-14-Paw/paw-tokens.png" title="paw tokens" /></a>&lt;div class='meta-container'&gt;&lt;header&gt; &lt;/header&gt;&lt;/div&gt;&lt;div class='date-container'&gt; &lt;/div&gt;&lt;div class='content-container'&gt;&lt;div class='entry-content'&gt;</p>

<p>I made it so that my new request ( for the route <code class="language-plaintext highlighter-rouge">api/v1/me</code>)  passes in an header of <code class="language-plaintext highlighter-rouge">X-Access-Token</code>, with the value being the <code class="language-plaintext highlighter-rouge">access_token</code> from the route we just made called <code class="language-plaintext highlighter-rouge">Auth</code>. This means that when the token expires, it will automatically re-generate a new one and we’re never storing the token explicitly inside the Paw file. Our secrets stay secret, and per-developer - I don’t want to know other people’s passwords.</p>

<p>Once those two routes were set up, it was a matter of looking up what routes I would need and added them to the paw file for the project. I used the group system to make it easy to show / hide sections, and experimented with using environments to differentiate between staging and production servers. Not quite figured that yet.</p>

<h3 id="wrap-up">Wrap up</h3>

<p>It’s easier to talk about your API when any other developer can open this one file and shoot off requests at the same time as you. One of my favourite nice-touches is to be able to easily convert any request into a cURL command.</p>

<p>I am using this event as a reminder to myself that tools evolve, and maybe your first impression on a developer tool may require re-interpreting in light of software evolution.</p>

]]></content>
  </entry>
  
</feed>
