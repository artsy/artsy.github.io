<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Google Actions | Artsy Engineering]]></title>
  <link href="https://artsy.github.io/blog/categories/google-actions/atom.xml" rel="self"/>
  <link href="https://artsy.github.io/"/>
  <updated>2024-05-17T14:49:02+00:00</updated>
  <id>https://artsy.github.io/</id>
  <author>
    <name><![CDATA[]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Bringing Artsy to Google Assistant "Home" with Actions]]></title>
    <link href="https://artsy.github.io/blog/2017/03/04/bringing-artsy-to-google-actions-assistant-home/"/>
    <updated>2017-03-04T00:00:00+00:00</updated>
    <id>https://artsy.github.io/blog/2017/03/04/bringing-artsy-to-google-actions-assistant-home</id>
    <content type="html"><![CDATA[<p>Last month we <a href="/blog/2016/11/30/bringing-artsy-to-amazon-echo-alexa/">brought Artsy to Amazon Alexa</a>. In this post we’ll repeat that process and enable Artsy for Google Assistant, including Google Home.</p>

<p>tl;dr You can try Artsy on your Google Home now, say “Ok Google, talk to Artsy” or see <a href="http://assistant.artsy.net">assistant.artsy.net</a> for more info.</p>

<iframe width="560" height="315" src="https://www.youtube.com/embed/i9EpF18xZqQ?ecver=1" frameborder="0" allowfullscreen=""></iframe>

<!-- more -->

<h3 id="conversation-actions">Conversation Actions</h3>

<p>Actions are two-way dialogs with users. A user invokes an action, which calls so-called <em>fulfillment</em> code - a REST endpoint.</p>

<p>If you’ve never worked with Google Actions, read the <a href="https://developers.google.com/actions/develop/conversation">conversation actions intro</a>.</p>

<h3 id="actions-sdk">Actions SDK</h3>

<p>To write an action get the <a href="https://developers.google.com/actions/develop/sdk/getting-started">actions SDK</a>, which is a node.js client library, describe the actions in JSON and use a command-line tool called <code class="language-plaintext highlighter-rouge">gactions</code> or a web simulator to invoke the action code.</p>

<h3 id="actions-server">Actions Server</h3>

<p>The actions SDK can be called from any node.js application, or with some help from <a href="https://github.com/manekinekko/google-actions-server">google-actions-server</a> (GAS) via boilerplate code in the <a href="https://github.com/manekinekko/google-actions-starter">google-actions-starter</a> library.</p>

<p>An <code class="language-plaintext highlighter-rouge">action.json</code> that describes the actions, including the invocation trigger for each action and the text-to-speech voice for the agent to use.</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"versionLabel"</span><span class="p">:</span><span class="w"> </span><span class="s2">"1.0.0"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"agentInfo"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"languageCode"</span><span class="p">:</span><span class="w"> </span><span class="s2">"en-US"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"projectId"</span><span class="p">:</span><span class="w"> </span><span class="s2">"biesenbach-one"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"invocationNames"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">"artsy"</span><span class="p">],</span><span class="w">
    </span><span class="nl">"voiceName"</span><span class="p">:</span><span class="w"> </span><span class="s2">"female_1"</span><span class="w">
  </span><span class="p">},</span><span class="w">
  </span><span class="nl">"actions"</span><span class="p">:</span><span class="w"> </span><span class="p">[{</span><span class="w">
    </span><span class="nl">"initialTrigger"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="nl">"intent"</span><span class="p">:</span><span class="w"> </span><span class="s2">"assistant.intent.action.MAIN"</span><span class="w">
    </span><span class="p">},</span><span class="w">
    </span><span class="nl">"httpExecution"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="nl">"url"</span><span class="p">:</span><span class="w"> </span><span class="s2">"https://biesenbach-one.appspot-preview.com"</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">}]</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p>The action implementation lives in <code class="language-plaintext highlighter-rouge">lib/action.js</code> that imports and creates a new instance of <code class="language-plaintext highlighter-rouge">google-actions-server</code>, binds intents to functions and issues questions with <code class="language-plaintext highlighter-rouge">agent.ask</code> or sends final responses with <code class="language-plaintext highlighter-rouge">assistant.tell</code>.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">ActionServer</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">@manekinekko/google-actions-server</span><span class="dl">'</span><span class="p">;</span>

<span class="kd">class</span> <span class="nx">ArtsyAction</span> <span class="p">{</span>
  <span class="kd">constructor</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">agent</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ActionServer</span><span class="p">();</span>

    <span class="k">this</span><span class="p">.</span><span class="nx">agent</span><span class="p">.</span><span class="nx">setGreetings</span><span class="p">([</span>
      <span class="s2">`What is the name of the artist you would like to hear about?`</span>
    <span class="p">]);</span>
  <span class="p">}</span>

  <span class="nx">welcomeIntent</span><span class="p">(</span><span class="nx">assistant</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">agent</span><span class="p">.</span><span class="nx">randomGreeting</span><span class="p">();</span>
  <span class="p">}</span>

  <span class="nx">textIntent</span><span class="p">(</span><span class="nx">assistant</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">query</span> <span class="o">=</span> <span class="nx">assistant</span><span class="p">.</span><span class="nx">getRawInput</span><span class="p">();</span>

    <span class="c1">// TODO: respond to a query</span>

    <span class="nx">assistant</span><span class="p">.</span><span class="nx">tell</span><span class="p">(</span><span class="dl">'</span><span class="s1">You said </span><span class="dl">'</span> <span class="o">+</span> <span class="nx">query</span> <span class="o">+</span> <span class="dl">'</span><span class="s1">.</span><span class="dl">'</span><span class="p">);</span>
  <span class="p">}</span>

  <span class="nx">listen</span><span class="p">()</span> <span class="p">{</span>
    <span class="c1">// the welcome intent is invoked when the user says "talk to Artsy"</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">agent</span><span class="p">.</span><span class="nx">welcome</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">welcomeIntent</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="k">this</span><span class="p">));</span>
    <span class="c1">// the text action is invoked for any spoken text</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">agent</span><span class="p">.</span><span class="nx">intent</span><span class="p">(</span><span class="nx">ActionServer</span><span class="p">.</span><span class="nx">intent</span><span class="p">.</span><span class="nx">action</span><span class="p">.</span><span class="nx">TEXT</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">textIntent</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="k">this</span><span class="p">));</span>
    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">agent</span><span class="p">.</span><span class="nx">listen</span><span class="p">();</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">(</span><span class="k">new</span> <span class="nx">ArtsyAction</span><span class="p">()).</span><span class="nx">listen</span><span class="p">();</span>
</code></pre></div></div>

<p>With tests.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>let request = require('supertest')

describe('Artsy', () =&gt; {
  let action;

  beforeEach(() =&gt; {
    action = require('../action');
  });

  afterEach(() =&gt; {
    action.close();
  });

  it('asks the name of the artist when launched', () =&gt; {
    return request(action)
      .post('/')
      .send({
        inputs: [{
          intent: 'assistant.intent.action.MAIN',
          raw_inputs: [{
            input_type: 2,
            query: "OK Google, talk to Artsy."
          }]
        }]
      })
      .expect(200).then((response) =&gt; {
        var ssml = response.body.expected_inputs[0].input_prompt.initial_prompts[0].ssml;
        expect(ssml).to.eql(`What is the name of the artist you would like to hear about?`);
      });
  });

  it('repeats a query', () =&gt; {
    return request(action)
      .post('/')
      .send({
        inputs: [{
          intent: 'assistant.intent.action.TEXT',
          raw_inputs: [{
            input_type: 2,
            query: "hello world"
          }],
          arguments: []
        }]
      })
      .expect(200).then((response) =&gt; {
        expect(response.body.expect_user_response).to.equal(false);
        var ssml = response.body.final_response.speech_response.text_to_speech;
        expect(ssml).to.equal('You said hello world.');
      });
  });
});
</code></pre></div></div>

<p>Find the <a href="https://github.com/artsy/biesenbach">complete source code of the Artsy action on Github</a>.</p>

<h3 id="local-simulator">Local Simulator</h3>

<p>GAS does a good job at enabling running of a local development version.</p>

<ul>
  <li>Run <code class="language-plaintext highlighter-rouge">ngrok</code> to proxy requests to the outside world.</li>
  <li>Run <code class="language-plaintext highlighter-rouge">npm run server</code> to start the local instance.</li>
  <li>Deploy a preview version of the app with <code class="language-plaintext highlighter-rouge">npm run action:autopreview</code>.</li>
  <li>Run <code class="language-plaintext highlighter-rouge">npm run action:simulate</code> for a local simulator, use <a href="https://developers.google.com/actions/tools/web-simulator">the web version</a> or even a Google Home device registered under your development account.</li>
</ul>

<iframe width="560" height="315" src="https://www.youtube.com/embed/_biW8TDbBGo" frameborder="0" allowfullscreen=""></iframe>

<h3 id="certification">Certification</h3>

<h4 id="fulfillment-endpoint">Fulfillment Endpoint</h4>

<p>The certification process requires that you deploy the node.js application into a production environment, first. We deployed ours into Google Cloud, which involved creating a <code class="language-plaintext highlighter-rouge">vm.yaml</code>, creating a new deployment with <code class="language-plaintext highlighter-rouge">gcloud deployment-manager deployments create production --config vm.yaml</code>, transpiling JavaScript with <code class="language-plaintext highlighter-rouge">npm run build</code> and deploying the app with <code class="language-plaintext highlighter-rouge">gcloud app deploy</code>. You can just push the app to Heroku or AWS Lambda as well.</p>

<h4 id="google-actions-api-project">Google Actions API Project</h4>

<p>Create a Google Actions API project from the <a href="https://console.developers.google.com/apis/dashboard">API Dashboard</a> and configure the project in “Directory Listing”. It’s important to get the sample invocations right, eg. <em>“Ok Google, ask my first action to …“</em>.</p>

<h4 id="deploy-action">Deploy Action</h4>

<p>Deploying the action makes it usable by others by submitting it for approval with Google. Once submitted you have to wait for your action to be rejected or approved, there’s no way to un-submit an action without contacting support.</p>

<p>Change the <code class="language-plaintext highlighter-rouge">httpExecution</code> URL(s) in <code class="language-plaintext highlighter-rouge">action.json</code> to the deployed fulfillment URL, eg. <code class="language-plaintext highlighter-rouge">https://my-first-action.appspot-preview.com</code>, ensure the correct action ID is used in <code class="language-plaintext highlighter-rouge">package.json</code>, and run <code class="language-plaintext highlighter-rouge">npm run action:deploy</code>, which will register and deploy your action.</p>

<p>The application will appear under “Deployment History” in the API dashboard.</p>

<center><img src="/images/2017-03-04-bringing-artsy-to-google-actions-assistant-home/actions-api.png" /></center>

<h3 id="help">Help</h3>

<p>I found that the best place to ask questions was <a href="https://stackoverflow.com/questions/tagged/actions-on-google">stack overflow#actions-on-google</a> and their unusually responsive <a href="https://developers.google.com/actions/support/?requesttype=support&amp;prio=low">support team</a>.</p>

<h3 id="code">Code</h3>

<p>Find the <a href="https://github.com/artsy/biesenbach">complete source code on Github</a>.</p>
]]></content>
  </entry>
  
</feed>
