<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: email | Artsy Engineering]]></title>
  <link href="https://artsy.github.io/blog/categories/email/atom.xml" rel="self"/>
  <link href="https://artsy.github.io/"/>
  <updated>2024-08-07T18:22:11+00:00</updated>
  <id>https://artsy.github.io/</id>
  <author>
    <name><![CDATA[]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Diagnosing our Radiation Problems]]></title>
    <link href="https://artsy.github.io/blog/2019/11/14/diagnosing-our-radiation-problems/"/>
    <updated>2019-11-14T00:00:00+00:00</updated>
    <id>https://artsy.github.io/blog/2019/11/14/diagnosing-our-radiation-problems</id>
    <content type="html"><![CDATA[<p>Email! Electronic mail! What a concept! Like many companies, Artsy has built products on top of email, but this is
a decision that (like many companies) Artsy periodically regrets. But overall, our email systems work well!</p>

<p>But what about when it doesn’t? Well that’s what today’s blog post is about: what happens when things break and you
don’t know why?</p>

<!-- more -->

<p>I have learned a lot
<a href="https://artsy.github.io/blog/2018/05/30/my-first-week-on-call/">since my first on-call shift</a>, but going on call
still gives me a little stage fright. As I start a shift, I’m on the look-out for things that might break, and soon
after starting a recent on-call shift, “breaking” is exactly what things did.</p>

<p><img src="/images/2019-11-07-diagnosing-our-radiation-problems/alert.png" alt="Screenshot of Slack alert" /></p>

<p>We got an automated alert on Slack that one of our email services, code-named “Radiation”, had really high response
times. We <em>then</em> received an alert that too many requests to Radiation were failing completely. Yikes. The next
twenty two hours was a deep dive into Heroku, New Relic, Rails, and PostgreSQL, all to isolate the problem and
produce a solution.</p>

<p>The nice thing about email, as a protocol, is that it’s based on a store-and-forward concept. That means that if a
message delivery fails, email servers will try again later (typically with an exponential backoff). SendGrid, our
email processor, has built their REST API around this same store-and-forward concept. While the Radiation server
was unresponsive, SendGrid wouldn’t receive successful HTTP responses from the webhook deliveries, so it would
attempt to re-deliver the failing emails later. Email deliveries would be delayed, but the emails themselves would
not be dropped. We wasted no time addressing the problem, but we were also confident that once we fixed the issue,
the data would be okay.</p>

<p>After the alert, Ashkan (Radiation’s point-person) and I communicated with our colleagues (engineers and affected
non-engineers) about the problem. With the help of Chung-Yi, we began investigating the immediate problem (with a
focus on <em>mitigating</em> it, rather than necessarily <em>fixing</em> it). Oh, we tried it all: spinning up more Heroku Dynos
to handle requests, increasing concurrency on the individual Dynos, restarting Redis and PostgreSQL stores. Each
time, things would work briefly before the Radiation API would begin timing out again. More accurately, the
requests sent to Radiation were taking longer than the Heroku router was giving them (30 seconds) before the router
gave up and timed out the request. We started examining the Radiation code and database (keeping our <em>ion the
prize</em>: mitigation).</p>

<p>Ashkan investigated slow database queries. We added new PostgreSQL indexes to speed up queries, and restructured
others to avoid expensive joins. Unfortunately, all this accomplished was extending the time after a Dyno reboot
that things would work (before beginning to timeout again). Because
<a href="https://artsy.github.io/blog/2017/05/30/database-encryption/">Artsy stores emails as encrypted-at-rest</a>, it was
difficult to pinpoint which exact message could be causing the timeouts. And Radiation itself didn’t have much in
the way of logging, which would normally help us debug the problem.</p>

<p>It was frustrating to try to fix something but only manage to improve how long it took to break again. We had
enhanced Radiation’s performance to the point where it was taking 10 minutes after a Dyno reboot to begin timing
out again, up from 30 seconds at the beginning of the incident. Despite an afternoon and evening spent trying to
fix the problem, we were stuck. We decided that the best course of action was a good night’s sleep; we would ask
for help in the morning.</p>

<p>The next day, Ashkan and I got <em>up and atom</em> to address the problem. We brought my on-call partner Devon up to
speed, detailing the incident symptoms and what we had tried so far. While Devon and Ashkan worked on additional
logging and new timeout strategies, I took another approach.</p>

<p>Artsy has been moving to <a href="https://www.datadoghq.com">DataDog</a> for server performance monitoring, but Radiation was
still using <a href="https://newrelic.com">New Relic</a>. My background is in iOS app development and I had never really dug
into New Relic before, but I <em>am</em> very experienced at profiling iOS applications, and the Ruby and Objective-C
runtimes have more in common than they have have differences. I used New Relic to profile a production Radiation
Dyno for five minutes and, to our collective surprise, we found that more than 90% of CPU time was being spent in
<a href="https://github.com/thoughtbot/griddler/blob/ff2ad16949bf5190f93df1a3e83eb0192f136c6d/app/controllers/griddler/emails_controller.rb#L4-L10">an innocuous function of a dependency</a>,
the open source library <a href="https://github.com/thoughtbot/griddler">Griddler</a>.</p>

<p>Artsy uses Griddler to parse and sanitize emails that we receive from <a href="https://sendgrid.com">SendGrid</a>. Griddler
contained the problematic code, which was responsible for parsing email responses from threaded replies. So if an
email body received by Radiation looks like this:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>This is the most recent reply in this email conversation.

On September 28th, 2019, Someone Else Wrote:

[The rest of the email thread]
</code></pre></div></div>

<p>Then Griddler parses out the string “This is the most recent reply in this email conversation.” for Radiation to
process. This is really important because some of the threads in Radiation are <em>thousands</em> of emails long. In fact,
I learned that Radiation has Artsy’s largest production database.</p>

<p>Griddler does this processing via regular expressions. Ashkan had the insight to look for existing issues from
other Griddler users who ran into similar problems, and to our delight,
<a href="https://github.com/thoughtbot/griddler/pull/310">we found a pull request</a> that appeared to address the <em>exact</em>
issue that we were having.</p>

<p>It turns out that emails with large amounts of repeated newline characters would totally stall Griddler’s regex.
Heroku’s router would timeout any request after 30 seconds, but would leave the Ruby code churning on that regex.
That would leave the Rails server unable to respond to subsequent HTTP requests, causing more timeouts. And because
of email’s store-and-forward nature, SendGrid would begin sending more problematic emails pretty quickly after any
Radiation reboot. A small change to add a regex group was all that was necessary to fix the issue.</p>

<p>Phew! We forked Griddler to Artsy’s GitHub organization and applied the change from the pull request. We were
concerned about security implications of using a different regex, but my
<a href="https://artsy.github.io/blog/2018/02/06/apogee-technical-retrospective/">previous work in regular expressions</a>
helped me vet the change. We pointed Radiation’s Gemfile to Artsy’s fork and deployed the change.</p>

<p><img src="/images/2019-11-07-diagnosing-our-radiation-problems/heroku.png" alt="Screenshot of Heroku Dashboard, indicating a drop in load" /></p>

<p>Then, we waited. Would the system start timing out again? It took a half hour for any of us to breathe a sigh of
relief. But things appeared to be stable: response times were normal and Dyno load dropped precipitously. Our
<em>Curie</em> worked. (Okay, enough radiation puns.)</p>

<p>During our weekly incident review, Devon guided the rest of our team through our incident response and what we
learned. Radiation is now in a much better state, so that future problems will be easier to track down. We
responded to the Griddler pull request, encouraging the maintainers to merge the commit so other teams would avoid
this problem. The incident review meeting explored a number of options to mitigate future issues, including
migrating Radiation to our Kubernetes cluster, and Sam (our VP of Engineering) suggested writing this post. So here
we are.</p>

<p>Ashkan also followed up with peer feedback for Devon, Chung-Yi, and myself. In part, it read:</p>

<blockquote>
  <p>It’s rare and odd to say dealing with incident was fun, but with your help it actually was productive and fun.</p>
</blockquote>

<p>Which, honestly? One of my proudest accomplishments at Artsy.</p>

<p>In the end, we solved the problem and restored access to our email systems in under 24 hours. We kept our cool, we
communicated effectively with our non-engineering colleagues, and we learned a lot. What more could you want from a
Radiation incident?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How hard could it be to create an email?]]></title>
    <link href="https://artsy.github.io/blog/2018/11/19/mjml/"/>
    <updated>2018-11-19T00:00:00+00:00</updated>
    <id>https://artsy.github.io/blog/2018/11/19/mjml</id>
    <content type="html"><![CDATA[<!-- OUTLINE -->

<p>Let’s talk about email HTML.</p>

<p>If you’ve never worked on emails before, you might think the process works something like this:</p>

<ol>
  <li>Write some HTML, but maybe with a few more tables than you usually use since emails like those.</li>
  <li>Render it in your browser. Nice! Looking great.</li>
  <li>Send yourself a quick test. Just like in your browser! Sweet!</li>
  <li>Send that PR and move on to the next thing.</li>
</ol>

<p><img src="/images/2018-11-19-mjml/example.png" alt="/images/2018-11-19-mjml/example.png" /></p>

<p>In reality, it’s more like this:</p>

<ol>
  <li>Write some HTML with more tables than you think could possibly be necessary. There’s no way it’ll break with all
these tables, right?</li>
  <li>Render it in the browser. Cool, looks fine.</li>
  <li>Send yourself a test, and send one to a service like <a href="https://www.litmus.com">Litmus</a> or
<a href="https://www.emailonacid.com">Email on Acid</a> that renders the email in dozens of clients</li>
  <li>Looking good in Gmail…good in Apple mail…wait why is it completely broken in Outlook 2007 (and 2010, 2013,
and 2019)? And Yahoo Mail on Internet Explorer? Shoot.</li>
  <li>Better add some more tables. That’s usually the solution.</li>
  <li>Well…that didn’t work. Find a post from 2009 in a forum for Netscape enthusiasts that implies you might want
to add an extra Outlook-only table using <code class="language-plaintext highlighter-rouge">&lt;!--[if mso | IE]&gt;</code> with
<code class="language-plaintext highlighter-rouge">role="presentation" and cellpadding="0" cellspacing="0"</code>. Maybe that’ll work.</li>
  <li>Outlook 2007 is fixed! Nice! Oh…but now it looks broken on iPhones. Back to the drawing board.</li>
</ol>

<p><img src="/images/2018-11-19-mjml/outlook-2019-broken.png" alt="/images/2018-11-19-mjml/outlook-2019-broken.png" /></p>

<!-- more -->

<p>And after a few hours, you’ve probably squished most bugs on most clients and are ready to ship it, but also ready
to tear your hair out. Creating emails that render gracefully in clients that were built 15 years ago and in
clients that were built this year isn’t easily done. That’s where MJML comes in.</p>

<h2 id="what-is-mjml">What is MJML?</h2>

<p><a href="https://mjml.io">MJML</a>, short for Mailjet Markup Language, is a markup language that is written like simplified
HTML/CSS and renders email-friendly, responsive HTML. So instead of having to code a few thousand lines of complex
HTML, you code a couple hundred lines of MJML, and it outputs code that looks good on <em>every single client</em>.</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;mjml&gt;</span>
  <span class="nt">&lt;mj-head&gt;</span>
    <span class="c">&lt;!-- global styles --&gt;</span>
    <span class="nt">&lt;mj-attributes&gt;</span>
      <span class="nt">&lt;mj-text</span>
        <span class="na">font-family=</span><span class="s">"HelveticaNeue, Helvetica, Arial, sans-serif"</span>
        <span class="na">font-size=</span><span class="s">"14px"</span>
        <span class="na">line-height=</span><span class="s">"21px"</span>
        <span class="na">padding=</span><span class="s">"0"</span>
      <span class="nt">/&gt;</span>
      <span class="nt">&lt;mj-section</span> <span class="na">padding=</span><span class="s">"0"</span> <span class="nt">/&gt;</span>
    <span class="nt">&lt;/mj-attributes&gt;</span>
  <span class="nt">&lt;/mj-head&gt;</span>
  <span class="nt">&lt;mj-body</span> <span class="na">width=</span><span class="s">"450px"</span> <span class="na">background-color=</span><span class="s">"#fff"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;mj-section</span> <span class="na">padding=</span><span class="s">"20px"</span> <span class="na">border=</span><span class="s">"1px solid #e5e5e5"</span> <span class="na">border-bottom=</span><span class="s">"0"</span><span class="nt">&gt;</span>
      <span class="nt">&lt;mj-group&gt;</span>
        <span class="nt">&lt;mj-column</span> <span class="na">vertical-align=</span><span class="s">"middle"</span> <span class="na">width=</span><span class="s">"19%"</span><span class="nt">&gt;</span>
          <span class="nt">&lt;mj-image</span> <span class="na">width=</span><span class="s">"66px"</span> <span class="na">align=</span><span class="s">"left"</span> <span class="na">padding=</span><span class="s">"0"</span> <span class="na">src=</span><span class="s">"jared-french-prose.png"</span> <span class="nt">/&gt;</span>
        <span class="nt">&lt;/mj-column&gt;</span>
        <span class="nt">&lt;mj-column</span> <span class="na">padding-left=</span><span class="s">"20px"</span> <span class="na">vertical-align=</span><span class="s">"middle"</span> <span class="na">width=</span><span class="s">"81%"</span><span class="nt">&gt;</span>
          <span class="nt">&lt;mj-text&gt;</span>Order #B135790<span class="nt">&lt;/mj-text&gt;</span>
          <span class="nt">&lt;mj-text&gt;</span>Jared French<span class="nt">&lt;/mj-text&gt;</span>
          <span class="nt">&lt;mj-text&gt;</span>Prose, ca. 1948<span class="nt">&lt;/mj-text&gt;</span>
        <span class="nt">&lt;/mj-column&gt;</span>
      <span class="nt">&lt;/mj-group&gt;</span>
    <span class="nt">&lt;/mj-section&gt;</span>
  <span class="nt">&lt;/mj-body&gt;</span>
<span class="nt">&lt;/mjml&gt;</span>
</code></pre></div></div>

<p>Looking good in Outlook 2007:
<img src="/images/2018-11-19-mjml/outlook-2007-fixed.png" alt="/images/2018-11-19-mjml/outlook-2007-fixed.png" /></p>

<p>It feels pretty magical.</p>

<p>When the marketing team was getting ready to revamp our user-facing emails in summer 2017, we found MJML and
thought, “hey, this could make life a lot simpler in the long run.” It took some time to get comfortable with it,
but maybe not as much as you’d think due to its similarities with HTML.</p>

<p>It can be tricky figuring out how to accomplish something really, really specific in MJML. Our design team sent
over templates with pretty specific needs—mobile vs. desktop padding, for example, and it took us a while to learn
how to make those types of tricky changes (though still less time than it would have taken in raw HTML, I’m sure).</p>

<h2 id="limitations">Limitations</h2>

<p>Of course, MJML is still limited by the boundaries of email clients. It can’t make gifs render in old versions of
Outlook, or fix the way Lotus Notes ignores stated image widths in favor of actual widths. We’ve run into issues
with background images that MJML couldn’t completely alleviate on all clients (they’re pretty poorly supported),
and because lots of mobile clients don’t support media queries, we’ve had to develop in a way that makes sure our
desktop layouts and sizes will look good on small screens.</p>

<p>And it’s worth noting that the HTML file output by MJML is going to be large. On our biggest emails, the ones
featuring articles, artists, artworks, events, ads, and more, we’ve had to deal with clipping by minifying our
output (which comes with its own share of difficulties, since again, things that work fine when minifying for web
will break email clients). If you’re curious, we use the <a href="http://kangax.github.io/html-minifier/">Kangax Minifier</a>
with <a href="/images/2018-11-19-mjml/kangax-settings.png">these particular settings</a>.</p>

<p>One thing that’s helped tremendously with these issues is MJML’s great
<a href="https://slacking-inviter.herokuapp.com/">Slack community</a>. Both the devs of MJML and several avid users (including
both of us) are good about answering questions from new and seasoned users alike.</p>

<h2 id="bringing-mjml-to-engineering">Bringing MJML to Engineering</h2>

<p>Part of what the email marketing team appreciated about MJML is that it could be written by someone who just knew
HTML and CSS—you don’t have to be an experienced programmer to make it work. The engineering team wasn’t much
involved with the development of the Marketing team’s emails in MJML, but when they began working on new
transactional emails for <a href="https://www.artsy.net/collect?acquireable=true">Buy Now</a> inventory, Erik (on Engineering)
and Matt (on Marketing) sat down together to see if it could be a good fit for them as well.</p>

<p>Artsy’s transactional emails cover everything from internal reporting to messaging for gallery partners, art
collectors and auction bidders. As these emails have evolved and become more complex, our approaches to balancing
beauty with stability have pushed the limits of reasonable human effort. Similar to how frontend frameworks like
<a href="https://getbootstrap.com/">Bootstrap</a> added a level of comfortable abstraction to stylesheets, or the way your
React.js <code class="language-plaintext highlighter-rouge">&lt;Button /&gt;</code> component became so much more than a plain old <code class="language-plaintext highlighter-rouge">&lt;button /&gt;</code>, MJML’s xml ‘components’ abstract
the messy bits away.</p>

<h2 id="state-of-the-email-union">State of the (Email) Union</h2>

<p>Today, we’re using MJML for all of our B2C emails, a few of our B2B emails, and our new transactional emails (all
three are generated by different mail services, so it takes some time to bring them all up to date). We’ve found
that we’re able to iterate on designs much faster, and our emails look better in more clients than they ever have
before.</p>

<p>What else have we learned during this process? MJML takes a bit of time to master, especially the idea of
<code class="language-plaintext highlighter-rouge">&lt;mj-head&gt;</code> as a kind of global stylesheet and the <code class="language-plaintext highlighter-rouge">body --&gt; section --&gt; column</code> flow. Once we got comfortable with
conventions like this, though, life before MJML became hard to imagine. It has offered Artsy the chance to raise
the level of accessibility of design <em>and</em> speed of development in this niche area, a major win for the engineering
team and cross-team collaboration as a whole.</p>

<p>For more information or to get started using MJML, <a href="https://mjml.io">check out their website</a>.</p>
]]></content>
  </entry>
  
</feed>
