<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: hal | Artsy Engineering]]></title>
  <link href="https://artsy.github.io/blog/categories/hal/atom.xml" rel="self"/>
  <link href="https://artsy.github.io/"/>
  <updated>2024-08-07T18:22:11+00:00</updated>
  <id>https://artsy.github.io/</id>
  <author>
    <name><![CDATA[]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Cocoa Architecture: ARRouter]]></title>
    <link href="https://artsy.github.io/blog/2015/08/15/Cocoa-Architecture-Router-Pattern/"/>
    <updated>2015-08-15T00:00:00+00:00</updated>
    <id>https://artsy.github.io/blog/2015/08/15/Cocoa-Architecture-Router-Pattern</id>
    <content type="html"><![CDATA[<p>I want to talk about a pattern that we’ve been using for the last few years on the Artsy Mobile team. This pattern pre-dates me joining Artsy by a few weeks, and was introduced into our codebase by <a href="http://90wpm.com">Ben Jackson</a>, this was the <code class="language-plaintext highlighter-rouge">ARRouter</code>’s first method:</p>

<div class="language-objc highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="k">+</span> <span class="p">(</span><span class="n">NSURL</span> <span class="o">*</span><span class="p">)</span><span class="nf">newOAuthURLWithUsername</span><span class="p">:(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">username</span> <span class="nf">password</span><span class="p">:(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">password</span> <span class="p">{</span>
      <span class="n">NSDictionary</span> <span class="o">*</span><span class="n">params</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSDictionary</span> <span class="nf">alloc</span><span class="p">]</span> <span class="nf">initWithObjectsAndKeys</span><span class="p">:</span>
                              <span class="n">username</span><span class="p">,</span> <span class="s">@"email"</span><span class="p">,</span>
                              <span class="n">password</span><span class="p">,</span> <span class="s">@"password"</span><span class="p">,</span>
                              <span class="n">ARAuthClientID</span><span class="p">,</span> <span class="s">@"client_id"</span><span class="p">,</span>
                              <span class="n">ARAuthSecret</span><span class="p">,</span> <span class="s">@"client_secret"</span><span class="p">,</span>
                              <span class="s">@"credentials"</span><span class="p">,</span> <span class="s">@"grant_type"</span><span class="p">,</span>
                              <span class="nb">nil</span><span class="p">];</span>
      <span class="n">NSString</span> <span class="o">*</span><span class="n">url_string</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSString</span> <span class="nf">alloc</span><span class="p">]</span> <span class="nf">initWithFormat</span><span class="p">:</span><span class="s">@"%@%@"</span><span class="p">,</span> <span class="n">AROAuthURL</span><span class="p">,</span> <span class="p">[</span><span class="n">params</span> <span class="nf">queryString</span><span class="p">]];</span>
      <span class="n">NSURL</span> <span class="o">*</span><span class="n">url</span> <span class="o">=</span> <span class="p">[</span><span class="n">ARRouter</span> <span class="nf">newURLWithPath</span><span class="p">:</span><span class="n">url_string</span><span class="p">];</span>
      <span class="p">[</span><span class="n">url_string</span> <span class="nf">release</span><span class="p">];</span>
      <span class="p">[</span><span class="n">params</span> <span class="nf">release</span><span class="p">];</span>
      <span class="k">return</span> <span class="n">url</span><span class="p">;</span>
  <span class="p">}</span>
</code></pre></div></div>

<p>Yep, that’s pre-ARC, pre-Dictionary Literals, memory-managed code. We took this pattern and rolled with it for the next 4 years, this article is about where we’ve taken it.</p>

<p>Within Eigen, <code class="language-plaintext highlighter-rouge">ARRouter</code> is one of our <a href="https://github.com/artsy/eigen/blob/904e8abfc11ce6ea4b6e81f0e02684b755a280c3/Artsy/Networking/ARRouter.m">biggest classes</a>, coming in at almost 1,000 lines of code. Whereas in Energy, it sits at a <a href="https://github.com/artsy/energy/blob/e51529250ede359c781042f222d5836eb9e8a979/Classes/Util/App/ARRouter.m">more reasonable</a> 300 lines. Eidolon does not have an ARRouter, what gives?</p>

<!-- more -->

<hr />

<h2 id="pattern-evolution">Pattern Evolution</h2>

<p>We started out with a Router object as being something that can take a model object, and return a <code class="language-plaintext highlighter-rouge">NSURL</code> corresponding to a server side end-point.</p>

<p>This worked pretty well, we shipped a 1.0 of Energy with this pattern. However, it become obvious that we were putting a lot of extra knowledge about the type and the parameters of request into classes whose responsibility was not generating a route. For example, user account creation, and user account deletion would use the same <code class="language-plaintext highlighter-rouge">NSURL</code> but have different HTTP methods.</p>

<p>We migrated our networking stack to using AFNetworking <code class="language-plaintext highlighter-rouge">1.0</code>, and started using CocoaPods instead of manually dragging and dropping code. With this in mind, we improved on the pattern and started returning <code class="language-plaintext highlighter-rouge">NSURLRequest</code>s which better encapsulate the server end-point request we were trying to map in the Router.</p>

<p>The pattern evolved when mixed with a <a href="http://cocoadocs.org/docsets/AFNetworking/1.3.4/Classes/AFHTTPClient.html">AFHTTPClient</a> to act as the base URL resolver, allowing us to easily switch between staging and production environments, and as a central point for hosting all HTTP headers. This meant it was trivial to generate authenticated <code class="language-plaintext highlighter-rouge">NSURLRequest</code>s.</p>

<p>As it is presently, this pattern is working. We’ve just wrapped up a new Pod, <a href="https://github.com/artsy/Artsy_Authentication">Artsy Authentication</a>. It’s a library that has an <code class="language-plaintext highlighter-rouge">ARRouter</code> that behaves <a href="https://github.com/artsy/Artsy_Authentication/blob/master/Pod/Classes/ArtsyAuthenticationRouter.h">exactly like above</a>. We continue to build new apps with the pattern.</p>

<h2 id="siblings">Siblings</h2>

<p>This pattern is standing the test of time, but that doesn’t mean we’re not actively trying to experiment within the domain. There are three interesting offshoots from our work on <code class="language-plaintext highlighter-rouge">ARRouter</code> that are worth talking about.</p>

<h4 id="got-the-routes-like-swagger">Got the Routes like Swagger</h4>

<p>The difference between Eigen’s <code class="language-plaintext highlighter-rouge">ARRouter</code> and Energy’s <code class="language-plaintext highlighter-rouge">ARRouter</code> is pretty simple. Eigen’s networking scope is an order of magnitude larger. This is a reflection on the varied data that Eigen is interested in, while Energy has a tight scope on specifically Artsy Parter related data.</p>

<p>During the new year of 2015, I explored the <a href="https://github.com/orta/GotTheRoutesLikeSwagger">idea of programmatically generating</a> an <code class="language-plaintext highlighter-rouge">ARRouter</code> as a CocoaPod, and then using CocoaPods’ subspecs to make it easy to define what collections of end-points you were interested in. This project is based on a standard in which an API is documented, <a href="http://swagger.io">Swagger</a>. This meant as an API consumer, I can generate the types of <code class="language-plaintext highlighter-rouge">NSURLRequest</code>s I would require from the API itself. It created files that looked like:</p>

<div class="language-objc highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Generated by Routes Like Swagger - 31/12/14</span>

<span class="k">@interface</span> <span class="nc">ARRouter</span> <span class="p">(</span><span class="nl">User</span><span class="p">)</span>

<span class="c1">/// Retrieve a user by id.</span>
<span class="c1">/// @return URLRequest for /api/v1/user/{id}.{format}</span>

<span class="k">-</span> <span class="p">(</span><span class="n">NSURLRequest</span> <span class="o">*</span><span class="p">)</span><span class="nf">getUserWithID</span><span class="p">:(</span><span class="n">NSString</span> <span class="o">*</span> <span class="p">)</span><span class="nv">slug</span><span class="p">;</span>

<span class="c1">/// Update an existing user.</span>
<span class="c1">/// @return URLRequest for /api/v1/user/{id}.{format}</span>

<span class="k">-</span> <span class="p">(</span><span class="n">NSURLRequest</span> <span class="o">*</span><span class="p">)</span><span class="nf">updateUserWithID</span><span class="p">:(</span><span class="n">NSString</span> <span class="o">*</span> <span class="p">)</span><span class="nv">slug</span><span class="p">;</span>

<span class="p">...</span> <span class="p">[</span><span class="nf">snip</span><span class="p">]</span> <span class="p">...</span>

<span class="k">@end</span>
</code></pre></div></div>

<p>This was a pretty nice expansion of the pattern, but overall felt a bit over-engineered and so, it was left as just an experiment.</p>

<h4 id="moya">Moya</h4>

<p>When we started an entirely fresh application, we noted down all the networking-related pain points felt from Eigen and Energy. The Router pattern was pretty good, but we were finding that we were having problems with the API consuming part of the <code class="language-plaintext highlighter-rouge">NSURLRequest</code>s. Mainly, a difficulty in testing, an inconsistency in how we would perform networking and that it didn’t feel declarative.</p>

<p>Moya is our attempt at fixing this. I won’t go into depth on what Moya is, we’ve <a href="/blog/2014/09/22/transparent-prerequisite-network-requests/">written articles</a> on this already. The part that is interesting is that it obviates an ARRouter by using a collection of Swift enums - forcing developers to include all necessary metadata an an end-point.</p>

<h4 id="hal-and-api-v2">HAL, and API v2</h4>

<p>The Router pattern relies on the idea that you know all the routes ahead of time, and add support for them as you build out each part of the app. <a href="http://stateless.co/hal_specification.html">HAL, a Hypermedia Application Layer</a> - can be approximated as being a self describing API. dB. wrote about it in <a href="/blog/2014/09/12/designing-the-public-artsy-api/">this blog post</a>.</p>

<p>This means that you ask the API how to get certain bits of data, and it will describe the ways in which you can access it.</p>

<p>Artsy’s future APIs are using this, and the Router pattern is, more or less, totally deprecated in this world. This is what an artwork’s JSON data looks like in v2:</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"id"</span><span class="p">:</span><span class="w"> </span><span class="s2">"4d8b92bb4eb68a1b2c00044a"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"created_at"</span><span class="p">:</span><span class="w"> </span><span class="s2">"2010-11-15T16:32:38+00:00"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"updated_at"</span><span class="p">:</span><span class="w"> </span><span class="s2">"2015-08-16T09:26:26+00:00"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Jeff Koons"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"sortable_name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Koons Jeff"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"gender"</span><span class="p">:</span><span class="w"> </span><span class="s2">"male"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"birthday"</span><span class="p">:</span><span class="w"> </span><span class="s2">"1955"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"hometown"</span><span class="p">:</span><span class="w"> </span><span class="s2">"York, Pennsylvania"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"location"</span><span class="p">:</span><span class="w"> </span><span class="s2">"New York, New York"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"nationality"</span><span class="p">:</span><span class="w"> </span><span class="s2">"American"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"_links"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"curies"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
      </span><span class="p">{</span><span class="w">
        </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"image"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"href"</span><span class="p">:</span><span class="w"> </span><span class="s2">"https://d32dm0rphc51dk.cloudfront.net/Uqad2mGhbNGhAUgb8bUvIA/{rel}"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"templated"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
      </span><span class="p">}</span><span class="w">
  </span><span class="p">],</span><span class="w">
  </span><span class="nl">"thumbnail"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"href"</span><span class="p">:</span><span class="w"> </span><span class="s2">"https://d32dm0rphc51dk.cloudfront.net/Uqad2mGhbNGhAUgb8bUvIA/four_thirds.jpg"</span><span class="w">
  </span><span class="p">},</span><span class="w">
  </span><span class="nl">"image:self"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"href"</span><span class="p">:</span><span class="w"> </span><span class="s2">"{?image_version}.jpg"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"templated"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
  </span><span class="p">},</span><span class="w">
  </span><span class="nl">"self"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"href"</span><span class="p">:</span><span class="w"> </span><span class="s2">"https://api.artsy.net/api/artists/4d8b92bb4eb68a1b2c00044a"</span><span class="w">
  </span><span class="p">},</span><span class="w">
  </span><span class="nl">"permalink"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"href"</span><span class="p">:</span><span class="w"> </span><span class="s2">"http://www.artsy.net/artist/jeff-koons"</span><span class="w">
  </span><span class="p">},</span><span class="w">
  </span><span class="nl">"artworks"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"href"</span><span class="p">:</span><span class="w"> </span><span class="s2">"https://api.artsy.net/api/artworks?artist_id=4d8b92bb4eb68a1b2c00044a"</span><span class="w">
  </span><span class="p">},</span><span class="w">
  </span><span class="nl">"published_artworks"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"href"</span><span class="p">:</span><span class="w"> </span><span class="s2">"https://api.artsy.net/api/artworks?artist_id=4d8b92bb4eb68a1b2c00044a&amp;published=true"</span><span class="w">
  </span><span class="p">},</span><span class="w">
  </span><span class="nl">"similar_artists"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"href"</span><span class="p">:</span><span class="w"> </span><span class="s2">"https://api.artsy.net/api/artists?similar_to_artist_id=4d8b92bb4eb68a1b2c00044a"</span><span class="w">
  </span><span class="p">},</span><span class="w">
  </span><span class="nl">"similar_contemporary_artists"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"href"</span><span class="p">:</span><span class="w"> </span><span class="s2">"https://api.artsy.net/api/artists?similar_to_artist_id=4d8b92bb4eb68a1b2c00044a&amp;similarity_type=contemporary"</span><span class="w">
  </span><span class="p">},</span><span class="w">
  </span><span class="nl">"genes"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"href"</span><span class="p">:</span><span class="w"> </span><span class="s2">"https://api.artsy.net/api/genes?artist_id=4d8b92bb4eb68a1b2c00044a"</span><span class="w">
  </span><span class="p">}</span><span class="w">
  </span><span class="p">},</span><span class="w">
  </span><span class="nl">"image_versions"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
    </span><span class="s2">"four_thirds"</span><span class="p">,</span><span class="w">
    </span><span class="s2">"large"</span><span class="p">,</span><span class="w">
    </span><span class="s2">"square"</span><span class="p">,</span><span class="w">
    </span><span class="s2">"tall"</span><span class="w">
  </span><span class="p">]</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p>You can see that via the _links section, curies and self-referential urls, you can build network client which traverses the API without built-in implicit knowledge.</p>

<p>It’s a really exciting pattern, and as client developers, we can work on improving standard API clients that work on all HAL APIs. Instead of something specific to Artsy’s API. A lot of the most interesting work in the Cocoa space has been done by Kyle Fuller with <a href="https://cocoapods.org/pods/Hyperdrive">Hyperdrive</a>.</p>

<h3 id="wrap-up">Wrap Up</h3>

<p>Given that we’re not writing applications against the v2 API, yet. The Router pattern is working fine for us at Artsy. It can be a really nice way to abstract out a responsibility that may currently be sitting inside a very large API client that might be worth extracting out.</p>

<p>Let us know what you think, send tweets to <a href="https://twitter.com/ArtsyOpenSource">@ArtsyOpenSource</a> on twitter. Ps. it’s pronounced “rooter”.</p>
]]></content>
  </entry>
  
</feed>
