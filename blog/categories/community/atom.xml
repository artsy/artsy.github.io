<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: community | Artsy Engineering]]></title>
  <link href="https://artsy.github.io/blog/categories/community/atom.xml" rel="self"/>
  <link href="https://artsy.github.io/"/>
  <updated>2024-08-07T18:22:11+00:00</updated>
  <id>https://artsy.github.io/</id>
  <author>
    <name><![CDATA[]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Strategies For Small, Focused Pull Requests]]></title>
    <link href="https://artsy.github.io/blog/2021/03/09/strategies-for-small-focused-pull-requests/"/>
    <updated>2021-03-09T00:00:00+00:00</updated>
    <id>https://artsy.github.io/blog/2021/03/09/strategies-for-small-focused-pull-requests</id>
    <content type="html"><![CDATA[<p>A common suggestion for improving pull requests (PRs) is to ‚Äúmake your PR small and focused‚Äù. I myself gave this suggestion in <a href="https://artsy.github.io/blog/2020/08/11/improve-pull-requests-by-including-valuable-context/">a recent article on this very blog about including context in PRs</a>.</p>

<p>Like most internet advice, this can feel like the <a href="https://knowyourmeme.com/memes/how-to-draw-an-owl">‚Äúdraw the rest of the owl‚Äù</a> meme. Even if we‚Äôre in agreement that I <em>should</em> make a PR smaller‚Ä¶<strong><em>how</em></strong> do I do it? How do I avoid a big PR when there‚Äôs a lot of cross-cutting changes to make? How do I create small, focused units of work when I‚Äôm building a large feature? How can I overcome my perfectionism and submit a PR that feels incomplete to me because the edges aren‚Äôt all polished?</p>

<!-- more -->

<h2 id="what-is-small-and-focused">What is ‚Äúsmall and focused‚Äù?</h2>

<p>Not all small PRs are focused. I might sneak five unrelated one-line changes into a PR. While it feels like that will enable me to move quickly, it also runs the risk of four unrelated changes being held up in review because the other is controversial.</p>

<p>Not all focused PRs are small. I might put an entire feature in one PR, and while it is focused, it‚Äôs still going to be difficult for you to review the large amount of changes thoroughly.</p>

<p>To make our PR reviewers‚Äô jobs easier, we‚Äôre looking for the intersection of small <em>and</em> focused. Changes that are cohesive and without distractions. Code that accomplishes one small thing.</p>

<p>Note that the recommendation for ‚Äúsmall and focused‚Äù PRs does <strong>not</strong> include the word ‚Äúcomplete‚Äù. I‚Äôm a perfectionist and I like my work to be very polished before it‚Äôs done, but when we‚Äôre iterating quickly the polish can come in a follow-up PR. This is the biggest challenge I‚Äôve had as an Artsy engineer ‚Äî finding the balance between polish and iteration. Artsy‚Äôs core values include <a href="https://github.com/artsy/README/blob/ccfbba13ead7cb6586d2d9bf088e5180907be07b/culture/what-is-artsy.md#impact-over-perfection">Impact Over Perfection</a> but my personal values include ‚Äúmake things <em>real good</em>‚Äù and it can be hard for me to navigate that tension.</p>

<h3 id="integrating-code-a-little-at-a-time">Integrating code a little at a time</h3>

<p>A caveat: the recommendations in this article assume you can integrate code a little bit at a time. I‚Äôve worked on teams and projects where we used very long-lived branches for features or even epic ‚Äî I know those environments exist. This article is probably not the one that will convince you to move to <a href="https://trunkbaseddevelopment.com/">trunk-based development</a>; it also might be less useful without trunk-based development.</p>

<p>Having said that, even with long-lived feature branches you can introduce code <em>into those branches</em> a little bit at a time. PRs can be opened against <em>any</em> branch, not just <code class="language-plaintext highlighter-rouge">main</code>.</p>

<p>A couple strategies we use at Artsy for integrating code a little bit at a time:</p>

<ul>
  <li><strong><a href="https://trunkbaseddevelopment.com/feature-flags/">Feature toggles</a></strong>. <a href="https://artsy.github.io/blog/2020/12/31/echo-supporting-old-app-versions/">Ash wrote about Echo</a>, a service for toggling features on mobile devices, but we have additional ways for enabling/disabling features at the system <em>or</em> user level. When we introduce new code we can hide it behind a feature flag until we‚Äôre ready for everyone to see it.</li>
  <li><strong>‚ÄúHidden‚Äù routes</strong>. Often when we redesign or modernize an existing route on Artsy.net we‚Äôll create a <em>second</em> similar route. We hide the in-progress page behind that new route and don‚Äôt share it until it‚Äôs ready. ü§´</li>
</ul>

<p>Armed with tools for integrating code incrementally, here are some strategies for reducing the size and scope of a PR. I‚Äôm not suggesting you use these strategies universally, but if you think you‚Äôre headed toward a very large PR, these are some things to try.</p>

<h2 id="start-with-small-scope--slice-your-stories-small">Start with small scope ‚Äî slice your stories small</h2>

<p>One of the most valuable lessons I learned as a consultant with a company focused on agile development is that you can almost always slice a story smaller. You can do this by sacrificing quality, but you can also (and probably should) do it by cutting scope. We can ship a new screen for our app sooner if we focus on building the most absolutely critical features first, and follow up with the valuable-but-not-critical features later.</p>

<p>There are many ways to break a story smaller, and all of them enable you to integrate code sooner in the form of smaller PRs:</p>

<ul>
  <li>Separate CRUD (Create, Read, Update, Delete) operations and ship them one at a time</li>
  <li>Separate by user role</li>
  <li>Separate individual edge cases</li>
  <li>Separate a simplified experience from an enhanced version</li>
</ul>

<p>Think of these smaller scoped features as self-contained vertical slices of functionality. As each one is released, users can take advantage of them, and your team can start building the next slice.</p>

<h2 id="pr-by-architectural-layer">PR by architectural layer</h2>

<p>Rather than building an entire feature end-to-end before creating a pull request, consider integrating one layer at a time. Embrace the boundaries between the front and back ends of your code ‚Äî submit a PR to introduce changes to the API, and once it‚Äôs merged follow up with another PR to introduce changes to the UI.</p>

<p>Depending on the architecture of your system, you might already be forced to this. At Artsy, our <a href="https://github.com/artsy/force">web app lives in one repo</a>, our <a href="https://github.com/artsy/metaphysics">GraphQL endpoint lives in another</a>, and many services are separated into repositories behind that. We <em>must</em> integrate our features one layer at a time. Here‚Äôs an example where <a href="https://artsy.github.io/author/matt/">Matt</a> <a href="https://github.com/artsy/metaphysics/pull/2819/files">added a field to our API</a> in one PR, and <a href="https://github.com/artsy/force/pull/6613">propagated it to the UI</a> in a separate PR. Even if you don‚Äôt have a repository boundary between your API and your UI, splitting PRs at this logical boundary can help make them more digestible.</p>

<p>The suggestion to PR by architectural layer is not in conflict with slicing stories small ‚Äî in fact, these two strategies complement each other nicely. A PR that contains multiple features but only one layer is probably large enough to be difficult to review; so is a PR that contains one feature end-to-end. A PR containing one layer of one feature can be easier to review.</p>

<h2 id="build-a-walking-skeleton">Build a walking skeleton</h2>

<p>A <a href="walking-skeleton">walking skeleton</a> is a bare-bones, stripped down implementation of your feature from end-to-end. It connects the UI all the way to the data source. Very little of the feature is presented, but what is there is fully functional.</p>

<p>Start a new feature with a walking skeleton PR to demonstrate connectivity of the pieces involved. It won‚Äôt do very much ‚Äî maybe it only displays one field ‚Äî but that‚Äôs okay because no one‚Äôs going to see it yet. The important thing is that the moving pieces are all connected ‚Äî the database, the API, the UI.</p>

<p>Once a walking skeleton PR is merged, you can start filling in the skeleton. Each new sub-feature can be its own PR.</p>

<p>This is a great approach if your team is looking to swarm on a feature. If we all work on our own sub-features without first merging a walking skeleton, we‚Äôre likely to face some intense merge conflict headaches when we realize we‚Äôve all connected the full stack in slightly different ways. Starting with a walking skeleton removes a lot of those merge conflicts, because we‚Äôre mostly bolting fields on to existing infrastructure along the way.</p>

<p><a href="https://github.com/artsy/relay-workshop/pull/1">This PR</a> is an example of a walking skeleton. My goal was to stand up an app that connected <a href="https://reactjs.org/">React</a>, <a href="https://relay.dev/">Relay</a>, and <a href="https://www.typescriptlang.org/">TypeScript</a>. <a href="https://github.com/artsy/relay-workshop/pull/1/files#diff-26ad4b834941d9b19ebf9db8082bd202aaf72ea0ddea85f5a8a0cb3c729cc6f2R25">The actual app doesn‚Äôt display very much</a> ‚Äî just enough to prove that the pieces were all working.</p>

<h2 id="separate-riskycontroversial-work-from-routine-work">Separate risky/controversial work from routine work</h2>

<p>It‚Äôs not always possible to identify ahead of time which work will prompt more discussion during review, but sometimes it‚Äôs obvious. Novel work that takes thoughtful consideration of multiple approaches is much more likely to invite feedback than work that follows existing patterns.</p>

<p>Routine implementation can be a noisy distraction in a PR that also contains a unique function that you really want reviewers to see. You should point out the unique bits in the PR body if they‚Äôre combined, but you also might consider separating the less-interesting implementation into its own PR.</p>

<p>The worst review you can get on a PR that contains both novel and routine work is ‚ÄúLGTM!‚Äù (looks good to me). It likely means the reviewer couldn‚Äôt separate the signal from the noise and overlooked the bits that required more thought and effort.</p>

<h2 id="separate-infrastructural-work-from-implementations">Separate infrastructural work from implementations</h2>

<p>A <a href="https://en.wikipedia.org/wiki/T-shaped_skills">t-shaped person</a> is someone with a lot of shallow experience in many areas, and deep expertise in one or a few areas. Their skills are wide at the base, and tall and narrow in their area of focus.</p>

<p>Code can have a similar shape. Infrastructural work tends to be wide and shallow ‚Äî it touches a lot of places in your code, but it doesn‚Äôt go deep in any of them. Implementation work tends to be the opposite ‚Äî it doesn‚Äôt affect the entire app, but it goes very deep for one feature.</p>

<p>We probably review infrastructural changes differently than we review implementation changes:</p>

<ul>
  <li>
    <p>Infrastructural work deserves scrutiny for the abstractions it introduces and how it might affect performance or future implementations. These kinds of changes introduce new patterns to the codebase and we want to make sure they‚Äôre useful and usable patterns.</p>
  </li>
  <li>
    <p>An individual implementation gets more scrutiny on user-facing details. It‚Äôs probably combining <em>existing</em> patterns, so we‚Äôll spend less time looking at abstractions. We‚Äôll spend more time confirming it works for our users.</p>
  </li>
</ul>

<p>When a large PR combines wide, shallow, abstract work with deep, narrow, concrete work, it requires the reviewer to shift between two different mindsets. You might consider breaking your PR into two: one containing the wide infrastructural work, and one containing the deep implementation work. This allows reviewers to focus on abstractions in one PR and user-facing details in the other.</p>

<p>Some examples of infrastructural changes that could be separated from implementation work:</p>

<ul>
  <li>We introduced a seam to the code in order to make room for our implementation.</li>
  <li>We updated a dependency to take advantage of a new feature.</li>
  <li>We refactored before we started our implementation.</li>
</ul>

<h2 id="separating-an-already-large-pr">Separating an already-large PR</h2>

<p>It‚Äôs natural for PRs to grow large. <a href="https://thedecisionlab.com/biases/optimism-bias/">Optimism bias</a> diminishes our ability to estimate work often resulting in more code changes than we expected. A feature seems like it won‚Äôt take much work until you get deeper and find complexity in places you hadn‚Äôt considered. There‚Äôs a lot of uncertainty when you start working on a feature and we‚Äôd need to model the entire problem to completion to know what the PR was going to look like before we started. A PR seems like it will be small until suddenly‚Ä¶it isn‚Äôt anymore.</p>

<p>This is what usually prevents developers from separating PRs ‚Äî by the time you recognize the PRs could be de-tangled, it seems like a lot of effort to de-tangle them.</p>

<p>When you‚Äôve got a PR/branch that contains multiple lines of work and you want to separate them, <a href="https://www.atlassian.com/git/tutorials/rewriting-history/git-rebase"><code class="language-plaintext highlighter-rouge">git rebase</code></a> is your best friend. Rebasing enables you to rename, reorder, combine, and separate commits. Use <code class="language-plaintext highlighter-rouge">git rebase</code> to group your commits into one set for each branch you want to extract, and submit a PR for each smaller set of changes.</p>

<p>Good commit hygiene makes it easier to rebase commits. Commit small units of work so that they can be re-ordered and grouped, and apply clear messages to each commit in case you need to move it. While you might not <em>always</em> separate/rebase PR branches, you‚Äôll appreciate small commits with clear messages when you do.</p>

<h2 id="small-prs-start-long-before-the-work-starts">Small PRs start long before the work starts</h2>

<p>The size of a pull request can be influenced long before the PR is opened. Slice features small in your product backlog; make small commits along the way; combine small commits into small pull requests. Among other benefits, a focus on breaking work into small parts will make it easier to review your changes.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why Asking for Help Strengthens Engineering Teams]]></title>
    <link href="https://artsy.github.io/blog/2021/02/11/asking-for-help/"/>
    <updated>2021-02-11T00:00:00+00:00</updated>
    <id>https://artsy.github.io/blog/2021/02/11/asking-for-help</id>
    <content type="html"><![CDATA[<p>I know that for many developers, especially those early in their careers, asking for help can be intimidating. I
often fear wasting someone‚Äôs time or exposing myself as less skilled or smart than my team initially thought.</p>

<p>In my first month as a software engineer at Artsy (and barely six months into life as an engineer after
<a href="https://medium.com/swlh/how-losing-my-job-helped-me-find-my-way-back-8c8f86552acc">transitioning from a career in communications</a>), I was struggling
through a ticket assigned to me as a ‚Äúgood first issue.‚Äù (The team estimated the task to be straightforward enough
for someone new to the team.) After a few hours stumbling between the ticket, my code, and Google, I made very
little progress.</p>

<!-- more -->

<p>Early and often, my fellow engineers at Artsy encourage me to ask for help when I hit roadblocks. Even with the
support explicitly offered to me, I was shaky. The extra 10 seconds it took to type out my question in Slack was
just enough time for me to chicken out.</p>

<p>Opening up with my team members about my concerns, I learned that asking for help is not just for me but ultimately
benefits my team. Sharing their insights below, I hope other engineers, early-career or not, feel empowered to ask
questions, stay curious, and prioritize learning for themselves and their team ‚Äî all hallmarks of great engineers.</p>

<h2 id="why-its-so-hard-to-ask-for-help">Why It‚Äôs So Hard to Ask For Help</h2>

<p>Working in tech and as an engineer (and even in <a href="https://medium.com/better-programming/why-women-dont-pursue-software-engineering-17d0dead24e9">undergraduate computer science
classes</a>,) I often felt surrounded by people smarter than me.
Operating alongside peers who are excelling motivates me to set the bar higher for myself. But at times, it can
also be intimidating. There is a reason that imposter syndrome is so pervasive in tech industry discourse. (A 2018
study found that <a href="https://www.cnet.com/news/tech-employees-likely-to-suffer-from-impostor-syndrome/">58% of tech workers suffer from
it</a>.) The fear of being ‚Äúfound out‚Äù as an imposter,
inadequate, or less impressive can be especially acute for those early in their career and from <a href="https://zora.medium.com/why-imposter-syndrome-is-worse-for-women-of-color-3bcf37335405">underrepresented
groups</a>.</p>

<p>Like other VC-backed companies, Artsy is working toward aggressive business targets and ships software at a high
velocity. At high-growth companies, tight deadlines and high-energy cultures make it tempting to shy away from hard
problems and to let the more senior people tackle the tough challenges. But these moments are critical for growth
and learning across the team.</p>

<figure class="illustration">
    <a target="_blank" href="https://www.artsy.net/artwork/pipilotti-rist-help-me">
        <img src="https://d32dm0rphc51dk.cloudfront.net/P24AUuVFX50Tr2Q6w58-fQ/large.jpg" />
    </a>
    <figcaption>Pipilotti Rist, Help me, 2016, Hauser &amp; Wirth, available on Artsy
    </figcaption>
</figure>

<h2 id="rethinking-productivity">Rethinking Productivity</h2>

<p>On Artsy‚Äôs engineering team, we put a lot of energy into optimizing developer workflows and communication channels.
While asking for help seemed counter to productivity, my team helped me see that the opposite is true: Encouraging
engineers to support one another is integral to building an effective engineering organization.</p>

<p>Pair programming is growing in popularity, not because society is becoming more kind and patient, but because it‚Äôs
good for business. Teams in synergy can <a href="https://martinfowler.com/articles/on-pair-programming.html">ship higher-quality code more quickly</a>.</p>

<p>Because teaching is one of the best ways to become an expert, a more experienced engineer can level up when pairing
with a less experienced engineer. Teaching solidifies understanding, reveals gaps in knowledge, and opens up new
questions for exploration. Recently, a senior engineer shared that they never questioned something in our codebase
until I prompted them to take a closer look. We deepened our understanding together.</p>

<p>Providing help also cultivates an engineer‚Äôs mentoring skills, which is especially important if they aim for
management or leadership roles.</p>

<p>Finally, a lot of people enjoy helping others for the pure reason that it feels good. Studies show that a majority
of workers prioritize meaning in their work over salary and that meaningful work translates to greater retention
and productivity. (<a href="https://hbr.org/2018/11/9-out-of-10-people-are-willing-to-earn-less-money-to-do-more-meaningful-work">Harvard Business Review</a> goes
so far as attaching a dollar sign to meaningful work: they estimate highly meaningful work generates an extra
$9,078 per worker per year and saves an average of $6.43 million in annual turnover-related costs for every 10,000
workers.) All good arguments for engaging in collaborative and empathetic workflows.</p>

<h2 id="building-community-and-scaling-knowledge">Building Community and Scaling Knowledge</h2>

<p>Building a culture of collaboration is particularly challenging, especially for distributed teams and those working
remotely during the pandemic. Pair programming provides opportunities for connecting, which can reverberate
throughout an organization.</p>

<p>Learning also has a network effect, so knowledge scales exponentially. If someone teaches me a new concept, I am
now empowered to share the knowledge with others, and then they can then spread that knowledge even further.</p>

<p>Put simply by one of my coworkers: Learning is contributing.</p>

<figure class="illustration">
    <a target="_blank" href="https://www.artsy.net/artwork/richard-artschwager-question-mark">
        <img src="https://d32dm0rphc51dk.cloudfront.net/fccQIzHtxIwf2eHTrEg0Dw/large.jpg" />
    </a>
    <figcaption>Richard Artschwager, Question Mark, 2001, Gagosian, available on Artsy
    </figcaption>
</figure>

<h2 id="why-prioritizing-your-growth-is-okay">Why Prioritizing Your Growth is Okay</h2>

<p>My natural tendency is to want to give more than I ask. But for all early-career engineers, it is also normal to
need a lot of help at the beginning. I need to trust that our recruitment team knew to ask the right questions to
make an informed decision to hire me ‚Äî the real me, beginner and all. The fastest way to improve is to tackle
difficult problems head-on and ask questions when I need support. Investing in my learning at this point in my
career will pay dividends to my team in the months and years to come.</p>

<p>So yes, I went ahead and pressed send on that Slack to ask for help.</p>

<blockquote>
  <p><em>This post originally appeared on Anna‚Äôs blog on <a href="https://anna-carey.medium.com/">Medium</a>.</em></p>
</blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Introducing Artsy Engineering Radio]]></title>
    <link href="https://artsy.github.io/blog/2021/01/06/introducing-artsy-engineering-radio/"/>
    <updated>2021-01-06T00:00:00+00:00</updated>
    <id>https://artsy.github.io/blog/2021/01/06/introducing-artsy-engineering-radio</id>
    <content type="html"><![CDATA[<p>Available now on <a href="https://podcasts.apple.com/us/podcast/artsy-engineering-radio/id1545870104">Apple Podcasts</a>, <a href="https://open.spotify.com/show/0gJYxpqN6P11dbjNw8VT2a?si=L4TWDrQETwuVO6JR1SOZTQ">Spotify</a>, and coming soon elsewhere, is Artsy
Engineering Radio!</p>

<p>Solving problems in the world of software engineering can mean a lot of different things, and this podcast will
explore what that looks like at Artsy. If you‚Äôve followed our blog, you can expect a podcast that sounds like it.
There are a ton of amazing engineers here at Artsy and we‚Äôre excited for you to hear their voices and stories. Our
hope is that this podcast will make it easy for more engineers at Artsy to contribute to the public persona of
Artsy Engineering.</p>

<!-- more -->

<p>We‚Äôll release new episodes every other week. Our target episode length is 30 minutes. Some episodes will be
technical and others less so. Because
<a href="https://github.com/artsy/README/blob/master/culture/engineering-principles.md#open-source-by-default">we work in the open</a>
it‚Äôs easy for us to talk about our work in public.</p>

<p>This isn‚Äôt the first attempt at an Artsy engineering podcast! Our engineering team has attempted multiple times to
start one. When <a href="https://artsy.github.io/author/jonallured/">Jon</a> went to create new Slack and Notion hubs, he found that both already existed. The
<a href="https://github.com/artsy/artsy.github.io/pull/368">PR for the podcast RSS feed</a> was opened in July, 2017!</p>

<p>We‚Äôre beating the fizzle this time, though. We‚Äôve got momentum and enthusiasm on our side ‚Äî several episodes are
already published and we‚Äôve got more lined up. Instead of tinkering with tooling we‚Äôre focusing on making episodes,
even if they aren‚Äôt perfect. Like the software we build, the podcast will get better over time as we iterate.</p>

<p>What do we have so far? In
<a href="https://podcasts.apple.com/us/podcast/0-introducing-artsy-engineering-radio/id1545870104?i=1000503035175">episode 0</a>,
<a href="https://artsy.github.io/author/jonallured/">Jon</a>, <a href="https://artsy.github.io/author/matt-dole/">Matt</a>, and <a href="https://artsy.github.io/author/steve-hicks/">Steve</a> introduced the podcast and talked about what you can expect from
future episodes. <a href="https://podcasts.apple.com/us/podcast/1-how-to-have-good-meetings/id1545870104?i=1000503035176">Episode 1</a> features a conversation with <a href="https://artsy.github.io/author/ash/">Ash</a> about facilitating meaningful and
inclusive team meetings, and how meetings are part of building teams, trust, and systems. <a href="https://podcasts.apple.com/us/podcast/2-how-artsy-hires-engineers/id1545870104?i=1000504558896">Episode 2</a> is
a conversation between <a href="https://artsy.github.io/author/steve-hicks/">Steve</a> and <a href="https://artsy.github.io/author/ash/">Ash</a> about how Artsy hires engineers.</p>

<p>Find the first few episodes right now in your podcast player. Watch for future episodes in your feed and we‚Äôll
announce them <a href="https://twitter.com/artsyopensource">on Twitter</a> when they‚Äôre released.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Improve Pull Requests By Including Valuable Context]]></title>
    <link href="https://artsy.github.io/blog/2020/08/11/improve-pull-requests-by-including-valuable-context/"/>
    <updated>2020-08-11T00:00:00+00:00</updated>
    <id>https://artsy.github.io/blog/2020/08/11/improve-pull-requests-by-including-valuable-context</id>
    <content type="html"><![CDATA[<p>Code review is an engineering process that has benefited greatly from a move toward asynchronous communication.
Long ago, engineering teams would sit in a room with code on a projector to review changes together. üò± For many
teams this led to batching code reviews or even skipping them altogether. üò±üò±</p>

<p>Today, most engineering teams use incredible tools like GitHub or GitLab to review changes through Pull Requests
(PRs). The greatest advantage of PRs is that the review can happen when it‚Äôs convenient for the reviewer:
asynchronously. Asynchronous communication isn‚Äôt all sunshine and unicorns, though. Notably, it lacks the ability
to course-correct when context is misunderstood.</p>

<!-- more -->

<p>When you‚Äôre in a synchronous conversation with someone, it doesn‚Äôt take much time for them to let you know you‚Äôve
forgotten to include context. Their brow furrows. They look confused. You notice this and quickly add the missing
context to keep the conversation moving forward. It takes a lot longer to identify missing context when
communicating asynchronously. The non-verbal cues are missing.</p>

<p>Worse, lack of context when <em>reviewing code</em> asynchronously has a reverb effect. I create my PR when it‚Äôs
convenient for me, you ask a clarifying question when it‚Äôs convenient for you, I respond when it‚Äôs convenient for
me, etc. Suddenly my PR has been open for three days and we haven‚Äôt yet made it to a common understanding of why
I‚Äôve made these changes.</p>

<p>It‚Äôs extremely important to include all available context when drafting a PR. It saves incredible amounts of time
by cutting out slow round-trip conversations to clarify.</p>

<p>I‚Äôm personally proud of and impressed by the job we do at Artsy in including context in our PRs. We start early, by
giving our engineers
<a href="https://github.com/artsy/README/blob/master/playbooks/engineer-workflow.md#pull-requests">some reading about how we work with PRs during their onboarding</a>.</p>

<p>But beyond that our engineers lead by example. This article presents a handful of examples from Artsy repositories
demonstrating how you can add context to your PRs to avoid unnecessary clarifying conversation.</p>

<h2 id="explain-your-reasoning">Explain Your Reasoning</h2>

<p>You‚Äôve been thinking a lot about the problem you‚Äôre solving - probably significantly more than your reviewers.
You‚Äôll save everyone time by describing the problem and sharing how you‚Äôre thinking about it.</p>

<h3 id="define-the-problem-and-solution">Define the problem and solution</h3>

<p>Why does this PR exist? Explain the problem it solves and describe your solution, as
<a href="https://github.com/sweir27">Sarah</a> does <a href="https://github.com/artsy/force/pull/3095">in this PR</a>. For bonus points,
include alternative approaches you considered.</p>

<p>As you are writing up the problem and solution, you might find that you‚Äôve missed on the scope of your PR. Are
there <em>many</em> problems this PR is solving? Maybe this should be broken into smaller PRs. Is it hard to describe the
problem because it requires multiple other PRs? Maybe those should be consolidated into one cohesive set of
changes.</p>

<h3 id="explain-interesting-lines-of-code">Explain interesting lines of code</h3>

<p>The reviewers aren‚Äôt the only ones who can comment on lines of code.
<a href="https://github.com/artsy/emission/pull/2085#discussion_r378228269">Give them</a> some
<a href="https://github.com/artsy/emission/pull/2085#discussion_r378230196">additional information</a> about
<a href="https://github.com/artsy/emission/pull/2085#discussion_r378231974">why a particular line was written</a>, as
<a href="https://github.com/ds300">David</a> does <a href="https://github.com/artsy/emission/pull/2085">in this PR</a>. Maybe you want
feedback focused on that line or maybe the line has side-effects and implications that aren‚Äôt obvious.</p>

<h3 id="give-a-guided-tour-of-the-changes">Give a guided tour of the changes</h3>

<p><a href="https://github.com/dblandin">Devon</a> takes the idea of adding context to individual lines to the next level
<a href="https://github.com/artsy/reaction/pull/2774#pullrequestreview-288095754">in this PR</a>. He takes advantage of
markdown to give us a virtual tour of the changes, at each stop providing helpful information and a link to the
next change. It‚Äôs like he‚Äôs sitting next to you!</p>

<h2 id="show-your-work">Show Your Work</h2>

<p>If your PR contains work that is beyond trivial, show your reviewers how you thought about the problem. Demonstrate
the effects of the changes. Give them confidence that you‚Äôve worked through this problem thoroughly, and you‚Äôve
brought receipts.</p>

<h3 id="make-small-self-contained-commits">Make small, self-contained commits</h3>

<p>A good PR starts with good commits. Good commits are small, self-contained, and leave the codebase always in a
working state. With good commits, reviewers can see exactly how you worked through the problem you were solving.
<a href="https://github.com/artsy/convection/pull/645">Here‚Äôs a PR</a> from <a href="https://github.com/jonallured">Jon</a> that
demonstrates the use of small, self-contained commits to describe his approach to refactoring code before fixing a
bug.</p>

<p><em>Bonus tip</em>: it can be easier to review PRs with many small commits via the
<a href="https://github.com/artsy/convection/pull/645/commits"><em>Commits</em></a> tab instead of the
<a href="https://github.com/artsy/convection/pull/645/files"><em>Files changed</em></a> tab.</p>

<h3 id="demonstrate-the-results">Demonstrate the results</h3>

<p>Pictures are a worth a thousand words. Animated gifs are worth a thousand pictures (uhhhh, in file size too üò¨). An
animated gif showing the outcome of your PR gives reviewers a demo, and confidence that you‚Äôve verified your
changes.</p>

<p><a href="https://github.com/artsy/force/pull/5817">Here‚Äôs a PR</a> from <a href="https://github.com/ashleyjelks">Ashley</a> that includes
animated gifs of the changes she‚Äôs made. The effects of the changes might not be obvious by looking only at the
code, but seeing them in action makes it clear.</p>

<h3 id="document-the-unseen">Document the unseen</h3>

<p>Sometimes a PR‚Äôs changes have effects outside of the UI. There are still ways to give reviewers proof that the
changes have the desired effects.</p>

<p><a href="https://github.com/artsy/eigen/pull/3206">Here‚Äôs a PR</a> from <a href="https://github.com/yuki24">Yuki</a> that not only
demonstrates what‚Äôs happening in the UI, but also assures me that the back-end data is getting updated properly
through a Rails console.</p>

<p><a href="https://github.com/xtina-starr">Christina</a> authored <a href="https://github.com/artsy/reaction/pull/3441">this PR</a> which
shows the UI changes in addition to some output from her browser console, demonstrating that analytics tracking
calls are firing correctly.</p>

<h3 id="share-your-progress">Share your progress</h3>

<p>One mistake many engineers make with non-trivial pull requests is to wait to open them until they‚Äôre ‚Äúdone‚Äù. If
there are changes you‚Äôd like to get people‚Äôs eyes on quickly, open a WIP PR before the work is done: mark it as a
draft in GitHub, or put <code class="language-plaintext highlighter-rouge">WIP</code> in the title. Extra work up front avoids rework by starting early discussions about
your approach.</p>

<p>Let reviewers know in the body that your work isn‚Äôt complete. As you continue your work, use a <code class="language-plaintext highlighter-rouge">TODO:</code> list in the
body to illustrate your progress, as in <a href="https://github.com/artsy/palette/pull/464">this PR</a> from
<a href="https://github.com/sepans">Sepand</a>.</p>

<p>Is this PR part of a larger scope of work? Is there followup work that will need to be done after it‚Äôs merged? Are
there PRs in other systems that need to merge in a specific sequence? Any migration details or timing that should
be known before merging? Call these details out to avoid another round-trip conversation.</p>

<h2 id="spread-knowledge">Spread knowledge</h2>

<p>Pull requests should not be one-sided - they aren‚Äôt just about collecting feedback from the reviewer. They‚Äôre also
an opportunity to spread knowledge from the author.</p>

<h3 id="share-your-learnings">Share your learnings</h3>

<p>Maybe you learned some things about the system you‚Äôre working with, or you learned a new feature of the language.
Share this new information with your team. <a href="https://github.com/anandaroop">Roop</a> shares some findings about
disabled tests <a href="https://github.com/artsy/metaphysics/pull/2130">in this PR</a>.</p>

<p>We introduced a new state management library shortly before <a href="https://github.com/pepopowitz">I</a> opened
<a href="https://github.com/artsy/eigen/pull/3526">this PR</a>, and I had to do some reading about how to add types to
something. I <a href="https://github.com/artsy/eigen/pull/3526#discussion_r451161406">shared my learnings with the team</a>.</p>

<h3 id="share-development-tips">Share development tips</h3>

<p>Did you learn a new technique while building this feature? Share it with your team!</p>

<p>In <a href="https://github.com/artsy/reaction/pull/3279#discussion_r395461329">this PR</a>,
<a href="https://github.com/damassi">Chris</a> shared with us his technique for grabbing fixture data from his locally running
environment.</p>

<hr />

<p>When your team embraces the pull request process, you reap rewards that extend far beyond the lines of code.
Providing context up-front shortens the feedback loop and surfaces important discussions sooner, allowing you to
ship changes more quickly. Sharing knowledge in PRs grows individuals and spreads expertise across your team. Every
PR becomes an artifact for retracing history. You can look back and see not only <em>which</em> decisions were made, but
<em>why</em> they were made.</p>

<p>If you‚Äôd like to know more about how we work with pull requests at Artsy, take a look at our
<a href="https://github.com/artsy/README/blob/master/playbooks/engineer-workflow.md#pull-requests">‚ÄúEngineer workflow‚Äù playbook</a>,
or poke around <a href="https://github.com/artsy">our GitHub repositories</a>. Check out
<a href="https://github.com/artsy/artsy.github.io/pull/619">the PR that created this article</a>. And if you‚Äôve got examples
of great PRs to share with the rest of us, leave a comment!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Unbearable Lightness of Refactoring]]></title>
    <link href="https://artsy.github.io/blog/2019/09/10/unbearable-lightness-of-refactoring/"/>
    <updated>2019-09-10T00:00:00+00:00</updated>
    <id>https://artsy.github.io/blog/2019/09/10/unbearable-lightness-of-refactoring</id>
    <content type="html"><![CDATA[<p>As engineers we are constantly in the process of building new features and improving our existing ones. Nowadays, with the help of tools and processes like code reviews one could argue the quality of the code being written has risen. At Artsy a pull request normally has one Assignee and possibly one or more Reviewers, so why do we still do a lot of refactoring?</p>

<blockquote>
  <p>There is no means of testing which decision is better, because there is no basis for comparison. We live everything as it comes, without warning, like an actor going on cold. And what can life be worth if the first rehearsal for life is life itself?</p>

  <p>‚Äï Milan Kundera, <a href="https://en.wikipedia.org/wiki/The_Unbearable_Lightness_of_Being">The Unbearable Lightness of Being</a></p>
</blockquote>

<p>Part of me wants to end this blogpost by Kundra‚Äôs quote, but for now let‚Äôs get deeper.</p>

<!-- more -->

<h2 id="the-refactor">‚ÄúThe Refactor‚Äù</h2>
<p>Recently we‚Äôve started adding <a href="https://stripe.com/docs/strong-customer-authentication">Strong Customer Authentication (SCA)</a> support to one of our services. This service is relatively young in our stack and very well-reviewed. While the original code and approach looked nice and simple, as this service naturally grew and we started adding more logic to it, things got more and more complicated. During SCA support efforts, we realized it‚Äôs time to refactor. The code I was trying to refactor was less than a year old and <a href="https://twitter.com/davidwalshblog/status/953663412013293569">originally written, well‚Ä¶ by me</a>!</p>

<p>Should I be worried? Embarrassed? Well, not really. As engineers, when we build things we tend to look at current state of affairs, and we attempt to predict the future as much as possible. But the future is always changing, moving. SCA feature we were about to add to our existing logic weren‚Äôt a requirement a year ago (a year ago I didn‚Äôt know what SCA was). So first thing, <strong>never be embarrassed about refactoring</strong>, because the thing you‚Äôre working on is often entirely unknown and you can‚Äôt expect to get something unknown totally right the first time around. Looked at it in this light, refactoring is healthy.</p>

<h3 id="lets-get-more-specific">Lets Get More Specific</h3>

<p>Back to our SCA change, we ended up having some discussions about how to improve our already complicated logic in a way that easily supports future updates. We started by trying to separate the different steps that an order has to go through to fully get submitted and try to simplify it, weighing the pros and cons of each approach. While pretty much all of our solutions would have some disadvantages, we managed to find our best option and started refactoring. Without getting too technical, lets look at the actual change.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">## before refactor</span>
<span class="n">order</span><span class="p">.</span><span class="nf">submit!</span> <span class="k">do</span>
  <span class="n">order</span><span class="p">.</span><span class="nf">line_items</span><span class="p">.</span><span class="nf">each</span> <span class="p">{</span> <span class="o">|</span><span class="n">li</span><span class="o">|</span> <span class="n">li</span><span class="p">.</span><span class="nf">update!</span><span class="p">(</span><span class="ss">commission_fee_cents: </span><span class="n">li</span><span class="p">.</span><span class="nf">current_commission_fee_cents</span><span class="p">)</span> <span class="p">}</span>
  <span class="n">totals</span> <span class="o">=</span> <span class="no">BuyOrderTotals</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="n">order</span><span class="p">)</span>
  <span class="n">order</span><span class="p">.</span><span class="nf">update!</span><span class="p">(</span>
   <span class="c1"># set totals</span>
  <span class="p">)</span>
  <span class="n">order_processor</span><span class="p">.</span><span class="nf">hold!</span>
  <span class="k">raise</span> <span class="no">Errors</span><span class="o">::</span><span class="no">InsufficientInventoryError</span> <span class="k">if</span> <span class="n">order_processor</span><span class="p">.</span><span class="nf">failed_inventory?</span>
  <span class="c1"># in case of failed transaction, we need to rollback this block,</span>
  <span class="c1"># but still need to add transaction, so we raise an ActiveRecord::Rollback</span>
  <span class="k">raise</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Rollback</span> <span class="k">if</span> <span class="n">order_processor</span><span class="p">.</span><span class="nf">failed_payment?</span> <span class="o">||</span> <span class="n">order_processor</span><span class="p">.</span><span class="nf">requires_action?</span>

  <span class="n">order</span><span class="p">.</span><span class="nf">update!</span><span class="p">(</span>
    <span class="c1"># set payment</span>
  <span class="p">)</span>
  <span class="n">order</span><span class="p">.</span><span class="nf">transactions</span> <span class="o">&lt;&lt;</span> <span class="n">order_processor</span><span class="p">.</span><span class="nf">transaction</span>
  <span class="no">PostTransactionNotificationJob</span><span class="p">.</span><span class="nf">perform_later</span><span class="p">(</span><span class="n">order_processor</span><span class="p">.</span><span class="nf">transaction</span><span class="p">.</span><span class="nf">id</span><span class="p">,</span> <span class="n">user_id</span><span class="p">)</span>
  <span class="k">raise</span> <span class="no">Errors</span><span class="o">::</span><span class="no">FailedTransactionError</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="ss">:charge_authorization_failed</span><span class="p">,</span> <span class="n">order_processor</span><span class="p">.</span><span class="nf">transaction</span><span class="p">)</span> <span class="k">if</span> <span class="n">order_processor</span><span class="p">.</span><span class="nf">failed_payment?</span>
  <span class="k">if</span> <span class="n">order_processor</span><span class="p">.</span><span class="nf">requires_action?</span>
    <span class="c1"># because of an issue with `ActiveRecord::Rollback` we have to force a reload here</span>
    <span class="c1"># rollback does not clean the model and calling update on it will raise error</span>
    <span class="n">order</span><span class="p">.</span><span class="nf">reload</span><span class="p">.</span><span class="nf">update!</span><span class="p">(</span><span class="ss">external_charge_id: </span><span class="n">order_processor</span><span class="p">.</span><span class="nf">transaction</span><span class="p">.</span><span class="nf">external_id</span><span class="p">)</span>
    <span class="no">Exchange</span><span class="p">.</span><span class="nf">dogstatsd</span><span class="p">.</span><span class="nf">increment</span> <span class="s1">'******'</span>
    <span class="k">raise</span> <span class="no">Errors</span><span class="o">::</span><span class="no">PaymentRequiresActionError</span><span class="p">,</span> <span class="n">order_processor</span><span class="p">.</span><span class="nf">action_data</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>In the original solution, we wrapped all of our changes in a database transaction within <code class="language-plaintext highlighter-rouge">order.submit!</code> to have a lock on that record. This was all good since we would ensure data integrity provided by database transaction. This way we ensure updates to <code class="language-plaintext highlighter-rouge">order</code> and <code class="language-plaintext highlighter-rouge">line_items</code> happen only in case of success. A failure in this block would rollback all changes which is good üëç</p>

<p>But things got complicated once some of the changes in the block <em>should</em> have been preserved, even in case of rollback. Specifically we want to make sure a <code class="language-plaintext highlighter-rouge">transaction</code> is stored on the <code class="language-plaintext highlighter-rouge">order</code> if it payment fails or requires action.
We found out that we can use <code class="language-plaintext highlighter-rouge">raise ActiveRecord::Rollback</code> which is a specific exception in Rails that only bubbles up in the surrounding transaction and does not get thrown outside of the block. This already makes things super complicated.</p>

<p>In order to make our code less complicated, we did a few things:</p>

<ul>
  <li>We delegated more responsibility to a service class,<code class="language-plaintext highlighter-rouge">OrderProcessor</code>.</li>
  <li>Instead of wrapping all code in one transaction, we now optimistically <code class="language-plaintext highlighter-rouge">submit</code> the order at the beginning and in case anything went wrong, we revert the changes.</li>
</ul>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">order_processor</span> <span class="o">=</span> <span class="no">OrderProcessor</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="n">order</span><span class="p">,</span> <span class="n">user_id</span><span class="p">)</span>
<span class="k">raise</span> <span class="no">Errors</span><span class="o">::</span><span class="no">ValidationError</span><span class="p">,</span> <span class="n">order_processor</span><span class="p">.</span><span class="nf">validation_error</span> <span class="k">unless</span> <span class="n">order_processor</span><span class="p">.</span><span class="nf">valid?</span>

<span class="n">order_processor</span><span class="p">.</span><span class="nf">advance_state</span><span class="p">(</span><span class="ss">:submit!</span><span class="p">)</span>
<span class="k">unless</span> <span class="n">order_processor</span><span class="p">.</span><span class="nf">deduct_inventory</span>
  <span class="n">order_processor</span><span class="p">.</span><span class="nf">revert!</span>
  <span class="k">raise</span> <span class="no">Errors</span><span class="o">::</span><span class="no">InsufficientInventoryError</span>
<span class="k">end</span>

<span class="n">order_processor</span><span class="p">.</span><span class="nf">set_totals!</span>
<span class="n">order_processor</span><span class="p">.</span><span class="nf">hold</span>
<span class="n">order_processor</span><span class="p">.</span><span class="nf">store_transaction</span>

<span class="k">if</span> <span class="n">order_processor</span><span class="p">.</span><span class="nf">failed_payment?</span>
  <span class="n">order_processor</span><span class="p">.</span><span class="nf">revert!</span>
  <span class="k">raise</span> <span class="no">Errors</span><span class="o">::</span><span class="no">FailedTransactionError</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="ss">:charge_authorization_failed</span><span class="p">,</span> <span class="n">order_processor</span><span class="p">.</span><span class="nf">transaction</span><span class="p">)</span>
<span class="k">elsif</span> <span class="n">order_processor</span><span class="p">.</span><span class="nf">requires_action?</span>
  <span class="n">order_processor</span><span class="p">.</span><span class="nf">revert!</span>
  <span class="no">Exchange</span><span class="p">.</span><span class="nf">dogstatsd</span><span class="p">.</span><span class="nf">increment</span> <span class="s1">'******'</span>
  <span class="k">raise</span> <span class="no">Errors</span><span class="o">::</span><span class="no">PaymentRequiresActionError</span><span class="p">,</span> <span class="n">order_processor</span><span class="p">.</span><span class="nf">action_data</span>
<span class="k">end</span>
<span class="n">order_processor</span><span class="p">.</span><span class="nf">on_success</span>
</code></pre></div></div>
<p>Well, this at least is a lot more readable.</p>

<h3 id="get-the-change-to-production">Get The Change to Production</h3>

<p>The next question is how to get this to production. We tried to isolate this specific refactoring by:</p>

<ul>
  <li>Open a PR that only focuses on our refactoring</li>
  <li>Make sure in the PR above we don‚Äôt touch any API level tests and make sure all these tests still pass. This would give us more confidence that we are not impacting our existing clients.</li>
  <li>Review and merge refactoring PR and test on staging.</li>
  <li>Deploy everything in current pipeline to isolate the refactor deploy.</li>
  <li>Deploy the refactoring PR to production.</li>
</ul>

<h2 id="how-did-it-go">How Did It Go?</h2>

<p>This plan worked for us, for the most part. We ended up having to rollback the deploy since we found a bug in a non-API part of our app. From this we learned that even if we already have tests written in different layers of our app, we still need to verify them and make sure they cover all cases. Relying too much on existing tests can often lead to trouble ‚Äì verify!</p>

<h2 id="our-learnings">Our learnings</h2>
<ul>
  <li>Don‚Äôt be afraid of refactors. They are natural and a healthy engineering tool / practice.</li>
  <li>Ensure that refactor PR‚Äôs only include refactor-related changes. It‚Äôs often tempting to fix other things along the way, but those fixes can take place in follow-up PRs.</li>
  <li>Don‚Äôt rely only on existing tests. Refactoring is a great opportunity to review and verify your tests. Verify them and make sure they cover all scenarios.</li>
</ul>

<p>Curious about the PR? At Artsy we believe in <a href="https://github.com/artsy/README/blob/master/culture/engineering-principles.md#open-source-by-default">Open Source By Default</a>, so check out the code <a href="https://github.com/artsy/exchange/pull/475/files">here</a>.</p>
]]></content>
  </entry>
  
</feed>
