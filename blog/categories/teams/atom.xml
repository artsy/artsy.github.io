<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: teams | Artsy Engineering]]></title>
  <link href="https://artsy.github.io/blog/categories/teams/atom.xml" rel="self"/>
  <link href="https://artsy.github.io/"/>
  <updated>2024-10-30T17:23:09+00:00</updated>
  <id>https://artsy.github.io/</id>
  <author>
    <name><![CDATA[]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Stepping Out Of The Knowledge Zone]]></title>
    <link href="https://artsy.github.io/blog/2022/04/13/stepping-out-of-the-knowledge-zone/"/>
    <updated>2022-04-13T00:00:00+00:00</updated>
    <id>https://artsy.github.io/blog/2022/04/13/stepping-out-of-the-knowledge-zone</id>
    <content type="html"><![CDATA[<p>As I am writing my first blog post for Artsy, here is a short introduction on who I am: My name is Kaja and I am an
engineer in our Berlin entity. As a Ruby-born programmer I am calling myself a backend engineer, but that also may
change and is more about emotional identification and less about what I actually do (as you will see in this blog
post). My background is not in engineering at all. In university I graduated in philosophy and historical
linguistics, both the most impractical but most beautifully theoretical subjects I can think of. I really love
being in the world of ideas and thought experiments that challenge the current status of what <em>is</em>, as opposed to
what is <em>thinkable</em>.</p>

<!-- more -->

<p>At Artsy I am currently working in the PX (Partner Experience) Team and since I joined 1 year ago, most of my time
in the PX team has been dedicated to the implementation of the Artsy Shipping feature. In the backend I helped
tying the ties between the external ARTA-API (a white glove shipping company) and our own service that is managing
the shipping and order statuses of the artworks that are ordered online. In the front end I implemented some forms
for that feature and some so called hooks. I felt like a fish in the water with these tasks, because the company
that I had worked at before was a shipping company and I did the same thing from the other side of the API
relationship. In the same language (Ruby on Rails).</p>

<p>Here is another fact about me that is a premises for what comes next: I enjoy to be a learner of new things much
more than being an expert about things that I already know. Of course being an expert is also flattering the ego,
but after a while it can feel repetitive and make your soul feel old and tired. While the experience of being new
to something and not an expert at all can give you a rejuvenating prickle. On the other side it can be scary to
admit not knowing something and also the ego will feel small and hurt. But I learned that overcoming the hurt ego
is my way to happiness in life and I am practicing every day to let go of the idea of me being the admirable expert
and commit to the philosophical open mind of the “The only thing I know, is that I don’t know.”.</p>

<p>In the search of something new that I don’t know I stretched out my feelers* and wanted to continue my learnings
in Elixir. At my previous job I had done quite some work in that new language and still felt non-experty enough in
it to feel the prickle of learning it. It turned out to be a bit difficult since there were not many people around
me able to pair and guide me through some problems and the actual work to be done there did not appear to have
enough priority to be taking so much of my work time.</p>

<p>One thing I personally care a lot about is the general health of the code base and that the whole machine of a
distributed system is well oiled and working in a way that makes it easy to contribute to. This is why I also
really care about updating dependencies and feel personally in charge of doing that without anyone giving me this
role. That care and my first rotation at Artsy has made me cross the paths with the velocity team several times. I
understood that the care for the health of the code base is a shared emotion with the velocity team members and I
felt heard when they picked up this urgent topic in a platform practice (an open somewhat informal meeting for all
the devops/infrastructure things). My curiosity for the velocity team grew.</p>

<p>But did I reach out to the velocity team to ask for some collaboration on the dependency updates? No. You have the
privilege of having a female perspective here in the blog post and I can give you some insights on the barriers for
me as a woman in tech. While the PX team is well equipped with women engineers, the velocity team only consists of
men. This plus the aura of tech-geniuses that usually surrounds the people who do devops from the perspective of an
engineer made me feel nervous and shy to reach out to the velocity team members.</p>

<p>Another thing that happened was that during some of these beloved dependency updates I had to change the docker
file of the project, because I needed a newer ruby image. The ruby image we used was a specific artsy ruby image
and we did not have one for the ruby version that I needed, so here I had to go and change the whole docker file
set up. I did not know much about docker and what all these funny <code class="language-plaintext highlighter-rouge">RUN</code> commands actually did and just tried and
guessed and broke stuff as I went along and at some point got stuck. So naturally I reached out to our dev-help
channel and was quickly having the help of Andre, our velocity team member in the German time zone. He paired with
me and explained the docker commands on the go and made everything seem so simple and straight forward, while also
being super nice and approachable talking about his cat and his favorite Brazilian food, that I had to question my
own prejudice about the velocity team members and come to the conclusion that they might all be men and super good
at what they did, but that at least one of them was really good at demystifying stuff and helping me out.</p>

<p>The new learnings about docker lit a fire in me: I wanted to learn more of this mysterious world of infrastructure.
After letting the thoughts and feelings simmer for another week or so, I had a 1:1 with my manager Christian. He
has some magical question asking powers that truly trigger introspection and I ended up hearing myself say to him:
“I wish I could do something like an internship in the velocity team!”. Here it was. The actual wish had formed
into something that is actionable and as I learned totally possible. My Manager did some magic managing and <em>piff
paff</em> here I was starting my 2 sprint (4 weeks) rotation in the velocity team!</p>

<p>At first I was still a bit scared and nervous. Would I be able to contribute anything or would I just be an
annoyance to the team? Would I make a fool of myself and be branded as a stereotypical woman who doesn’t know
anything about tech (this is coming from many years of being perceived as a person without any tech skills). I
latched myself onto the thought, that Andre would be the person that I could talk to and that I knew he was not
going to bite my head off. I also realized in the organizing process that there was Matt Jones, another velocity
team member, who was reaching out to me and being super open and kind and having great communication skills and it
made me feel less scared.</p>

<p>The first week came up and I found myself in meetings with the velocity team mostly listening at the beginning as I
was lacking some context in the conversations, but not feeling super weird as I saw that there was nothing of the
expected mysterious witch craft happening but a very straight forward Kanban board where the only unknowns where
some names of tools that I had not used before. I was also glad to see some of the faces in the meetings showing
signs of human struggle like tiredness, a very relatable thing. During my first week I didn’t really know what to
do as some of the tasks suddenly got blocked or changed or appeared to be already solved and the only thing that
kept popping up as a suggestion was to do some work on integrity, our little QA robot that automatically clicks
through the staging interfaces and checks if it behaves as expected. The general reasoning of people in the team
was “I don’t really know javascript and this cypress stuff, so it would be cool if you can take over some of the
integrity tasks”. I was still too shy to loudly admit that I myself was also not knowing anything about JS or
cypress. I felt that as a web developer coming to the velocity team they would think, but is there anything that
she knows if she doesn’t know docker nor JS??</p>

<p>Matt Jones asked me for feedback on my first week as he wanted to make sure that this was a useful learning
experience for me and I told him openly that I felt a bit confused on what my tasks were and that I also didn’t
know how to fix these tests in integrity and that the only other task that was assigned to me was seeming like a
dead end to me. That other task was to implement a new user role into something that is called the <em>old admin</em>!
Somehow this made my neck hair stand up. Implementing a new feature into a half way sunset service? I looked into
the code to see if this would be simple and straight forward and saw myself confronted with somewhat outdated
coffeescript and felt a cold shudder.</p>

<p>The second week began and as Matt had made me join some meetings on discussing how and if we should set up an
Artsy.net local docker container for the development and what other services than force (our main service for
Artsy.net) would be useful to the engineers that usually worked on force. It was an interesting learning experience
especially because Elena, the engineering Manager on the velocity and data platform teams, was asking some really
good critical questions that made me realize there was more to it than just a simple docker run for a single
project. She mentioned problems with node and the usability of the development environment, talked about previous
experiences with such aims and how it was not working as smoothly as imagined.</p>

<p>The second week in the velocity team also brought along some team building time. I joined a coffee call and it was
super interesting to finally also feel like I was getting to know the other mysterious team members of velocity. We
talked about our international backgrounds and it was great to hear so many stories about where people had come
from and what languages they had grown up with. This finally was melting my heart for the team and I lost my last
little bit of fear and shyness.</p>

<p>As I then started to look at integrity and list some of the tests in it that were flakey Joey, our director of
engineering, was helping me out leaving meaningful hints and comments on my notes. This plus the recent successful
coffee call with the team encouraged me to my next very risky step: In a meeting called “velocity mob session” I
proposed to the team members to mob together on some problem of integrity actually not being able to run certain
tests from two instances in the same time. It felt risky and scary driving a mob session in a repository that I
wasn’t familiar with, reproducing a problem that I wasn’t fully understanding and trying to solve it in a
language/framework that I was not an expert in. But the risk was totally worth it. It turned out to be a super
interesting and fun and collaborative mob session and we actually figured stuff out together with the whole team.
Nothing feels better than having a whole team figuring something out together. It really bonds to see stuff
happening as a shared experience.</p>

<p>The third week started and in a standup I admitted that I had not been following up on implementing a new role into
our <em>old-admin</em> because I felt uneasy to add something new to a project that was stuck in a weird mid-deprecation
state. The team reacted quickly with a super good idea: Instead of adding something to the <em>old-admin</em> I should set
up something that was going to be the new-admin in our environment so that people could contribute to it on the
upcoming hackathon. I was thrilled! Never have I witnessed the birth of a new project at Artsy and now I was
supposed to set the whole thing up and go through each step of putting it out there? Awesome! Also I had absolutely
no idea what that meant. Did I need to do some dangerous mystic exploration into the far away field of our system
being set up in kubernetes or something? I wasn’t sure. All I had in mind were these complex huge graphs of our
system and how all the services were connected. How could I add another service into this huge spider web?</p>

<p>The first helpful thing was a little check list that Joey gave me of things that had to be done. Breaking the task
down into smaller task definitely already demystified the whole thing a bit. It looked something like:</p>

<ul>
  <li>get typical local development working</li>
  <li>get <code class="language-plaintext highlighter-rouge">hokusai dev start</code> working (i.e., local development on docker)</li>
  <li>create staging deployment(s) and get them working</li>
  <li>CircleCI</li>
  <li>create production deployment(s) and get them working</li>
  <li>set up the project in <a href="https://github.com/artsy/horizon">Horizon</a></li>
</ul>

<p>Also I knew that Roop was the point person for this project and had started setting up the github repo so I started
to set up the project locally myself and then went to reach out to him for my questions that had come up. This is
how I had my first ever pairing session with Roop and it was so much fun. After having the project working for me
locally I was informed that Devon had already put a tutorial video out there on how to set up a new project with
<a href="https://github.com/artsy/hokusai">hokusai</a> in the artsy system. I watched the video and followed the steps along
and when I got stuck reached out to Devon directly and there I was having another interesting and fun pairing
session on setting up a new project with hokusai.</p>

<p>As you can see each step demystified this task further and further so that in the end after another bunch of fun
pairing sessions with Jian and Joey I got the new admin deployed and ready just in time for my week four of the
rotation: The hackathon week! During that week I was continuing my integrity work, pairing with different people
from different product teams on the flakey cypress tests and in the same time doing my own personal favorite
hackathon project: Updating dependencies in our code base. I will basically use every excuse I get to update our
dependencies, because they just need that love and I believe that we can get the code base to a point where it is
not so painful anymore to keep stuff up to date.</p>

<p>As the end of the fourth week came up, so did my end of the rotation with the velocity team and I was sad to leave.
I asked the team members to give me some feedback and was hoping to be able to work on the new admin and on
integrity and on the Artsy local docker stuff more in the future.</p>

<p>The following weeks some awesome feedback came in and I was glad to see that I was not the only one really enjoying
all the nice pairing and good times on the velocity team. As much as I like the PX team and also missed them, I
secretly hoped that some day in the future I could switch over to velocity in the long term. I knew now that I
would be learning so much and that none of this was scary anymore. And then it came: An email from Elena saying
that the velocity team was internally searching for a new member! Maybe the timing was just right, maybe the
universe just loves me so much… I don’t know, but my wishes became true and I am now moving over to velocity. I
guess sometimes it is really worth leaning into the scary unknowns and going all the way there to see if it is
really so scary.</p>

<p>*“Die Fühler ausstrecken” = German <em>to stretch out your feelers</em> stands for “to prudently try and see something
that you don’t know” as a snail would do to find her way forward very slowly and retreat from something unpleasant.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Unstructured Knowledge Sharing]]></title>
    <link href="https://artsy.github.io/blog/2021/05/11/unstructured-knowledge-sharing/"/>
    <updated>2021-05-11T00:00:00+00:00</updated>
    <id>https://artsy.github.io/blog/2021/05/11/unstructured-knowledge-sharing</id>
    <content type="html"><![CDATA[<p>We have a handful of regularly scheduled meetings in place at Artsy devoted to knowledge sharing.</p>

<p>But what about the <em>unstructured</em> ways in which we share knowledge? If structured sharing time demonstrates that a
team is <em>interested</em> in spreading knowledge, <em>unstructured</em> sharing time demonstrates that spreading knowledge is
the default mode for the team. Instead of the team forming habits of working in isolation or hoarding expertise,
they’ve formed habits of learning from and teaching each other.</p>

<!-- more -->

<p>Regularly scheduled meetings we have for knowledge sharing include:</p>

<ul>
  <li>Team-based knowledge share meetings</li>
  <li>Open office hours for anyone to bring questions</li>
  <li>Lunch &amp; learns for presenting across all of Artsy engineering</li>
  <li>Show &amp; tell, where attendees bring recent learnings or explorations to demo to the group</li>
  <li>Peer learning groups that are dedicated to learning a specific topic in development</li>
</ul>

<p>As <a href="https://twitter.com/ashfurrow">Ash</a> mentioned in <a href="https://artsy.github.io/blog/2020/12/09/share-your-knowledge/">his article on knowledge shares</a>, these are all great opportunities
for us to share knowledge. Learning is easy to de-prioritize in the face of shipping features, and scheduling these
meetings reinforces learning as a priority.</p>

<p>Recently <a href="https://github.com/damassi">Chris Pappas</a> pointed out the incredible value we get out of one specific Slack channel:</p>

<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Shortest blog post of all time:<br />“Add a <a href="https://twitter.com/hashtag/dev?src=hash&amp;ref_src=twsrc%5Etfw">#dev</a>-help channel to your slack where devs can pose questions to the wider team. You won’t regret it!”<br />-- Chris Pappas</p>&mdash; Artsy Open Source (@ArtsyOpenSource) <a href="https://twitter.com/ArtsyOpenSource/status/1357819867638812672?ref_src=twsrc%5Etfw">February 5, 2021</a></blockquote>
<script async="" src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>

<p>This piqued my interest. What unstructured/unscheduled things do we do at Artsy to demonstrate our emphasis on
learning?</p>

<h2 id="the-dev-help-slack-channel">The #dev-help Slack Channel</h2>

<p>We have many dev-specific channels set up in the Artsy Slack, but one in particular has become a massively
important knowledge-base for the entire team: the #dev-help channel.</p>

<p>This channel is a place for engineers to post when they’re stuck. All engineers watch the #dev-help channel (to
some degree) and offer support when they can. Each issue is threaded to avoid noise in the channel. When the
question is answered, it gets marked as “solved” by applying a ✅ reaction. <a href="https://github.com/pvinis">Pavlos</a> set up a Slack app
that auto-applies the ✅ reaction when someone says “solved” in the thread.</p>

<p><img src="/images/2021-05-11-unstructured-knowledge-sharing/dev-help.png" alt="A question asked and answered in our #dev-help slack" /></p>

<p>The cumulative result of the questions asked and answered in this channel is an incredible knowledge base for all
engineers. When I run into a new issue, the first place I search is #dev-help. More often than not I find my exact
problem already solved.</p>

<p>This knowledge base is so important and powerful that it’s no longer only a place to <em>ask</em> for help. Engineers will
also share problems they’ve <em>already solved</em> in a new thread in the channel, in case someone else runs into the
problem. Usually we’ll tag these problems up front with <code class="language-plaintext highlighter-rouge">[already solved]</code> or similar, to make it obvious no one
should spend cycles trying to solve this problem.</p>

<p><img src="/images/2021-05-11-unstructured-knowledge-sharing/already-solved.png" alt="An already-solved thread in our #dev-help slack" /></p>

<p>One other important thing to say about the #dev-help channel: as engineers it’s tempting to solve problems with new
and novel tooling, but in the case of #dev-help we found a way to use our existing tooling in a slightly different
way. Sometimes the best solution is one you already have. We could have investigated dedicated software like Stack
Overflow for Teams, or we could have built our own knowledge-base tool. Instead we put some rules around how we
would use a Slack channel, and gained a huge benefit at a fraction of the cost.</p>

<h2 id="internal-live-streaming">Internal Live-Streaming</h2>

<p>Occasionally an Artsy engineer will broadcast that they’re taking on work that is ripe for knowledge-sharing, and
they’ll spin up a Zoom call for others to join. It might be something they know how to solve — like when
<a href="https://github.com/anandaroop">Roop</a> spun up a call to walk through how he’d use <a href="https://observablehq.com/">Observable</a> to explore search index
weighting. There might be more uncertainty to the problem, like when <a href="https://github.com/pvinis">Pavlos</a> started up a call to
investigate a CI build failure using <a href="https://git-scm.com/docs/git-bisect"><code class="language-plaintext highlighter-rouge">git bisect</code></a>. It might be somewhere in between, like when
<a href="https://github.com/admbtlr">Adam</a> was doing some refactoring of our React Native navigation.</p>

<p>Sometimes this looks like a pairing or mobbing session, but sometimes it looks more like live-streaming. An
engineer is demonstrating by solving a real problem. If audience members can contribute, great — but they are also
welcome to tag along and learn.</p>

<h2 id="pairing">Pairing</h2>

<p><a href="https://github.com/yuki24">Yuki</a> wrote on this blog <a href="https://artsy.github.io/blog/2018/10/19/pair-programming/">about pair-programming at Artsy</a>. Pairing isn’t an unusual practice
for development teams….but there is something notable in regards to knowledge-sharing.</p>

<p>We’re somewhere in the middle on the pairing frequency spectrum at Artsy. We don’t have dedicated pairs working on
problems together all day/every day. But we also don’t only pair when we’re stuck.</p>

<p>Pairing when you’re stuck is great, and it can help move you forward on a problem. If that’s the only time you
pair, though, you’re missing out on a massive learning opportunity.</p>

<p>Pairing to build a feature gives you exposure to an entire toolbox you might never have used before. How does your
pair approach a problem? How do they manage their time? What development tools do they use? What techniques do they
use for testing and debugging? How do they tighten their feedback loop? This is knowledge-sharing beyond the code
or the product you’re building — it’s knowledge-sharing of tools, skills, and habits.</p>

<hr />

<p>What are the unstructured/unscheduled ways in which your team shares knowledge? Leave us a note in the comments!</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Echoes From the Past: Supporting Old App Versions]]></title>
    <link href="https://artsy.github.io/blog/2020/12/31/echo-supporting-old-app-versions/"/>
    <updated>2020-12-31T00:00:00+00:00</updated>
    <id>https://artsy.github.io/blog/2020/12/31/echo-supporting-old-app-versions</id>
    <content type="html"><![CDATA[<p><a href="https://artsy.github.io/blog/2020/03/02/ios-deploys-super-weird-totally-normal/">In, a recent blog post</a>, I discussed a fundamental difference between web and iOS deployments. Web software is deployed to servers that are under your control, while iOS software is deployed to users’ devices that you have <em>no</em> control over. This distinction really changes how you think about the code that you ship, because that code could be running indefinitely on devices that never get updated.</p>

<p>The previous post focused on this distinction through the lens of accidentally shipping (and then fixing) a bug. This focus on bugs is important, but focusing <em>only</em> on bugs left me unable to articulate an important, nuanced distinction between hosting code and shipping app binaries. So let’s dive in.</p>

<!-- more -->

<p>Software, ideally, is made up of more than just bugs; it has working code, too! Just like with (accidentally) shipping bugs, you need to be aware that the working code you ship is <em>also</em> going to be running indefinitely. That puts pressure on developers to make sure that the code in their apps will continue to function correctly, even as (for example) the web APIs that the apps rely on get updated over time.</p>

<h2 id="a-case-study">A Case Study</h2>

<p>Artsy’s iOS app relies on a services we call “<a href="https://github.com/artsy/echo">Echo</a>” to serve remote configuration. This lets Artsy do things like selectively disable features (for example, to make non-backwards-compatible API changes), provide changes to URL-routing (to match corresponding changes to web URLs), or even to <em>require</em> users on older versions of the app to update (which we have never had to do). Echo has helped Artsy meet its business goals and building this remote configuration for the app was a great idea.</p>

<p>However… Echo was built as a general-purpose remote-configuration-as-a-service, in anticipation of being used by other apps. That use never materialized. It had a web portal and a database and an API, all to only ever serve a single JSON response to the app. That’s fine, sometimes engineers build things that don’t end up getting used widely as we expected. Echo did one thing, and it did it really well. It ran on a Hobby Dyno on Heroku without incident for years.</p>

<p>If you think about what I’ve discussed so far in this post, you may realize that the app <em>depends</em> on Echo. If Echo changes in some non-backwards-compatible way, then the app could break. For example, if Echo happened to stop working entirely, then the app could stop working too.</p>

<p>The Echo service went without being deployed for several years. It worked, so why update it? The problem was that at some point, its major dependencies got yanked, so we could no longer build it locally or even deploy it at all. Yikes. I asked a web colleague for help and our conclusion was that it would take more effort to get Echo working with its existing code than it would be to rebuild the whole thing. Double yikes. And finally, Echo was running on the <a href="https://devcenter.heroku.com/articles/cedar-14-stack">Cedar-14 Heroku stack</a>, which was already at end-of-life and had stopped receiving security updates. Triple yikes.</p>

<p>(I have to note here that most of services at Artsy are deployed almost constantly – Echo was an odd one out. Echo never needed any updates, so it never needed to be deployed. However, we should have been keeping its dependencies up to date and deploying it regularly, which would have uncovered its problems sooner when they were still easily fixed. Anyway!)</p>

<p>So we have a service, Echo, that we can’t develop, and can’t deploy, and isn’t getting security updates from our cloud provider. And the app depends on it. Since Echo had always been a bit over-engineered for what it ended up being, I wondered what the minimal replacement could be. My plan was to replace the Echo server with an S3 bucket, an Artsy-controlled CNAME DNS record, and a small shell script that runs automatically on CI.</p>

<p>Seriously! <a href="https://github.com/artsy/echo/pull/39">It worked</a>! I made a proof-of-concept and then another engineer, <a href="https://github.com/pvinis">Pavlos</a>, finished building the new infrastructure. Changes to the app’s configuration are now done via GitHub pull requests (<a href="https://github.com/artsy/echo/pull/63">here is an example PR</a>), which we can track over time (unlike the old web interface).</p>

<p>I can’t stress enough how much worry I had had about Echo’s degrading status and the app’s dependency on it. But! Everything about the change to S3 went smoothly.</p>

<p>Okay, so new versions of app are now referring to the S3 bucket instead of the old Echo API. Great! But what about the older versions of the app that are still out there? They’re still hitting the Echo API as intended, right?</p>

<h2 id="the-problem">The Problem</h2>

<p>Echo’s API was still functioning, albeit on an EOL stack that we couldn’t make any changes to. Since we can’t rely on Heroku continuing to run the Echo API indefinitely, what could we do? Well, the easiest way to fix this would be to change Echo’s Artsy-controlled CNAME record to point from the old Cedar-14 Heroku app to a new server app, which could pretend to be the old API for the sake of older app versions.</p>

<p>This leads me to one of the most scary lines of code in the entire Artsy iOS codebase. See if you can spot the problem.</p>

<div class="language-objc highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">NSURL</span> <span class="o">*</span><span class="n">url</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSURL</span> <span class="nf">alloc</span><span class="p">]</span> <span class="nf">initWithString</span><span class="p">:</span><span class="s">@"https://echo-api-production.herokuapp.com/"</span><span class="p">];</span>
</code></pre></div></div>

<p>For whatever reason, we never created an Artsy-controlled CNAME DNS record for Echo. We were just hitting the bare Heroku URL directly. That means that there are <em>seven years’</em> worth of Artsy app versions out there that <em>need</em> to be able to continue hitting <em>that specific</em> Heroku URL.</p>

<p>😬</p>

<p>This is what I meant earlier about how you need to think about properly-working code differently when you develop software that runs on someone else’s hardware. If this was a server, this whole problem of old-code-hitting-outdated-APIs wouldn’t exist. But because we ship apps as binaries that get ran on someone <em>else’s</em> hardware, we need to be aware of this kind of issue.</p>

<p>That URL was fine when the code was written and it worked as intended for years. No one could have predicted, when it was added, that it would cause us headaches much later. Nor could we have anticipated that the Echo server’s codebase would end up in such a state.</p>

<h2 id="the-solution">The Solution</h2>

<p>This is the part of the blog post where I get to be a hero (at least in my head). The Heroku app running Echo was on Cedar-14 and while we couldn’t make any changes to its code, we <em>could</em> replace the code entirely. This would give us a new server running at the old URL. So I wrote up a small Express server to proxy HEAD and GET API requests from old iOS app versions to return the response body and headers that were expected. <a href="https://github.com/artsy/echo/pull/59#">The work is here</a> if you’re curious. The nice thing about Heroku, at least, is that if this had gone horribly wrong we still could have reverted back to the Cedar-14 app while we figured out our next steps.</p>

<p>We will still need to keep this Heroku app running, indefinitely, which isn’t ideal. Perhaps Artsy’s migration to Kubernetes will never be <em>quite</em> 100% complete, but that’s a small price to pay for keeping users of our app happy.</p>

<h2 id="conclusion">Conclusion</h2>

<p>It’s not just bugs that you need to be aware of <em>accidentally</em> shipping in your app binaries. You have to think about how the code that’s running <em>as intended today</em>, because it will continue to run for the foreseeable future. This means adding checks for non-200 response codes from APIs, being careful about third-party APIs, and thinking carefully about everything you ship. Apps are more than just their code; apps are everything that their code depends on, too.</p>

<p>This is a lesson that I’ve been teaching engineers for a long time, but it’s only with our recent Echo changes that I’ve come to understand, at a deeper level, what it means to take ownership of code. Yes, the bugs, and of course, the happy little accidents, but also the mundane interconnected dependencies that make software systems so complex. And, if I’m being honest, that make software systems so much fun to work on, too.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Knowledge Shares For Great Good]]></title>
    <link href="https://artsy.github.io/blog/2020/12/09/share-your-knowledge/"/>
    <updated>2020-12-09T00:00:00+00:00</updated>
    <id>https://artsy.github.io/blog/2020/12/09/share-your-knowledge</id>
    <content type="html"><![CDATA[<p>Sharing knowledge! What a concept! <a href="/blog/2020/09/29/becoming-mobile-first-at-artsy/">In my recent blog post</a>, I discussed “Knowledge Share” meetings (also known simply as “Knowledge Shares”, or abbreviated “KS”) and I want to dive deeper into them today. Last time, I described them as follows:</p>

<blockquote>
  <p>Knowledge Shares are a <u>structured</u> time to facilitate <u>unstructured learning</u>. Anyone can bring a topic to Knowledge Share, from a ticket that they’re stuck on to an idea they have to a neat trick they recently learned.</p>
</blockquote>

<p>These meetings were really instrumental in ramping up the Mobile Experience team, but their history goes back a bit further. Today, we’re going to discuss the origins of Knowledge Shares at Artsy, how they’ve evolved, the value they provide us as engineers, and how I’d recommend you adopt them on your team.</p>

<p>Let’s go!</p>

<!-- more -->

<p>To my recollection, the Auctions team was the first at Artsy to start doing “Knowledge Share” meetings. It was late 2016, I think. We were a small team of about five engineers, but were spread across many different front-end apps and back-end microservices. To make sure Artsy’s nascent auction business was a success, every engineer on the team had to have a working understanding of every one of our codebases. The team’s lead, Alan, suggested that devote an hour each week to sharing knowledge so no one person would become a silo.</p>

<p>The idea is simple enough: spend time working on something together. Kind of like pair programming, but with a slightly bigger group. Maybe there would be a ticket someone had that we would start together. Or maybe there had been a production incident that we wanted to investigate together. Maybe someone had an idea for a new technical approach to some problem and they wanted early feedback.</p>

<p>I think this forum worked well for us because our team was small and had a high level of interpersonal trust. Leading a five-person <a href="https://en.wikipedia.org/wiki/Mob_programming">mobbing session</a> could be really intimidating, and later I’ll discuss how I’ve since structured the Knowledge Shares that I lead to make everyone feel welcome contributing.</p>

<p>And they worked great! Other engineers learned about the iOS front-end code that I had written, and I learned about the back-end systems that powered that front-end. This was important for the team because our response time to production incidents was critical – one extra minute of looking up docs or finding a specific URL could make the difference between a happy user winning their lot, or an unhappy user taking their business elsewhere.</p>

<p>As time went on, other product teams started their own Knowledge Shares. They proliferated naturally throughout Artsy Engineering. When I started the Mobile Experience team in 2019, Knowledge Shares were one of the first recurring team meetings I scheduled. After a few months, I got really positive feedback about them. In fact, engineers wanted more of them. So I scheduled a second hour-long Knowledge Share each week.</p>

<p>Today, Knowledge Shares are for more than just engineers. They are for product managers, designers, data analysts, and other team stakeholders. Sometimes engineers from other teams even join my team’s Knowledge Shares, though scheduling becomes a hassle at a certain scale. We start each Knowledge Share with team-wide topics that apply to more than only engineers; we then move on to engineering-specific topics. This lets non-engineers still contribute while also letting them drop off so the engineers can dig into code.</p>

<p>Here are some examples of things that we have used Knowledge Shares for:</p>

<ul>
  <li>Sharing early designs for upcoming project work.</li>
  <li>Going over work-in-progress pull requests and soliciting feedback on the technical approach.</li>
  <li>Spiking on big-picture projects together, to help us plan what work needs to happen and in which order.</li>
  <li>Exploring anonymized user sessions to learn more about how our product actually gets used in the real world.</li>
  <li>Investigating small quality-of-life problems with our codebase’s developer experience and working on solutions.</li>
  <li>Brainstorming about how to address specific pieces of technical debt.</li>
</ul>

<p>Topics range from the technical to the product-focused, from what has already shipped to what is still on the drawing board. This breadth of focus helps everyone on the team feel like they can contribute. We keep a shared document of evergreen topic ideas and everyone is encouraged to add to it. As Tech Lead, I also send Slack reminders before each meeting to solicit for timely topics.</p>

<p>Throughout the normal course of our week, topics will naturally come up for discussion – topics that would normally need their own meeting to be scheduled. But instead, we can use the time we already have scheduled. For example: if an engineer has feedback on a new feature’s design, we don’t need to schedule a dedicated meeting for that conversation – we can use a Knowledge Share. It might feel like having recurring “Knowledge Share” meetings only adds more meetings to everyone’s already-busy calendars. But in our experience, these Knowledge Shares prevent us from scheduling <em>yet more</em> one-off meetings, so it balances out as a time-saver.</p>

<p>As a Tech Lead, I like to use Knowledge Shares as an opportunity to reinforce the shared understanding that <em>learning</em> is our paramount goal. That is to say, our goal isn’t to <em>build</em> some new feature, but is rather to <em>learn <strong>how</strong> to build</em> that new feature. That’s why I emphasize in our Knowledge Shares that <em>learning is contributing</em> (language which I added to our engineering onboarding docs). New team members might not have topics of their own, but they’re encouraged to contribute by learning and by asking questions.</p>

<p>When I described the origins of Knowledge Shares above, I said that they worked well on the early Auctions team because the team already had a high level of interpersonal trust. But looking back at those early days, I have to admit that I’m not sure which came first: the Knowledge Shares, or the trust? Having now bootstrapped two product teams at Artsy, I can tell you that Knowledge Shares are a key tool I use as Tech Lead to get teams working well together, quickly. The experience of being confused (together) and then gaining understanding (together) is great for building up <a href="https://ashfurrow.com/blog/building-better-software-by-building-better-teams/">the interpersonal trust that makes teams perform well</a>. I just can’t recommend Knowledge Shares enough!</p>

<p>Today, Knowledge Shares at Artsy provide a variety of benefits. Among others, those benefits are:</p>

<ul>
  <li>De-siloing information, to prevent any one engineer from becoming a single-point-of-failure for Artsy’s systems.</li>
  <li>Getting the team used to working together, used to communicating with one another, and used to providing and accepting feedback.</li>
  <li>Surfacing problems developers commonly run into during day-to-day work – and then fixing them permanently, together.</li>
  <li>Fostering a sense that everyone “owns” this meeting (and, by extension, everyone “owns” the team’s culture).</li>
</ul>

<p>Okay, so, let’s imagine I’ve sold you on the idea of Knowledge Shares. Great! So where do you start? How do you get your team on board?</p>

<p>If you are the team’s lead then adopting Knowledge Shares is quite easy: send your team this blog post, tell them you want to try Knowledge Shares, try them out, and discuss what everyone thinks in an upcoming retrospective. Whether you make the Knowledges Shares mandatory, or just encourage everyone’s participation, is up to you. They are mandatory for engineers on my team, but I accept the responsibility of making sure the meetings providing value to all engineers. I trust you to make these work well for however your team works.</p>

<p>What if you’re <em>not</em> the team lead? That’s okay, you have options. If you’re comfortable, I would recommend following the same steps as above. Send your team this blog post, express interest in trying out a weekly Knowledge Share, and schedule something. (By showing this kind of leadership initiative, it won’t be long before you find yourself leading your own team!) But if you want to avoid stepping on toes, you can also discuss this with your team’s lead privately. Every team is different and I trust you to navigate your own team best.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Becoming Mobile First]]></title>
    <link href="https://artsy.github.io/blog/2020/09/29/becoming-mobile-first-at-artsy/"/>
    <updated>2020-09-29T00:00:00+00:00</updated>
    <id>https://artsy.github.io/blog/2020/09/29/becoming-mobile-first-at-artsy</id>
    <content type="html"><![CDATA[<p>It was a Wednesday, mid-summer 2019. I don’t know which Wednesday specifically, but I know that it was <em>a</em>
Wednesday because I was attending Artsy’s weekly all-hands meeting. Two hundred colleagues were also there (many
dialing in remotely) and we were all listening to
<a href="https://files.artsy.net/documents/artsy-names-new-ceo.pdf">Artsy’s new CEO</a> talk about the company’s direction.
Mike Steib had only been around for a few months at that point, getting to know the business. He was talking about
the product direction, and I was listening intently.</p>

<p>With Artsy’s iOS app, I knew there were only really two directions we could go. As I listened, I reflected on how
we had gotten here.</p>

<!-- more -->

<p>When I joined Artsy in 2014, I joined the Mobile Team. It was an amazing team. While we were called the “mobile”
team, we only worked on Artsy’s iOS apps and not the mobile website.</p>

<p>By 2016, Artsy Engineering had grown to the size that having only a “mobile team” and a “web team” was no longer
working well. We dissolved both teams and distributed the engineers into
<a href="https://artsy.github.io/blog/2016/03/28/artsy-engineering-organization-stack/">new product teams</a>, focused on
vertical aspects of Artsy’s business. Auctions. Partner Success. Editorial. And so on. The idea was that each team
would have total autonomy over building products to support their slice of the business, and each would have the
engineering and design resources to build new features across both our web and iOS canvases.</p>

<p>That structure worked well, and continues to work well today (we have continued re-organizing ourselves into new
teams to better meet business goals). But once we dissolved the mobile team, there was no longer anyone looking at
our iOS software holistically. The app had become a series of silos – each silo was internally consistent, but
distinct from each other. Often each silo was written in distinct programming languages (we had also started
adopting React Native).</p>

<p>New iOS technologies had been created by Apple, but our teams weren’t taking full advantage of them. We would
update to support the latest versions of Xcode and iOS in the free time between other tickets. It wasn’t ideal. Of
the <a href="https://github.com/artsy/mobile">five original members of the Mobile Team</a>, everyone else had moved on except
me.</p>

<p>As a product, the app was languishing.</p>

<p>Yet despite this, it was also hugely popular among our users and very important to Artsy’s business. Art collectors
love our app! It gets a large percentage of our total sessions. Also, users place an outsized number of auction
bids and artwork inquiries using our app relative to the number of sessions on our website. In fact, the highest
value artwork transaction <em>ever</em> to take place on Artsy was made on an iPad, running software that I helped build.
I’m still pretty proud of that.</p>

<p>So, Wednesday all-hands. I stood there, not sure of what would happen next. I could see Artsy either making a
massive investment in the app, or I could see Artsy cutting its losses and focusing on the software that we already
knew how to build. Which direction we took largely depended on this new CEO, who was now standing in front of us
all and describing the direction Artsy’s product would take next.</p>

<h2 id="the-dream">The Dream</h2>

<p>Mike said something that caused a lot of raised eyebrows in the crowd. People were excited. <em>I</em> was excited.
Artsy’s product organization would shift to adopt a “mobile-first strategy.”</p>

<p>Someone asked “does this mean the app will reach feature parity with Artsy’s website?”</p>

<p>Mike responded: “No. It means that features are going to launch <em>first</em> on the app. If anything, it’s the <em>website</em>
that will be catching up <em>to the app</em>.”</p>

<p>I was kind of blown away! I mean, this had been the spirit of our original re-org in 2016, but that hadn’t really
materialized. The app had continued to trail the website. At most, only one product team was ever building new
features for the app (usually which ever team I happened to be on). Shifting to this mobile-first strategy would be
a <em>massive</em> undertaking, but I was keen.</p>

<p>In August, an email landed in my inbox from Artsy’s head of software. He wanted to spin up a new team to focus on
the app: the team would be responsible for supporting Artsy’s new mobile-first product strategy. He wanted to know
what I thought, and he wanted to know if I was interested in leading the team.</p>

<p>Honestly, it was a dream come true.</p>

<p><img src="/images/2020-09-29-becoming-mobile-first-at-artsy/rfc.png" alt="Screenshot of the RFC for creating the Mobile Experience team" /></p>

<p>Here we are, a year later. This is the story of how Artsy created its Mobile Experience team. How we recovered a
languishing iOS app. How engineers helped shift the product organization to a mobile-first product strategy. And
how Artsy grew from <em>sometimes</em> having <em>a</em> team working on the app, to usually having <em>every</em> team working on it.</p>

<p><img src="/images/2020-09-29-becoming-mobile-first-at-artsy/faq.png" alt="Another screenshot of the RFC for creating the Mobile Experience team, describing frequently asked questions" /></p>

<h2 id="getting-our-bearings">Getting Our Bearings</h2>

<p>When Artsy created its new Mobile Experience team, we were already resource-constrained and so the new team would
need to be nimble. We had three full-time engineers (myself as tech lead, and two others), assisted by a designer,
product manager, and data analyst, who would each be spending only half their work time on the Mobile Experience
team. We needed to be scrappy. I’m really proud of the work that that early team accomplished, and I look back
fondly on those first few months working with Sam, Joanna, David, Kieran, and Ani.</p>

<p>The first thing we did was define our own mandate. What was this team responsible for? What was it <em>not</em>
responsible for? “Mobile Experience” is pretty vague, and we had to answer a lot of upfront questions. Would we be
responsible for <em>all</em> of Artsy’s iOS software? No, just the main collector app. Would we be responsible for Artsy’s
mobile website? No, that’s too far-reaching. What about Android? Well, yes, eventually…</p>

<p>After we decided on our mandate, the next step was to get really familiar with the existing app. We storyboarded
out all the existing screens and their connections to one another.</p>

<p><img src="/images/2020-09-29-becoming-mobile-first-at-artsy/walkthrough.png" alt="Screenshot of all the screens in our app laid out to discuss" /></p>

<p><img src="/images/2020-09-29-becoming-mobile-first-at-artsy/brainstorm.png" alt="Screenshot of a brainstorm for app ideas" /></p>

<p>No one on our team had complete knowledge of every screen in the app, not even me, so exploring it together was a
great way to uncover what needed immediate attention. One example was our partner page, which displayed information
to our users about Artsy’s partners: galleries, museums, auction houses, etc. We learned that the app actually used
an ancient web view, and it didn’t even show the partner’s <em>artworks</em>. The artworks! Probably the most important
thing for it to do!</p>

<p><img src="/images/2020-09-29-becoming-mobile-first-at-artsy/old_partner.png" alt="Screenshot of a presentation showing the old partner page" /></p>

<p><img src="/images/2020-09-29-becoming-mobile-first-at-artsy/new_partner.png" alt="Screenshot of a presentation showing the new partner page, which looks much nicer" /></p>

<p>This is where “being scrappy” started to take root. Usually when developing new features, Artsy designers iterate
on a design before we plan on execution, then we implement, test, and deploy. The nice part of replacing something
that was <em>obviously broken</em> was that we didn’t feel beholden to this usual process; whatever we built would be
better than what we had. One engineer and our designer started the new partner page with a quick pencil sketch,
using the app’s existing UI abstractions to design something that we could quickly build. Once we had a prototype,
the engineer and designer iterated. The whole project took only about three weeks.</p>

<h2 id="early-wins">Early Wins</h2>

<p>Learning about the app itself was critical, but equally important was learning about how our users <em>used</em> the app.
We scheduled user interviews and, in the mean time, looked into our anonymized user analytics. Our data analyst
found a few representative sessions and we walked through each action that a user took. One big lesson here was how
much our app users relied on the app’s search feature, which was still written in Objective-C and hadn’t been
updated in a long time. We found that users would often search for the same query several times in the same
session. For example, users would search for “banksy”, wander off exploring some art, and then return to search for
“bansky” again. And again. And again.</p>

<p>Our search implementation didn’t show users their own recent searches, which would have greatly reduced the amount
of friction users experienced while exploring the art world in the app. Our other engineer took point working with
our designer to migrate the app’s search to React Native. We also added some other features to our search page,
like adding entity subtitles so users would know if the result they were tapping on was an artwork, and artist, a
gallery, and so on. The whole project took about a month to complete, and we have continued to iterate on the app’s
search.</p>

<p><img src="/images/2020-09-29-becoming-mobile-first-at-artsy/new_search.png" alt="Screenshot of a presentation showing the new search" /></p>

<p>In early conversations with company leadership, the Mobile Experience team settled on an… interesting strategy to
what we would prioritize. Our mission was “to make the app not suck.” This might seem harsh! But it came from a
place of caring. We knew how much better the app could be and we were motivated to make that a reality. In the
spring of 2020, the team felt like we had reached a point where the app no longer “sucked” – our goal now was “to
make the app amazing.”</p>

<p>During 2020, we made a lot of changes to the app. We had built a new home page, a profile tab for users, granular
push notification settings, Sign In with Apple, and more.</p>

<p><img src="/images/2020-09-29-becoming-mobile-first-at-artsy/new_home.png" alt="Screenshot of a presentation showing the new home page" /></p>

<p>It was really exciting to show off our progress to the rest of the company at our monthly Demo Day, especially in
those early months. The product team makes up only a quarter of our company and it was really cool to hear gallery
liaisons complementing our new partner page, or sales people complementing our refreshed home feed. I think that
people had gotten so used to the app not moving much at all that this sudden high velocity of development was as
exciting for them as it was for us.</p>

<h2 id="setting-up-others-to-succeed">Setting Up Others To Succeed</h2>

<p>Artsy’s goal for the Mobile Experience team was explicitly <em>not</em> to centralize all our iOS feature development, and
so our mandate included much more that just working on iOS software ourselves. We wanted to sit between a typical
product team and a “platform” team, to provide infrastructure and assistance so any team at Artsy could develop
their own iOS feature. This was a big challenge, and required work at the individual and team levels.</p>

<p>The first step was apparent before we even created the Mobile Experience team. Artsy Engineering runs skills
surveys every six months, and we knew that building iOS software in React Native was something Artsy engineers
weren’t really familiar with, but that they really wanted to learn more about. I worked with the Engineering team’s
Peer Learning Working Group to design a curriculum – big shout out to Christina and Adam for their help here!</p>

<p><a href="https://artsy.github.io/blog/2019/12/03/ios-learning-group/">The iOS Learning Group took four weeks to deliver four lessons</a>.
The learners were mostly web engineers, so I emphasized the familiar parts of writing React Native software. I also
provided weekly office hours for learners to get assistance with homework. I even stretched my wings as an
educator, developing new skills around curriculum design and delivery. After the course, learners responded
positively to the experience and we have integrated lessons learned from the iOS Learning Group into subsequent
peer learning groups.</p>

<h2 id="aligning-product-releases">Aligning Product Releases</h2>

<p>Now that engineers had a solid grasp of how to build software in our application, we could re-align our product
development process around iOS. I can’t speak to the design side of this, but from a product perspective the most
critical milestone was defining a regular 2-week app release cadence. Let me explain.</p>

<p>Prior to the Mobile Experience team, we released the app pretty irregularly. We would release whenever we had
something big to release, basically. There are two major flaws with that approach. The first problem is that since
each release was bigger, each release was scarier. No one really felt confident releasing app updates. The second
problem was that large pieces of work tended to get coupled together. This came to a head last summer when we were
blocked from releasing an redesigned artwork view because we were waiting for a major overhaul to Artsy’s GraphQL
API to be completed. Without guidance or structure, different teams were building big projects and both had their
changes in our default branch – it was a bit chaotic.</p>

<p>These two problems are incidental to how we worked at Artsy but there is another, inherent problem to developing
mobile apps:
<a href="https://artsy.github.io/blog/2020/03/02/ios-deploys-super-weird-totally-normal/">deploying iOS software is weird</a>.
Engineers, designers, and product managers at Artsy are used to being able to quickly and cheaply deploy software
to the <em>web</em>, not the App Store. iOS software is deployed to our user’s hardware, not to servers we control, which
introduces the possibility that users might not upgrade. Software we shipped years ago is still being run today –
we have the analytics to prove it. Not to mention that every app update has to go through Apple’s App Store review
process. Getting our product team aligned on a release schedule might also help us get aligned on the weirdness of
deploying iOS software.</p>

<center>
<blockquote class="twitter-tweet"><p lang="en" dir="ltr">iOS developers! I have a question for you. I hear a lot about teams releasing app updates on a 2-week cadence, to increase user confidence/App Store ranking/team morale/etc.<br /><br />Have any teams shared their experiences with this? Bonus points for any quantitative data. Thanks!! 🤗</p>&mdash; Ash Furrow (@ashfurrow) <a href="https://twitter.com/ashfurrow/status/1184845989510811649?ref_src=twsrc%5Etfw">October 17, 2019</a></blockquote> <script async="" src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</center>
<p><br /></p>

<p>As the Mobile Experience team formed, I reached out to other mobile teams to find out about how they structured
regular releases. <a href="https://twitter.com/Cform">Matt Greenwell</a> from BuzzFeed was really helpful in particular,
outlining their experience of the pros and cons of a regular release cadence. We implemented a two-week release
cadence so that all product teams could align their own feature development and testing around this predictable
structure. We also created documentation for teams to hide their in-progress work behind feature flags. And
finally, we refined our app QA process; teams would QA their own features and bug fixes while the Mobile Experience
team would used a QA script to test the app <em>generally</em>, every other Monday, before submitting an update to the App
Store.</p>

<p><img src="/images/2020-09-29-becoming-mobile-first-at-artsy/cadence.png" alt="Calendar describing our cadence on an example sprint" /></p>

<h2 id="making-deploys-not-scary">Making Deploys Not Scary</h2>

<p>To further help teams get into the habit of developing and releasing iOS software often, we created nightly betas.
We also adopted a clever idea from our web colleagues: deploy blocks. In case of a technical reason to not release
a beta, we create a block and the CI job that deploys the beta would fail with a descriptive message. This reduced
a lot of chatter in Slack where engineers would ask “could I make a new beta?” Instead, engineers usually just wait
for the nightly beta. And if they get impatient, they now default to action (their beta deploy will fail if we set
up a block).</p>

<p>All of this was automated through <a href="https://fastlane.tools">fastlane</a> on our CI provider. We had been using fastlane
for a long time at Artsy, but the Mobile Experience team took the time to share knowledge of how it worked. Any
engineer at Artsy can now make a beta (<code class="language-plaintext highlighter-rouge">make deploy</code>) or promote the latest beta to an App Store submission
(<code class="language-plaintext highlighter-rouge">make promote_beta_to_submission</code>).</p>

<p>We deploy more often and, consequently, each deploy is less scary. And everyone is aware of the need to hide
in-progress work behind feature flags. At this point, updates to our app are mundane, predictable, and boring. Just
the way we like them.</p>

<h2 id="being-generous-with-our-time">Being Generous With Our Time</h2>

<p>Our QA and deploy process touches on something I want to go into more detail about, which is how the Mobile
Experience team helped support other product teams. I described earlier how Mobile Experience sits somewhere
between a normal product team and a platform team, and we leveraged that to our advantage. It would have been easy
to become primarily a supportive team, and leave feature development up to others. However, that would leave us
unaware of how day-to-day development <em>feels</em> in the app. We own the platform, and that includes the developer
experience. By sitting in this ambiguous in-between state, we stayed aware of both the needs of everyday
developers, and the needs of our platform.</p>

<p>I would encourage engineers from other teams to ask us for help, which led to a lot of pairing sessions. To be
honest, I think it probably interfered with our productivity, but it was worth it. A half hour of my time spent
pairing with a colleague might save them three hours of banging their head against Xcode. But it’s not the time
saved that I care about, it’s the head-banging. I want engineers at Artsy to feel empowered to build their own iOS
software, and that’s only going to happen if they feel comfortable and supported.</p>

<p>When the Galleries team kicked off their ambitious Viewing Rooms project, we helped them get started by lending an
engineer to them for a few sprints. When they ran into problems, we were generous with our time by pairing with
them. When they were nearing completion, we helped them test the new feature. This all culminated in a smooth
release.</p>

<p><img src="/images/2020-09-29-becoming-mobile-first-at-artsy/new_loader.png" alt="Screenshot of a presentation showing the new home page's new loading indicator" /></p>

<p>Speaking of Developer Experience, we took a keen interest in standardizing our best practices and modernizing the
codebase. We
<a href="https://github.com/artsy/eigen/blob/dc81bbc9cd33d51d10054a6c57e61a1bd0ee3e75/docs/preferred_practices.md">documented how we wanted the app’s codebase to look</a>
and set up
<a href="https://github.com/artsy/eigen/blob/dc81bbc9cd33d51d10054a6c57e61a1bd0ee3e75/tslint-rules/useWrappedComponentsRule.js">processes like lint rules</a>
to encourage developers to follow our best practices. We also invited any engineer at Artsy to join our
twice-weekly Knowledge Share meetings (I’ll discuss these in-depth shortly). We looked for bottle necks in the
development process and found many problems, which we addressed.
<a href="https://github.com/artsy/eigen/pull/3022">We combined the Native iOS and React Native repositories</a> (which had
historically been separated). <a href="https://github.com/artsy/eigen/pull/3105">We overhauled the CI configuration</a> to
leverage heavy caching – average build times dropped from fifteen minutes to less than five.
<a href="https://github.com/artsy/eigen/pull/3210">And we adopted stricter TypeScript compiler settings</a> so that engineers
would be forced to deal with nullability and other causes of bugs. (Hey, sometimes you need a carrot and sometimes
you need a stick.)</p>

<p>The React Native community has grown a lot since 2016. If Artsy were to begin our adoption of React Native today,
we would be really well-supported by a community that has defined best practices, documented standard approaches to
problems, and a consolidated opinion on what a React Native codebase should “feel” like. None of that existed in
2016, and our early architectural decisions don’t really reflect contemporary best practices. We continue working
to bring our codebase closer to resembling a fresh project created with <code class="language-plaintext highlighter-rouge">react-native init</code>.</p>

<p>I’m extraordinarily happy with how things have shaped up, and in the direction we continue to move. This is all an
ongoing process, and should remain an ongoing process. For example, engineers were still facing a bottleneck with
core parts of our app’s routing logic that were in Objective-C, so we recently
<a href="https://github.com/artsy/eigen/pull/3771">moved all routing to TypeScript</a>. Not only does moving code out of
Objective-C make it easier for everyone to build, but it also ladders up to a cross-platform Artsy app.</p>

<p>We still have older practices in the app that we want to migrate away from, like testing with Enzyme. But overall,
things are looking good!</p>

<iframe width="100%" height="400" src="https://www.youtube.com/embed/IEn2_WSKFHw" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe>

<h2 id="knowledge-shares">Knowledge Shares</h2>

<p>We achieved most of these big, infrastructural changes in meetings called <em>Knowledge Shares</em>, which I mentioned
earlier. I should write a dedicated blog post on these (update: <a href="/blog/2020/12/09/share-your-knowledge/">I did write one</a>), but in short: Knowledge Shares are a <em>structured</em> time to
facilitate <em>unstructured learning</em>. Anyone can bring a topic to Knowledge Share, from a ticket that they’re stuck
on to an idea they have to a neat trick they recently learned. We set aside these two hours a week to discuss
whatever the team wants, and we don’t only invite engineers.</p>

<p>New feature designs, product roadmaps, and data analyses are often brought up by our non-engineering colleagues; we
discuss these at the beginning of the meetings to make sure everyone’s time is respected. Throughout the week,
someone will raise a question in Slack. Before we had Knowledge Share meetings, we might schedule a dedicated
half-hour meeting to discussing this question. But instead, we now say “alright let’s chat about this at tomorrow’s
KS.” Usually the discussion lasts a lot less than a half hour, so we save time and needless context-switching.</p>

<p>Knowledge Shares are also a manifestation of my philosophy of tech leadership, which is this: none of us have built
an Artsy before, so instead of optimizing for building an Artsy, let’s optimize for <em>learning</em> how to build an
Artsy. The best Artsy we can build. And as a natural byproduct, an Artsy gets built. But it’s the <em>learning</em> that
is treated as the paramount goal.</p>

<p>Like I said, I owe you a whole blog post on Knowledge Share meetings. I hope I have conveyed how important these
scheduled “structured unstructured learning” times have been for us.</p>

<h2 id="the-results">The Results</h2>

<p>So where does that leave us? It’s been a year and change, where are we now? Well I’m happy to say that we’ve made a
huge impact. We’ve gone from only having (at most) one product team writing iOS software at a time to having nearly
<em>every</em> product team building iOS software. Artsy is through the woods of its transition to a mobile-first product
strategy. We still have a ways to go, but it feels like we have finally realized the dream we had in 2016 where
every team is fully equipped and empowered to deliver on their own business goals, across all of Artsy’s canvasses.</p>

<p>Our App Store ranking has shot through the roof – not surprising considering our “make it not suck” and then “make
it amazing” approach. Artsy’s iOS app rating now sits at a stout 4.7.</p>

<p><img src="/images/2020-09-29-becoming-mobile-first-at-artsy/ratings.png" alt="Screenshot of a graph showing an increasing average App Store rating" /></p>

<p>We’ve also started tracking our iOS developer experience within Artsy. We know exactly where we still need work
because we ask our engineers where they need support.</p>

<p>It’s taken a mammoth effort, and there’s so much more that I could talk about, but this blog post is long enough
already! Looking at the work we’ve done, the ways we’ve done it, and the results of our effort… I feel ecstatic.</p>

<h2 id="next-steps">Next Steps</h2>

<p>All that said, Artsy’s product team is currently embarking on another reorganization. With so much technical and
product debt paid off, Artsy has evolved past the need for a dedicated Mobile Experience team. It’s bittersweet,
but I’m proud to say that the new Collector Experience team is about to be born. Our team will continue to own the
mobile platform, including its holistic user experience and day-to-day developer experience, but we’ll have an
expanded mandate. That mandate includes a cross-platform Artsy app that will work for collectors on Android as well
as iOS.</p>

<p>The Mobile Experience team has grown, too. Since we started last year with just a few engineers and limited product
support, we now boast a full roster of engineers and product support. I want to thank everyone on the team,
currently: David, Sam, Brian, Mike, Brittney, Pavlos, and Mounir. You have made the past year an incredibly
rewarding experience for me as I learn the ropes of technical leadership. I’m so proud of what we’ve built together
and I’m excited for what the new Collector Experience team is going to do next!</p>
]]></content>
  </entry>
  
</feed>
