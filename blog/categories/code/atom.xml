<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: code | Artsy Engineering]]></title>
  <link href="https://artsy.github.io/blog/categories/code/atom.xml" rel="self"/>
  <link href="https://artsy.github.io/"/>
  <updated>2024-10-30T17:23:09+00:00</updated>
  <id>https://artsy.github.io/</id>
  <author>
    <name><![CDATA[]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Learn Swift at Artsy, Beginners Lesson Three]]></title>
    <link href="https://artsy.github.io/blog/2016/08/30/swift-at-artsy-beginners-lesson-three/"/>
    <updated>2016-08-30T09:00:00+00:00</updated>
    <id>https://artsy.github.io/blog/2016/08/30/swift-at-artsy-beginners-lesson-three</id>
    <content type="html"><![CDATA[<p>And we’re back! With lesson three of the beginners’ Swift-at-Artsy course. To recap, Orta and I <a href="http://artsy.github.io/blog/2016/01/26/swift-at-artsy/">led a course at Artsy</a> to teach our colleagues Swift <em>last</em> August, and we’re doing it again. I’m leading the stream for people who’ve never programmed before.</p>

<p>Yesterday was lesson three and I have a <a href="https://youtu.be/e2ErzD8ibG8">screen recording</a> of my walkthrough of <a href="https://github.com/artsy/Swift-at-Artsy/tree/master/Beginners/Lesson%20Three">the material</a>.</p>

<!-- more -->

<iframe width="100%" height="400" src="https://www.youtube.com/embed/e2ErzD8ibG8" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learn Swift at Artsy, Beginners Lesson Two]]></title>
    <link href="https://artsy.github.io/blog/2016/08/23/swift-at-artsy-beginners-lesson-two/"/>
    <updated>2016-08-23T09:00:00+00:00</updated>
    <id>https://artsy.github.io/blog/2016/08/23/swift-at-artsy-beginners-lesson-two</id>
    <content type="html"><![CDATA[<p>And we’re back! With lesson two of the beginners’ Swift-at-Artsy course. To recap, Orta and I <a href="http://artsy.github.io/blog/2016/01/26/swift-at-artsy/">led a course at Artsy</a> to teach our colleagues Swift <em>last</em> August, and we’re doing it again. I’m leading the stream for people who’ve never programmed before.</p>

<p>Yesterday was lesson two and I have a <a href="https://youtu.be/EBtzqx1YRBg">screen recording</a> of my walkthrough of <a href="https://github.com/artsy/Swift-at-Artsy/tree/master/Beginners/Lesson%20Two">the material</a>.</p>

<!-- more -->

<iframe width="100%" height="400" src="https://www.youtube.com/embed/EBtzqx1YRBg" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learn Swift at Artsy, Beginners Lesson One]]></title>
    <link href="https://artsy.github.io/blog/2016/08/15/swift-at-artsy-beginners-lesson-one/"/>
    <updated>2016-08-15T21:18:00+00:00</updated>
    <id>https://artsy.github.io/blog/2016/08/15/swift-at-artsy-beginners-lesson-one</id>
    <content type="html"><![CDATA[<p>Last August, Orta and I <a href="http://artsy.github.io/blog/2016/01/26/swift-at-artsy/">led a course at Artsy</a> to teach our colleagues Swift. There were two parallel groups of learners: a “beginners” group who had never coded before, and an “informed” group who already knew how to code. This year, we’re leading the course again with a slight twist: we’re repeating the course for absolute beginners, and we’re introduce a new course for anyone who completed last year’s beginner course.</p>

<p>We’re really excited both to help new colleagues take their first steps into programming, and to help returning colleagues continue their journey.</p>

<p>Today was lesson one of the beginner group, and I have a <a href="https://youtu.be/OLdSg0XpFqA">screen recording</a> of my walkthrough of <a href="https://github.com/artsy/Swift-at-Artsy/tree/master/Beginners/Lesson%20One">lesson one’s material</a>.</p>

<!-- more -->

<iframe width="100%" height="400" src="https://www.youtube.com/embed/OLdSg0XpFqA" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Being a Good OSS Citizen]]></title>
    <link href="https://artsy.github.io/blog/2016/01/28/being-a-good-open-source-citizen/"/>
    <updated>2016-01-28T00:00:00+00:00</updated>
    <id>https://artsy.github.io/blog/2016/01/28/being-a-good-open-source-citizen</id>
    <content type="html"><![CDATA[<p>Let’s take a look at the day in the life of an open source citizen: me. On our app, I was given <a href="https://github.com/artsy/eigen/issues/971">an issue</a> that would allow users to refine what kinds of sale artworks they were looking at, and it included this <em>awesome</em> slider control so they could set min/max price ranges.</p>

<!-- more -->

<p>&lt;/div&gt;&lt;/div&gt;<a href="/images/2016-01-28-being-a-good-open-source-citizen/design.png"><img src="/images/2016-01-28-being-a-good-open-source-citizen/design.png" /></a>&lt;div class='meta-container'&gt;&lt;header&gt; &lt;/header&gt;&lt;/div&gt;&lt;div class='date-container'&gt; &lt;/div&gt;&lt;div class='content-container'&gt;&lt;div class='entry-content'&gt;</p>

<p>Nice.</p>

<p>But iOS doesn’t have a slider like that built into UIKit, so I headed to <a href="https://cocoapods.org">CocoaPods.org</a> to find something that would work for me. Searching for “range slider” yielded a bunch of results, and I looked through three or four of them.</p>

<p>I picked <a href="https://cocoapods.org/pods/MARKRangeSlider">this one</a> because it did <em>almost exactly</em> what I needed, provided a reasonable level of customization, and had a history of development leading up to a recent v1.0.</p>

<p>But I said it did “almost exactly” what I needed, which meant I’d have to modify it. At this point, many developers either look for a different library or abandon the idea of using an existing library altogether and invent one themselves. That’s a shame, because it’s almost always faster and easier to improve an existing library than it is to build your own.</p>

<p>So let’s step through what I did to modify this library for my needs. First, I checked to see if there was an issue for my feature already opened on the repository; maybe someone else had tried this, and I could benefit from their experience! That wasn’t the case, so I forked the library to my personal account and cloned my fork locally. Now I can modify the library’s code and commit it to my fork.</p>

<p>Next I add the library to my <code class="language-plaintext highlighter-rouge">Podfile</code>, but I’m clever about it.</p>

<div class="language-rb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">pod</span> <span class="s1">'MARKRangeSlider'</span><span class="p">,</span> <span class="ss">:path</span> <span class="o">=&gt;</span> <span class="s1">'../MARKRangeSlider'</span>
</code></pre></div></div>

<p>This tells CocoaPods that I’m <em>working</em> on the pod, and, it is stored in a local directory (the one where I cloned my fork). This makes it a “development pod”, so that the files in Xcode are actually the ones I’ve cloned locally.</p>

<p>This is a really important, but subtle point. Normally, CocoaPods downloads copies of the files and stores those copies, but in this case, it refers to the existing files. It doesn’t copy them at all: any changes I make to the library while working on my app are to the files I cloned. That means they can be easily committed and pushed up to my fork.</p>

<p>That’s exactly what I did. I made my changes from within the app until I was satisfied, and <a href="https://github.com/ashfurrow/MARKRangeSlider/commit/aefbeb181b62c8c257a7d0ada1e75834489b1909">pushed them to my fork</a>, then pointed the <code class="language-plaintext highlighter-rouge">Podfile</code> to my fork of the pod.</p>

<div class="language-rb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">pod</span> <span class="s1">'MARKRangeSlider'</span><span class="p">,</span> <span class="ss">:git</span> <span class="o">=&gt;</span> <span class="s1">'https://github.com/ashfurrow/MARKRangeSlider.git'</span>
</code></pre></div></div>

<p>Nice. At this point, I continued on as a developer, running a <code class="language-plaintext highlighter-rouge">pod install</code> to download the forked library with my commits as usual. I finished building the feature and <a href="https://github.com/artsy/eigen/pull/1075">PR’d it using my fork</a>.</p>

<p><img src="/images/2016-01-28-being-a-good-open-source-citizen/done.gif" alt="" /></p>

<p>I could’ve stopped here, but that’d be a shame. Someone else might want the same changes I made, and I should submit them back. I <a href="https://github.com/vadymmarkov/MARKRangeSlider/pull/22">opened a PR</a> on the library to contribute my changes back, and I made sure to explain <em>why</em> my changes were necessary. Because our app is open source, I was even able to link to <em>our</em> PR to show the library author how their work was being used.</p>

<p>The next morning, I woke up to find my PR had been merged, and after the author pushed an updated version of the library (including my changes), I updated our app’s <code class="language-plaintext highlighter-rouge">Podfile</code> once more.</p>

<div class="language-rb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">pod</span> <span class="s1">'MARKRangeSlider'</span>
</code></pre></div></div>

<p>Then ran <code class="language-plaintext highlighter-rouge">pod update MARKRangeSlider</code> so it would update <em>just</em> that pod, and point it to the new release. I re-ran the unit tests to make sure I hadn’t broken anything, and <a href="https://github.com/artsy/eigen/pull/1077">PR’d the change</a>.</p>

<p>This sounds like a lot, and having written it all out, I guess it is. But it’s a series of small steps, not big ones, and I’ve worked like this long enough that it’s second-nature to me now.</p>

<hr />

<p>I believe that using existing open source libraries is almost always better than writing your own, and I believe that improvements made to open source ought to be shared. Those beliefs shape my behaviour as a developer, and as a person.</p>

<p>Making your first contribution to a project may seem scary, but we all <a href="https://github.com/B-Sides/ELCSlider/pull/1">start somewhere</a>. It gets easier, and in time, you will become a paragon of open source citizenry.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Teaching Swift at Artsy]]></title>
    <link href="https://artsy.github.io/blog/2016/01/26/swift-at-artsy/"/>
    <updated>2016-01-26T00:00:00+00:00</updated>
    <id>https://artsy.github.io/blog/2016/01/26/swift-at-artsy</id>
    <content type="html"><![CDATA[<p>While the Artsy engineering team includes many disciplines, tech stacks, and personalities, we all share a few things in common: a respect for each other, an appreciation of art-meets-science, and a celebration of learning. These are actually traits shared with our entire company, even non-engineers. So last Summer when Orta and I had some down time, it occurred to us how we could do something super-productive that was congruent with our values: we could teach the company Swift.</p>

<!-- more -->

<p>Like most project ideas, the first step was to create a <a href="https://github.com/orta/Swift-at-Artsy">GitHub repo</a>. We made it open source because <a href="http://code.dblock.org/2015/02/09/becoming-open-source-by-default.html">why not</a>. Orta and I chatted and realized that to teach the company Swift, we would need two tracks:</p>

<ul>
  <li>A track for newcomers who may have never programmed before.</li>
  <li>A track for anyone who could explain what “object-oriented programming” meant.</li>
</ul>

<p>It was really important to us to include beginners who had no exposure to programming – the digital marketing and genoming teams specifically were keen to learn how to program.</p>

<p>I’m a big believer in using “newcomer” and “informed” to describe the two groups of developers – it helps prevent newcomers from feeling inadequate and better describes the expectations for students.</p>

<p>We also focused on Swift-only, no iOS. That allowed us to focus on the language – which was fun because it let us focus on us learning new stuff, too – and we kept the course to five one-hour sessions (per track).</p>

<p>Next step was obviously to create a Slack chatroom. We re-purposed the oft-neglected room dedicated to Taylor Swift and turned it into a place where anyone could ask questions and share resources. It’s also a helpful place to @channel everyone to remind them about the classes.</p>

<p>&lt;/div&gt;&lt;/div&gt;<a href="/images/2016-01-26-swift-at-artsy/chatroom.png"><img src="/images/2016-01-26-swift-at-artsy/chatroom.png" /></a>&lt;div class='meta-container'&gt;&lt;header&gt; &lt;/header&gt;&lt;/div&gt;&lt;div class='date-container'&gt; &lt;/div&gt;&lt;div class='content-container'&gt;&lt;div class='entry-content'&gt;</p>

<p>Orta taught the beginner course and I TA’d it, answering questions as he instructed and offering suggestions when I felt something should be clarified (kind of like pair-programming except for teaching). We switched roles for the informed class. Preparing course materials was done through GitHub pull requests, which integrated well into our existing workflow on the mobile team.</p>

<p>We ran into some troubles in the first classes of both tracks: Swift 2 was in beta, and getting everyone on the correct versions of Xcode proved… difficult. Keeping them up-to-date as Xcode betas continued to be released over five weeks was also challenging. This was a problem in both tracks, but some problems were track-specific.</p>

<p>Explaining fundamental concepts like variables and for-loops to beginners is challenging. It reminded me of when I TA’d intro-to-Java courses in University (while the code then was obviously much uglier, <code class="language-plaintext highlighter-rouge">javac</code> is arguably more user-friendly than Xcode). Having the pair-programming approach worked well to help explain these concepts.</p>

<p>The biggest challenge with the informed class was rounding everyone up to actually attend the classes. Engineers are addicted to being busy, and like most side-projects, everyone was initially very excited about the course, but that interest dropped off quickly. Orta would help by physically going to our colleagues’ desks and gently reminding them.</p>

<p>Regardless of the challenges, the course had a significant impact, both within Artsy and in the larger Swift community. Some of the course materials have been <a href="https://github.com/orta/Swift-at-Artsy/blob/master/Beginners/Lesson%20One/README_ZH.md">translated into Chinese</a> and we regularly received suggestions (and occasionally corrections) about our content. Newcomers to programming gained insights into <em>what exactly engineers do</em> and why bugs happen, while informed colleagues saw parallels between Swift and their own favourite languages (most often Scala). The course materials have also helped other mobile team members (who usually write only Objective-C) get started with Swift.</p>

<p>The beginner students really appreciated <a href="https://github.com/orta/Swift-at-Artsy/tree/master/Beginners/Lesson%20Three">lesson three</a> because we used real-world (scaled down) data structures that Artsy actually uses. We presented problems to solve – problems our colleagues were familiar with from their day-to-day work – and we showed how they can be solved with programming. <a href="https://github.com/orta/Swift-at-Artsy/tree/master/Beginners/Lesson%20Four">Lesson four </a> was the most well-received lesson as it featured some concrete “making the computer do cool stuff” material.</p>

<p>Finally, there was just a great sense of accomplishment. Orta and I had taken time during a downtime in engineering work and turned it into something that helped the company and helped the community. We got thanked internally and externally, and that felt great; helping others has a lot of tangible benefits, but feeling good about it is one of my favourites.</p>

]]></content>
  </entry>
  
</feed>
