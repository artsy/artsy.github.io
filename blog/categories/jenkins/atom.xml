<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Jenkins | Artsy Engineering]]></title>
  <link href="https://artsy.github.io/blog/categories/jenkins/atom.xml" rel="self"/>
  <link href="https://artsy.github.io/"/>
  <updated>2024-08-06T19:48:16+00:00</updated>
  <id>https://artsy.github.io/</id>
  <author>
    <name><![CDATA[]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[On-Demand Jenkins Agents with Amazon EC2]]></title>
    <link href="https://artsy.github.io/blog/2012/07/10/on-demand-jenkins-agents-with-amazon-ec2/"/>
    <updated>2012-07-10T13:30:00+00:00</updated>
    <id>https://artsy.github.io/blog/2012/07/10/on-demand-jenkins-agents-with-amazon-ec2</id>
    <content type="html"><![CDATA[<p>The <a href="http://artsy.net">Artsy</a> team faithfully uses <a href="http://jenkins-ci.org">Jenkins</a> for continuous integration.
<a href="http://artsy.github.com/blog/2012/05/27/using-jenkins-for-ruby-and-ruby-on-rails-teams/">As we’ve described before</a>,
our Jenkins controller and 8 agents run on Linode. This arrangement has at least a few drawbacks:</p>

<ul>
  <li>Our Linode servers are manually configured. They require frequent maintenance, and inconsistencies lead to
surprising build failures.</li>
  <li>The fixed set of agents don’t match the pattern of our build jobs: jobs get backed up during the day, but servers
are mostly unused overnight and on weekends.</li>
</ul>

<p>The <a href="https://wiki.jenkins-ci.org/display/JENKINS/Amazon+EC2+Plugin">Amazon EC2 Plugin</a> allowed us to replace those
agents with a totally scripted environment. Now, agents are spun up in the cloud whenever build jobs need them.</p>

<!-- more -->

<p>To set up the build agent’s Amazon Machine Image (AMI), we started from an
<a href="http://cloud-images.ubuntu.com/releases/oneiric/release/">official Ubuntu 11.10</a> (Oneiric Ocelot) AMI, ran
initialization scripts to set up our build dependencies (MongoDB, Redis, ImageMagick, Firefox, RVM, NVM, etc.),
packaged our modified instance into its own AMI, and then set up the EC2 Plugin to launch instances from this
custom AMI.</p>

<p>Our AMI setup steps are captured entirely in a <a href="https://gist.github.com/3085368">GitHub gist</a>, but because our
build requirements are specific to our applications and frameworks, most organizations will need to modify these
scripts to their own use cases. Given that caveat, here’s how we went from base Ubuntu AMI to custom build agent
AMI:</p>

<ol>
  <li>We <a href="https://console.aws.amazon.com/ec2/home?region=us-east-1#launchAmi=ami-4dad7424">launched</a> an Ubuntu 11.10
AMI <code class="language-plaintext highlighter-rouge">4dad7424</code> via the AWS console.</li>
  <li>Once the instance was launched, we logged in with the SSH key we generated during setup.</li>
  <li>
    <p>We ran the following commands to configure the instance:</p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>curl -L https://raw.github.com/gist/3085368/_base-setup.sh | sudo bash -s
sudo su -l jenkins
curl -L https://raw.github.com/gist/3085368/_jenkins-user-setup.sh | bash -s
</code></pre></div>    </div>
  </li>
  <li>From the “Instances” tab of the AWS Console, we chose the now-configured instance, and from the “Instance
Actions” dropdown, selected “Stop”, followed by “Create Image (EBS AMI)”.</li>
</ol>

<p>Next we installed the Amazon EC2 Plugin on our Jenkins controller, and entered the following configuration
arguments for the plugin. (Replace the AMI ID with your own, the result of Step 4 above.)</p>

<p><img src="/images/2012-07-10-on-demand-jenkins-agents-with-amazon-ec2/ec2-plugin-config.png" alt="Jenkins EC2 Plugin
configuration" /></p>

<p>New build agents began spawning immediately in response to job demand! Our new “Computers” page on Jenkins looks
like this:</p>

<p><img src="/images/2012-07-10-on-demand-jenkins-agents-with-amazon-ec2/computer-list.png" alt="Jenkins computer list" /></p>

<p>We have the option of provisioning a new build agent via a single click, but so far, this hasn’t been necessary,
since agents have automatically scaled up and down with demand. We average around 4-8 build agents during the day,
and 0-1 overnight and on weekends.</p>

<h2 id="outcome-and-next-steps">Outcome and Next Steps</h2>

<p>This arrangement hasn’t been in place for long, but we’re excited about the benefits it’s already delivered:</p>

<ul>
  <li>Builds now take a predictable amount of time, since agents automatically scale up to match demand.</li>
  <li>Agents offer a more consistent and easily maintained configuration, so there are fewer spurious failures.</li>
  <li>Despite higher costs on EC2, we hope to spend about the same (or maybe even less) now that we’ll need to operate
only the controller server during periods of inactivity (like nights and weekends).</li>
</ul>

<p>As proponents of <em>automating the hard stuff</em>, we get a real kick out of watching identical agents spin up as builds
trickle in each morning, then disappear as the queue quiets down in the evening. Still, there are a few
improvements to be made:</p>

<ul>
  <li>Our canonical agent’s configuration should be scripted with <a href="http://www.opscode.com/chef/">Chef</a>.</li>
  <li>Sharp-eyed readers will notice that our Jenkins controller is still a Linode server. It might benefit from the
same type of scripted configuration as the agents.</li>
  <li>Cooler still would be for the EC2 plugin to take advantage of Amazon’s
<a href="http://aws.amazon.com/ec2/spot-instances/">spot pricing</a>. Though not supported at the moment, it would allow us
to spend a fraction as much (or spend the same amount, but on more powerful resources).</li>
</ul>

<hr />

<p><em>Editor’s Note: This post has been updated as part of an effort to adopt more inclusive language across Artsy’s
GitHub repositories and editorial content (<a href="https://github.com/artsy/README/issues/427">RFC</a>).</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Jenkins for Ruby and Ruby-on-Rails Teams]]></title>
    <link href="https://artsy.github.io/blog/2012/05/27/using-jenkins-for-ruby-and-ruby-on-rails-teams/"/>
    <updated>2012-05-27T08:15:00+00:00</updated>
    <id>https://artsy.github.io/blog/2012/05/27/using-jenkins-for-ruby-and-ruby-on-rails-teams</id>
    <content type="html"><![CDATA[<p>The <a href="http://jenkins-ci.org">Jenkins CI</a> project has grown tremendously in the past few months. There’re now
hundreds of plugins and an amazing engaged community. Artsy is a happy user and proud contributor to this effort
with the essential <a href="https://wiki.jenkins-ci.org/display/JENKINS/AnsiColor+Plugin">jenkins-ansicolor plugin</a>,
eliminating boring console output since 2011.</p>

<p>We are a continuous integration, deployment and devops shop and have been using Jenkins for over a year now. We’ve
shared our experience at the <a href="http://www.cloudbees.com/juc2012.cb">Jenkins User Conference 2012</a> in
<a href="http://www.slideshare.net/dblockdotorg/graduating-to-jenkins-ci-for-rubyonrails-teams">a presentation</a>. This blog
post is an overview of how to get started with Jenkins for Ruby(-on-Rails) teams.</p>

<p><img src="Artsy Jenkins CI" alt="/images/2012-05-27-using-jenkins-for-ruby-on-rails-teams/jenkins.png" /></p>

<!-- more -->

<p>When Artsy had only three engineers, we hesitated to deploy Jenkins. The CI server was written in Java (i.e. wasn’t
written in Ruby). We feared introducing excessive infrastructure too early. In retrospect, we were not in the
business of building CI infrastructure, so not using Jenkins was a mistake. Since we adopted it, Jenkins has been
operating painlessly and scaled nicely as our needs continued to grow.</p>

<p>Today, we run a single virtual server on <a href="http://www.linode.com">Linode</a> as our Jenkins controller and have 8
Linode agents. These are all $19 per month plans. Our usage is variable: few builds in the middle of the night and
a very high number of builds during the day, so we’re planning on trying to build a Jenkins-agent on-demand system
on AWS eventually.</p>

<p>Setting up a Jenkins controller is straightforward.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>useradd <span class="nt">-m</span> jenkins <span class="nt">-p</span> <span class="o">[</span>password] <span class="nt">-s</span> /bin/bash
addgroup jenkins <span class="nb">sudo
</span>wget <span class="nt">-q</span> <span class="nt">-O</span> - http://pkg.jenkins-ci.org/debian/jenkins-ci.org.key | <span class="nb">sudo </span>apt-key add –
<span class="nb">sudo </span>sh <span class="nt">-c</span> <span class="s1">'echo deb http://pkg.jenkins-ci.org/debian binary/ &gt; /etc/apt/sources.list.d/jenkins.list'</span>
<span class="nb">sudo </span>aptitude update
<span class="nb">sudo </span>aptitude <span class="nb">install </span>jenkins
</code></pre></div></div>

<p>We change Jenkins port in <code class="language-plaintext highlighter-rouge">/etc/default/jenkins</code>, add the machine to DNS and update the Jenkins URL to an
externally visible one in the “Manage Jenkins”, “Configure System” menu. We enable and use “Matrix-Based Security”
with a single user that all developers share and give the user permission to do everything in the same UI. Finally,
we configure the Git Plugin with a global username and e-mail from our shared IT account that has Github access,
setup a Github Web Hook and SMTP E-Mail notifications. Restarting Jenkins from the command line with
<code class="language-plaintext highlighter-rouge">sudo service jenkins restart</code> completes the initial setup.</p>

<p>It’s also a good idea to setup Jenkins configuration backup with
<a href="https://wiki.jenkins-ci.org/display/JENKINS/thinBackup">thinBackup</a>, install
<a href="http://wiki.jenkins-ci.org/display/JENKINS/AnsiColor+Plugin">AnsiColor</a> and, of course, enable
<a href="http://wiki.hudson-ci.org/display/HUDSON/ChuckNorris+Plugin">Chuck Norris</a>.</p>

<p>A typical Ruby development environment includes <a href="https://rvm.io/">RVM</a>, a working GIT client and a Github SSH key.
We install these under our <code class="language-plaintext highlighter-rouge">jenkins</code> user manually on the first agent Linode and then clone agents when we need
more. RVM setup includes entries in <code class="language-plaintext highlighter-rouge">~/.bash_profile</code>, so a Jenkins job for a Ruby project can load that file and
execute commands, including <code class="language-plaintext highlighter-rouge">rake</code>.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/bin/bash</span>
<span class="nb">source</span> ~/.bash_profile
rvm use 1.9.2
gem <span class="nb">install </span>bundler
bundle <span class="nb">install
</span>bundle <span class="nb">exec </span>rake
</code></pre></div></div>

<p>Our default Ruby project Rake task is <code class="language-plaintext highlighter-rouge">test:ci</code>. We run Jasmine and Capybara tests using a real browser, so we need
to redirect all visible output to an X-Windows Virtual Frame Buffer
(<a href="http://www.xfree86.org/4.0.1/Xvfb.1.html">XVFB</a>). This can be done by setting an <code class="language-plaintext highlighter-rouge">ENV</code> variable inside a Rake
task. Our test target also
<a href="http://artsy.github.com/blog/2012/05/15/how-to-organize-over-3000-rspec-specs-and-retry-test-failures/">organizes our tests in suites</a>.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">namespace</span> <span class="ss">:test</span> <span class="k">do</span>
  <span class="n">task</span> <span class="ss">:specs</span><span class="p">,</span> <span class="p">[</span> <span class="ss">:display</span> <span class="p">]</span> <span class="o">=&gt;</span> <span class="ss">:environment</span> <span class="k">do</span> <span class="o">|</span><span class="n">t</span><span class="p">,</span> <span class="n">args</span><span class="o">|</span>
<span class="err"> </span>  <span class="no">ENV</span><span class="p">[</span><span class="s1">'DISPLAY'</span><span class="p">]</span> <span class="o">=</span> <span class="n">args</span><span class="p">[</span><span class="ss">:display</span><span class="p">]</span> <span class="k">if</span> <span class="n">args</span><span class="p">[</span><span class="ss">:display</span><span class="p">]</span>
<span class="err"> </span>  <span class="no">Rake</span><span class="o">::</span><span class="no">Task</span><span class="p">[</span><span class="s1">'spec:suite:all'</span><span class="p">].</span><span class="nf">invoke</span>
  <span class="k">end</span>
<span class="err">      </span>
<span class="err"> </span> <span class="n">task</span> <span class="ss">:jasmine</span><span class="p">,</span> <span class="p">[</span> <span class="ss">:display</span> <span class="p">]</span> <span class="o">=&gt;</span> <span class="ss">:environment</span> <span class="k">do</span> <span class="o">|</span><span class="n">t</span><span class="p">,</span> <span class="n">args</span><span class="o">|</span>
<span class="err"> </span>   <span class="no">ENV</span><span class="p">[</span><span class="s1">'DISPLAY'</span><span class="p">]</span> <span class="o">=</span> <span class="n">args</span><span class="p">[</span><span class="ss">:display</span><span class="p">]</span> <span class="k">if</span> <span class="n">args</span><span class="p">[</span><span class="ss">:display</span><span class="p">]</span>
<span class="err">    </span><span class="nb">system</span><span class="o">!</span><span class="p">(</span><span class="s2">"bundle exec rake jasmine:ci"</span><span class="p">)</span>
<span class="err">  </span><span class="k">end</span>
<span class="err">    </span>
<span class="err">  </span><span class="n">task</span> <span class="ss">:all</span><span class="p">,</span> <span class="p">[</span> <span class="ss">:display</span> <span class="p">]</span> <span class="o">=&gt;</span> <span class="ss">:environment</span> <span class="k">do</span> <span class="o">|</span><span class="n">t</span><span class="p">,</span> <span class="n">args</span><span class="o">|</span>
<span class="err"> </span>   <span class="no">Rake</span><span class="o">::</span><span class="no">Task</span><span class="p">[</span><span class="s1">'assets'</span><span class="p">].</span><span class="nf">invoke</span>
<span class="err">    </span><span class="no">Rake</span><span class="o">::</span><span class="no">Task</span><span class="p">[</span><span class="s1">'test:jasmine'</span><span class="p">].</span><span class="nf">invoke</span><span class="p">(</span><span class="n">args</span><span class="p">[</span><span class="ss">:display</span><span class="p">])</span>
<span class="err">    </span><span class="no">Rake</span><span class="o">::</span><span class="no">Task</span><span class="p">[</span><span class="s1">'test:specs'</span><span class="p">].</span><span class="nf">invoke</span><span class="p">(</span><span class="n">args</span><span class="p">[</span><span class="ss">:display</span><span class="p">])</span>
<span class="err">  </span><span class="k">end</span>
<span class="err">      </span>
<span class="err">  </span><span class="n">task</span> <span class="ss">:ci</span> <span class="k">do</span>
<span class="err">  </span>  <span class="no">Rake</span><span class="o">::</span><span class="no">Task</span><span class="p">[</span><span class="s1">'test:all'</span><span class="p">].</span><span class="nf">invoke</span><span class="p">(</span><span class="s2">":99"</span><span class="p">)</span>
<span class="err">  </span><span class="k">end</span>
<span class="err">      </span>
<span class="k">end</span>
</code></pre></div></div>

<p>A successful CI test run will trigger a deployment to a staging environment on Heroku.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">namespace</span> <span class="ss">:deploy</span> <span class="k">do</span>
<span class="err">  </span><span class="n">task</span> <span class="ss">:staging</span> <span class="o">=&gt;</span> <span class="ss">:environment</span> <span class="k">do</span>
<span class="err">  </span>  <span class="nb">system</span><span class="o">!</span><span class="p">(</span><span class="s2">"bundle exec heroku maintenance:on --app=app-staging"</span><span class="p">)</span>
    <span class="nb">system</span><span class="o">!</span><span class="p">(</span><span class="s2">"git push git@heroku.com:app-staging.git origin/staging:master"</span><span class="p">)</span>
    <span class="nb">system</span><span class="o">!</span><span class="p">(</span><span class="s2">"bundle exec heroku maintenance:off --app=app-staging"</span><span class="p">)</span>
<span class="err">  </span><span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>You’ll notice that we execute system commands with <code class="language-plaintext highlighter-rouge">system!</code>. Unlike the usual <code class="language-plaintext highlighter-rouge">system</code> method, our wrapper raises
an exception when a command returns a non-zero error code to abort execution.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">system!</span><span class="p">(</span><span class="n">cmdline</span><span class="p">)</span>
  <span class="n">logger</span><span class="p">.</span><span class="nf">info</span><span class="p">(</span><span class="s2">"[</span><span class="si">#{</span><span class="no">Time</span><span class="p">.</span><span class="nf">now</span><span class="si">}</span><span class="s2">] </span><span class="si">#{</span><span class="n">cmdline</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>
<span class="err">  </span><span class="n">rc</span> <span class="o">=</span> <span class="nb">system</span><span class="p">(</span><span class="n">cmdline</span><span class="p">)</span>
<span class="err">  </span><span class="s2">"failed with exit code </span><span class="si">#{</span><span class="vg">$?</span><span class="p">.</span><span class="nf">exitstatus</span><span class="si">}</span><span class="s2">"</span> <span class="k">if</span> <span class="p">(</span><span class="n">rc</span><span class="p">.</span><span class="nf">nil?</span> <span class="o">||</span> <span class="o">!</span> <span class="n">rc</span> <span class="o">||</span> <span class="vg">$?</span><span class="p">.</span><span class="nf">exitstatus</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span>
<span class="k">end</span>
</code></pre></div></div>

<p>Our production deployment task is also a Jenkins job.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">namespace</span> <span class="ss">:deploy</span> <span class="k">do</span>
<span class="err">  </span><span class="n">task</span> <span class="ss">:production</span> <span class="o">=&gt;</span> <span class="ss">:environment</span> <span class="k">do</span>
    <span class="nb">system</span><span class="o">!</span><span class="p">(</span><span class="s2">"git push git@heroku.com:app-production.git origin/production:master"</span><span class="p">)</span>
<span class="err">  </span><span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>We don’t want any downtime on our production environment, so we don’t turn Heroku maintenance on. Our staging
deployment task also includes copying production data to staging, so we chose to enable maintenance to avoid people
hitting the test environment while it’s being built and may be in a half-baked state.</p>

<p>Finally, we also run production daily cron-like tasks via Jenkins. It gives us email notifications, console output
and the ability to manually trigger them. Centralizing operations in the same environment as CI creates truly
continuous integration, deployment and operations.</p>

<hr />

<p><em>Editor’s Note: This post has been updated as part of an effort to adopt more inclusive language across Artsy’s
GitHub repositories and editorial content (<a href="https://github.com/artsy/README/issues/427">RFC</a>).</em></p>
]]></content>
  </entry>
  
</feed>
