<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: automation | Artsy Engineering]]></title>
  <link href="https://artsy.github.io/blog/categories/automation/atom.xml" rel="self"/>
  <link href="https://artsy.github.io/"/>
  <updated>2024-08-07T18:22:11+00:00</updated>
  <id>https://artsy.github.io/</id>
  <author>
    <name><![CDATA[]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Automation Encourages More Automation]]></title>
    <link href="https://artsy.github.io/blog/2019/01/08/automation-encourages-more-automation/"/>
    <updated>2019-01-08T00:00:00+00:00</updated>
    <id>https://artsy.github.io/blog/2019/01/08/automation-encourages-more-automation</id>
    <content type="html"><![CDATA[<p>Last year, <a href="http://artsy.github.io/blog/2018/05/07/fully-automated-standups/">I wrote about the process of fully automating our weekly engineering-wide standup</a>. One of
the benefits of automating what <em>was</em> a meeting run by a single person to a meeting run by everyone is that we
removed a <a href="https://en.wikipedia.org/wiki/Single_point_of_failure">single point of failure</a>. However, I may have fibbed just slightly when I called our standups
<em>fully</em> automated.</p>

<p>This blog post is going to cover how (and more importantly, <em>why</em>) I finally automated the last 5% of our weekly
standups. Let’s go!</p>

<!-- more -->

<hr />

<p>Our weekly standup process is a finely tuned machine. The meeting is run every Monday morning by a different pair
of engineers, based on our <a href="http://artsy.github.io/blog/2018/05/25/support-process/">on-call rotation</a>. The process is <a href="https://github.com/artsy/README/blob/eb2f23c835983223877a6031475153db93e98e8c/events/open-standup.md">documented</a> in the open, and we
improve it over time. I’m really proud of it! But there’s just one problem… someone needs to make sure that the
people responsible for the meeting <em>know</em> about that responsibility.</p>

<p>So for the past 8 months, I’ve begun every week by sending Slack DMs to the responsible engineers to remind them to
run the standup, including a link to the docs. This made me a single point of failure: when I was out of the
office, I always made sure to ask someone else to remind them about the meeting. What if I had forgot? Or I was
sick that day? What would happen to our finely-tuned machine?!</p>

<p>Okay, so what would probably happen is that people would remember anyway or someone would post to Slack “hey who is
running standup today?” Automating this reminder was a pretty small priority, but it was a gap in our process, and
I wanted to patch it.</p>

<p>When I discussed all of this with my colleagues, it wasn’t long before someone brought up <a href="https://xkcd.com/1319/">the xkcd comic on
automation</a>. Oh, you know the one.</p>

<p><a href="https://xkcd.com/1319/"><center><img src="https://imgs.xkcd.com/comics/automation.png" srcset="//imgs.xkcd.com/comics/automation_2x.png 2x" alt="xkcd comic about automation" title="I wonder if people would read the hover text of an xkcd comic linked to from a different site, just out of habit? I probably would." /></center></a></p>

<p>The comic observes that, often, the work necessary to automate a task often exceeds the amount of work necessary to
just do the task manually. Pretty funny! You could be forgiven for taking the logical leap to say that automating
tasks isn’t worth it, generally, based on this observation. But that analysis would be incomplete because it
focuses entirely on saving <em>time</em>. In my experience, automating a task often yields far more value than it costs in
time.</p>

<p>Let’s take the task of sending the on-call engineers their Monday morning standup reminder. How would we even
automate that?</p>

<p>Well, first I think about how <em>I</em> do this task. First I look at the on-call schedule, shared in Google Calendar.
Then I open a DM in Slack with the engineers. I copy the pre-composed message from my recurring OmniFocus task and
send it in the DM.</p>

<p>Okay so how would I automate that? <a href="http://artsy.github.io/blog/2017/09/04/Introducing-Peril/">Artsy uses Peril already</a> to automate reminders about open RFCs, so I
piggy-backed on that existing automation. This is key: I’m not starting from scratch, I’m building upon the
existing automation infrastructure that we’ve already built.</p>

<p>Next, I find out how to access the Google Calendar API using a <a href="https://cloud.google.com/iam/docs/understanding-service-accounts">Google Services Account</a>. It has an
authentication method purpose-built for server-to-server communication, which is perfect for our needs. I write
some code to pick the correct calendar events based on the current time, extract the email addresses of those
events’ attendees, and handle an edge case. Then I look up the <a href="https://github.com/slackapi/node-slack-sdk#features">Slack API</a> for Peril’s platform, learn how
to authenticate with it properly from a server, and lookup Slack user IDs based on those email addresses. Finally,
compose the message and use some previously written code to post it to our #dev channel.</p>

<p>Boom. <a href="https://github.com/artsy/peril-settings/pull/87">Open a PR</a>. Add some unit tests. Done.</p>

<p><img alt="screenshot of the peril task working in Slack" src="/images/2019-01-08-automation-encourages-more-automation/success.png" /></p>

<p>I spent about four hours automating this and by my calculations, I’ll recoup that time by… July 2020. But like I
said, there’s more value to this than the time I saved.</p>

<p>In the process of automating this, I learned how to use <em>two</em> new APIs <em>and</em> I created infrastructure in our <a href="https://github.com/artsy/peril-settings">Peril
installation</a> to access them. Not only did I build <em>upon</em> the existing automation framework,
but I <em>contributed</em> to it so it’s easier for the next person. I even <a href="https://github.com/danger/peril/pull/407">fixed a Peril bug</a> in the process.</p>

<p>Automation encourages automation. Every time you automate a task, it gets easier to automate the next one. With
sufficient infrastructure, a sort of exponential takeoff happens: all of a sudden you’re not just automating
<em>existing</em> tasks, you’re using that infrastructure for <em>new</em> tasks. Tasks that add value to your team, like
<a href="https://github.com/artsy/peril-settings/blob/master/org/mergeOnGreen.ts">merge-on-green</a> or <a href="https://github.com/artsy/peril-settings/blob/master/tasks/compareSchemas.ts">notifying engineers of recent API changes</a>.</p>

<p>As a consequence of the nature of engineering, we often consider ideas in only terms of constraints. We define
what’s possible by what we can already accomplish. Automation is a way to hack around that habit; it encourages
engineers to think outside the box by giving us a larger box. Simple, but effective!</p>

<hr />

<p>So. Four hours of work. Was it worth it?</p>

<p>Well, let’s evaluate this in terms of <em>impact</em>. Those four hours could have kept our standups running until next
July, or they could have automated that task <em>and</em> further enhanced our automation infrastructure. And, personally,
it was very satisfying.</p>

<p>I would say that’s <em>definitely</em> worth it.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Being a Better Programmer When You're Actually Lazy.]]></title>
    <link href="https://artsy.github.io/blog/2016/03/02/Lazily-Automation/"/>
    <updated>2016-03-02T12:09:00+00:00</updated>
    <id>https://artsy.github.io/blog/2016/03/02/Lazily-Automation</id>
    <content type="html"><![CDATA[<p>I juggle a bunch of projects, both in Artsy and in the Open Source community. If you don’t work with me directly, you’d be mistaken for believing that I was an organized person. I’m pretty far from that, and <a href="https://github.com/artsy/mobile/issues/68">don’t really</a> plan on changing that.</p>

<p>However, I work with other people and very strongly believe that programming is mostly a social problem once you’re good enough at writing code. It’d be hypocritical of me to not improve the people process side, so I try to automate processes that makes me a better team-mate.</p>

<p>I’m going to cover four things I’ve worked on lately to improve this: <a href="https://github.com/danger/danger/">Danger</a>, <a href="https://github.com/orta/github-clippers">GitHub-Clippers</a> and improving how I write commits and prefixing my name on branches.</p>

<!-- more -->

<h3 id="danger">Danger</h3>

<p><a href="https://github.com/danger/danger/">Danger</a> is a tool I co-created with a friend (<a href="https://github.com/krausefx/">Felix Krause</a>), and it’s namesake, <a href="https://github.com/dangermcshane">Gem “Danger” McShane</a>. It came out of frustration that we couldn’t easily hold ourselves accountable to better team processes. Requiring a code-reviewer to  also remember details like “Add a CHANGELOG Entry” isn’t much to ask, but it is “Yet Another Thing To Remember” for both the submitter and reviewer.</p>

<p>It’s turning into a really important part of our code-review, and the ideas it generates once we had it in place make it fun to add new rules. It means we can fail fast, and not have to think about process so much. Danger will tell us if we’ve missed something.</p>

<p><img src="/images/2016-03-02-Lazily-Automation/danger.png" alt="Danger Example" /></p>

<p>I expect to write a more serious post on <a href="https://github.com/danger/danger/">Danger</a> once it’s more fleshed out. For now though, the README covers what it does well.</p>

<h3 id="clippers">Clippers</h3>

<p>In every big team I operate in, other people care about keeping the repo clean of merged branches. I totally respect their opinion, but it’s so low on things I care about that I just don’t register the “Delete Branch” button on a GitHub pull request. I’d rather be finding a <a href="https://github.com/orta/gifs">good response GIF</a>.</p>

<p>So I created <a href="https://github.com/orta/github-clippers">a Safari Extension</a> that handles automatically deleting branches on specific repos for me. It’s not a biggie, it’s not fancy, it’s under a <a href="https://github.com/orta/github-clippers/blob/master/GitHub-Clippers.safariextension/github_clippers.js">hundred lines of code</a> - but it automates something that annoyed others about my behavior. That counts for something.</p>

<h3 id="commit-automation">Commit Automation</h3>

<p>I write <em>reasonable</em> commit messages, they’re not <a href="http://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html">amazing</a>, they’re <a href="http://www.whatthecommit.com">not terrible</a>. They’re just, <a href="https://github.com/artsy/energy/commits/master?author=orta">alright</a>. I wanted to start trying to hold everyone accountable for doing better, so I advocated for copying the person with the <a href="https://github.com/artsy/eigen/commits/master?author=alloy">best commit style</a> on our team.</p>

<p>Their style is to have commits in a format like <code class="language-plaintext highlighter-rouge">[Context] Thing I did.</code> - it is much better that <code class="language-plaintext highlighter-rouge">Thing I did.</code>. So I looked into how I could automate this, because I would very quickly forget to do this. Here’s what I did:</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
// Helper <span class="k">function </span>to get the branch info
<span class="k">function </span>git_branch_info<span class="o">()</span> <span class="o">{</span>
  <span class="nv">ref</span><span class="o">=</span><span class="si">$(</span><span class="nb">command </span>git symbolic-ref HEAD 2&gt; /dev/null<span class="si">)</span> <span class="o">||</span> <span class="se">\</span>
  <span class="nv">ref</span><span class="o">=</span><span class="si">$(</span><span class="nb">command </span>git rev-parse <span class="nt">--short</span> HEAD 2&gt; /dev/null<span class="si">)</span> <span class="o">||</span> <span class="k">return
  </span><span class="nb">echo</span> <span class="s2">"</span><span class="k">${</span><span class="nv">ref</span><span class="p">#refs/heads/</span><span class="k">}</span><span class="s2">"</span>
<span class="o">}</span>

<span class="k">function </span>branch<span class="o">()</span> <span class="o">{</span>
  git checkout master<span class="p">;</span>
  git pull upstream master<span class="p">;</span>
  git checkout <span class="nt">-b</span> <span class="nv">$1</span>
  git config branch.<span class="nv">$1</span>.description <span class="nv">$2</span>
<span class="o">}</span>

<span class="k">function </span>commit<span class="o">()</span> <span class="o">{</span>
  <span class="nb">local </span><span class="nv">BRANCH</span><span class="o">=</span><span class="si">$(</span>git_branch_info<span class="si">)</span>
  <span class="nb">local </span><span class="nv">INFO</span><span class="o">=</span><span class="si">$(</span>git config branch.<span class="si">$(</span><span class="nb">echo</span> <span class="nv">$BRANCH</span><span class="si">)</span>.description<span class="si">)</span>
  git commit <span class="nt">-m</span> <span class="s2">"[</span><span class="si">$(</span><span class="nb">echo</span> <span class="nv">$INFO</span><span class="si">)</span><span class="s2">] </span><span class="nv">$argv</span><span class="s2">"</span>
<span class="o">}</span>

// And <span class="k">if </span>I forget to <span class="nb">set </span>my context
<span class="k">function </span>context<span class="o">()</span> <span class="o">{</span>
  <span class="nb">local </span><span class="nv">BRANCH</span><span class="o">=</span><span class="si">$(</span>git_branch_info<span class="si">)</span>
  git config branch.<span class="si">$(</span><span class="nb">echo</span> <span class="nv">$BRANCH</span><span class="si">)</span>.description <span class="nv">$1</span>
<span class="o">}</span>
</code></pre></div></div>

<p>Or if you’re a fish user like me, <a href="https://gist.github.com/orta/902d8e576a2b75afe2df">this gist</a>.</p>

<p>I created two shell functions, one that makes a branch that includes a context type. So for example, say I’m working on artwork notifications, I’d start a new branch with <code class="language-plaintext highlighter-rouge">$ branch artwork_notifications Notifications</code>. This saves the context as <code class="language-plaintext highlighter-rouge">Notifications</code> on the git branch metadata. Then everytime I want to commit my changes, I use <code class="language-plaintext highlighter-rouge">$ commit This is the thing I changed.</code> - and it will be prefixed with <code class="language-plaintext highlighter-rouge">[Notifications]</code>. It makes it easier for someone looking through the history to have an idea about the context, and makes me feel like I’m improving my process without remembering the context.</p>

<h3 id="branch-prefixes">Branch Prefixes</h3>

<p>We use a Makefile in all our projects to try and help automate per-project simple tasks like running <a href="https://github.com/artsy/energy/blob/e5db035225490fb53c65c74a6c1bdd660f305ab6/Makefile#L44">mogenerator</a>, updating <a href="https://github.com/artsy/energy/blob/e5db035225490fb53c65c74a6c1bdd660f305ab6/Makefile#L49">storyboard identifiers</a> and updating <a href="https://github.com/artsy/eigen/blob/12fe9de4d927eea27f4942d15e74b89016a6345f/Makefile#L102-L103">embedded resources</a>.</p>

<p>I also applied some standard make commands in our projects so that I can prefix my <a href="https://github.com/artsy/eigen/blob/10106210196f096a27412a70af61dcae7fda285c/Makefile#L110-L117">branches with my name</a>.</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>LOCAL_BRANCH <span class="o">=</span> <span class="si">$(</span>shell git rev-parse <span class="nt">--abbrev-ref</span> HEAD<span class="si">)</span>
BRANCH <span class="o">=</span> <span class="si">$(</span>shell <span class="nb">echo </span><span class="nv">host</span><span class="o">=</span>github.com | git credential fill | <span class="nb">sed</span> <span class="nt">-E</span> <span class="s1">'N; s/.*username=(.+)\n?.*/\1/'</span><span class="si">)</span>-<span class="si">$(</span>shell git rev-parse <span class="nt">--abbrev-ref</span> HEAD<span class="si">)</span>

<span class="nb">pr</span>:
	<span class="k">if</span> <span class="o">[</span> <span class="s2">"</span><span class="si">$(</span>LOCAL_BRANCH<span class="si">)</span><span class="s2">"</span> <span class="o">==</span> <span class="s2">"master"</span> <span class="o">]</span><span class="p">;</span> <span class="k">then </span><span class="nb">echo</span> <span class="s2">"In master, not PRing"</span><span class="p">;</span> <span class="k">else </span>git push upstream <span class="s2">"</span><span class="si">$(</span>LOCAL_BRANCH<span class="si">)</span><span class="s2">:</span><span class="si">$(</span>BRANCH<span class="si">)</span><span class="s2">"</span><span class="p">;</span> open <span class="s2">"https://github.com/artsy/eigen/pull/new/artsy:master...</span><span class="si">$(</span>BRANCH<span class="si">)</span><span class="s2">"</span><span class="p">;</span> <span class="k">fi

</span>push:
	<span class="k">if</span> <span class="o">[</span> <span class="s2">"</span><span class="si">$(</span>LOCAL_BRANCH<span class="si">)</span><span class="s2">"</span> <span class="o">==</span> <span class="s2">"master"</span> <span class="o">]</span><span class="p">;</span> <span class="k">then </span><span class="nb">echo</span> <span class="s2">"In master, not pushing"</span><span class="p">;</span> <span class="k">else </span>git push upstream <span class="si">$(</span>LOCAL_BRANCH<span class="si">)</span>:<span class="si">$(</span>BRANCH<span class="si">)</span><span class="p">;</span> <span class="k">fi

</span>fpush:
	<span class="k">if</span> <span class="o">[</span> <span class="s2">"</span><span class="si">$(</span>LOCAL_BRANCH<span class="si">)</span><span class="s2">"</span> <span class="o">==</span> <span class="s2">"master"</span> <span class="o">]</span><span class="p">;</span> <span class="k">then </span><span class="nb">echo</span> <span class="s2">"In master, not pushing"</span><span class="p">;</span> <span class="k">else </span>git push upstream <span class="si">$(</span>LOCAL_BRANCH<span class="si">)</span>:<span class="si">$(</span>BRANCH<span class="si">)</span> <span class="nt">--force</span><span class="p">;</span> <span class="k">fi</span>
</code></pre></div></div>

<p>This works by some funky shell work to pull out your current branch into <code class="language-plaintext highlighter-rouge">LOCAL_BRANCH</code>, then to do the same thing but prefixed with your login name for <code class="language-plaintext highlighter-rouge">BRANCH</code>. Then the make commands handle pushing to the server. This means that everyone in the team can provide have logically named branches without having to have their local repo filled with <code class="language-plaintext highlighter-rouge">[my_name]-thing</code> branches.</p>

<h2 id="on-going">On-going</h2>

<p>This is a work in progress, as the mobile team grows, we need to add more process when it’s appropriate. This <em>doesn’t</em> mean that we have to sacrifice speed, and we can continue thinking about the problem at hand rather than devoting energy to process.</p>

<p>It’s a time trade-off that has worked out well for me so far, and I’d love to know other people’s hacks for having useful process, but automating it so that it’s not considered overhead.</p>
]]></content>
  </entry>
  
</feed>
