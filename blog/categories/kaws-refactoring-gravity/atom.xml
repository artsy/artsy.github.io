<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: KAWS refactoring gravity | Artsy Engineering]]></title>
  <link href="https://artsy.github.io/blog/categories/kaws-refactoring-gravity/atom.xml" rel="self"/>
  <link href="https://artsy.github.io/"/>
  <updated>2024-10-30T17:23:09+00:00</updated>
  <id>https://artsy.github.io/</id>
  <author>
    <name><![CDATA[]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Third Time's the Charm: Deprecating KAWS]]></title>
    <link href="https://artsy.github.io/blog/2022/05/09/deprecating-kaws/"/>
    <updated>2022-05-09T00:00:00+00:00</updated>
    <id>https://artsy.github.io/blog/2022/05/09/deprecating-kaws</id>
    <content type="html"><![CDATA[<p>How do you tell when it‚Äôs time to deprecate a system? If something mostly works OK, is it worth spending time and
effort replacing its functionality?</p>

<p>At Artsy, we realized several years ago that we needed to be able to group a bunch of artworks together. If we
wanted to have a page with all of the
<a href="https://www.artsy.net/collection/lucio-fontana-ceramics">ceramics by Lucio Fontana</a>, or
<a href="https://www.artsy.net/collection/buy-now-contemporary-prints-in-the-ifpda-fair-spring-2022">contemporary prints from the IFPDA Fair Sprint 2022</a>,
or a <a href="https://www.artsy.net/collection/antwaun-sargents-wishlist">gift guide curated by Antwaun Sargent</a>, we needed
to have a way to make that happen.</p>

<p>We decided to call these things ‚Äúcollections,‚Äù a reasonable name for a collection of artworks. In order to create
them, we developed a service called KAWS, named after the artist (whose works we wanted to put in several of these
collections).</p>

<p>Now, 4 years later, we‚Äôve taken down the service and folded its functionality into Artsy‚Äôs main database and API,
Gravity.</p>

<p>Let‚Äôs talk about why and what we learned along the way.</p>

<!-- more -->

<h2 id="a-little-context">A little context</h2>

<p>KAWS has a somewhat unusual design. It‚Äôs a server, a Node.js app with its own Mongo database, and it serves up a
GraphQL API. It also relies on <a href="https://typeorm.io/#/">TypeORM</a> to map TypeScript models to database records and
<a href="https://typegraphql.com">TypeGraphQL</a> to keep TS and GraphQL types in sync.</p>

<p>This makes it a bit different from most services Artsy maintains. Most of our APIs are Ruby on Rails apps, and we
don‚Äôt have any other uses of TypeORM and TypeGraphQL. When it was created, it was a cool experiment with a possible
direction for future APIs - one we decided not to pursue for the time being.</p>

<p>KAWS doesn‚Äôt store any artworks - or even any artwork IDs. Instead, it just stores a ‚Äúquery‚Äù, a set of
Elasticsearch criteria. This could be a list of artist IDs or gene IDs, a tag ID, a keyword, or any combination of
those things.</p>

<p>In other words, a KAWS artwork collection could be defined in human-readable terms as something like
‚Äú<a href="https://www.artsy.net/collection/bridget-riley-black-and-white">artworks with the ‚ÄòBlack and White‚Äô gene by the artist Bridget Riley</a>‚Äù
or
‚Äú<a href="https://www.artsy.net/collection/auguste-rodin-bronze-sculpture">artworks by Auguste Rodin with the keyword ‚Äòbronze‚Äô and the gene ‚ÄòSculpture‚Äô</a>.‚Äù</p>

<p>This approach results in a somewhat odd flow for resolving collection requests. Let‚Äôs say a user requests the page
<a href="https://www.artsy.net/collection/kaws-toys">KAWS: Toys</a>. Our frontend, Force, sends a request to Metaphysics, our
GraphQL API.</p>

<p>Metaphysics knows to route that request to KAWS - it asks KAWS ‚Äúhey, what‚Äôs the Elasticsearch query for the
collection with slug <code class="language-plaintext highlighter-rouge">kaws-toys</code>? Also, give me the title, the category, the header image, the description text,
and [any other pieces of metadata about the collection itself].‚Äù But it can‚Äôt ask KAWS for the artworks!</p>

<p>Instead, it receives the query from KAWS and then turns around and sends another request to Gravity, which stores
all of our artworks and indexes them in Elasticsearch so that we can filter them. ‚ÄúHey Gravity, I got this query
from KAWS (the service, not the artist): <code class="language-plaintext highlighter-rouge">{ artists: 'KAWS', genes: 'Sculpture' }</code>. Can you return me all of the
artworks that match that query?‚Äù</p>

<p>Gravity takes those parameters and passes them to its Elasticsearch cluster, fetching all artworks that match the
criteria (and sorting/filtering them according to what the user has selected on the page).</p>

<p>Gravity returns those artworks to Metaphysics, which then packages them up with all of the collection metadata it
received from KAWS and returns to the client that requested it. Whew!</p>

<p>Here‚Äôs a diagram showing what that looks like:</p>

<p><img alt="Diagram depicting how requests for collections get resolved" src="/images/2022-05-06-deprecating-kaws/kaws-diagram.png" /></p>

<h2 id="why-did-we-decide-to-deprecate-it">Why did we decide to deprecate it?</h2>

<h3 id="idiosyncratic-stack">Idiosyncratic stack</h3>

<p>As mentioned above, KAWS is an unusual app by Artsy standards. It‚Äôs neither a database-backed Rails/Ruby app, nor
an API-consuming JavaScript/Node app. It was missing the typical Rails niceties (a dev console, background jobs,
rake tasks, etc.), and inclusion of elements like TypeORM and TypeGraphQL that don‚Äôt exist in our other apps meant
there was a bit of a learning curve for working with it.</p>

<p>While it‚Äôs not terrible to have some variety in our systems, it does make them harder to work in and keep
up-to-date. And that also resulted in a high‚Ä¶</p>

<h3 id="lottery-factor">Lottery factor</h3>

<p>There are still people at Artsy who‚Äôve worked in KAWS, but the top 4 contributors have moved on to other companies.
That meant that any projects involving KAWS required extra effort to familiarize devs with the system.</p>

<h3 id="lack-of-relationship-between-collections-and-artworks">Lack of relationship between collections and artworks</h3>

<p>Any KAWS-backed artwork grid (e.g. any <code class="language-plaintext highlighter-rouge">/collection/:slug</code> page) is the ephemeral result of a canned search query.
This has some advantages: collections stay evergreen &amp; current, so long as artworks with appropriate metadata
continue to land on the platform. But it also has some downsides: there is no modeled relationship between a
collection and its artworks, so given an artwork, you <em>can‚Äôt</em> tell what collections it‚Äôs in.</p>

<h3 id="extra-hops-on-each-request">Extra hops on each request</h3>

<p>Every <code class="language-plaintext highlighter-rouge">/collection/:slug</code> request has to go to ‚Üí MP ‚Üí Kaws‚Üí MP ‚Üí Gravity ‚Üí ES. The diagram above illustrates this
flow. And it‚Äôs worth noting that KAWS really doesn‚Äôt store that much. It‚Äôs a whole service that only stores a
single data type.</p>

<h3 id="lack-of-admin-ui">Lack of admin UI</h3>

<p>Collections in KAWS were first created via a CSV import, then eventually a Google Sheets-driven workflow was added.
To create or update a collection, an admin creates/modifies a row in the spreadsheet, then goes to our Jenkins UI
and kicks off an ‚Äúupdate collections‚Äù job, which causes KAWS to pull the new data from the Google Sheet.</p>

<p>This is a pretty rough workflow, and it means it‚Äôs very easy to accidentally modify or delete information from a
collection (e.g. overwriting the text in the wrong cell).</p>

<h2 id="how-did-we-go-about-planning-it">How did we go about planning it?</h2>

<p>This actually wasn‚Äôt the first time we attempted to deprecate KAWS. It became something of a running joke: every
October for 3 years running (2019, 2020, 2021), someone would say ‚Äúhey we should probably deprecate this thing‚Äù and
write a tech plan.</p>

<figure class="illustration">
  <img src="/images/2022-05-06-deprecating-kaws/Screen Shot 2022-05-06 at 12.49.55 PM.png" alt="Screenshot of a
comment on a previous tech plan. Text says 'I do like how this is becoming an Artsy autumnal tradition. Pumpkin
Spice Kaws Deprecation üòÜ. That alone tells us something.'" style="width: 300px;" />
  <figcaption>At least we're self-aware</figcaption>
</figure>

<p>This time, there were three key differences that allowed us to get it done:</p>

<ol>
  <li>
    <p>There was a business need to do it. We want to work on improving collections, bringing new features to them and
making it easier for our admins to manage and use collections for important marketing campaigns. We took a look
at collections as they existed and said ‚Äúdeprecating KAWS and moving its functionality into Gravity is a
prerequisite for these projects.‚Äù We could have eventually completed them, but it would have been slower and
more difficult - we were confident that investing time into this refactor now would save a lot of time and
headaches later.</p>
  </li>
  <li>
    <p>We kept the plan very tightly scoped, focusing only on ‚Äúmaintain existing functionality and move it to Gravity.‚Äù
Previous iterations of the tech plan had proposed broader changes, such as rethinking collections modeling
entirely or breaking with our existing GraphQL schema. Any changes to fields currently being consumed by our
frontend clients significantly increases scope, especially since our GraphQL schema is ‚Äúbaked in‚Äù to our app.
That means that if we removed fields the app was currently relying on, some users who never upgrade their apps
would see that functionality break.</p>

    <p>To be clear, the authors of those tech plans weren‚Äôt wrong to propose rethinking and improving how collections
are modeled and served! We may very well end up implementing some of their ideas and suggestions. The learning
this time around was mostly ‚Äúwe‚Äôre never going to get this done unless we really rein in the scope.‚Äù</p>

    <p>Our goal was 100% compatibility: all of the currently-used fields would still be available and could be
successfully resolved by Gravity instead of KAWS. Even if we changed the type of those fields or updated how
they were resolved, they still needed to exist. We did end up getting rid of lots of fields that were not being
used by frontend clients (which meant a lot of spelunking through our code and trying to find out if fields like
<code class="language-plaintext highlighter-rouge">showOnEditorial</code> were still being used), so the schema is still significantly simpler and cleaner than it was.</p>
  </li>
  <li>
    <p>Roop laid a really nice foundation by writing up a thorough document about what KAWS is, how it works, and the
steps we might need to take in order to deprecate it. Much of this blog post comes almost verbatim from that
document! It‚Äôs a testament to the power that well-organized documentation can have: being able to see and
understand the problem gave us confidence to tackle it.</p>

    <p>Here‚Äôs the diagram he created that sketches out how we might go about deprecating KAWS:</p>

    <p><img src="/images/2022-05-06-deprecating-kaws/kaws-tasks.png" alt="Diagram with many different steps connected by arrows indicating which updates need to be made in what order to allow us to deprecate KAWS." /></p>
  </li>
</ol>

<h2 id="what-did-we-learn">What did we learn?</h2>

<h3 id="its-easy-for-scope-to-expand-without-you-noticing">It‚Äôs easy for scope to expand without you noticing</h3>

<p>I mentioned that our goal was JUST moving KAWS functionality to Gravity, and that we wanted to avoid adding new
functionality to keep the project focused. We mostly did that - but we <em>did</em> get off track in one important way.</p>

<p>We‚Äôve discussed how KAWS doesn‚Äôt include direct relationships between artworks and collections. As we worked on
moving collections to Gravity, we had a baked-in assumption that there would be a join model between <code class="language-plaintext highlighter-rouge">Artwork</code> and
<code class="language-plaintext highlighter-rouge">MarketingCollection</code> (the name of the model in Gravity). This was largely informed by the approach we took to
moving <code class="language-plaintext highlighter-rouge">ArtistSeries</code> from KAWS to Gravity, a project we previously completed.</p>

<p>In that case, we created an explicit link between the <code class="language-plaintext highlighter-rouge">ArtistSeries</code> model and the <code class="language-plaintext highlighter-rouge">Artwork</code> model, and we updated
those relationships with a daily recurring job. We would essentially run the query defined by the <code class="language-plaintext highlighter-rouge">ArtistSeries</code>,
see if there were any new artworks that matched, and if so, add them to the Series in question.</p>

<p>When we tried this same approach for <code class="language-plaintext highlighter-rouge">MarketingCollections</code>, we noticed there was a problem: <code class="language-plaintext highlighter-rouge">ArtistSeries</code> cap out
at a few hundred works, but <code class="language-plaintext highlighter-rouge">MarketingCollections</code> could be as many as <em>several hundred thousand</em> for collections
like ‚Äú<a href="https://www.artsy.net/collection/contemporary">Contemporary</a>‚Äù that are based on very general criteria. The
jobs to associate artworks with <code class="language-plaintext highlighter-rouge">MarketingCollections</code> were taking so long that they ate up all of our Sidekiq
resources and prevented other jobs from being executed in a timely manner.</p>

<p>When we took a step back and looked at the problem, we realized that we were getting ahead of ourselves. Yes, we
will likely want to directly associate artworks with collections - but there actually wasn‚Äôt a clear business
reason for doing so. We were just doing it because we were ‚Äúpretty sure we might need it at some point.‚Äù</p>

<p>So to unblock the project, we removed the join models and instead kept a similar approach to what KAWS used
initially: fetching artworks at request time using the Elasticsearch query stored on the <code class="language-plaintext highlighter-rouge">MarketingCollection</code>.</p>

<h3 id="theres-a-reason-we-dont-name-our-projects-after-artists">There‚Äôs a reason we don‚Äôt name our projects after artists!</h3>

<p>To quote a <a href="https://artsy.github.io/blog/2019/05/10/why-projects-need-codenames/">post</a> about how we name our
projects written by our Senior Director of Engineering, Joey:</p>

<blockquote>
  <p>Choose a code name scheme that isn‚Äôt directly related to your technology or business. A flower business using
flower names is cute, but breaks down when you want to build a feature that <em>actually</em> is about tulips.</p>
</blockquote>

<p>Most of our systems at Artsy are named after scientific concepts. Force, Eigen, Fresnel. This can seem confusing at
first, but it means there are not many opportunities for mistaking a system with its data. With a project like this
one named after an artist, discussions get confusing quickly! ‚ÄúYeah, we need to make sure we‚Äôre fetching all of the
artworks from KAWS. Sorry, not the artworks <em>by</em> KAWS, I actually meant the Warhol collection. But KAWS is the
service. Right. Anyway‚Ä¶‚Äù</p>

<h3 id="feature-flagging-a-graphql-service-with-a-schema-is-hard">Feature flagging a GraphQL service with a schema is hard</h3>

<p>Our plan for launching this change was pretty simple: introduce a new environment variable to Metaphysics and
toggle it when we wanted to QA or launch. Toggling the variable to <code class="language-plaintext highlighter-rouge">true</code> and restarting Metaphysics‚Äô Kubernetes
pods would result in a few updates to the schema (removal of all of the unused types that we got rid of) and would
cause requests for collections to be routed to Gravity instead of KAWS.</p>

<p>We figured that we would flip this variable on staging, QA, resolve any issues, and release. We wouldn‚Äôt need to
flip it off unless we had broken something big by accident; we wouldn‚Äôt be in danger of shipping these changes to
production since they would exist only in our staging environment and were not checked in to version control.</p>

<p>However, we had forgotten something crucial: Metaphysics has a post-merge step in CI that creates PRs with any
schema updates in client services like Force and Eigen, and the schema it ships to those services is <em>pulled
directly from staging Metaphysics</em>. It‚Äôs not the version of the schema that‚Äôs stored in GitHub (which we had
carefully avoided changing by not flipping the feature flag), it‚Äôs the schema that exists in the staging
environment.</p>

<p>In other words, Force (for example) received an updated <code class="language-plaintext highlighter-rouge">MarketingCollection</code> type in its schema, which didn‚Äôt
exist (and wouldn‚Äôt exist until we finished QA and decided to launch) in production Metaphysics schema. Oops.</p>

<p>This also meant we accidentally blocked deploys for a while. Services like Force have a check before they can be
deployed to production: ‚Äúdoes my copy of Metaphysics‚Äô schema have changes that are not present in production
Metaphysics? If so, that probably means deploying me would break something, so go deploy Metaphysics first.‚Äù</p>

<p>Because the flag was still set to <code class="language-plaintext highlighter-rouge">false</code> on production, the schema updates would never move past staging. We
eventually figured out the problem and flipped the flag to ‚Äúoff‚Äù, re-ran the ‚Äúupdate client schemas‚Äù job, and
deployed Force <em>without</em> the updated schema. But it made for a pretty confusing few hours, and it could have been
bad if we needed to ship an urgent bugfix. Lesson learned.</p>

<p>We ended up creating a Force review app that pointed at a Metaphysics review app with the flag set to <code class="language-plaintext highlighter-rouge">true</code> to
avoid causing more issues. This is definitely what we would do next time.</p>

<h2 id="conclusion">Conclusion</h2>

<p>Overall, we‚Äôre feeling pretty happy about how this project went. We hit a few snags along the way, but we launched
the change earlier this week and haven‚Äôt seen any noticeable bugs or problems.</p>

<p>Of course, there‚Äôs still an important question: was it worth it? What did we gain by completing this refactor?</p>

<p>The answer will mostly depend on what happens next. We‚Äôre meeting with stakeholders next week to talk about what
kind of features we can add or modifications we might want to make. But for now, we‚Äôre excited to have one less
application to maintain and to have made it easier for future Artsy engineers to understand and iterate on our
collections infrastructure.</p>
]]></content>
  </entry>
  
</feed>
