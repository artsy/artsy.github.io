<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: babel | Artsy Engineering]]></title>
  <link href="https://artsy.github.io/blog/categories/babel/atom.xml" rel="self"/>
  <link href="https://artsy.github.io/"/>
  <updated>2024-05-17T14:49:02+00:00</updated>
  <id>https://artsy.github.io/</id>
  <author>
    <name><![CDATA[]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[JavaScriptures 4.2 - Local State]]></title>
    <link href="https://artsy.github.io/blog/2018/06/15/JavaScriptures-4.2-Local-State/"/>
    <updated>2018-06-15T00:00:00+00:00</updated>
    <id>https://artsy.github.io/blog/2018/06/15/JavaScriptures-4.2-Local-State</id>
    <content type="html"><![CDATA[<p>The fifth in our JavaScriptures series on the Artsy <a href="http://artsy.github.io/blog/2017/02/05/Front-end-JavaScript-at-Artsy-2017/">omakase</a>. This talk is the second part on state
management inside JavaScript projects. In this talk <a href="https://github.com/damassi">Chris</a> and <a href="https://twitter.com/seevexes">Eve</a> cover the basics of how we handle
interacting with local state in our different applications.</p>

<p><a href="https://github.com/damassi">Chris</a> and <a href="https://twitter.com/seevexes">Eve</a> <a href="https://github.com/artsy/javascriptures/tree/master/5_intro-to-state">create three demos</a> which cover using Reacts <code class="language-plaintext highlighter-rouge">setState</code>, <a href="https://github.com/artsy/javascriptures/blob/master/5_intro-to-state/2-redux">Redux</a> and
<a href="https://github.com/jamiebuilds/unstated">Unstated</a> to make complex applications.</p>

<!-- more -->

<center>
<iframe width="100%" height="400" src="https://www.youtube.com/embed/uLeZnpvVpxA" frameborder="0" allowfullscreen=""></iframe>
</center>

<p style="text-align:right;"><a href="https://speakerdeck.com/artsyopensource/javascriptures-4-dot-2-local-state?slide=1">
Slides on Speakerdeck
</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Babel 7 + TypeScript]]></title>
    <link href="https://artsy.github.io/blog/2017/11/27/Babel-7-and-TypeScript/"/>
    <updated>2017-11-27T14:18:00+00:00</updated>
    <id>https://artsy.github.io/blog/2017/11/27/Babel-7-and-TypeScript</id>
    <content type="html"><![CDATA[<p>At Artsy we &lt;3 <a href="https://www.typescriptlang.org/">TypeScript</a>. We use it with React Native via <a href="https://github.com/artsy/emission">Emission</a> and on the web via <a href="https://github.com/artsy/reaction">Reaction</a>. Until recently, however, projects that required the use of Babel had to implement convoluted tooling pipelines in order to work with the TypeScript compiler, increasing friction in an already complex landscape. (An example of this is Emission’s use of Relay, which requires <a href="https://facebook.github.io/relay/docs/babel-plugin-relay.html#setting-up-babel-plugin-relay">babel-plugin-relay</a> to convert <code class="language-plaintext highlighter-rouge">graphql</code> literals into require calls.) Thankfully, those days <a href="https://github.com/babel/babel/tree/master/packages/babel-preset-typescript">are over</a>. Read on for an example project, as well as some advice on how to avoid common pitfalls when working with the new beta version of Babel 7.</p>

<!-- more -->

<p>Babel configurations can be complicated. They take time to set up and maintain and can often contain some pretty <a href="https://github.com/kentcdodds/babel-macros">far-out features</a> that make interop with other environments difficult. That’s why we were elated when <a href="https://github.com/babel/babylon/pull/523">this PR</a> appeared in the wild from <a href="https://github.com/andy-ms">@andy-ms</a>, a developer on the TypeScript team, announcing a new parser for Babylon. <a href="https://github.com/babel/babel/tree/master/packages/babel-preset-typescript">@babel/preset-typescript</a> arrived soon after and we felt it was finally time to give it a try. There was a catch, however: TypeScript support only works with Babel 7+!</p>

<p><strong>TLDR; <a href="https://github.com/damassi/babel-7-typescript-example" target="_blank">Check out the project on GitHub &gt;</a></strong></p>

<p>Here’s list of setup issues we faced in no specific order:</p>

<h2 id="1-new-babel-namespace">1) New @babel Namespace</h2>

<p>One of the first things Babel 7 users will notice is the package ecosystem now exists as a <a href="https://github.com/babel/babel/tree/master/packages">monorepo</a> and all NPM modules are namespaced behind the <code class="language-plaintext highlighter-rouge">@babel</code> org address. Packages that used to be installed via</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>yarn add <span class="nt">-D</span> <span class="se">\</span>
  babel-core <span class="se">\</span>
  babel-preset-react <span class="se">\</span>
  babel-preset-stage-3
  ...
</code></pre></div></div>
<p>are now installed via</p>
<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>yarn add <span class="nt">-D</span> <span class="se">\</span>
  @babel/core <span class="se">\</span>
  @babel/preset-react <span class="se">\</span>
  @babel/preset-stage-3
  ...
</code></pre></div></div>
<p>which immediately creates upgrade conflicts between libraries that use Babel 6 and Babel 7. For example, <code class="language-plaintext highlighter-rouge">babel-jest</code> internally points to <code class="language-plaintext highlighter-rouge">babel-core</code> which supports a <a href="https://github.com/facebook/jest/blob/master/packages/babel-jest/package.json#L19">version range between 6 and 7</a> – but! – <code class="language-plaintext highlighter-rouge">babel-core</code> is now <code class="language-plaintext highlighter-rouge">@babel/core</code> so this breaks.</p>

<p>This wasn’t immediately apparent at the time, and so we would often find errors like</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Error: Could not find preset <span class="s2">"@babel/env"</span> relative to directory
</code></pre></div></div>

<p>These errors appeared ambiguous because the folder structure was correct and commands like <code class="language-plaintext highlighter-rouge">yarn list @babel/preset-env</code> yielded expected results:</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>└─ @babel/preset-env@7.0.0-beta.32
✨  Done <span class="k">in </span>0.58s.
</code></pre></div></div>

<p>Why was the package not found? Digging deeper, it seemed like Babel 6 was still being used somewhere. Running <code class="language-plaintext highlighter-rouge">yarn list babel-core</code> revealed the culprit:</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>└─ babel-core@6.25.0
✨  Done <span class="k">in </span>0.58s.
</code></pre></div></div>

<p>Thankfully, <a href="https://github.com/babel/babel-bridge">babel-bridge</a> exists to “bridge” the gap, but one can see how complications can and will arise. Further, not all packages have implemented this fix and so we had to rely on <code class="language-plaintext highlighter-rouge">yarn</code>’s new <a href="https://yarnpkg.com/lang/en/docs/selective-version-resolutions/">selective dependency resolution</a> feature which overrides child dependency versions with a fixed number set directly in <code class="language-plaintext highlighter-rouge">package.json</code>:</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nl">"resolutions"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
  </span><span class="nl">"babel-core"</span><span class="p">:</span><span class="w"> </span><span class="s2">"^7.0.0-bridge.0"</span><span class="w">
</span><span class="p">}</span><span class="err">,</span><span class="w">
</span></code></pre></div></div>

<p>With this in place many of our errors disappeared and packages like <code class="language-plaintext highlighter-rouge">jest</code> now worked like a charm.</p>

<h2 id="2-missing-es2015-features">2) Missing ES2015 Features</h2>

<p>Another error we faced early on surrounded language features that worked with Babel <em>or</em> TypeScript, but not with Babel <em>and</em> TypeScript. For example, take an existing Babel project that points to <code class="language-plaintext highlighter-rouge">index.js</code> as an entrypoint, configure it to support TypeScript via Babel 7, and then run it:</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nl">"scripts"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
  </span><span class="nl">"start"</span><span class="p">:</span><span class="w"> </span><span class="s2">"babel-node index.js"</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>
<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// index.js</span>
<span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">@babel/register</span><span class="dl">'</span><span class="p">)({</span>
  <span class="na">extensions</span><span class="p">:</span> <span class="p">[</span><span class="dl">'</span><span class="s1">.js</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">.jsx</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">.ts</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">.tsx</span><span class="dl">'</span><span class="p">]</span>
<span class="p">})</span>
<span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">app/server.ts</span><span class="dl">'</span><span class="p">)</span>
</code></pre></div></div>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// app/server.ts</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">hi!</span><span class="dl">'</span><span class="p">)</span>
</code></pre></div></div>

<p>Running</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>yarn start
<span class="nv">$ </span>babel-node index.js

hi!
✨  Done <span class="k">in </span>1.88s.
</code></pre></div></div>

<p>Everything seems to be working; our <code class="language-plaintext highlighter-rouge">.js</code> entrypoint is configured to support <code class="language-plaintext highlighter-rouge">.ts</code> extensions and we kick off the boot process.</p>

<p>Let’s now try to import a file from within <code class="language-plaintext highlighter-rouge">app/server.ts</code>:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">path</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">path</span><span class="dl">'</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`Hello </span><span class="p">${</span><span class="nx">path</span><span class="p">.</span><span class="nx">resolve</span><span class="p">(</span><span class="nx">process</span><span class="p">.</span><span class="nx">cwd</span><span class="p">())}</span><span class="s2">!`</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>yarn start
<span class="nv">$ </span>yarn run v1.3.2
<span class="nv">$ </span>babel-node index.js
sites/src/index.tsx:1
<span class="o">(</span><span class="k">function</span> <span class="o">(</span>exports, require, module, __filename, __dirname<span class="o">)</span> <span class="o">{</span> import path from <span class="s1">'path'</span>
                                                              ^^^^^^

SyntaxError: Unexpected token import
</code></pre></div></div>

<p>Maybe my <code class="language-plaintext highlighter-rouge">tsconfig.json</code> file is misconfigured?</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"compilerOptions"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"module"</span><span class="p">:</span><span class="w"> </span><span class="s2">"es2015"</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p>Nope, all good. How about my <code class="language-plaintext highlighter-rouge">.babelrc</code>?</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"presets"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
    </span><span class="p">[</span><span class="s2">"@babel/env"</span><span class="p">,</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="nl">"targets"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
        </span><span class="nl">"browsers"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">"last 2 versions"</span><span class="p">]</span><span class="w">
      </span><span class="p">}</span><span class="w">
    </span><span class="p">}],</span><span class="w">
    </span><span class="s2">"@babel/stage-3"</span><span class="p">,</span><span class="w">
    </span><span class="s2">"@babel/react"</span><span class="p">,</span><span class="w">
    </span><span class="s2">"@babel/typescript"</span><span class="w">
  </span><span class="p">]</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p>We’re using <a href="https://github.com/babel/babel/tree/master/packages/babel-preset-env"><code class="language-plaintext highlighter-rouge">@babel/preset-env</code></a> which handles selecting the JS features we need, so thats not it. And anyways, doesn’t TypeScript support <code class="language-plaintext highlighter-rouge">ES2015</code> modules right out of the box?</p>

<p>Continuing, how about specifying the extension list directly in <code class="language-plaintext highlighter-rouge">package.json</code>:</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nl">"start"</span><span class="p">:</span><span class="w"> </span><span class="s2">"babel-node --extensions '.ts,.tsx' index.js"</span><span class="w">
</span></code></pre></div></div>

<p>Still no go 🙁</p>

<p>Last try: Create a new entrypoint file that uses a <code class="language-plaintext highlighter-rouge">.ts</code> extension and then use <em>that</em> to boot the rest of the app:</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nl">"start"</span><span class="p">:</span><span class="w"> </span><span class="s2">"babel-node --extensions '.ts,.tsx' index.ts"</span><span class="w">
</span></code></pre></div></div>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// index.ts</span>
<span class="k">import</span> <span class="dl">'</span><span class="s1">./app/server</span><span class="dl">'</span>
</code></pre></div></div>
<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>yarn start
<span class="nv">$ </span>yarn run v1.3.2
<span class="nv">$ </span>babel-node index.js
Hello /sites!
</code></pre></div></div>

<p>Once this change was in place, we could ditch <code class="language-plaintext highlighter-rouge">@babel/register</code> and instead rely on the <code class="language-plaintext highlighter-rouge">--extensions</code> configuration from <code class="language-plaintext highlighter-rouge">package.json</code>, just like the <a href="https://github.com/babel/babel/tree/master/packages/babel-preset-typescript">README</a> suggests (doh! 🤦).</p>

<p><strong>NOTE:</strong> If you’re using <a href="https://github.com/tleunen/babel-plugin-module-resolver"><code class="language-plaintext highlighter-rouge">babel-plugin-module-resolver</code></a> to support absolute path imports make sure to update the <code class="language-plaintext highlighter-rouge">extensions</code> <a href="https://github.com/tleunen/babel-plugin-module-resolver#options">option</a> with <code class="language-plaintext highlighter-rouge">.ts</code> and <code class="language-plaintext highlighter-rouge">.tsx</code>.</p>

<h2 id="3-type-checking">3) Type-Checking</h2>

<p>Lastly, since Babel 7 is now responsible for compiling our TypeScript files we no longer need to rely on TypeScript’s own <code class="language-plaintext highlighter-rouge">tsc</code> compiler to output JavaScript and instead just use it to type-check our code. Again, in <code class="language-plaintext highlighter-rouge">package.json</code>:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>"type-check": "tsc"
</code></pre></div></div>

<p>This reads in settings located in <code class="language-plaintext highlighter-rouge">tsconfig.json</code>:</p>
<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"compilerOptions"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"noEmit"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
    </span><span class="nl">"pretty"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
    </span><span class="err">...</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p>Notice the <code class="language-plaintext highlighter-rouge">noEmit</code> flag? That tells <code class="language-plaintext highlighter-rouge">tsc</code> not to output any JS and instead only check for correctness. The “pretty” flag gives us nicer type-checker output.</p>

<p>While this seemed to be all that was needed, running <code class="language-plaintext highlighter-rouge">yarn type-check</code> would throw an error:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ yarn type-check
yarn run v1.3.2
$ tsc

node_modules/@types/jest/index.d.ts(1053,34): error TS2304: Cannot find name 'Set'.

1053         onRunComplete?(contexts: Set&lt;Context&gt;, results: AggregatedResult): Maybe&lt;Promise&lt;void&gt;&gt;;
                                      ~~~

error Command failed with exit code 1.
</code></pre></div></div>

<p>Why is it TypeChecking my <code class="language-plaintext highlighter-rouge">node_modules</code> folder when <code class="language-plaintext highlighter-rouge">rootDirs</code> is set to <code class="language-plaintext highlighter-rouge">src</code>? It looks like we missed a TypeScript setting:</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"compilerOptions"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"skipLibCheck"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p>With that last missing piece everything now works:</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>yarn type-check <span class="nt">-w</span>
yarn run v1.3.2
<span class="nv">$ </span>tsc <span class="nt">-w</span>

src/index.tsx<span class="o">(</span>5,7<span class="o">)</span>: error TS2451: Cannot redeclare block-scoped variable <span class="s1">'test'</span><span class="nb">.</span>

5 const <span class="nb">test</span> <span class="o">=</span> <span class="o">(</span>foo: string<span class="o">)</span> <span class="o">=&gt;</span> foo
        ~~~~

src/index.tsx<span class="o">(</span>6,6<span class="o">)</span>: error TS2345: Argument of <span class="nb">type</span> <span class="s1">'2'</span> is not assignable to parameter of <span class="nb">type</span> <span class="s1">'string'</span><span class="nb">.</span>

6 <span class="nb">test</span><span class="o">(</span>2<span class="o">)</span>
       ~
</code></pre></div></div>

<p>Proper type-checking, but compilation handled by Babel 😎.</p>

<h2 id="4-typescript-and-flow">4) TypeScript and Flow</h2>

<p>Unfortunately, the TypeScript and Flow plugins for Babel cannot be loaded at the same time, as there could be ambiguity about how to parse some code.</p>

<p>This is usually ok, because the general advice is to compile your library code to vanilla JS before publishing (and thus strip type annotations), but there are packages that could still enable the Flow plugin.</p>

<p>For example, <a href="https://github.com/babel/babel/pull/6118">the React Babel preset</a> in the past would enable the Flow plugin without really needing it for its own source, but just as a default for consumers of React.</p>

<p>This issue cannot really be worked around without patching the code that loads the plugin. Ideally this patch would be sent upstream so that the issue goes away for everybody.</p>

<p>This issue can be worked around by either eliminating the dependency on the preset that loads the plugin, for instance by depending on the individual plugins directly, or if that’s not possible by patching the code. Ideally that patch should go upstream, of course, but if you need something immediate then we highly recommend <a href="https://github.com/ds300/patch-package">patch-package</a>, as can be seen used in <a href="https://github.com/artsy/emission/pull/780/files#diff-29cf179661e0495e62e9cd67dd0307dd">this example</a>.</p>

<p>There’s even projects that publish their Flow annotated code <em>without</em> compiling/stripping type annotations, the one we know of and use is <a href="https://github.com/facebook/react-native/issues/7850#issuecomment-225415645">React Native</a>. There’s no way around this other than patching the code. You may think that you could use a plugin like <a href="https://babeljs.io/docs/plugins/transform-flow-strip-types/">babel-plugin-transform-flow-strip-types</a>, but in reality that transform needs the Flow plugin to be able to do its work and thus is a no-go.</p>

<p>The way we’ve worked around that is by <a href="https://github.com/artsy/emission/pull/780/files#diff-b9cfc7f2cdf78a7f4b91a753d10865a2R36">stripping Flow type annotations from <em>all</em> dependencies</a> at <a href="https://github.com/artsy/emission/pull/780/files#diff-b9cfc7f2cdf78a7f4b91a753d10865a2R39">dependency install time</a> using the <a href="https://github.com/flowtype/flow-remove-types"><code class="language-plaintext highlighter-rouge">flow-remove-types</code> tool</a>. It can get a little slow on many files which is why we do a bunch of filtering to only process files that have <code class="language-plaintext highlighter-rouge">@flow</code> directives, the downside is that some files don’t have directives like they should and so <a href="https://github.com/artsy/emission/pull/780/files#diff-d6d30dd9bd4cdb1ac0d1268937508814R65">we patch those to add them</a> using the aforementioned <a href="https://github.com/ds300/patch-package">patch-package</a>.</p>

<h2 id="5-limitations-in-typescript-support">5) Limitations in TypeScript support</h2>

<p>It is important to note that you <em>may</em> run into a few cases that TypeScript’s Babel plugin does/can not support. From <a href="https://github.com/babel/babel/blob/master/packages/babel-plugin-transform-typescript/README.md#babelplugin-transform-typescript">the plugin’s README</a>:</p>

<blockquote>
  <p>Does not support <code class="language-plaintext highlighter-rouge">namespace</code>s or <code class="language-plaintext highlighter-rouge">const enum</code>s because those require type information to transpile.
Also does not support <code class="language-plaintext highlighter-rouge">export =</code> and <code class="language-plaintext highlighter-rouge">import =</code>, because those cannot be transpiled to ES.next.</p>
</blockquote>

<p>The lack of namespace support hasn’t been a problem for us, we’re only using it in one place which could easily be changed to use regular ES6 modules as namespace. This is also why for instance the ‘recommended’ list of TSLint checks includes <a href="https://palantir.github.io/tslint/rules/no-namespace/">the <code class="language-plaintext highlighter-rouge">no-namespace</code> rule</a>.</p>

<p>The <code class="language-plaintext highlighter-rouge">const enum</code> feature is a runtime optimization that will cause the compiler to inline code. We don’t have a need for this at the moment, but <a href="https://github.com/babel/babel/issues/6476">some discussion</a> is happening to possibly still being able to make use of this feature when compiling production builds with the TypeScript compiler instead.</p>

<p>The <code class="language-plaintext highlighter-rouge">export =</code> and <code class="language-plaintext highlighter-rouge">import =</code> syntax is meant to <a href="https://github.com/Microsoft/TypeScript-Handbook/blob/master/pages/Modules.md#export--and-import--require">work with CommonJS and AMD modules</a>; however, we strictly use ES6 modules.</p>

<p><strong>References:</strong></p>

<ul>
  <li><a href="https://github.com/damassi/babel-7-typescript-example">babel-7-typescript-example</a></li>
  <li><a href="https://github.com/babel/babel/tree/master/packages/babel-preset-typescript">babel-preset-typescript</a></li>
  <li><a href="https://github.com/artsy/emission">emission</a></li>
  <li><a href="https://github.com/artsy/reaction">reaction</a></li>
  <li><a href="https://github.com/ds300/patch-package">patch-package</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Modernizing Force]]></title>
    <link href="https://artsy.github.io/blog/2017/09/05/Modernizing-Force/"/>
    <updated>2017-09-05T00:00:00+00:00</updated>
    <id>https://artsy.github.io/blog/2017/09/05/Modernizing-Force</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/artsy/force">Force</a> is Artsy’s main website, <a href="https://www.artsy.net">artsy.net</a>. In the three years since it was <a href="http://artsy.github.io/blog/2014/09/05/we-open-sourced-our-isomorphic-javascript-website/">open-sourced</a>, it has provided a solid foundation to build features on top of without a lot of the costs associated with growth. It is an early example of Isomorphic (“universal”) JavaScript, built on top of Express, Backbone, CoffeeScript, Stylus and Jade. It is also highly modular, adopting patterns laid down by its parent project,  <a href="https://github.com/artsy/ezel">Ezel</a>.</p>

<p>When first developed these technologies made a lot of sense; CoffeeScript fixed many of the problems with JavaScript pre-ES6, and Jade / Stylus made working with HTML / CSS much more elegant. As time progressed and new technologies became a thing these solutions starting feeling more burdensome to continue building features with and many of our developers longed to start using next-generation tools like React.</p>

<!-- more -->

<p>Looking at output from <code class="language-plaintext highlighter-rouge">cloc</code>, the question is “But how?”</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">[</span><span class="nx">artsy</span><span class="o">/</span><span class="nx">force</span><span class="p">]</span> <span class="nx">$</span> <span class="nx">cloc</span> <span class="nx">desktop</span> <span class="nx">mobile</span>

<span class="o">--------------------------------------------------------</span>
<span class="nx">Language</span>                     <span class="nx">files</span>                  <span class="nx">code</span>
<span class="o">--------------------------------------------------------</span>
<span class="nx">CoffeeScript</span>                  <span class="mi">1828</span>                 <span class="mi">81569</span>
<span class="nx">CSS</span>                              <span class="mi">9</span>                 <span class="mi">76632</span>
<span class="nx">Stylus</span>                         <span class="mi">577</span>                 <span class="mi">32324</span>
<span class="nx">JavaScript</span>                     <span class="mi">274</span>                 <span class="mi">18310</span>
<span class="nx">JSON</span>                            <span class="mi">30</span>                  <span class="mi">6145</span>
<span class="nx">Markdown</span>                        <span class="mi">41</span>                  <span class="mi">1097</span>
<span class="nx">HTML</span>                             <span class="mi">3</span>                    <span class="mi">25</span>
<span class="nx">XML</span>                              <span class="mi">3</span>                    <span class="mi">24</span>
<span class="o">--------------------------------------------------------</span>
<span class="nx">SUM</span><span class="p">:</span>                          <span class="mi">2765</span>                <span class="mi">216126</span>
<span class="o">--------------------------------------------------------</span>

</code></pre></div></div>

<p>216k+ LOC, spread across multiple languages and formats. Given finite resources and a small team rebuilds can be difficult to execute, and so we had to figure out a way to marry the old with the new while also maintaining backwards compatibility / interoperability. Out of this exercise came a few patterns, libraries and projects that I would like to describe in an effort to help those caught in similar situations.</p>

<h2 id="step-1-get-your-house-aka-compiler-in-order">Step 1: Get Your House (aka Compiler) in Order</h2>

<p><a href="https://babeljs.io/">Babel</a> has been around for a while, but lately their team has been putting effort into making it as easy as possible to use. By dropping a <a href="https://github.com/artsy/force/blob/master/.babelrc">.babelrc</a> file into the root of your project, server and client-side JavaScript can share the same configuration, including <a href="https://github.com/tleunen/babel-plugin-module-resolver">module resolution</a> (aka, no more <code class="language-plaintext highlighter-rouge">../../../</code>).</p>

<p>A simplified example:</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">//</span><span class="w"> </span><span class="err">.babelrc</span><span class="w">

</span><span class="p">{</span><span class="w">
  </span><span class="nl">"presets"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">"es2015"</span><span class="p">,</span><span class="w"> </span><span class="s2">"react"</span><span class="p">,</span><span class="w"> </span><span class="s2">"stage-3"</span><span class="p">],</span><span class="w">
  </span><span class="nl">"plugins"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
    </span><span class="p">[</span><span class="s2">"module-resolver"</span><span class="p">,</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="nl">"root"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">"./"</span><span class="p">]</span><span class="w">
    </span><span class="p">}]</span><span class="w">
  </span><span class="p">]</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// index.js</span>

<span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">coffee-script/register</span><span class="dl">'</span><span class="p">)</span>
<span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">babel-core/register</span><span class="dl">'</span><span class="p">)</span>

<span class="c1">// Start the app</span>
<span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">./boot</span><span class="dl">'</span><span class="p">)</span>

</code></pre></div></div>
<p>On the client, we use <a href="http://browserify.org/">Browserify</a> with <a href="https://github.com/substack/coffeeify">Coffeeify</a> and <a href="https://github.com/babel/babelify">Babelify</a>:</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">//</span><span class="w"> </span><span class="err">package.json</span><span class="w">

</span><span class="p">{</span><span class="w">
  </span><span class="nl">"scripts"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"assets"</span><span class="p">:</span><span class="w"> </span><span class="s2">"browserify -t babelify -t coffeeify -o bundle.js"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"start"</span><span class="p">:</span><span class="w"> </span><span class="s2">"yarn assets &amp;&amp; node index.js"</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>
<p>And then boot it up:</p>
<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>yarn start
</code></pre></div></div>

<p>By adding just a few lines, our existing CoffeeScript pipeline was augmented to support modern JavaScript on both the server and the client, with code that can be shared between.</p>

<h2 id="step-2-tune-up-iteration-time">Step 2: Tune-up Iteration Time</h2>
<p><a name="iteration-time"></a></p>

<p>A question that every developer should ask of their stack is:</p>

<blockquote>
  <p>“How long does it take for me to make a change and see that change reflected in a running process?”</p>
</blockquote>

<p>Does your code take one second to compile, or ten? When writing a back-end service, does your server <a href="https://github.com/remy/nodemon">automatically restart</a> after you make a change, or do you need to <code class="language-plaintext highlighter-rouge">ctrl+c</code> (stop it) and then restart manually?</p>

<p>For those of us working in Force, the bottleneck typically involved making changes to back-end code. Due to how we organize our sub-apps, client-side code compilation – after the server heats up – is pretty much instant, but that heat-up time can often take a while depending on which app we’re working on. So even with a “restart on code change” setup that listens for updates it still felt terribly slow, and this iteration time would often discourage developers from touching certain areas of the codebase. We needed something better!</p>

<p>Enter Webpack and React, which helped popularize the concept of HMR, or “Hot Module Replacement”.</p>

<p>From the Webpack docs:</p>
<blockquote>
  <p>“Hot Module Replacement (HMR) exchanges, adds, or removes modules while an application is running, without a full reload.”</p>
</blockquote>

<p>That’s more like it! But is there anything similar for the server given we don’t use Webpack? This was the question <a href="https://github.com/alloy">@alloy</a>, one of our Engineering Leads, asked himself while researching various setups that ultimately led to <a href="https://github.com/artsy/reaction">Reaction</a>, and for which he found an answer to in Glen Mailer’s excellent <a href="https://github.com/glenjamin/ultimate-hot-reloading-example">ultimate-hot-reloading-example</a>. Digging into the code, <a href="https://github.com/glenjamin/ultimate-hot-reloading-example/blob/master/server.js#L38-L45">this little snippet</a> jumped out:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">watcher</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="dl">'</span><span class="s1">ready</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
  <span class="nx">watcher</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="dl">'</span><span class="s1">all</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">Clearing /server/ module cache from server</span><span class="dl">"</span><span class="p">);</span>
    <span class="nb">Object</span><span class="p">.</span><span class="nx">keys</span><span class="p">(</span><span class="nx">require</span><span class="p">.</span><span class="nx">cache</span><span class="p">).</span><span class="nx">forEach</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">id</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">if</span> <span class="p">(</span><span class="sr">/</span><span class="se">[\/\\]</span><span class="sr">server</span><span class="se">[\/\\]</span><span class="sr">/</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="nx">id</span><span class="p">))</span> <span class="k">delete</span> <span class="nx">require</span><span class="p">.</span><span class="nx">cache</span><span class="p">[</span><span class="nx">id</span><span class="p">];</span>
    <span class="p">});</span>
  <span class="p">});</span>
<span class="p">});</span>
</code></pre></div></div>

<p>The code seemed simple enough – on change, iterate through Node.js’s internal require cache, look for the changed module, and clear it out. When the module is <code class="language-plaintext highlighter-rouge">require</code>‘d at a later point it will be like it was required for the first time, effectively hot-swapping out the code.</p>

<p>With this knowledge we wrapped a modified version of this snippet into <a href="https://github.com/artsy/express-reloadable">@artsy/express-reloadable</a>, a small utility package meant to be used with Express.</p>

<p>Here’s a full example:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">express</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">express</span><span class="dl">'</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">createReloadable</span><span class="p">,</span> <span class="nx">isDevelopment</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">@artsy/express-reloadable</span><span class="dl">'</span>

<span class="kd">const</span> <span class="nx">app</span> <span class="o">=</span> <span class="nx">express</span><span class="p">()</span>

<span class="k">if</span> <span class="p">(</span><span class="nx">isDevelopment</span><span class="p">)</span> <span class="p">{</span>

  <span class="c1">// Pass in app and current `require` context</span>
  <span class="kd">const</span> <span class="nx">reloadAndMount</span> <span class="o">=</span> <span class="nx">createReloadable</span><span class="p">(</span><span class="nx">app</span><span class="p">,</span> <span class="nx">require</span><span class="p">)</span>

  <span class="c1">// Note that if you need to mount an app at a particular root (`/api`), pass</span>
  <span class="c1">// in `mountPoint` as an option.</span>
  <span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="dl">'</span><span class="s1">/api</span><span class="dl">'</span><span class="p">,</span> <span class="nx">reloadAndMount</span><span class="p">(</span><span class="nx">path</span><span class="p">.</span><span class="nx">resolve</span><span class="p">(</span><span class="nx">__dirname</span><span class="p">,</span> <span class="dl">'</span><span class="s1">api</span><span class="dl">'</span><span class="p">),</span> <span class="p">{</span>
    <span class="na">mountPoint</span><span class="p">:</span> <span class="dl">'</span><span class="s1">/api</span><span class="dl">'</span>
  <span class="p">}))</span>

  <span class="c1">// Otherwise, just pass in the path to the express app and everything is taken care of</span>
  <span class="nx">reloadAndMount</span><span class="p">(</span><span class="nx">path</span><span class="p">.</span><span class="nx">resolve</span><span class="p">(</span><span class="nx">__dirname</span><span class="p">,</span> <span class="dl">'</span><span class="s1">client</span><span class="dl">'</span><span class="p">))</span>
<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
  <span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="dl">'</span><span class="s1">/api</span><span class="dl">'</span><span class="p">,</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">./api</span><span class="dl">'</span><span class="p">)</span>
  <span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">./client</span><span class="dl">'</span><span class="p">)</span>
<span class="p">}</span>

<span class="nx">app</span><span class="p">.</span><span class="nx">listen</span><span class="p">(</span><span class="mi">3000</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`Listening on port 3000`</span><span class="p">)</span>
<span class="p">})</span>
</code></pre></div></div>

<p>In Force, we mounted this library <a href="https://github.com/artsy/force/blob/master/lib/setup.js#L205">at the root</a>, allowing us to make changes anywhere within our numerous sub-apps and with a fresh page reload instantly see those changes reflected without a restart. This approach also works great with API servers, as this implementation from Artsy’s <a href="https://github.com/artsy/positron/blob/master/boot.js#L34">editorial app Positron</a> shows. Like magic, it “just works”. Why isn’t this trick more widely used and known?</p>

<h2 id="step-3-the-view-layer-or-how-i-stopped-worrying-and-learned-to-love-legacy-ui">Step 3: The View Layer, or: How I Stopped Worrying and Learned to Love Legacy UI</h2>

<p>This one was a bit tricky to solve, but ultimately ended up being fairly straightforward and conceptually simple. In Force, we’ve got dozens of apps built on top of hundreds of components supported by thousands of tests stretched across desktop and mobile. From the perspective of sheer code volume these things aren’t going anywhere any time soon. On top of that, our view templates are built using Jade (now known as <a href="https://pugjs.org">Pug</a>), which supports an interesting form of inheritance known as <a href="https://pugjs.org/language/inheritance.html">blocks</a>. What this means in practice is our UI has been extended in a variety of complex ways making alternative view engines difficult on the surface to interpolate.</p>

<p>What to do? It’s 2017 and the era of handlebars templates bound to Backbone MVC views is over. We want <a href="https://facebook.github.io/react/">React</a>! We want <a href="https://www.styled-components.com/">Styled Components</a>! And when those tools are surpassed by the Next Big Thing we want that too! But we also want our existing CoffeeScript and Jade and old-school <code class="language-plaintext highlighter-rouge">Backbone.View</code>s as well.</p>

<p>Thinking through this problem, <a href="https://github.com/artsy/stitch">@artsy/stitch</a> was born.</p>

<p>Stitch helps your Template and Component dependencies peacefully co-exist. You feed it a layout and some data and out pops a string of compiled html that can be passed down to the client. “Blocks” can be added that represent portions of UI, injected by key. It aims for maximum flexibility: templating engines supported by <a href="https://github.com/tj/consolidate.js">consolidate</a> can be installed and custom rendering engines <a href="https://github.com/artsy/stitch#custom-renderers">can be swapped out or extended</a>. With very little setup it unlocks UI configurations that have been lost to time.</p>

<p>A basic example:</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;div&gt;</span>
  {{title}}
<span class="nt">&lt;/div&gt;</span>
</code></pre></div></div>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">html</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">renderLayout</span><span class="p">({</span>
  <span class="na">layout</span><span class="p">:</span> <span class="dl">'</span><span class="s1">templates/layout.handlebars</span><span class="dl">'</span><span class="p">,</span>
  <span class="na">data</span><span class="p">:</span> <span class="p">{</span>
    <span class="na">title</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Hello!</span><span class="dl">'</span>
  <span class="p">}</span>
<span class="p">})</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">html</span><span class="p">)</span>

<span class="c1">// =&gt; Outputs:</span>
<span class="cm">/*
&lt;div&gt;
  Hello!
&lt;/div&gt;
*/</span>
</code></pre></div></div>

<p>By adding “blocks” you can begin assembling (or adapting to) more complex layouts. Blocks represent either a path to a template or a component (with “component” meaning a React or <a href="https://preactjs.com">React-like</a> function / class component):</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code>// templates/layout.handlebars

<span class="nt">&lt;html&gt;</span>
  <span class="nt">&lt;head&gt;</span>
    <span class="nt">&lt;title&gt;</span>
      {{title}}
    <span class="nt">&lt;/title&gt;</span>
  <span class="nt">&lt;/head&gt;</span>
  <span class="nt">&lt;body</span>
    <span class="err">{{{</span><span class="na">body</span><span class="err">}}}</span>
  <span class="err">&lt;/</span><span class="na">body</span><span class="nt">&gt;</span>
<span class="nt">&lt;/html&gt;</span>
</code></pre></div></div>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// index.js</span>

<span class="kd">const</span> <span class="nx">html</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">renderLayout</span><span class="p">({</span>
  <span class="na">layout</span><span class="p">:</span> <span class="dl">'</span><span class="s1">templates/layout.handlebars</span><span class="dl">'</span><span class="p">,</span>
  <span class="na">data</span><span class="p">:</span> <span class="p">{</span>
    <span class="na">title</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Hello World!</span><span class="dl">'</span><span class="p">,</span>
  <span class="p">},</span>
  <span class="na">blocks</span><span class="p">:</span> <span class="p">{</span>
    <span class="na">body</span><span class="p">:</span> <span class="p">(</span><span class="nx">props</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="k">return</span> <span class="p">(</span>
        <span class="o">&lt;</span><span class="nx">h1</span><span class="o">&gt;</span>
          <span class="p">{</span><span class="nx">props</span><span class="p">.</span><span class="nx">title</span><span class="p">}</span>
        <span class="o">&lt;</span><span class="sr">/h1</span><span class="err">&gt;
</span>      <span class="p">)</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">})</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">html</span><span class="p">)</span>

<span class="c1">// =&gt; Outputs:</span>
<span class="cm">/*
&lt;html&gt;
  &lt;head&gt;
    &lt;title&gt;Hello World!&lt;/title&gt;
  &lt;/head&gt;
  &lt;body&gt;
    &lt;h1&gt;
      Hello World!
    &lt;/h1&gt;
  &lt;/body&gt;
&lt;/html&gt;
*/</span>
</code></pre></div></div>

<p>In Force, we’re using this pattern to incrementally migrate portions of our app over to React, by taking existing block-based Jade layouts and injecting <code class="language-plaintext highlighter-rouge">ReactDOM.renderToString</code> output into them, and then rendering the layout into an HTML string that is passed down from the server and rehydrated on the client, isomorphically.</p>

<p>Our existing Backbone views take advantage of the <code class="language-plaintext highlighter-rouge">templates</code> key:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// server.js</span>

<span class="k">import</span> <span class="nx">LoginApp</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">apps/login/LoginApp</span><span class="dl">'</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">Provider</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react-redux</span><span class="dl">'</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">StaticRouter</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react-router</span><span class="dl">'</span>

<span class="kd">const</span> <span class="nx">html</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">renderLayout</span><span class="p">({</span>
  <span class="na">layout</span><span class="p">:</span> <span class="dl">'</span><span class="s1">templates/layout.handlebars</span><span class="dl">'</span><span class="p">,</span>
  <span class="na">data</span><span class="p">:</span> <span class="p">{</span>
    <span class="na">title</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Login / Sign-up</span><span class="dl">'</span><span class="p">,</span>
  <span class="p">},</span>
  <span class="na">templates</span><span class="p">:</span> <span class="p">{</span>
    <span class="na">login</span><span class="p">:</span> <span class="dl">'</span><span class="s1">templates/login.jade</span><span class="dl">'</span>
  <span class="p">},</span>
  <span class="na">blocks</span><span class="p">:</span> <span class="p">{</span>
    <span class="na">app</span><span class="p">:</span> <span class="p">(</span><span class="nx">props</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">(</span>
      <span class="o">&lt;</span><span class="nx">Provider</span> <span class="nx">store</span><span class="o">=</span><span class="p">{</span><span class="nx">store</span><span class="p">}</span><span class="o">&gt;</span>
        <span class="o">&lt;</span><span class="nx">StaticRouter</span><span class="o">&gt;</span>
          <span class="o">&lt;</span><span class="nx">LoginApp</span> <span class="p">{...</span><span class="nx">props</span><span class="p">}</span> <span class="sr">/</span><span class="err">&gt;
</span>        <span class="o">&lt;</span><span class="sr">/StaticRouter</span><span class="err">&gt;
</span>      <span class="o">&lt;</span><span class="sr">/Provider</span><span class="err">&gt;
</span>    <span class="p">)</span>
  <span class="p">}</span>
<span class="p">})</span>

<span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="nx">html</span><span class="p">)</span>
</code></pre></div></div>

<p>Similar to blocks, templates located in this object are pre-compiled and available to your components as <code class="language-plaintext highlighter-rouge">props.templates</code>.</p>

<p>Once the html has been sent over the wire, we mount it like so:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// client.js</span>

<span class="k">import</span> <span class="nx">LoginApp</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">apps/login/LoginApp</span><span class="dl">'</span>

<span class="nx">React</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span>
  <span class="o">&lt;</span><span class="nx">LoginApp</span> <span class="p">{...</span><span class="nb">window</span><span class="p">.</span><span class="nx">__BOOTSTRAP__</span><span class="p">}</span> <span class="sr">/&gt; /</span><span class="o">/</span> <span class="nx">Data</span> <span class="nx">passed</span> <span class="nx">down</span> <span class="k">from</span> <span class="s2">`data`</span> <span class="nx">key</span>
<span class="p">)</span>
</code></pre></div></div>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// apps/login/LoginApp.js</span>

<span class="k">import</span> <span class="nx">React</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react</span><span class="dl">'</span>
<span class="k">import</span> <span class="nx">Login</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">apps/login/Login</span><span class="dl">'</span>

<span class="k">export</span> <span class="k">default</span> <span class="kd">function</span> <span class="nx">LoginApp</span> <span class="p">(</span><span class="nx">props</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="p">{</span>
    <span class="na">templates</span><span class="p">:</span> <span class="p">{</span>
      <span class="nx">login</span>
    <span class="p">}</span>
  <span class="p">}</span> <span class="o">=</span> <span class="nx">props</span>

  <span class="k">return</span> <span class="p">(</span>
    <span class="o">&lt;</span><span class="nx">Login</span>
      <span class="nx">template</span><span class="o">=</span><span class="p">{</span><span class="nx">login</span><span class="p">}</span>
    <span class="sr">/</span><span class="err">&gt;
</span>  <span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>

<p>During the server-side render phase existing template code will be rendered with the component, and once the component is mounted on the client <code class="language-plaintext highlighter-rouge">componentDidMount</code> will fire and the Backbone view instantiated:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// apps/login/Login.js</span>

<span class="k">import</span> <span class="nx">React</span><span class="p">,</span> <span class="p">{</span> <span class="nx">Component</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react</span><span class="dl">'</span>
<span class="k">import</span> <span class="nx">LoginBackboneView</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">apps/login/views/LoginView</span><span class="dl">'</span>

<span class="k">export</span> <span class="k">default</span> <span class="kd">class</span> <span class="nx">Login</span> <span class="kd">extends</span> <span class="nx">Component</span> <span class="p">{</span>
  <span class="nx">componentDidMount</span> <span class="p">()</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">loginView</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">LoginBackboneView</span><span class="p">()</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">loginView</span><span class="p">.</span><span class="nx">render</span><span class="p">()</span>
  <span class="p">}</span>

  <span class="nx">componentWillUnmount</span> <span class="p">()</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">loginView</span><span class="p">.</span><span class="nx">remove</span><span class="p">()</span>
  <span class="p">}</span>

  <span class="nx">render</span> <span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="p">(</span>
      <span class="o">&lt;</span><span class="nx">div</span><span class="o">&gt;</span>
        <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">dangerouslySetInnerHtml</span><span class="o">=</span><span class="p">{{</span>
          <span class="na">__html</span><span class="p">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">template</span>
        <span class="p">}}</span><span class="o">&gt;</span>
      <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>    <span class="p">)</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>All of the possibilities that Stitch provides are too numerous to go over here, but check out the <a href="https://github.com/artsy/stitch#usage">documentation</a> and <a href="https://github.com/artsy/stitch/tree/master/examples">example apps</a> for more complete usage. While new, this pattern has worked quite well for us and has allowed Force to evolve alongside existing code with very little friction.</p>

<h2 id="moving-forward">Moving Forward</h2>

<p>A common thread that connects <a href="https://github.com/artsy/force">Force</a> to <a href="https://github.com/artsy/eigen">Eigen</a> (Artsy’s mobile app) is an understanding that while grand re-writes will gladly remove technical debt, technical debt is not our issue. A lot of the patterns we’ve laid down within our apps still work for us, and many of our implementations remain sufficient to the task. What we needed was an environment where <em>incremental revolution</em> was possible, where old ideas could merge with new and evolve. In terms of Eigen, we felt the best way forward was the adoption of <a href="https://facebook.github.io/react-native/">React Native</a> – and <a href="https://github.com/artsy/emission">Emission</a> was born. Likewise, for our web and web-based mobile apps, <a href="https://github.com/artsy/reaction">Reaction</a> is serving a similar role. Both of these projects are built with <a href="https://www.typescriptlang.org/">TypeScript</a>, and both rely heavily on functionality that our <a href="http://graphql.org/">GraphQL</a> interface <a href="https://github.com/artsy/metaphysics">Metaphysics</a> provides. But crucially, these projects <em>augment</em> our existing infrastructure; they don’t replace it. They fit in with existing ideas, tools and processes that have facilitated Artsy’s growth, including highly-specific domain knowledge that our engineers have built up over time.</p>

<p>In conclusion, I hope this post has provided a bit of a window into some of our processes here at Artsy for those facing similar challenges. If you want to take a deeper dive, check out the links below:</p>

<ul>
  <li><a href="https://github.com/artsy/express-reloadable">express-reloadable</a></li>
  <li><a href="https://github.com/artsy/stitch">stitch</a></li>
  <li><a href="https://github.com/artsy/reaction">reaction</a></li>
  <li><a href="https://github.com/artsy/emission">emission</a></li>
</ul>
]]></content>
  </entry>
  
</feed>
