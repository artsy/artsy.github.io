<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Fun | Artsy Engineering]]></title>
  <link href="https://artsy.github.io/blog/categories/fun/atom.xml" rel="self"/>
  <link href="https://artsy.github.io/"/>
  <updated>2024-08-07T18:22:11+00:00</updated>
  <id>https://artsy.github.io/</id>
  <author>
    <name><![CDATA[]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[An Easter Egg for Curl]]></title>
    <link href="https://artsy.github.io/blog/2013/04/01/an-easter-egg-for-curl/"/>
    <updated>2013-04-01T12:21:00+00:00</updated>
    <id>https://artsy.github.io/blog/2013/04/01/an-easter-egg-for-curl</id>
    <content type="html"><![CDATA[<p>Let’s implement an Easter egg that requires <a href="http://curl.haxx.se/">curl</a> and is HTTP-compliant.</p>

<p>We accept access tokens on our API endpoints. These can come from an <code class="language-plaintext highlighter-rouge">access_token</code> query string parameter.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>curl https://api.artsy.net/api/v1/system/up?access_token=invalid -v

&lt; HTTP/1.1 401 Unauthorized
&lt; Content-Type: application/json
&lt; Content-Length: 24

{ "error" : "Unauthorized" }
</code></pre></div></div>

<p>So far, so good. Now try this:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>curl https://api.artsy.net/api/v1/system/up?access_token=10013 -v

&lt; HTTP/1.1 401 Broadway
&lt; Content-Type: application/json
&lt; Content-Length: 76

{ "error" : "Inspiration from the Engineering team at http://artsy.github.com" }
</code></pre></div></div>

<p>What?! <strong>401 Broadway</strong>? See, our office address is <em>401 Broadway, 10013, New York, NY</em>. We just tried to add a more developer-friendly way to find us in the New York grid. And here’s the view from our 25th floor office - that’s SOHO right below us and the Empire State Building a bit North.</p>

<p><img src="/images/2013-04-01-an-easter-egg-for-curl/artsy-office-view.jpg" /></p>

<p>Photo by <a href="https://github.com/zamiang">@zamiang</a>.</p>

<p>Easter egg implementation follows.</p>

<!-- more -->

<p>Implementing a custom HTTP response is surprisingly hard with most web servers. Changing the text that follows error codes is not something most people need. Our API will have to return a custom error code and some monkey-patching will translate the status message. We use <a href="https://github.com/intridea/grape">grape</a>, which is Rack-based and supports inserting middleware, where we do authentication. We randomly chose the number 2600 for an internal status code.</p>

<p>``` ruby api/api_action_dispatch_request.rb
class ApiActionDispatchRequest &lt; ActionDispatch::Request</p>

<p>def initialize(env)
    super(env)
  end</p>

<p>def <a href="key"></a>
    params[key] || headers[“X_#{key.to_s.upcase}”]
  end</p>

<p>end</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
``` ruby api/api_auth_middleware.rb
class ApiAuthMiddleware &lt; Grape::Middleware::Base

  def before
    if access_token == "10013"
      throw :error,
        message: 'Inspiration from the Engineering team at http://artsy.github.com',
        status: 2600
    else
      ...
    end
  end

  private

    def access_token
      @access_token ||= request[:access_token]
    end

    def request
      @request ||= ApiActionDispatchRequest.new(env)
    end

end
</code></pre></div></div>

<h3 id="webrick">WEBrick</h3>

<p>``` ruby config/initializers/broadway/webrick.rb
module WEBrick
  class HTTPResponse
    def status=(status)
      if status == 2600
        @status = 401
        @reason_phrase = “Broadway”
      else
        @status = status
        @reason_phrase = HTTPStatus::reason_phrase(status)
      end
    end
  end
end</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
### Thin

``` ruby config/initializers/broadway/thin.rb
module Thin
  class Response
    def head
      if @status == 2600
        "HTTP/1.1 401 Broadway\r\n#{headers_output}\r\n"
      else
        "HTTP/1.1 #{@status} #{HTTP_STATUS_CODES[@status.to_i]}\r\n#{headers_output}\r\n"
      end
    end
  end
end
</code></pre></div></div>

<h3 id="unicorn">Unicorn</h3>

<p><code class="language-plaintext highlighter-rouge">ruby config/initializers/broadway/unicorn.rb
require 'unicorn/http_response'
module Unicorn::HttpResponse
  CODES[2600] = '401 Broadway'
end
</code></p>

<h3 id="more-eggs">More Eggs?</h3>

<p>Check out <a href="https://api.artsy.net/humans.txt">artsy.net/humans.txt</a> for more Easter eggs and please feel free to email me at <strong>db[at]artsy[dot]net</strong> if you want to come visit or <a href="https://artsy.net/jobs">work here</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How Artsy Builds Labs, Experiments and Easter Eggs]]></title>
    <link href="https://artsy.github.io/blog/2012/09/12/how-artsy-builds-experiments-labs-and-easter-eggs/"/>
    <updated>2012-09-12T21:21:00+00:00</updated>
    <id>https://artsy.github.io/blog/2012/09/12/how-artsy-builds-experiments-labs-and-easter-eggs</id>
    <content type="html"><![CDATA[<p>At Artsy Engineering we encourage a culture of experimentation with something called <em>labs</em>.</p>

<p>A new feature released into production is usually only turned on for a handful of users. We get feedback from our own team and a tiny group of early adopters, iterate, fix bugs, toss failed experiments and work on promoting complete, well behaved features to all users. The labs infrastructure gives us a chance to sleep on an idea and polish details. It also allows us to make progress continuously and flip a switch on the very last day.</p>

<p>My favorite labs features push our collective imagination and give birth to productive brainstorms around coffee at a popular startup hangout around the corner from our Manhattan office. But the team’s favorite labs are, by far, those that ship as easter eggs. These are fun and sometimes useful features that don’t make much business sense. So, before I explain our rudimentary labs system, I want to invite you to our easter egg hunt. Check out <a href="https://artsy.net/humans.txt">https://artsy.net/humans.txt</a> for instructions.</p>

<!-- more -->

<p>Our labs infrastructure is rather straightforward. A lab feature data model is pretty boring, with the exception of a <code class="language-plaintext highlighter-rouge">created_by</code> field. Each such lab feature belongs to an engineer and you have to nurture your feature and fight for it to meet the production bar!</p>

<p>``` ruby app/models/lab_feature.rb
class LabFeature
  include Mongoid::Document
  include Mongoid::Timestamps</p>

<p>field :name
  field :created_by
end</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
You can enable and disable a lab feature for a given user.

``` ruby app/models/user.rb
class User
  references_and_referenced_in_many :lab_features

  def enable_lab_feature!(feature)
    lab_features.push(feature) unless lab_features.member?(feature)
    save!
  end

  def disable_lab_feature!(feature)
    lab_features.delete(feature)
    save!
  end

  def lab_feature_enabled?(feature)
    lab_features.member?(feature)
  end
end
</code></pre></div></div>

<p>In Ruby, we check whether the user has a lab with <code class="language-plaintext highlighter-rouge">lab_feature_enabled?</code>. In JavaScript, we return the lab features in a Backbone.js collection and check for the same.</p>

<p>``` coffeescript app/coffeescripts/models/user.coffee
class App.Models.CurrentUser extends Backbone.Model</p>

<p>hasLabFeature: (feature_name) -&gt;
    $.inArray(feature_name, @get(‘lab_features’)) &gt;= 0</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
We also have a bit of UI and an API to let you turn a lab feature on and off when you're part of our labs program. The program itself is also a lab feature!

Lab features can be retired after the code is promoted to all users or deleted.

``` ruby app/models/lab_feature.rb
class LabFeature
  def retire!
    User.all.each do |u|
      u.disable_lab_feature!(self)
    end
    destroy
  end
end
</code></pre></div></div>

<p>This “system” is super simple. I encourage you to think more in terms of experiments or labs - it helped us foster a culture of innovation, tremendously reduced risk of catastrophic failures, and, because anyone can push anything into labs at any time, removed the unnecessary discussions around whether an idea is worthy of an implementation at all.</p>
]]></content>
  </entry>
  
</feed>
