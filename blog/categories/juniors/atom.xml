<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: juniors | Artsy Engineering]]></title>
  <link href="https://artsy.github.io/blog/categories/juniors/atom.xml" rel="self"/>
  <link href="https://artsy.github.io/"/>
  <updated>2024-10-30T17:33:51+00:00</updated>
  <id>https://artsy.github.io/</id>
  <author>
    <name><![CDATA[]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Help! I'm becoming Post-Junior]]></title>
    <link href="https://artsy.github.io/blog/2016/09/10/Help!-I'm-becoming-Post-Junior/"/>
    <updated>2016-09-10T12:17:00+00:00</updated>
    <id>https://artsy.github.io/blog/2016/09/10/Help!-I'm-becoming-Post-Junior</id>
    <content type="html"><![CDATA[<p>I’ve lived in NYC for 2 years now. I’ve been around long enough that some of the people I helped when they started learning have begun to feel like they’re not “Juniors” anymore.</p>

<p>They have begun feeling confident in their code, their responsibilities at the company and wanting to improve both. It’s a feeling that maybe, just maybe, <a href="https://ashfurrow.com/blog/normalizing-struggle/">you’re not struggling to stay afloat anymore</a>.</p>

<p>This post aims to be technology-agnostic, and if you sit somewhere at 1.5 - 3 years of programming experience then you’ll probably get something out of it. On top of that,  I’ll give some pragmatic JS and iOS specific tips at the end.</p>

<!-- more -->

<p>This post is easy to start. At Artsy we have an <a href="/blog/2015/04/03/artsy-engineering-compensation-framework/">engineering ladder system</a> - which I’ll paraphrase below. It’s worth the full read though.</p>

<p>Key point:</p>

<blockquote>
  <p>Performance evaluation at Artsy is composed of the what, <em>i.e. what you achieve that contributes to your team’s goals and ultimately Artsy goals</em>, and the how, <em>i.e. how you act and how those actions contribute to Artsy’s culture and values</em>.</p>
</blockquote>

<p>We measure your career stage by your <strong>impact</strong> at Artsy, this is initially on the products you’re working on, but eventually moves out to the culture and the business:</p>

<ul>
  <li><strong>Engineer 1</strong> - Can ship a well defined product feature.</li>
  <li><strong>Engineer 2</strong> - Can independently own a product feature and can handle the communication with others around it.</li>
  <li><strong>Engineer 3</strong> - Can handle a suite of features, and broadly contribute within a domain. Can improve company culture.</li>
  <li><strong>Engineer 4</strong> - Can improve and be a multiplier on other people’s work, can anticipate larger trends and affect culture to avoid or steer in that direction.</li>
  <li><strong>Engineer 5</strong> - Defines technical culture, works on impacting all parts of our businesses and creates new opportunities for the company.</li>
</ul>

<p>What we’re talking about here is the transition from Engineer 1, to Engineer 2. Here’s our full unabridged description of an Engineer 2.</p>

<blockquote>
  <p>▪   Consistently writes and delivers correct and clean quality code with guidance.</p>
</blockquote>

<blockquote>
  <p>▪   Self-sufficient and makes steady progress on tasks.</p>
</blockquote>

<blockquote>
  <p>▪   Knows when to ask for help and how to get unblocked.</p>
</blockquote>

<blockquote>
  <p>▪   Makes steady, well-paced progress without the need for constant significant feedback from more senior engineers.</p>
</blockquote>

<blockquote>
  <p>▪   Owns a small-to-medium feature from technical design through completion.</p>
</blockquote>

<blockquote>
  <p>▪   Provides help and support outside of area under their responsibility.</p>
</blockquote>

<p>What can we gleam from this, so we start thinking of ways to improve ourselves as individual contributors?</p>

<h2 id="increasing-your-responsibility-with-cross-team-interactions">Increasing your Responsibility with Cross Team Interactions</h2>

<p>It’s very unlikely that you are making all of the calls in a product. What is hopefully happening is that your team figures out a plan to ship something in a reasonable timeframe and as a team you assign each other smaller tasks that make that work.</p>

<p>It’s very likely that as a junior, you will be given the most well-defined small tasks. In OSS we call these the “<a href="https://github.com/danger/danger/issues?q=is:issue+is:open+label:%22You+Can+Do+This%22">easy first steps</a>.” Tasks that can be done atomically, without requiring more interaction with designers or members of the product team. Initially this is a feature (in that you get easy tasks), that eventually turns into a bug (you want to contribute at a higher level).</p>

<p>When it’s time to divvy up responsibilities, you should consider speaking up about taking tasks that are blocking people, but require further investigation outside of your dev team.</p>

<p>These responsibilities could be checking up on the status of an API with a platform team, or communicating with different parts of the business to get confirmation on specific details. It is the vagueness that makes the task harder, work your way towards making the task clear - then you have a well defined project.</p>

<h2 id="learn-from-your-projects-history">Learn From Your Project’s History</h2>

<p>When you work, you’re probably working inside an application that other people have built. They have laid the frameworks down, established the team norms and architectural choices that could have existed for years before you arrived.</p>

<p>Part of what gives you that feeling of confidence in your code is you’re comfortable within the architectural ecosystem you’re used to: e.g. React + Relay, iOS MVVM, Backbone + Express, Rails + CoffeeScript. You’re probably getting good at using them, and that’s awesome.</p>

<p>To evolve from just that you need to really understand why these choices were made, what their trade-offs are and what was the reasoning for that platform to even exist in the first place.</p>

<p>By understanding the history of the choices that you have been living with, you can make better decisions in the future.</p>

<h2 id="the-bigger-picture">The Bigger Picture</h2>

<p>There is no “One True Solution” for anything in programming. You should be wary of anyone that tries to tell you all similar sounding things should be done one way. The things you work on are likely a combination of different patterns that work together to become “an app.”</p>

<p>Understanding your patterns well, and knowing when to apply them will get you far. If you want to go further still, you need to be able to step back from your patterns and try to see larger pictures. A feature that you write this week  <em>with a little bit more abstraction today</em> could make it much easier to write something next week. Writing better abstractions makes it easier for you to become a multiplier for other peoples work.</p>

<p>The hard bit is trying to see what that is. Realistically, this is about understanding where the product is, and what it’s roadmap is for the next few iterations as well as trying to think about abstractions that may not be available inside your project.</p>

<h2 id="studying-outside-your-daily-craft">Studying Outside Your Daily Craft</h2>

<p>Some problems can be handled particularly well by different architectural patterns.  Without knowing they exist, how can you think that they are something you can use?</p>

<p>This leads to an interesting problem, how do you learn new architectural pattens?</p>

<ul>
  <li>
    <p><strong>Process</strong>: You’re probably using some form of <a href="http://agilemanifesto.org">agile development</a>, understand what that <a href="https://en.wikipedia.org/wiki/Agile_software_development">really means</a> and how it compares to others. Try reading <a href="https://www.amazon.co.uk/Getting-Things-Done-Stress-free-Productivity-ebook/dp/B00SHL3V8M/ref=sr_1_1?s=digital-text&amp;ie=UTF8&amp;qid=1473567686&amp;sr=1-1&amp;keywords=gtd">Getting Things Done</a> and I’ve heard good things about <a href="https://www.amazon.co.uk/Personal-Kanban-Mapping-Work-Navigating-ebook/dp/B004R1Q642/ref=sr_1_6?s=digital-text&amp;ie=UTF8&amp;qid=1473567686&amp;sr=1-6&amp;keywords=gtd">Personal Kanban</a>.</p>
  </li>
  <li>
    <p><strong>Code Architecture</strong>: Here are some book recommendations, <a href="https://www.amazon.com/Clean-Code-Handbook-Software-Craftsmanship/dp/0132350882">Clean Code</a>, <a href="https://www.amazon.com/Pragmatic-Programmer-Journeyman-Master/dp/020161622X/ref=pd_bxgy_14_img_3?ie=UTF8&amp;psc=1&amp;refRID=BX7MTECP16Z2VR3N3T25">The Pragmatic Programmer</a>, <a href="https://www.amazon.com/Design-Patterns-Elements-Reusable-Object-Oriented/dp/0201633612">Elements of Reusable Object-Oriented Software</a> and <a href="https://www.amazon.co.uk/gp/product/B005OYHF0A/">Working Effectively with Legacy Code</a>.</p>
  </li>
  <li>
    <p><strong>Tooling</strong>: There is never one way to do something, so try something else. Switch text editor for a month, or explore alternative methods of doing the same thing.</p>
  </li>
</ul>

<p>You can use this knowledge to start offering useful advice that can start to influence your team, for example could be in the form of trying few new idea and offering feedback on their tradeoffs.</p>

<p>As this is useful to both you and your employer, you should consider talking to your manager about booking time in your work calendar for doing 30 minutes of career development once a week studying topics like these.</p>

<h2 id="helping-others">Helping others</h2>

<p>You can help your team out by using some of the skills from above.  You can then start thinking of expanding your influence within the company. By being a programmer you already have skills that a lot of people would like to learn or have a better working knowledge of it.</p>

<p>If you’ve got this far in the article, it’s very likely you’ve got enough skills to <a href="http://artsy.github.io/blog/2016/01/26/swift-at-artsy/">lead</a> <a href="http://artsy.github.io/blog/2016/08/31/Keyboard-Shortcuts-workshop/">workshops</a> internally, and write blog posts about <a href="http://artsy.github.io/blog/2015/07/06/how-to-write-unit-tests-like-a-brood-parasite/">your experiences</a> to <a href="http://artsy.github.io/blog/2015/06/04/an-eigenstate-of-mind/">help other developers</a> at your level. For example, this month I’ve ran a workshop on keyboard shortcuts and on learning to program in Swift. Both of them required maybe 2 hours of preparation, and an email or two announcing that it’s happening.</p>

<p>Other options are to give <a href="http://artsy.github.io/blog/2016/03/09/public-speaking-part1-is-it-for-me/">technical talks</a> within your company on specific topics, for example <a href="/blog/2015/12/10/License-and-You/">Licensing for OSS code</a> is a talk I gave internally to Artsy. We now have a weekly team “Lunch &amp; Learn” where we give anyone the chance to talk, or request a talk on a topic.</p>

<p>This gives a lot of space for personal growth too, as these are really easy to transition into blog posts and meetup talks.</p>

<p>Finally, try to pair with programmers outside of your direct team, it could be on whatever they’re working on - you’ll learn a bit more about other systems and they’ll get to <a href="https://en.wikipedia.org/wiki/Rubber_duck_debugging">rubber duck</a> their problems.</p>

<h2 id="side-projects">Side Projects</h2>

<p>I’ve tried to focus this post specifically on things you can do on work time. Not everyone has the ability to go home and spend a few hours on this and that. However, programming at the early stage can generally be a “you get out what you put in” kind of deal with time.</p>

<p>Side projects give you the chance to test out new ideas in an isolated environment that is totally under your control. They are great places for exploring what makes a system tick. Some side-projects are built to be <a href="https://github.com/orta/you-can-do-it">thrown away</a> others can <a href="https://cocoapods.org">to last</a> <a href="http://danger.systems">for years</a>. Both are valuable spaces for experimentation.</p>

<h2 id="contributing-to-open-source">Contributing to Open Source</h2>

<p>A lot of people’s work relies on Open Source code and as you are starting to branch out into having a larger impact - perhaps making smaller improvements to the projects you rely on every day could help. This is <a href="https://speakerdeck.com/orta/the-cocoapods-spec-repo-and-cocoadocs">how I got started</a> working with larger projects in the Open Source world.</p>

<p>Interacting in these projects exposes you to whole new teams of people with, hopefully, very different perspectives. It will change you, you will change them.</p>

<h2 id="moving-on">Moving On</h2>

<p>This is a <a href="https://github.com/artsy/artsy.github.io/pull/275#issuecomment-246227904">complicated topic</a>, perhaps worth of it’s own post.</p>

<p>When you first start looking for a job in technology, you likely didn’t have too many choices and was pleased to have any offer. By this point, I’m hoping you’re at a point where you understand your value to a company.</p>

<p>Perhaps it’s worth thinking about what kind of space the company has for you to grow in. Since I started my career, Artsy is the only job I’ve been in for longer than 2 years. For some, I felt like I had outgrown my original role but could not find a space to grow into.</p>

<p>It’s worth re-evaluating. I do it every year in anticipation of my <a href="http://orta.io/on/being/29">annual write-ups</a>.</p>

<h2 id="wrap-up">Wrap-up</h2>

<p>This is no simple “one-step to consider yourself post-Junior” article. Only a collection of ideas that you can apply until you feel confident as you find you own ways to help out. As you grow, you grow in many different directions at once - and all of them are valid.</p>

<p>You can grow by research, practice, doing things outside of work, doing small projects with others in work, experimentation with technology, interacting with more and more people and re-thinking existing approaches. Once you’re outside of small feature work - there are so many ways you can contribute.</p>

<p>We use the idea of an engineering ladder as a yardstick to ensure we treat developers fairly at Artsy. Different companies will have different ways of scoping how you measure up as a programmer. Your company’s ladder can help offer direction for what they would love to see.</p>

<p>At the end of the day you’ve got your foundations now, and its time to start thinking about building yourself into a unique programmer and creating your own opinions. There’s never been a better time to start.</p>

<h2 id="further-reading">Further Reading</h2>

<ul>
  <li><a href="http://blog.alexnaraghi.com/what-i-didnt-understand-as-a-junior-programmer">What I Didn’t Understand as a Junior Programmer</a></li>
  <li><a href="http://dbgrandi.github.io/growing_beyond_junior/">Growing Beyond Junior</a></li>
</ul>

<h2 id="ios-specific">iOS Specific</h2>

<ul>
  <li>Study <a href="/blog/2016/06/19/graphql-for-mobile/">GraphQL</a>, study my entire series on <a href="/series/cocoa-architecture/">Cocoa Architecture</a> and our <a href="/series/ios-code-review/">app code reviews</a>.</li>
  <li>Study MVC, MVVM, RxSwift, VIPER, Testing, BDD, CocoaPods &amp; Swift Package Manager with an hour on each minimum.</li>
  <li>Read <a href="https://www.objc.io">objc.io</a>, watch their videos too.</li>
  <li>Study other languages, and toolsets - it’s very easy to become silo’d in just Objective-C and Swift.</li>
</ul>

<h2 id="js-specific">JS Specific</h2>

<ul>
  <li>Study ES6, GraphQL, React, Relay, Redux, Angular 2, Flow, TypeScript, Carte Blanche, Webpack &amp; Babel.</li>
  <li>Get a company account on <a href="https://egghead.io">Egghead</a> - give yourself a timetable on work time to spend 30+ minutes once a week watching videos from it.</li>
  <li>Explore VS Code, Safari Web Inspector and Web Storm as different ways of doing the same thing, but with more tooling.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Interviewing, applying and getting your first job in iOS]]></title>
    <link href="https://artsy.github.io/blog/2016/01/30/iOS-Junior-Interviews/"/>
    <updated>2016-01-30T11:09:00+00:00</updated>
    <id>https://artsy.github.io/blog/2016/01/30/iOS-Junior-Interviews</id>
    <content type="html"><![CDATA[<p>When I was at the beginning of my career, my first developer job application was to a design agency who were doing
Mac development too. It was pretty nerve-wracking to apply for my first programming job, and I came into the
interview with no idea what to expect. I had just graduated from university and was at the first few steps of my
career, I’d call this being a junior. It was a time period where I would need mentoring, and supervision in order to
grow. A good explanation is in <a href="http://programmers.stackexchange.com/questions/14914/whats-the-difference-between-entry-level-jr-sr-developers">this StackOverflow</a>.</p>

<p>Now that I’m both further on in my career, and involved with so many juniors in NYC, I’m meeting with a lot of
people who are in the same position I was then and I get a lot of questions asking what they can do to prepare. This
post <em>attempts</em> at being a comprehensive collection of recommendations. It is subjective, of course, and strongly
biased towards my experiences.</p>

<p>Before I jump through to the article, there’s one thing that should be above the fold. <em>Chill out</em>. You might not
get it right on the first try, I’ve applied for jobs and received a “no thanks.” Yet eventually I became the head of
mobile at Artsy. Everyone finds their place in time.</p>

<!-- more -->

<h3 id="on-your-readiness">On Your Readiness</h3>

<p>No-one starting out is ever ready, and an individual is <a href="https://ashfurrow.com/blog/you-never-arrive/">never really “done”</a>. However, in this <a href="http://dbgrandi.github.io/minimum_viable_programmer/">post
@dbgrandi</a> neatly sums up the lower bar to entry.</p>

<blockquote>
  <p>I had a long list of specific things relating to Xcode and iOS. They were very tedious things like, “you should
know how to add a new file to an Xcode project.” I’ve shortened that list to a general description here.</p>
</blockquote>

<blockquote>
  <p>I expect you to be able to start a new project, write some code to download a bit of JSON via HTTP, and use the
parsed JSON to present some data in a UITableView.</p>
</blockquote>

<blockquote>
  <p>If you can do that, in a well organised manner, and can discuss the choices you made to get your app built you’ll
have been able to do almost everything that was on that long and tedious list.</p>
</blockquote>

<p>This is a great starting point. In an ideal world, an interviewer isn’t going to judge you on not knowing every
detail about the whole system. They will have expectations that you’re going to have to learn on the job for a lot
of things, and that’s ok.</p>

<h3 id="on-the-lookout">On the lookout</h3>

<p>There are a bunch of websites for putting up job adverts.</p>

<ul>
  <li><a href="http://stackoverflow.com/jobs">StackOverflow jobs</a></li>
  <li><a href="https://www.natashatherobot.com/swift-jobs/">Natasha The Robot’s Swift Jobs</a></li>
  <li><a href="http://jobs.coreint.org">Core Intuition’s Jobs Board</a></li>
  <li><a href="https://www.apple.com/jobs/us/">Apple’s Jobs Site</a></li>
  <li><a href="https://twitter.com/xcodejobs">@xcodejobs</a></li>
</ul>

<p>These kind of things work, I got my first programming job through <a href="http://www.cocoabuilder.com/archive/cocoa/174142-ann-cocoadev-jobs-board.html">CocoaDev Jobs</a>.</p>

<p>These are great, but in my opinion the best way to find out what companies are hiring is to attend meet-ups in the
city. In NYC we have 3-4 big iOS meet-ups a month, and all of them give a chance for people looking for others to
work to speak up. You might not live in as big of a city, but I used to travel an hour to Manchester to attend a
meet-up, they would have the same thing, I almost became a full-time rubyist because of it. I have quite a few
friends in NYC who started their careers by talking to someone at a meet-up.</p>

<p>Generic job websites can be good, for example Artsy’s job postings are on <a href="https://angel.co/artsy">AngelList</a> and <a href="https://www.glassdoor.co.uk/Job/Artsy-Jobs-E793485.htm">Glassdoor</a> but
the vast majority of applications feel like they were sent to a lot of companies. They are given a low priority when
compared to direct inquiries because of this. I can’t speak from experience but <a href="https://www.theladders.com">Ladders</a>, <a href="https://www.linkedin.com">LinkedIn</a>,
<a href="http://hired.com">Hired</a> and <a href="https://weworkremotely.com">weworkremotely</a> are probably worth a look too.</p>

<p>Finally, search the websites of companies you like for careers or jobs pages.</p>

<p>If you see an advert for a mobile developer, but they don’t mention juniors, you should apply anyway. We’ve never
had junior positions on our jobs pages, but have hired some who inquired anyway. Don’t pretend to be more senior
than you are though, set the right expectations and write about your connect to the company.</p>

<p>Finally, consult your network, talk to people at meet ups, sneakily contribute to open source projects with people
you want to talk to and then email the project owner after they’ve got to know your name.</p>

<h3 id="on-a-coffee">On a Coffee</h3>

<p>Know what goes a long way? Talking with someone before applying. I regularly get coffee with applicants or potential
applicants when I’m in NYC. Coffee can be hard when applying for junior roles when remote, but so far, I think only
purely remote companies would support junior as a remote developer. I’m not sure it could work unless the entire
team was remote, or the junior developer had a lot of experience and was only a junior in the sense that they were
just hitting the work-force.</p>

<p>These are 15-30 minute informal chats, but from an employers perspective they are definitely a good way to filter
candidates. A coffee is time-cheap, interviews are time-expensive. So ask someone on the dev team to do them, you’ll
usually get a yes. Tamar Nachmany has some <a href="https://booleancubes.tumblr.com/post/137057622039/the-networking-with-awesome-strangers-checklist">great, salient points</a> on the right way to pitch these emails.</p>

<p>It’s definitely worth doing your homework on both the person doing coffee, and the company they work for. A coffee
could turn into an interview.</p>

<h5 id="but-i-dont-live-in-a-major-metropolis">But I don’t live in a major metropolis</h5>

<p>So meet-ups aren’t going to work for you. I lived for most of my life (~25 years) about 2 hours train ride from
Manchester. I love the little town, but there’s very little meet-up scene or tech scene at all. Our meet-ups were
people all starting together, and without a general core set of experienced people providing some consistency.</p>

<p>Personally, I wouldn’t hire a junior who was remote. I don’t think that relationship would work out well for
mentor/mentoree. You’d need the entire company to be remote for that to work, and it’s too much to ask for someone
to be both learning everything on the job and to also have to play catch-up with company culture.</p>

<p>So then what are the options? When I was looking I took a local white-pages/local ads and applied to all of the
companies in my local area who were doing what I was interested in. I ended up working somewhere close enough to
walk to work.</p>

<p>The other option is to move to a big city with existing infrastructure. This can obviously be hard, but being
surrounded with people doing similar things is difficult to put a price on. I never wanted to move to a big city,
but once I did, it boosted my abilities to get things done considerably. Constant access to people and ideas change
you. <a href="http://www.gizmag.com/go/7613/">Most people</a> now live in cities.</p>

<p>Finally, one of the best ways to distinguish yourself if you’re going to aim for remote is in Open Source
contributions. The process of contributing to Open Source is very similar to working as a remote developer. They
both require self-motivation, clearness in your messaging and dealing with asynchronicity well.</p>

<h3 id="on-an-intro-email">On an Intro Email</h3>

<p>Look at the language in the jobs page, and have your email / intro letter reflect that. When I receive very formal
“dear hiring manager” emails it reflects badly on the applicant, <a href="https://www.artsy.net/article/artsy-jobs-mobile-engineer">our jobs page</a> states to not worry about that,
as we’re not that kind of culture.</p>

<p>An intro email is your chance to show that you understand the core value of a company. For example when I receive
applications that only talk about our contributions to OSS then I wonder if they’ve even studied what Artsy is, and
how OSS by Default is derived from deeper values as opposed to being an end-goal in itself. If you apply to Facebook
and the only thing you mention is <a href="http://facebook.github.io/react-native/">React Native</a> I think you’d also be missing the point of Facebook. A great
opener to Facebook might talk about how amazing it is that they can work on a product that pretty much everyone they
meet uses, and you think it’s amazing that there is now 1 billion active users a day. It shows you understand the
scope of their problems, and have done your homework.</p>

<p>Let’s look at Ash’s intro email:</p>

<blockquote>
  <p>My name is Ash Furrow and I’m writing in regards to your mobile engineering position. I heard about the position
first through Orta Therox, who spoke highly of Artsy.</p>
</blockquote>

<blockquote>
  <p>Upon further reading, Artsy sounded exactly like the kind of place I want to work. An ambitious goal, to change
the world, with a thorough mix of math, software engineering, and art. I consider myself to be an artist, both
when I code and when I am behind the lens of a camera (I like to develop my own film). I love working with
companies who understand the important role of art in our society, as I did with 500px.</p>
</blockquote>

<p><em>10/10.</em> Extremely on topic.</p>

<p>Next, you’re going to want to now talk about great of a fit you would be, how well you understand the domain and how
you’ve been doing similar work already.</p>

<blockquote>
  <p>I love how you’ve contributed back to the open source community. I am a strong believer in the power of open
source, especially in the iOS community, where there has historically been a resistance to opening software.
Sponsoring CocoaPods is a fantastic contribution toward the iOS community and I thank you for it. I’ve contributed
back to several projects on GitHub, have written for the Teehan+Lax blog professionally, and have a selection of
the apps I’ve written on my portfolio.</p>
</blockquote>

<p>I know what you’re thinking: “Ash wasn’t a junior when he applied”, well, chances are you’ve still got a history of
things that can be applied towards an email like this. Also, flattery can get you everywhere. “I’ve been using your
app for years, I love how it does ‘x’ - have you thought of doing ‘y’?”</p>

<p>Sarah’s was similar:</p>

<blockquote>
  <p>First, I’d just like to say I love Artsy and have been following your company since I learned of its existence two
years ago. Making art accessible to the world is a problem the architects of the Internet should undoubtedly be
solving and Artsy is doing so with elegance.</p>
</blockquote>

<p><em>10/10</em> ✔</p>

<blockquote>
  <p>I’m currently transitioning from embedded systems to iOS development and looking for a place where I can learn a
lot while making significant contributions to a product. As for my background, I just graduated from NYU with a
B.S. in Electrical Engineering and completed a seven-month-long research and development internship at Canary (a
home security hardware startup). While I do enjoy building hardware, I find software engineering generally more
fun and in tune with my intellectual and creative preferences.</p>
</blockquote>

<p>Dead on. Later on in the email, she references <a href="https://en.wikipedia.org/wiki/Rosalind_E._Krauss">art critics</a> while discussing <a href="https://en.wikipedia.org/wiki/Enumeration">programming concepts</a>. A
great introduction email.</p>

<h3 id="on-a-portfolio">On a Portfolio</h3>

<p><em>on wording</em>: I use the word portfolio, to encapsulate a CV/Resume/Design Portfolio. They all have <a href="http://www.diffen.com/difference/Curriculum_Vitae_vs_R%C3%A9sum%C3%A9">specific
meanings</a>, but in this case, I mean something you attach to the email to provide the full context of your
history/experiences.</p>

<p>There are a lot of places for good, solid advice on the document you are using to persuade someone to interview you.
So I’ll tell you what has worked for me. I think it should be a one page document, that captures a snapshot of you.
Things they must have: your name, a way to contact you and a list of things you think is relevant.</p>

<p>You should consider what you think are qualities that you bring to the table, for some job applications I have
submitted both a resume and a design portfolio. If you are particularly proud of your design work, perhaps find a
way to include your app store screenshots and branding, or make your portfolio distinctive via design.</p>

<p>Finally, consider that this is a document someone else will have to read. A dense document full of long descriptions
and wordy titles is tough to read. Spend some time on making it as readable and easily digestible as possible.</p>

<h5 id="on-representing-myself">On Representing Myself</h5>

<p>I dug through my archives and found every resume I have ever created; ranging from my first as a student, through to
last year.</p>

<ul>
  <li><a href="/images/2016-01-30-iOS-Junior-Interviews/2007-144.jpg">2007</a> as a part of the WWDC Student Scholarship. It was significantly less competitive then.</li>
  <li><a href="/images/2016-01-30-iOS-Junior-Interviews/2008-general-144.jpg">2008</a> as a graduate applying for jobs that were not programming focused.</li>
  <li><a href="/images/2016-01-30-iOS-Junior-Interviews/2008-programming-144.jpg">2008</a> as a graduate applying for programming jobs.</li>
  <li><a href="/images/2016-01-30-iOS-Junior-Interviews/2010-144.jpg">2010</a> when applying for jobs once I had stopped being a junior.</li>
  <li><a href="/images/2016-01-30-iOS-Junior-Interviews/2015-144.jpg">2015</a> my CV as a part of my U.S. VISA process.</li>
</ul>

<table>
  <thead>
  </thead>
  <tbody>
    <tr>
      <td>
            <a href="/images/2016-01-30-iOS-Junior-Interviews/2007-144.jpg">
                <img height="200" src="/images/2016-01-30-iOS-Junior-Interviews/2007-thumb.jpg" />
            </a>
        </td>
      <td>
            <a href="/images/2016-01-30-iOS-Junior-Interviews/2008-general-144.jpg">
                <img height="200" src="/images/2016-01-30-iOS-Junior-Interviews/2008-general-thumb.jpg" />
            </a>
        </td>
         <td>
            <a href="/images/2016-01-30-iOS-Junior-Interviews/2008-programming-144.jpg">
                <img height="200" src="/images/2016-01-30-iOS-Junior-Interviews/2008-programming-thumb.jpg" />
            </a>
        </td>
      <td>
            <a href="/images/2016-01-30-iOS-Junior-Interviews/2010-144.jpg">
                <img height="200" src="/images/2016-01-30-iOS-Junior-Interviews/2010-thumb.jpg" />
            </a>
        </td>
      <td>
            <a href="/images/2016-01-30-iOS-Junior-Interviews/2015-144.jpg">
                <img height="200" src="/images/2016-01-30-iOS-Junior-Interviews/2015-thumb.jpg" />
            </a>
        </td>
    </tr>
  </tbody>
</table>

<p>You can definitely get a sense of my skill specialisations happening over the last 8 years, but the tone of how I
present myself hasn’t really changed.</p>

<p>I also consider my personal web-page <a href="http://orta.io">orta.io</a> to act as a portfolio, Ash Furrow’s portfolio page has a <a href="https://ashfurrow.com/portfolio/">similar
vibe</a>.</p>

<h5 id="on-the-team">On the team</h5>

<p>Want to know what the resumes looked like for people applying to Artsy? I asked some of our team to send me their
last resumes</p>

<table>
  <thead>
  </thead>
  <tbody>
    <tr>
      <td>
            <a href="/images/2016-01-30-iOS-Junior-Interviews/ash-furrow-resume.pdf">
                <img height="200" src="/images/2016-01-30-iOS-Junior-Interviews/ash-thumbnail.jpg" />&lt;/br&gt;
                Ash Furrow (2013)
            </a>
        </td>
      <td>
            <a href="/images/2016-01-30-iOS-Junior-Interviews/sarah-scott-resume.pdf">
            <img height="200" src="/images/2016-01-30-iOS-Junior-Interviews/sarah-scott-resume.jpg" /><br />
            Sarah Scott (2014)
            </a>
        </td>
      <td>
            <a href="https://ortastuff.s3.amazonaws.com/artsy/maximcramer_artsy_portfolio.pdf">
                <img height="200" src="/images/2016-01-30-iOS-Junior-Interviews/maximcramer_artsy_portfolio_thumb.jpg" />&lt;/br&gt;
                Maxim Cramer (2015)
            </a>
        </td>
    </tr>
  </tbody>
</table>

<p> </p>

<p>A portfolio can be whatever you want it to be. You could spend forever on a portfolio, but it’s really just an
exercise in restraint and prioritisation. Eventually it’s been shaved to a point where you can remove nothing more.</p>

<p><em>More infö that I’ve reviewed and given a 👍:</em></p>

<ul>
  <li><a href="http://www.raywenderlich.com/54029/ios-developer-resume-examples">iOS Developer Resume Examples</a> - Somehow I ended up sneaking on this article too.</li>
  <li><a href="https://tinyurl.com/ybewrybb">8 Minute Guide to Writing a Resume</a> - Marc has a lot of experience in this space, plus his advice is
definitely better if you’re focusing on larger companies.</li>
</ul>

<h3 id="on-the-one">On The One</h3>

<p>So you know exactly who you are interested in applying to. One of your passions in life is to make music, and you
think being a engineer at Spotify would be a dream job. How do you increase your chances?</p>

<p>First up, you should have some experience before you apply. Apply at one or two other companies that you’d also
really like to work for first, test out the water. Then for Spotify, you should make sure everything is perfect for
them. Write a new CV and mention your band on it, include links to your music in the bottom. Consider Maxim’s
portfolio above, this was obviously made specifically for an audience of Arts/Tech people, Sarah’s also talks about
activism and art projects. These are well-tuned portfolios for an audience of Artsy.</p>

<p>A lot of companies have public employee get-togethers, for example at Artsy we have weekly Happy Hour in the office,
or <a href="https://artsy.github.io/blog/2015/08/10/peer-lab/">Peer Labs</a> where you can meet a lot of the people working at a company. This is a great way to mine the
employees for information about the culture and to try and peek behind the curtain. In the case of Spotify, they
host a lot of meet-ups, try attending some at their offices.</p>

<h3 id="on-interview-preparation">On Interview Preparation</h3>

<p>So you’ve got an interview, be gracious in setting up a time, it’s normal for a bit of back and forth, the company
probably has to find a time for a lot of people.</p>

<p>There’s a lot of value in a collection of interview questions though, one that IMO is a solid resource is
<a href="https://github.com/CameronBanga/iOS-Developer-and-Designer-Interview-Questions">CameronBanga/iOS-Developer-and-Designer-Interview-Questions</a> on GitHub. You could get asked a few of these.</p>

<p>Be cautious with links on the internet here, some of the <a href="http://www.raywenderlich.com/53962/ios-interview-questions">top</a> <a href="http://www.geekinterview.com/Interview-Questions/iOS">links</a> <a href="http://way2ios.com/development/ios-development-2/ios-interview-questions-with-answers/">to</a> <a href="http://www.toptal.com/ios/interview-questions">search</a> here are
probably not great for people starting. They aim at a different audience, or focus on minutiae that juniors probably
don’t know. If you want to help out there, and you’re linking to this blog post on a website link it with the name
include “iOS interview” in the text of the <a href="http://answers.google.com/answers/threadview/id/141243.html">link</a>.</p>

<p>One book that is considered the go-to for interview preparation is <a href="http://www.crackingthecodinginterview.com">Cracking the Coding Interview</a>, it’s
considered a great guide to some of the computer-science-y questions you could get asked.</p>

<h5 id="i-didnt-study-computer-science">I didn’t study Computer Science</h5>

<p>Then I’d definitely recommend Cracking the Coding Interview. I don’t think this is a blocker <em>at all</em> - we have a
lot of engineers on staff who do not have a computer science degree. In our line of work, having experience of the
art world can be more useful in a lot of cases. It’s very likely that you’ll feel a hint of <a href="http://geekfeminism.wikia.com/wiki/Impostor_syndrome">impostor
syndrome</a> - <a href="https://medium.com/@aliciatweet/overcoming-impostor-syndrome-bdae04e46ec5#.ilrvfqjow">you shouldn’t</a> - the tech industry should be (and is) begging for people who can bring
interesting new contexts.</p>

<p>During the process of setting up your interviews, you should ask what to expect from the interviews. If they are
going to be whiteboards + algorithms like they do at Google/Facebook, then I think you’re gonna have to hit the
books.</p>

<h5 id="on-mocks">On Mocks</h5>

<p>If you can do Mock Interviews you should. You need an existing network in order to pull that off, but you can get
real feedback that can be extremely helpful. As an employer you have to be very cautious in the way you word a
rejection, in a mock interview you don’t. This isn’t a one-sided process, the interviewer can use the chance to try
out a different technique or to improve their interviewing skills.</p>

<p>If you don’t know anyone who can do this for you, I’d feel like there are two options: <a href="http://www.careercup.com/interview">buy a mock interview</a>
and befriend someone who says they’re looking for someone at a meet-up - they must be interviewing so they might
want a practice run too. I’ve given about as many mock interviews as I have done real interviews in the last 2
years.</p>

<p><em>More info that I’ve reviewed and given a 👍:</em></p>

<ul>
  <li><a href="http://macoscope.com/blog/so-you-have-a-technical-interview-at-macoscope/">So You Have a Technical Interview at Macoscope</a> - Again, probably a bit more than expected of a junior, but a
great summary of how they do it</li>
  <li><a href="http://www.google.com/about/careers/lifeatgoogle/hiringprocess/">How we hire</a> - How Google’s hiring process works.</li>
</ul>

<h3 id="on-ios-interviews">On iOS Interviews</h3>

<p>To be at this point, a employer has already decided to invest probably something like 10 hours into you. This is
spread across a few people but the point is important. To have got here, someone has to be on your side. They will
have had to put in work to even get people to agree to schedule you into their day. Your mindset should reflect
this, it’s not you vs them. It’s you and someone. Your job from here is persuading everyone else that gut feeling
from that person is correct.</p>

<p>There is no catch-all solid advice for interviews, but I can give you some of the things we talk about in Artsy.</p>

<p>We look for <a href="https://en.wikipedia.org/wiki/T-shaped_skills">T shaped</a> engineers, even in juniors. This means someone who has experience in a pretty wide net of
things, but that they have a solid focus. This could be building their APIs for apps, writing their own blog,
designing their website, automating some regular tasks or using technology for art.</p>

<p>As a junior, the employer is looking for growth potential. Looking for people who, in the right environment could
really thrive. However it’s important to note, an interview only lets you know how well someone interviews. The
greatest programmers can choke on interviews.</p>

<p>You should come in with a few ideas about questions you’d like to ask of the company, as interviews work both ways.
Think of some specific to the space the company works, and this is a <a href="https://tinyurl.com/yatxqtgt">great list of general questions</a> to work
from. You could consider them icebreakers, or they can be used to finish up an interview. The most memorable
question asked to me was “Where would I work if I wasn’t at Artsy?” which threw me off completely, but probably told
the interviewer a lot about the culture at Artsy.</p>

<h5 id="how-i-interview-juniors">How I interview Juniors</h5>

<p>One thing I can tell you concretely though, is what I do. My interviews with juniors come in three parts:</p>

<ul>
  <li>
    <p>A Chat</p>

    <p>I want to get someone comfortable with the interview, I’ll have taken points from looking over the portfolio to
explore. It will be a pretty one-sided conversation with me only trying to provide points to spring off. “So tell
me about when you did x”.</p>
  </li>
  <li>
    <p>Pair Programming</p>

    <p>I want to get a sense of how you use a computer and act under mentorship. So I do one of two things, depending on
how work has been the last week. If there’s been a pull request which seem small and contained enough from our
team on one of our apps, I will pair on re-creating the pull request from scratch, without letting it be known
that the PR had already been built and accepted. If there isn’t, we’ll take a pre-built broken app and fix it.</p>

    <p>I want to see things like; do you use Xcode shortcuts? Can you explain the code you’re looking at? If I offer some
advice, do you use it? Can you present ideas when we’re figuring out an abstraction? Can you identify where
problematic behaviour lies?</p>
  </li>
  <li>
    <p>Learn you a thing</p>

    <p>Alright, so I’ve been building up the applicant’s confidence and now it’s time to bring that all down. Sorry. I
have been paying attention to finding out what the applicant doesn’t know. Then I start asking questions about
this. It doesn’t really matter what the topic is, it could be threading, view controller lifecycle, code coupling,
dynamic vs static dispatch, whatever. The point is that I want to understand how someone learns during a
discussion. So the conversation tends to switch around, where-in I lead a conversation on the topic - try to lay
foundations then experiment with questions that should require an understanding of the topic.</p>
  </li>
</ul>

<p>Here’s <a href="https://medium.com/@jon.lazar/my-approach-to-learning-ios-fccf943aead#.ei4yvc38k">a long writeup</a>, with a lot of depth (and places to jump off from) from someone who has just come out of
a mock interview with me. Thanks Jon.</p>

<p>None of this process aims to be adversarial, if someone has got this far, I really want to have a sense of how much
time and attention will be required to give them some independence. I think a lot of interviewing techniques are
created organically, so it’s hard to provide a lot of context.</p>

<h3 id="on-references">On References</h3>

<p>References are important to everyone. When you’re trying to get a sense of what someone’s like on the long-term,
asking their friends is a great idea. Colleagues tend to be the next best thing. We tend to ask for someone you
reported to, someone who was a colleague and if you had reports one of them.</p>

<p>Artsy puts a lot of priority on references, Check out <a href="https://www.zamiang.com/posts/post/2015/07/05/learning-from-artsy-how-to-hire-awesome-engineers/">Brennan Moore’s article</a> on this, a lot of the behind the
scenes emails afterwards uses quotes taken from references as examples of why someone should be hired. I don’t think
this will be unique to Artsy. References should be your cheerleaders. In an ideal world you should be looking for
references like the ones we got for Maxim:</p>

<blockquote>
  <p>However, if I had to fire people gradually, I’d fire her last. her skill-set is so valuable, and so scarce that
it’s super valuable. I’d fire me before her.</p>
</blockquote>

<p>and</p>

<blockquote>
  <p>She was the glue that held the team together - could talk at a different level to each contributor. Great
intuition, could put in a room with anyone and they could understand how to get their bits done.</p>
</blockquote>

<p>I respect that no-one is in control of other people, so yes, references are a bit of a wild card from a junior’s
perspective. However, hopefully you’ve had a collection of positive interactions with people who can talk about
that. It’s not about your programming prowess at this point, it’s about how you work with others and character
reference. Consider listing professors, advisers or supervisors from other jobs.</p>

<h3 id="about-that-thanks">About that thanks</h3>

<p>Sending an email to say thanks for your interview seems to be the ettiquette in the US. I don’t recall doing it for
my interviews, and not every person I’ve interviewed at Artsy has done it. When I brought up the concept recently,
people mostly felt like another chore in the process. So, I’d recommend doing it - but do it with a purpose. Provide
a link to something you talked about during the interview and make it feel like an email with a reason to exist.</p>

<h3 id="on-the-aftermath">On the Aftermath</h3>

<p>So, interviews are over. What is happening behind the scenes? After your interviews are done, there will be a flurry
of behind the scenes emails. From my experience at Artsy, it probably takes a few days to get enough of a consensus
around a yay/nay. Someone should be keeping the applicant up to date, even if it’s a matter of “not yet, but we’re
talking.”</p>

<p>This bit is hard, because you’re in limbo, and it can take a while. I think with Sarah this took about a week and a
half, from her final interviews to being able to send her an offer. Which I’m sure for her weren’t great, she could
be so close to an offer - or weeks wasted on moving towards another. Sending “How’s it going?” emails is totally
fine if you’ve not heard back in a week. It’s not cool for a company to not get back to you if you have interviewed.</p>

<h3 id="on-the-launch-pad">On the Launch Pad</h3>

<p>OK, so you’ve been given an offer. If it’s a startup, you might be offered equity. If you don’t know this world,
that’s OK, it’s hard to give advice here - but <a href="https://github.com/jlevy/og-equity-compensation">this</a> seems to be the most comprehensive resource, and this
seems to be the <a href="http://jvns.ca/blog/2015/12/30/do-the-math-on-your-stock-options/">best starter</a>. I started with no knowledge, and eventually got a reasonable understanding. If
you want one sentence from me, “equity is a risk, be damn sure you think the company is going to go somewhere.” I
opted for a chunk of equity in Artsy, but I’ve worked at places where I’ve taken the minimum option.</p>

<p>Ideally you are presented with a great offer, I’ve never negotiated salary and we don’t do it at Artsy as it
<a href="https://en.wikipedia.org/wiki/Gender_pay_gap_in_the_United_States#Negotiating_salaries">introduces bias</a>, so I can’t offer much there. But I have recieved <a href="https://github.com/artsy/artsy.github.io/pull/205#discussion_r51386447">some good</a> advice I’ll paraphrase.</p>

<p>It’s up to you whether to negotiate. In order to negotiate, you need to have an understanding of what people in
similar companies/positions are. Ask people in the industry, friends and mentors. Talk in pay-ranges if that’s
easier. Note: The type of company, its/your location, benefits, equity and the economy are all things that will move
those ranges.</p>

<h3 id="ok-so-while-i-have-your-attention-what-else-can-i-recommend">OK, so, while I have your attention, what else can I recommend?</h3>

<p>The way in which you present yourself online will attract similar people. If you are always being negative, and it
sure is easy, expect to end up surrounded with people who are similar. <a href="https://realm.io/news/altconf-orta-therox-being-nice-in-open-source/">Being nice is nice</a>.</p>

<p>If you have a blog, and it’s on medium, look into making/editing your own blog. <a href="http://jekyllrb.com">Jekyll</a> is the defacto go-to in
that space, but I know people have enjoyed using <a href="https://middlemanapp.com">middleman</a> and <a href="http://gohugo.io">hugo</a>. Do not use Octopress, vanilla
Jekyll will do you just fine.</p>

<p>If you’re not active on Twitter, you should start trying. Every time you think of something worth saying to someone
next to you, say it to them, then say it to twitter. Show off pictures of what you’re working on, reply to people
with more followers than you when they ask questions, talk about code. It took me 4 years to hit my first thousand
followers, hopefully you can be more interesting <a href="https://twitter.com/orta/status/13912101">than I was</a> for a while.</p>

<p>This article covers <a href="http://blog.leif.me/2013/11/how-software-developers-use-twitter/">how developers in general use twitter</a> it’s an interesting read. You can get a lot of value
by following developers whose work you rely on, or whose <a href="https://twitter.com/orta">blog posts you think are awesome</a>.</p>

<p>When people say GitHub is your resume, they are right and they are wrong. GitHub can help get you through the door,
but you can’t rely on that in your interviews. Check out the advice at the <a href="http://code.dblock.org/2011/07/14/github-is-your-new-resume.html">end of this post</a> on how to make
your GitHub look good for people looking at whether to interview you.</p>

<p>However you can <a href="https://ma.tt/2016/02/getting-a-job-after-coding-bootcamp/">distinguish yourself by contributing to Open Source</a>: <a href="https://github.com/alloy/lowdown/pull/8">Fix READMEs</a>, <a href="https://github.com/supermarin/ObjectiveSugar/pull/20">improve
documentation</a> or <a href="http://artsy.github.io/blog/2016/01/28/being-a-good-open-source-citizen/">the Pods you use</a>. These slides go <a href="https://speakerdeck.com/orta/contributing-to-open-source-doesnt-require-changing-the-world">into other ways</a> to contribute.</p>

<p>The other side of community work is to devote time to helping out on Stack Overflow, follow tags that you know
something about, or want to - and try respond to a few.</p>

<h4 id="some-links-for-further-reading">Some links for further reading</h4>

<ul>
  <li><a href="http://geekfeminism.wikia.com/wiki/Male_Programmer_Privilege_Checklist">Male Programmers Privilege</a> - The geek feminism wiki is a great resource for understand some of the less
positive aspects of a male-dominated culture.</li>
  <li><a href="http://blog.testdouble.com/posts/2014-12-02-the-social-coding-contract.html">The Social Coding Contract</a> - I’d recommend this to anyone on any topic, regardless of what they were really
asking.</li>
  <li><a href="http://blog.testdouble.com/posts/2016-01-25-an-empathetic-guide-to-git-conflicts.html">Git Conflicts and Empathy</a> - Understanding that a git conflict is that two people really want to do something
positive.</li>
  <li><a href="http://blog.testdouble.com/posts/2015-06-08-finding-joy-at-work.html">Finding Joy at Work</a> - On the risks of being in a small company.</li>
  <li><a href="https://patrickbalestra.com/blog/2018/08/06/my-tech-interviews-experience.html">My Tech Interviews Experience: Failures, Successes and Tips for you</a> - like his but from another iOS
developer, and in 2018.</li>
</ul>

<h4 id="this-blogs-best-of-for-juniors">This blog’s best-of for Juniors:</h4>

<ul>
  <li><a href="http://artsy.github.io/blog/2016/01/13/OSS-Expectations/">OSS Expectations</a> - On how to talk the talk when thinking about Open Source.</li>
  <li><a href="http://artsy.github.io/blog/2016/01/28/being-a-good-open-source-citizen/">Being a good OSS citizen</a> - On how to walk the walk when contributing back.</li>
  <li>Video code-reviews: <a href="http://artsy.github.io/blog/2016/01/14/eidolon-code-review/">Eidolon</a> / <a href="http://artsy.github.io/blog/2015/11/05/Emergence-Code-Review/">Emergence</a> - On the gestalt of an app.</li>
  <li><a href="http://artsy.github.io/blog/2015/09/01/Cocoa-Architecture-Dropped-Design-Patterns/">Dropped Design Patterns</a> - On understanding that technical decisions aren’t permanent.</li>
  <li><a href="http://artsy.github.io/blog/2015/07/06/how-to-write-unit-tests-like-a-brood-parasite/">How To Write Unit Tests Like a Brood Parasite</a> - On using metaphors to understand complex ideas.</li>
  <li><a href="http://artsy.github.io/blog/2015/04/03/artsy-engineering-compensation-framework/">Artsy’s Engineering Compensation Framework</a> - On ways in which you can rank yourself.</li>
  <li><a href="http://artsy.github.io/blog/2015/03/31/the-culture-of-openness-artsy-mobile/">The Culture of Openness in the Artsy Mobile Team</a> - On how a team talks about it’s culture.</li>
  <li><a href="http://artsy.github.io/blog/2014/06/17/building-the-xcode-plugin-snapshots/">Building the Xcode Plugin Snapshots</a> - On how your tools can be improved, and how easy it is to get started.</li>
  <li><a href="https://artsy.github.io/blog/2015/09/24/mvvm-in-swift/">MVVM in Swift</a> - On understanding that there is more than one way to build a thing.</li>
  <li><a href="http://artsy.github.io/series/react-native-at-artsy/">React Native at Artsy</a> - A whole new way to build apps</li>
</ul>

]]></content>
  </entry>
  
</feed>
