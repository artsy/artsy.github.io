<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Technology | Artsy Engineering]]></title>
  <link href="https://artsy.github.io/blog/categories/technology/atom.xml" rel="self"/>
  <link href="https://artsy.github.io/"/>
  <updated>2024-05-17T14:49:02+00:00</updated>
  <id>https://artsy.github.io/</id>
  <author>
    <name><![CDATA[]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Managing Secrets in a React Native App]]></title>
    <link href="https://artsy.github.io/blog/2018/06/15/cocoapods-keys-react-native/"/>
    <updated>2018-06-15T00:00:00+00:00</updated>
    <id>https://artsy.github.io/blog/2018/06/15/cocoapods-keys-react-native</id>
    <content type="html"><![CDATA[<!--
Iɴᴛʀᴏᴅᴜᴄᴛɪᴏɴ
-->

<p>Hi! I’m Erik, a software engineer on the Purchase team. One of the most visible payoffs from Artsy’s investments in React Native <a href="https://artsy.github.io/search/?q=react+native">over the past two years</a> has been the opening up of our mobile codebase to contributors like myself coming primarily from web stacks. It’s nice to be able to build mobile interfaces with the same declarative API used by so many of our web projects, but sometimes we still need to bridge the divide to our Objective-C and Swift ecosystem. One such case: replacing the app secrets typically loaded from a deploy environment or web developer’s <a href="https://www.npmjs.com/package/dotenv">dotenv</a> file.</p>

<!-- more -->
<!--
Mᴀɪɴ Bᴏᴅʏ
-->

<p><a href="https://github.com/artsy/emission">Emission</a> is Artsy’s React Native component library. It contains its own native app in the <code class="language-plaintext highlighter-rouge">/Example</code> folder, which uses <a href="https://artsy.github.io/blog/2015/01/21/cocoapods-keys-and-CI/">cocoapods-keys</a> to store secrets while still letting us code in the open. In order to expose these keys to our React Native components, however, we must do a fair bit of setup. Here’s a straightforward how-to that also makes a quick tour through the iOS ecosystem for web developers looking at the React Native JavaScript runtime today.</p>

<p>Links to examples below come from <a href="https://github.com/artsy/emission/pull/1086/commits/4a2a3e9260e97d791536cf38376a06b0ad0946a8">this commit</a> which adds a key for the Stripe API to Emission. When we are finished, a client app (<code class="language-plaintext highlighter-rouge">/Example</code>, <a href="https://github.com/artsy/eigen">Eigen</a>, etc.) will be able to initialize Emission with this secret, which will in turn make it available to React Native components.</p>

<h2 id="steps">Steps</h2>

<h4 id="1-add-the-key-to-the-apps-podfile">1. Add the key to the app’s Podfile.</h4>

<p>This is the extent of <code class="language-plaintext highlighter-rouge">cocoapods-keys</code> official <a href="https://github.com/orta/cocoapods-keys#usage">setup</a>, and after this you <strong>could</strong> set the key via <code class="language-plaintext highlighter-rouge">pod keys set &lt;NAME&gt;</code> or <code class="language-plaintext highlighter-rouge">pod install</code>… but we have more to do.</p>

<p><a href="https://github.com/artsy/emission/blob/4a2a3e9260e97d791536cf38376a06b0ad0946a8/Example/Podfile#L63">/Example/Podfile</a>:</p>

<div class="language-diff highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">plugin 'cocoapods-keys', {
</span>  :target =&gt; 'Emission',
  :keys =&gt; [
    'ArtsyAPIClientSecret',
    'ArtsyAPIClientKey',
<span class="gi">+    'StripePublishableKey',
</span>  ]
<span class="err">}</span>
</code></pre></div></div>

<hr />

<h4 id="2-configure-the-library-to-consume-our-new-key">2. Configure the library to consume our new key</h4>

<p>We’ll need to update the <code class="language-plaintext highlighter-rouge">initWithUserId...</code> function — one <strong>fun</strong> part of adjusting to Objective-C is that rather than named functions, we just refer to them by their entire signatures — to expose the new key as a property and add it to <code class="language-plaintext highlighter-rouge">constantsToExport</code> (<a href="https://facebook.github.io/react-native/docs/native-modules-ios.html#exporting-constants">docs</a>).</p>

<p>Note that this is happening in our <em>Emission Pod</em>; The pod now expects that key to be available in our <em>consuming</em> Example app as defined above.</p>

<p><a href="https://github.com/artsy/emission/blob/4a2a3e9260e97d791536cf38376a06b0ad0946a8/Pod/Classes/Core/AREmission.h#L17-L34">/Pod/Classes/Core/AREmission.h</a>:</p>

<div class="language-diff highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">//</span> ENV Variables
 #import &lt;React/RCTBridgeModule.h&gt;

 @interface AREmissionConfiguration : NSObject &lt;RCTBridgeModule&gt;

+ @property (nonatomic, copy, readonly, nullable) NSString *stripePublishableKey;

 - (instancetype)initWithUserID:(NSString *)userID
           authenticationToken:(NSString *)token
                     sentryDSN:(nullable NSString *)sentryDSN
<span class="gi">+         stripePublishableKey:(NSString *)stripePublishableKey
</span>              googleMapsAPIKey:(nullable NSString *)googleAPIKey
                    gravityURL:(NSString *)gravity
                metaphysicsURL:(NSString *)metaphysics
                     userAgent:(NSString *)userAgent;
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">AREmission</code>’s implementation (.m) needs to be configured to take this new key- It will be exported to our React Native components as <code class="language-plaintext highlighter-rouge">Emission</code>. We make our initializer match the signature defined in the header (.h) file, and add an instance <code class="language-plaintext highlighter-rouge">_stripePublishableKey</code> to match the <code class="language-plaintext highlighter-rouge">@property</code> declaration.</p>

<p><a href="https://github.com/artsy/emission/blob/4a2a3e9260e97d791536cf38376a06b0ad0946a8/Pod/Classes/Core/AREmission.m#L24-L60">/Pod/Classes/Core/AREmission.m</a>:</p>

<div class="language-diff highlighter-rouge"><div class="highlight"><pre class="highlight"><code> @implementation AREmissionConfiguration
 RCT_EXPORT_MODULE(Emission);
 # ...

 - (NSDictionary *)constantsToExport
 {
   return @{
<span class="gi">+    @"stripePublishableKey": self.stripePublishableKey ?: @"",
</span>     # ...lots more
   };
 }

 - (instancetype)initWithUserID:(NSString *)userID
            authenticationToken:(NSString *)token
                      sentryDSN:(NSString *)sentryDSN
<span class="gi">+          stripePublishableKey:(NSString *)stripePublishableKey
</span>               googleMapsAPIKey:(NSString *)googleAPIKey
                     gravityURL:(NSString *)gravity
                 metaphysicsURL:(NSString *)metaphysics
                      userAgent:(nonnull NSString *)userAgent
 {
     self = [super init];
     _userID = [userID copy];
<span class="gi">+    _stripePublishableKey = [stripePublishableKey copy];
</span>     # ... More copies...
     return self;
 }
</code></pre></div></div>

<p><em>Why is <code class="language-plaintext highlighter-rouge">copy</code> needed at all? See <a href="https://stackoverflow.com/questions/387959/nsstring-property-copy-or-retain/388002#388002">here</a>.</em></p>

<hr />

<h4 id="3-configure-the-example-app-to-expose-the-new-key-to-our-library">3. Configure the example app to expose the new key to our library</h4>

<p>After making sure we have imported the keys from <code class="language-plaintext highlighter-rouge">cocoapods-keys</code> we update Emission’s setup to use the new initializer signature we defined above.</p>

<p><a href="https://github.com/artsy/emission/blob/4a2a3e9260e97d791536cf38376a06b0ad0946a8/Example/Emission/AppDelegate.m#L109">Example/Emission/AppDelegate.m</a>:</p>

<div class="language-diff highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">#import</span> &lt;Keys/EmissionKeys.h&gt;

  - (void)setupEmissionWithUserID:(NSString *)userID accessToken:(NSString *)accessToken keychainService:(NSString *)service;
  {
    # ...
     AREmissionConfiguration *config = [[AREmissionConfiguration alloc]
      initWithUserID:userID
      authenticationToken:accessToken
      sentryDSN:nil
<span class="gi">+     stripePublishableKey:keys.stripePublishableKey
</span>      googleMapsAPIKey:nil
      gravityURL:setup.gravityURL
      metaphysicsURL:setup.metaphysicsURL
      userAgent:@"Emission Example"];
    # ...
</code></pre></div></div>

<hr />

<h4 id="4-use-that-configured-key-in-a-react-native-component">4. Use that configured key in a React Native component.</h4>

<p><code class="language-plaintext highlighter-rouge">Emission</code> is now exposed along with its configured keys via React Native’s <a href="https://facebook.github.io/react-native/docs/native-modules-ios.html">NativeModules</a>.</p>

<p><a href="https://github.com/artsy/emission/blob/4a2a3e9260e97d791536cf38376a06b0ad0946a8/src/lib/components/bidding/screens/confirmfirsttimebid.tsx#l31">src/lib/Components/Bidding/Screens/ConfirmFirstTimeBid.tsx</a>:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">NativeModules</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react-native</span><span class="dl">"</span><span class="p">;</span>
<span class="kd">const</span> <span class="nx">Emission</span> <span class="o">=</span> <span class="nx">NativeModules</span><span class="p">.</span><span class="nx">Emission</span> <span class="o">||</span> <span class="p">{};</span>

<span class="nx">stripe</span><span class="p">.</span><span class="nx">setOptions</span><span class="p">({</span>
  <span class="na">publishableKey</span><span class="p">:</span> <span class="nx">Emission</span><span class="p">.</span><span class="nx">stripePublishableKey</span>
<span class="p">});</span>
</code></pre></div></div>

<!--
Cᴏɴᴄʟᴜsɪᴏɴ
-->

<p>That’s it! Compared to a familiar dotenv file, <strong>it</strong> certainly means a bit more ceremony here, but we are working through React Native code, its containing Pod <em>and</em> a consuming app. The process is more complicated, but it’s also a nice overview of some fundamentals of Objective-C, iOS development and bridging the gap between react and mobile native code.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Making a React Native Components Pod]]></title>
    <link href="https://artsy.github.io/blog/2018/04/17/making-a-components-pod/"/>
    <updated>2018-04-17T00:00:00+00:00</updated>
    <id>https://artsy.github.io/blog/2018/04/17/making-a-components-pod</id>
    <content type="html"><![CDATA[<p>When we talk about our React Native setup in abstract, there are two kinds of “<a href="http://2.bp.blogspot.com/_PekcT72-PGE/SK3PTKwW_eI/AAAAAAAAAGY/ALg_ApHyzR8/s1600-h/1219140692800.jpg">now draw The Tick</a>” for
iOS developers:</p>

<ul>
  <li>How do I build this React Native as a CocoaPods setup?</li>
  <li>How do I get all the JavaScript tooling setup up?</li>
</ul>

<p>We’re going to address the first part in this post. By the end of this post we’re going to get an <a href="/blog/2016/08/24/On-Emission/">Emission-like
repo</a> set up for an existing OSS Swift iOS app called <a href="https://github.com/GitHawkApp/GitHawk/">GitHawk</a>. The aim being to introduce no
JavaScript tooling into GitHawk itself, and to only expose iOS-native <code class="language-plaintext highlighter-rouge">UIViewControllers</code> via a CocoaPod which is
consumed by GitHawk.</p>

<p>To do this we’re going to use the CocoaPods’ <code class="language-plaintext highlighter-rouge">pod lib create</code> template, and React Native’s <code class="language-plaintext highlighter-rouge">react-native init</code> to
make a self-contained React Native repo. It will export a JS file, and some native code which Podspec will
reference. This keeps the tooling complexity for iOS and React Native separate. Read on to start digging in.</p>

<!-- more -->

<p>So, I’m <strong>choosing</strong> to be annoying here. I will intentionally be adding <code class="language-plaintext highlighter-rouge">$</code>s before all of the commands, this is
specifically to slow you down and make you think about each command. This isn’t a quick tutorial you can skim in 2
minutes, running though it properly should take about an hour.</p>

<p>_You can also watch along with <a href="https://www.youtube.com/watch?v=ucQXL4vkP78">this YouTube video</a> of me going through
the tutorial at <a href="http://artsy.github.io/artsy-x-react-native.html">Artsy x React Native_</a>.</p>

<div class="mobile-only">
<p>
  <strong>Also, before you get started</strong>, it looks like you're using a really small screen, this post expects you would have a terminal around with useful tools for getting stuff done. I'm afraid without that, you're not going to get much out of it. I'd recommend switching to a computer.
</p>
</div>

<h2 id="what-are-we-going-to-do">What Are We Going To Do?</h2>

<p>We will make a React Native components library (GitDawg) for an existing open-source iOS Swift Application
(GitHawk). This reflects an existing app with a team who wants to experiment with React Native in a way that doesn’t
affect the main codebase. In Artsy, GitDawg is <a href="https://github.com/artsy/emission">Emission</a>, and GitHawk is <a href="https://github.com/artsy/eigen">Eigen</a>.</p>

<ol>
  <li>
    <p>We will clone and set up GitHawk</p>
  </li>
  <li>
    <p>We will use <code class="language-plaintext highlighter-rouge">pod lib create</code> to make a library repo called GitDawg</p>
  </li>
  <li>
    <p>We will use <code class="language-plaintext highlighter-rouge">react-native init</code> to make a React Native environment</p>
  </li>
  <li>
    <p>We will bundle the React Native code into our Pod’s asset folder</p>
  </li>
  <li>
    <p>We will edit the Podspec for GitDawg, and then the Podfile for the example project to consume it</p>
  </li>
  <li>
    <p>We will use <a href="https://github.com/orta/cocoapods-fix-react-native#readme">cocoapods-fix-react-native</a> to hotfix the React Native files</p>
  </li>
  <li>
    <p>We will expose a UIViewController which corresponds to the default screen from <code class="language-plaintext highlighter-rouge">react-native init</code> in our Pod</p>
  </li>
  <li>
    <p>We will change the storyboard reference to point to the UIViewController from our Pod, and run the simulator to
see our welcome screen.</p>
  </li>
  <li>
    <p>We will set up GitHawk to consume our new Pod</p>
  </li>
  <li>
    <p>We will change GitHawk to show our new UIViewController instead of the bookmarks screen</p>
  </li>
  <li>
    <p>We will edit GitDawg to act more like a development environment</p>
  </li>
</ol>

<h2 id="githawk">GitHawk</h2>

<p>Let’s get started by having a working <a href="https://github.com/GitHawkApp/GitHawk/">copy of GitHawk</a>. I’ll leave the README for GitHawk to do that, but
if you want to be certain you’re on the same version as me - I’m working from this commit
<code class="language-plaintext highlighter-rouge">6dc2988d23d70eb0862d11f4a365bf47a87848c6</code>.</p>

<p>Clone a copy of GitHawk, and get it running in your Simulator, should take about 5-10 minutes, you’ll need Xcode
9.3. Then we can move on to starting our components repo.</p>

<h2 id="gitdawg-js">GitDawg JS</h2>

<p>When you’re done with GitHawk, go back a folder so that you’re ready to create the GitDawg repo: <code class="language-plaintext highlighter-rouge">$ cd ..</code>.</p>

<h3 id="pre-requisites">Pre-requisites</h3>

<p>We need CocoaPods: <code class="language-plaintext highlighter-rouge">$ gem install cocoapods</code>.</p>

<p>We’re going to need node, and a dependency manager. If you run <code class="language-plaintext highlighter-rouge">$ brew install yarn</code> you will get both.</p>

<p>I’m running on node <code class="language-plaintext highlighter-rouge">8.9.x</code> and yarn <code class="language-plaintext highlighter-rouge">1.5.x</code>. Honestly, it shouldn’t matter if you’re on node 8, or 9. Yarn is
basically CocoaPods for node projects. If you’re wondering what the differences are between <a href="https://github.com/yarnpkg/yarn/">yarn</a> and <a href="https://www.npmjs.com/">NPM</a>,
then TLDR: there used to be some, but now there’s few. I stick with yarn because I prefer how the CLI works, and I
can easily read the lockfile it generates.</p>

<p>We need the React Native CLI, so let’s install it globally: <code class="language-plaintext highlighter-rouge">$ yarn global add react-native-cli</code>.</p>

<h3 id="starting-with-the-pod">Starting with the Pod</h3>

<p>We’re going to let CocoaPods create the initial folder for our project. Let’s set up your Pod:</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>pod lib create GitDawg

Cloning <span class="sb">`</span>https://github.com/CocoaPods/pod-template.git<span class="sb">`</span> into <span class="sb">`</span>GitDawg<span class="sb">`</span><span class="nb">.</span>
Configuring GitDawg template.

<span class="nt">------------------------------</span>

To get you started we need to ask a few questions, this should only take a minute.

If this is your first <span class="nb">time </span>we recommend running through with the guide:
 - http://guides.cocoapods.org/making/using-pod-lib-create.html
 <span class="o">(</span> hold cmd and click links to open <span class="k">in </span>a browser. <span class="o">)</span>


What platform <span class="k">do </span>you want to use?? <span class="o">[</span> iOS / macOS <span class="o">]</span>
 <span class="o">&gt;</span> iOS

What language <span class="k">do </span>you want to use?? <span class="o">[</span> Swift / ObjC <span class="o">]</span>
 <span class="o">&gt;</span> ObjC

Would you like to include a demo application with your library? <span class="o">[</span> Yes / No <span class="o">]</span>
 <span class="o">&gt;</span> Yes

Which testing frameworks will you use? <span class="o">[</span> Specta / Kiwi / None <span class="o">]</span>
 <span class="o">&gt;</span> None

Would you like to <span class="k">do </span>view based testing? <span class="o">[</span> Yes / No <span class="o">]</span>
 <span class="o">&gt;</span> No

What is your class prefix?
 <span class="o">&gt;</span> GD
</code></pre></div></div>

<p>I’d recommend using only Objective-C at this point, for simplicities sake. Swift is a great language, but I want
tooling simplicity. Swift and React Native is [docs] though. We’re also not going to write enough native code to
warrant the setup for testing. Plus, if we skip native testing then we can run CI on linux - which is basically
instant in comparison.</p>

<p>This has made a new library. Let’s go into our project’s root with <code class="language-plaintext highlighter-rouge">$ cd GitDawg</code>. There shouldn’t be too much in
here:</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">ls
</span>Example         GitDawg         GitDawg.podspec LICENSE         README.md         _Pods.xcodeproj
</code></pre></div></div>

<p>Because the core competency of the repo is the JavaScript, we’re going to rename the “GitDawg” folder in the root to
be about the CocoaPod instead of owning the name of the project. Run <code class="language-plaintext highlighter-rouge">$ mv GitDawg Pod</code> to do that.</p>

<p>We want to create our React Native project. I’m hard-coding my versions in these commands to try ensure this post
lasts some time, but you never know what amazing changes the future brings. If things are broken, leave a comment at
the bottom of this post.</p>

<p>Let’s create a GitDawg React Native project, and then rename the folder to src:</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Use the RN CLI to create a new RN app in the folder GitDawg</span>
<span class="nv">$ </span>react-native init GitDawg <span class="nt">--version</span> react-native@0.54.4

<span class="c"># Rename the folder to src</span>
<span class="nv">$ </span><span class="nb">mv </span>GitDawg src

<span class="c"># Remove _Pods.xcodeproj as it's relevant for our pod</span>
<span class="nv">$ </span><span class="nb">rm</span> <span class="nt">-rf</span> _Pods.xcodeproj
</code></pre></div></div>

<p>We don’t want all our project files living in a sub-folder though, so let’s move a few of them back to the repo’s
root, then remove some unused files.</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Copy the package metadata, deps, lockfile and dotfiles to root</span>
<span class="nv">$ </span><span class="nb">mv </span>src/package.json src/node_modules src/yarn.lock src/.<span class="k">*</span> <span class="nb">.</span>

<span class="c"># Remove the ios and android scaffolds as we have the CP one</span>
<span class="nv">$ </span><span class="nb">rm</span> <span class="nt">-rf</span> src/ios src/android
</code></pre></div></div>

<p>Which should make your app’s folder look something like this:</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">ls
</span>Example         GitDawg.podspec LICENSE         README.md       Pods        node_modules    package.json    src             yarn.lock

<span class="nv">$ </span><span class="nb">ls </span>src/
App.js    __tests__ app.json  index.js
</code></pre></div></div>

<p>To ensure everything is still hooked up, let’s make sure that all of your tests are working in the new repo.</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>yarn <span class="nb">test

</span>yarn run v1.5.1
 PASS  src/__tests__/App.js
  ✓ renders correctly <span class="o">(</span>176ms<span class="o">)</span>

Test Suites: 1 passed, 1 total
Tests:       1 passed, 1 total
Snapshots:   0 total
Time:        1.392s
Ran all <span class="nb">test </span>suites.
✨  Done <span class="k">in </span>2.32s.
</code></pre></div></div>

<p>We’re now going to be done with our JavaScript side, basically is our React Native “hello world”. It’s a React
Native project that exposes a single component which says <code class="language-plaintext highlighter-rouge">"Welcome to React Native!"</code>.</p>

<p>However, it’s going to take a bit of work before we can see it in action.</p>

<h3 id="deployment">Deployment</h3>

<p>We’re going to want to have this exposed to our native libraries, so we’re going to ship the bundled JavaScript as
our library’s source code. We do this via the React Native CLI, and it’s going to place the file inside our Pod
folder from earlier.</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>react-native bundle <span class="nt">--entry-file</span> src/index.js <span class="nt">--bundle-output</span> Pod/Assets/GitDawg.js <span class="nt">--assets-dest</span> Pod/Assets
</code></pre></div></div>

<p>It looks like this, when you run it via the sim:</p>

<center><img src="/images/making_cp_pod/success.png" width="50%" /></center>

<h2 id="gitdawg-pod">GitDawg Pod</h2>

<p>With that done, we can start looking at the native side of our codebase. We let <code class="language-plaintext highlighter-rouge">pod lib create</code> set up an Example
app for us to work with in the repo, which consumes a Podspec in the root. So we’re going to take a look at the
Podspec, and update it.</p>

<p>Our goal with the Example app is to set up an app exclusively for developing components in. In Artsy’s case, this
app handles auth to the Artsy API and has a series of jump-off points for developing a component.</p>

<p>To get started we need to modify the CocoaPod this repo represents:</p>

<ul>
  <li>Update our Podspec to handle React Native as a dependency, and our assets</li>
  <li>Add support for native compilation via CocoaPods with <a href="https://github.com/orta/cocoapods-fix-react-native#readme">cocoapods-fix-react-native</a></li>
  <li>Create a single <code class="language-plaintext highlighter-rouge">UIViewController</code> subclass for the Welcome Screen using the bundled React Native JS</li>
</ul>

<p>We want to have our Podspec re-use the metadata from React Native to set up GitDawg’s dependencies. So replace
<code class="language-plaintext highlighter-rouge">GitDawg.podspec</code> with this:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">require</span> <span class="s1">'json'</span>

<span class="c1"># Returns the version number for a package.json file</span>
<span class="n">pkg_version</span> <span class="o">=</span> <span class="nb">lambda</span> <span class="k">do</span> <span class="o">|</span><span class="n">dir_from_root</span> <span class="o">=</span> <span class="s1">''</span><span class="p">,</span> <span class="n">version</span> <span class="o">=</span> <span class="s1">'version'</span><span class="o">|</span>
  <span class="n">path</span> <span class="o">=</span> <span class="no">File</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">__dir__</span><span class="p">,</span> <span class="n">dir_from_root</span><span class="p">,</span> <span class="s1">'package.json'</span><span class="p">)</span>
  <span class="no">JSON</span><span class="p">.</span><span class="nf">parse</span><span class="p">(</span><span class="no">File</span><span class="p">.</span><span class="nf">read</span><span class="p">(</span><span class="n">path</span><span class="p">))[</span><span class="n">version</span><span class="p">]</span>
<span class="k">end</span>

<span class="c1"># Let the main package.json decide the version number for the pod</span>
<span class="n">gitdawg_version</span> <span class="o">=</span> <span class="n">pkg_version</span><span class="p">.</span><span class="nf">call</span>
<span class="c1"># Use the same RN version that the JS tools use</span>
<span class="n">react_native_version</span> <span class="o">=</span> <span class="n">pkg_version</span><span class="p">.</span><span class="nf">call</span><span class="p">(</span><span class="s1">'node_modules/react-native'</span><span class="p">)</span>

<span class="no">Pod</span><span class="o">::</span><span class="no">Spec</span><span class="p">.</span><span class="nf">new</span> <span class="k">do</span> <span class="o">|</span><span class="n">s</span><span class="o">|</span>
  <span class="n">s</span><span class="p">.</span><span class="nf">name</span>             <span class="o">=</span> <span class="s1">'GitDawg'</span>
  <span class="n">s</span><span class="p">.</span><span class="nf">version</span>          <span class="o">=</span> <span class="n">gitdawg_version</span>
  <span class="n">s</span><span class="p">.</span><span class="nf">description</span>      <span class="o">=</span> <span class="s1">'Components for GitHawk.'</span>
  <span class="n">s</span><span class="p">.</span><span class="nf">summary</span>          <span class="o">=</span> <span class="s1">'Components for GitHawk.'</span>
  <span class="n">s</span><span class="p">.</span><span class="nf">homepage</span>         <span class="o">=</span> <span class="s1">'https://github.com/orta/GitDawg'</span>
  <span class="n">s</span><span class="p">.</span><span class="nf">license</span>          <span class="o">=</span> <span class="p">{</span> <span class="ss">type: </span><span class="s1">'MIT'</span><span class="p">,</span> <span class="ss">file: </span><span class="s1">'LICENSE'</span> <span class="p">}</span>
  <span class="n">s</span><span class="p">.</span><span class="nf">author</span>           <span class="o">=</span> <span class="p">{</span> <span class="s1">'orta'</span> <span class="o">=&gt;</span> <span class="s1">'orta.therox@gmail.com'</span> <span class="p">}</span>
  <span class="n">s</span><span class="p">.</span><span class="nf">source</span>           <span class="o">=</span> <span class="p">{</span> <span class="ss">git: </span><span class="s1">'https://github.com/orta/GitDawg.git'</span><span class="p">,</span> <span class="ss">tag: </span><span class="n">s</span><span class="p">.</span><span class="nf">version</span><span class="p">.</span><span class="nf">to_s</span> <span class="p">}</span>

  <span class="n">s</span><span class="p">.</span><span class="nf">source_files</span>   <span class="o">=</span> <span class="s1">'Pod/Classes/**/*.{h,m}'</span>
  <span class="n">s</span><span class="p">.</span><span class="nf">resources</span>      <span class="o">=</span> <span class="s1">'Pod/Assets/{GitDawg.js,assets}'</span>
  <span class="n">s</span><span class="p">.</span><span class="nf">platform</span>       <span class="o">=</span> <span class="ss">:ios</span><span class="p">,</span> <span class="s1">'8.0'</span>

  <span class="c1"># React is split into a set of subspecs, these are the essentials</span>
  <span class="n">s</span><span class="p">.</span><span class="nf">dependency</span> <span class="s1">'React/Core'</span><span class="p">,</span> <span class="n">react_native_version</span>
  <span class="n">s</span><span class="p">.</span><span class="nf">dependency</span> <span class="s1">'React/CxxBridge'</span><span class="p">,</span> <span class="n">react_native_version</span>
  <span class="n">s</span><span class="p">.</span><span class="nf">dependency</span> <span class="s1">'React/RCTAnimation'</span><span class="p">,</span> <span class="n">react_native_version</span>
  <span class="n">s</span><span class="p">.</span><span class="nf">dependency</span> <span class="s1">'React/RCTImage'</span><span class="p">,</span> <span class="n">react_native_version</span>
  <span class="n">s</span><span class="p">.</span><span class="nf">dependency</span> <span class="s1">'React/RCTLinkingIOS'</span><span class="p">,</span> <span class="n">react_native_version</span>
  <span class="n">s</span><span class="p">.</span><span class="nf">dependency</span> <span class="s1">'React/RCTNetwork'</span><span class="p">,</span> <span class="n">react_native_version</span>
  <span class="n">s</span><span class="p">.</span><span class="nf">dependency</span> <span class="s1">'React/RCTText'</span><span class="p">,</span> <span class="n">react_native_version</span>

  <span class="c1"># React's dependencies</span>
  <span class="n">s</span><span class="p">.</span><span class="nf">dependency</span> <span class="s1">'yoga'</span><span class="p">,</span> <span class="s2">"</span><span class="si">#{</span><span class="n">react_native_version</span><span class="si">}</span><span class="s2">.React"</span>
  <span class="n">podspecs</span> <span class="o">=</span> <span class="p">[</span>
    <span class="s1">'node_modules/react-native/third-party-podspecs/DoubleConversion.podspec'</span><span class="p">,</span>
    <span class="s1">'node_modules/react-native/third-party-podspecs/Folly.podspec'</span><span class="p">,</span>
    <span class="s1">'node_modules/react-native/third-party-podspecs/glog.podspec'</span>
  <span class="p">]</span>
  <span class="n">podspecs</span><span class="p">.</span><span class="nf">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">podspec_path</span><span class="o">|</span>
    <span class="n">spec</span> <span class="o">=</span> <span class="no">Pod</span><span class="o">::</span><span class="no">Specification</span><span class="p">.</span><span class="nf">from_file</span> <span class="n">podspec_path</span>
    <span class="n">s</span><span class="p">.</span><span class="nf">dependency</span> <span class="n">spec</span><span class="p">.</span><span class="nf">name</span><span class="p">,</span> <span class="s2">"</span><span class="si">#{</span><span class="n">spec</span><span class="p">.</span><span class="nf">version</span><span class="si">}</span><span class="s2">"</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>This Podspec is probably more complex then you’re used to, but it means less config. To validate the Podspec, use
<code class="language-plaintext highlighter-rouge">$ pod ipc spec GitDawg.podspec</code> and read the JSON it outputs. With the Podspec set up, it’s time to set up the
example project’s <code class="language-plaintext highlighter-rouge">Gemfile</code> and <code class="language-plaintext highlighter-rouge">Podfile</code>.</p>

<p>We’ll start with applying the <a href="https://github.com/orta/cocoapods-fix-react-native#readme">React Native hot-fix plugin</a>, sometimes a version of React Native is released
that doesn’t support Swift frameworks (as Facebook doesn’t use Swift) and so you have to apply some patches to the
code. I made a CocoaPods Plugin that handles the hot-fixes for you.</p>

<p>Start by making a <code class="language-plaintext highlighter-rouge">Gemfile</code> in the <code class="language-plaintext highlighter-rouge">Example</code> folder: <code class="language-plaintext highlighter-rouge">touch Example/Gemfile</code></p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">source</span> <span class="s1">'https://rubygems.org'</span>

<span class="n">gem</span> <span class="s1">'cocoapods'</span>
<span class="n">gem</span> <span class="s1">'cocoapods-fix-react-native'</span>
</code></pre></div></div>

<p>Then run <code class="language-plaintext highlighter-rouge">$ bundle install</code> in the <code class="language-plaintext highlighter-rouge">Example</code> folder, which will set up the ruby dependencies of <code class="language-plaintext highlighter-rouge">cocoapods</code> and
<code class="language-plaintext highlighter-rouge">cocoapods-fix-react-native</code> for your app. This makes it possible to reference <code class="language-plaintext highlighter-rouge">"cocoapods-fix-react-native"</code> in
your <code class="language-plaintext highlighter-rouge">Podfile</code> next.</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">cd </span>Example
<span class="nv">$ </span>bundle <span class="nb">install</span>
</code></pre></div></div>

<p>We want to take the current <code class="language-plaintext highlighter-rouge">Podfile</code> and make sure that every React Native dependency comes from the folder
<code class="language-plaintext highlighter-rouge">node_modules/react-native</code>. We can do this using the <code class="language-plaintext highlighter-rouge">:path</code> operator to redeclare where you can find each Pod.</p>

<p>Note: we also <em>extend</em> the amount of subspecs for <code class="language-plaintext highlighter-rouge">'React'</code> in this Podfile via <code class="language-plaintext highlighter-rouge">subspecs: ['DevSupport']</code> - this
subspec is what provide the hot code reloading and other developer tools. You’ll want this, in here, it will mean
that the example app can be used as a dev environment, and your main app will only get a production environment.</p>

<p>So edit <code class="language-plaintext highlighter-rouge">Example/Podfile</code> to look like this:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">platform</span> <span class="ss">:ios</span><span class="p">,</span> <span class="s1">'9.0'</span>

<span class="n">node_modules_path</span> <span class="o">=</span> <span class="s1">'../node_modules'</span>
<span class="n">react_path</span> <span class="o">=</span> <span class="no">File</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">node_modules_path</span><span class="p">,</span> <span class="s1">'react-native'</span><span class="p">)</span>
<span class="n">yoga_path</span> <span class="o">=</span> <span class="no">File</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">react_path</span><span class="p">,</span> <span class="s1">'ReactCommon/yoga'</span><span class="p">)</span>
<span class="n">folly_spec_path</span> <span class="o">=</span> <span class="no">File</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">react_path</span><span class="p">,</span> <span class="s1">'third-party-podspecs/Folly.podspec'</span><span class="p">)</span>
<span class="n">glog_spec_path</span> <span class="o">=</span> <span class="no">File</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">react_path</span><span class="p">,</span> <span class="s1">'third-party-podspecs/glog.podspec'</span><span class="p">)</span>
<span class="n">double_conversion_spec_path</span> <span class="o">=</span> <span class="no">File</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">react_path</span><span class="p">,</span> <span class="s1">'third-party-podspecs/DoubleConversion.podspec'</span><span class="p">)</span>

<span class="n">plugin</span> <span class="s1">'cocoapods-fix-react-native'</span>

<span class="n">target</span> <span class="s1">'GitDawg_Example'</span> <span class="k">do</span>
  <span class="n">pod</span> <span class="s1">'GitDawg'</span><span class="p">,</span> <span class="ss">path: </span><span class="s1">'../'</span>

  <span class="c1"># We want extra developer support in React inside this app</span>
  <span class="n">pod</span> <span class="s1">'React'</span><span class="p">,</span> <span class="ss">path: </span><span class="n">react_path</span><span class="p">,</span> <span class="ss">subspecs: </span><span class="p">[</span><span class="s1">'DevSupport'</span><span class="p">]</span>

  <span class="c1"># We're letting CP know where it can find these Podspecs</span>
  <span class="n">pod</span> <span class="s1">'yoga'</span><span class="p">,</span> <span class="ss">path: </span><span class="n">yoga_path</span>
  <span class="n">pod</span> <span class="s1">'Folly'</span><span class="p">,</span> <span class="ss">podspec: </span><span class="n">folly_spec_path</span>
  <span class="n">pod</span> <span class="s1">'DoubleConversion'</span><span class="p">,</span> <span class="ss">podspec: </span><span class="n">double_conversion_spec_path</span>
  <span class="n">pod</span> <span class="s1">'glog'</span><span class="p">,</span> <span class="ss">podspec: </span><span class="n">glog_spec_path</span>
<span class="k">end</span>
</code></pre></div></div>

<p>Run the following to set up the React Native dependencies for your project.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ bundle exec pod install
</code></pre></div></div>

<p>We need some native code to represent our Welcome component from the React Native template. Create two new files in
<code class="language-plaintext highlighter-rouge">Pod/Classes</code>, then re-create the CocoaPods project for it by <code class="language-plaintext highlighter-rouge">pod install</code>ing again.</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">touch</span> ../Pod/Classes/GDWelcomeViewController.h ../Pod/Classes/GDWelcomeViewController.m
<span class="nv">$ </span>bundle <span class="nb">exec </span>pod <span class="nb">install</span>
<span class="nv">$ </span>open GitDawg.xcworkspace
</code></pre></div></div>

<p>We’re going to make a pretty vanilla <code class="language-plaintext highlighter-rouge">UIViewController</code>, so declare it exists in the interface and then use an
<code class="language-plaintext highlighter-rouge">RCTRootView</code> as it’s <code class="language-plaintext highlighter-rouge">self.view</code>.</p>

<div class="language-objc highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#import &lt;UIKit/UIKit.h&gt;
</span>
<span class="k">@interface</span> <span class="nc">GDWelcomeViewController</span> <span class="p">:</span> <span class="nc">UIViewController</span>
<span class="k">@end</span>
</code></pre></div></div>

<p>The <code class="language-plaintext highlighter-rouge">GDWelcomeViewController</code> is going to handle the React bridging, because that is the simplest option for our
Hello World app. We’ll be going back to improve this later.</p>

<div class="language-objc highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#import "GDWelcomeViewController.h"
#import &lt;React/RCTRootView.h&gt;
#import &lt;React/RCTBridgeDelegate.h&gt;
#import &lt;React/RCTBridge.h&gt;
</span>
<span class="c1">// Let this View Controller handle getting the URL for the JS</span>
<span class="k">@interface</span> <span class="nc">GDWelcomeViewController</span> <span class="p">()</span> <span class="o">&lt;</span><span class="n">RCTBridgeDelegate</span><span class="o">&gt;</span>
<span class="k">@end</span>

<span class="k">@implementation</span> <span class="nc">GDWelcomeViewController</span>

<span class="c1">// Set self.view on the VC to be an RCTRootView</span>
<span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">loadView</span>
<span class="p">{</span>
    <span class="n">RCTBridge</span> <span class="o">*</span><span class="n">bridge</span> <span class="o">=</span> <span class="p">[[</span><span class="n">RCTBridge</span> <span class="nf">alloc</span><span class="p">]</span> <span class="nf">initWithDelegate</span><span class="p">:</span><span class="n">self</span> <span class="nf">launchOptions</span><span class="p">:@{}];</span>
    <span class="n">self</span><span class="p">.</span><span class="n">view</span> <span class="o">=</span> <span class="p">[[</span><span class="n">RCTRootView</span> <span class="nf">alloc</span><span class="p">]</span> <span class="nf">initWithBridge</span><span class="p">:</span><span class="n">bridge</span>
                                         <span class="nl">moduleName:</span><span class="s">@"GitDawg"</span>
                                  <span class="nl">initialProperties:</span><span class="p">@{}];</span>
<span class="p">}</span>

<span class="c1">// Use our bundled JS for now</span>
<span class="k">-</span> <span class="p">(</span><span class="n">NSURL</span> <span class="o">*</span><span class="p">)</span><span class="nf">sourceURLForBridge</span><span class="p">:(</span><span class="n">RCTBridge</span> <span class="o">*</span><span class="p">)</span><span class="nv">bridge</span>
<span class="p">{</span>
    <span class="n">NSBundle</span> <span class="o">*</span><span class="n">gitdawgBundle</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSBundle</span> <span class="nf">bundleForClass</span><span class="p">:</span><span class="n">GDWelcomeViewController</span><span class="p">.</span><span class="n">class</span><span class="p">];</span>
    <span class="k">return</span> <span class="p">[</span><span class="n">gitdawgBundle</span> <span class="nf">URLForResource</span><span class="p">:</span><span class="s">@"GitDawg"</span> <span class="nf">withExtension</span><span class="p">:</span><span class="s">@"js"</span><span class="p">];</span>
<span class="p">}</span>

<span class="k">@end</span>
</code></pre></div></div>

<p>As the <code class="language-plaintext highlighter-rouge">pod lib create</code> template uses storyboards, you will need to open up the example app’s storyboard and
<a href="/images/making_cp_pod/settings_welcome.png">change the initial view controller</a> to be a <code class="language-plaintext highlighter-rouge">GDWelcomeViewController</code>.
If you see a <a href="/images/making_cp_pod/not_working.png">white screen</a> on the app launches then this hasn’t been done.
Run the app in the simulator, and you should get this screen:</p>

<center><img src="/images/making_cp_pod/success.png" width="50%" /></center>

<p>This is the default screen from the React Native template, and it’s proof that everything has worked for our dev
app.</p>

<p>Let’s take a second to re-cover what has happened to get to this point.</p>

<ol>
  <li>
    <p>We used the <code class="language-plaintext highlighter-rouge">pod lib create</code> template to make a library repo</p>
  </li>
  <li>
    <p>We used <code class="language-plaintext highlighter-rouge">react-native init</code> to make a React Native environment, which has the settings in the root and the
source code inside <code class="language-plaintext highlighter-rouge">src</code></p>
  </li>
  <li>
    <p>We’ve bundled the React Native code into our CocoaPod’s asset folder</p>
  </li>
  <li>
    <p>We set up the Podspec for GitDawg, and then the Podfile for the example project to consume it</p>
  </li>
  <li>
    <p>We added <a href="https://github.com/orta/cocoapods-fix-react-native#readme">cocoapods-fix-react-native</a> to hot-fix the native files</p>
  </li>
  <li>
    <p>We added a UIViewController for the default screen from <code class="language-plaintext highlighter-rouge">react-native init</code> to our CocoaPod, and ran
<code class="language-plaintext highlighter-rouge">bundle exec pod install</code> to update the example project</p>
  </li>
  <li>
    <p>We changed the storyboard reference to point to the UIViewController from our Pod, and ran the simulator to see
our welcome screen</p>
  </li>
</ol>

<p>This is a full run-through of how your Pod would look when integrated into your main app’s codebase. At this point
you have a unique, isolated app which is going to be your development environment. In our case this app is a menu of
different root screens and admin flags.</p>

<p>—</p>

<p>OK, let’s go take this and migrate it into GitHawk. This is our end-goal:</p>

<center><img src="/images/making_cp_pod/githawk.gif" width="75%" /></center>

<p>Our setup is going to be different here because we can’t rely on React Native coming from the file-system, as we
want to make sure our app has no hint of JS tooling. So we will use CocoaPods to handle downloading and setting up
our versions of the React Native libraries. As of 0.54.x, that is React and Yoga.</p>

<p>We want to have a local copy of the JSON version of Podspecs for each of these. They can be generated from the
Podspecs using <code class="language-plaintext highlighter-rouge">bundle exec pod ipc spec [file.podspec]</code>. Let’s generate one for React:</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">cd </span>GitDawg/node_modules/react-native/<span class="p">;</span> pod ipc spec React.podspec
</code></pre></div></div>

<p>It will output a bunch of JSON to your terminal. This is perfect. Let’s move that text to a file on your desktop.</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>pod ipc spec React.podspec <span class="o">&gt;</span> ~/Desktop/React.podspec.json
</code></pre></div></div>

<!--

You'll see no output if everything went fine. Before you grab that podspec, let's get the one for yoga too.

```sh
$ cd ReactCommon/yoga/; pod ipc spec yoga.podspec > ~/Desktop/yoga.podspec.json
```

-->

<p>For the yoga podspec, you should just grab our version, it’s not worth me explaining all the details why, other than
the PR I made to fix a bug isn’t shipped in 0.54 so run:</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>curl https://raw.githubusercontent.com/artsy/emission/v1.5.0/externals/yoga/yoga.podspec.json <span class="o">&gt;</span> ~/Desktop/yoga.podspec.json
</code></pre></div></div>

<p>You should now have two JSON files in your Desktop. Grab them, move them into the <code class="language-plaintext highlighter-rouge">Local Pods</code> folder inside
GitHawk. It should already have a few Podspecs.</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">cd</span> ../../../ <span class="c"># Or however it takes to get back to the project root</span>

<span class="c"># Move any podspec.json into the Local Pods folder</span>
<span class="nv">$ </span><span class="nb">mv</span> ~/Desktop/<span class="k">*</span>.podspec.json <span class="s2">"Local Pods"</span>
</code></pre></div></div>

<p>Modify their <code class="language-plaintext highlighter-rouge">Gemfile</code> to include <a href="https://github.com/orta/cocoapods-fix-react-native#readme">cocoapods-fix-react-native</a>:</p>

<div class="language-diff highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">source 'https://rubygems.org'
</span>
gem 'cocoapods', '~&gt; 1.4.0'
<span class="gi">+ gem 'cocoapods-fix-react-native'
</span></code></pre></div></div>

<p>Then run <code class="language-plaintext highlighter-rouge">bundle install</code>. Next we need to add GitDawg, and our custom Podspecs to the Podfile:</p>

<div class="language-diff highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">source 'https://github.com/CocoaPods/Specs.git'
</span>
# Local Pods w/ custom changes
<span class="p">pod 'SwipeCellKit', :path =&gt; 'Local Pods/SwipeCellKit'
pod 'GitHubAPI', :path =&gt; 'Local Pods/GitHubAPI'
pod 'GitHubSession', :path =&gt; 'Local Pods/GitHubSession'
</span>
+ # React Native Support
<span class="gi">+ plugin 'cocoapods-fix-react-native'
+ pod 'GitDawg', :path =&gt; '../GitDawg'
+ pod 'React', :podspec =&gt; 'Local Pods/React.podspec.json'
+ pod 'yoga',  :podspec =&gt; 'Local Pods/yoga.podspec.json'
</span>
target 'Freetime' do
</code></pre></div></div>

<p>Then run <code class="language-plaintext highlighter-rouge">$ bundle exec pod install</code>. That should grab React Native for you. Unlike inside GitDawg, CocoaPods will
download the source code from the internet. <code class="language-plaintext highlighter-rouge">:podspec</code> only tells CocoaPods where to find the Podspec, but it will
still download code externally.</p>

<p>Open up the Xcode Workspace - <code class="language-plaintext highlighter-rouge">open Freetime.xcworkspace</code>, and we’re gonna make the code changes - it’s all in one
file. Open the file <code class="language-plaintext highlighter-rouge">RootNavigationManager.swift</code> (it’s in <code class="language-plaintext highlighter-rouge">Classes/Systems</code>) and add a new <code class="language-plaintext highlighter-rouge">import</code> at the top for
<code class="language-plaintext highlighter-rouge">GitDawg</code>:</p>

<div class="language-diff highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">import UIKit
import GitHubAPI
import GitHubSession
</span><span class="gi">+ import GitDawg
</span></code></pre></div></div>

<p>Then add our new view controller by replacing the bookmarks view controller on line 78.</p>

<div class="language-diff highlighter-rouge"><div class="highlight"><pre class="highlight"><code>        tabBarController?.viewControllers = [
            newNotificationsRootViewController(client: client),
            newSearchRootViewController(client: client),
<span class="gi">+            GDWelcomeViewController(),
</span><span class="gd">-            newBookmarksRootViewController(client: client),
</span>            settingsRootViewController ?? UIViewController() // simply satisfying compiler
        ]
</code></pre></div></div>

<p>That should get you to the same point as we were in the dev app. Now when you run the app, log in and hit the place
where the bookmarks icon used to live. Tada.</p>

<p>So what did we do? First, we added GitDawg, React and Yoga as dependencies in GitHawk’s Podfile to get them
installed. Then we switched to using GitDawg’s native view controller in 2 lines of code. No JavaScript in GitHawk,
little faffing overall.</p>

<p>This is how all our view controllers are exposed and used in production.</p>

<h2 id="what-now">What now?</h2>

<p>We’ve now got a successful deploy of our React Native Pod into an external app. However, we need to make some
changes in GitDawg now to start making it possible to develop efficiently.</p>

<p>We will need to:</p>

<ol>
  <li>
    <p>Make a singleton to handle setting up React Native between all potential UIViewControllers</p>
  </li>
  <li>
    <p>Use the React Native Packager to get runtime editing support</p>
  </li>
</ol>

<p>Move your terminal back to the GitDawg folder. We’re going to make a class that represents our library, GitDawg</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">touch </span>Pod/Classes/GitDawg.h Pod/Classes/GitDawg.m
</code></pre></div></div>

<p>Then we need to re-run <code class="language-plaintext highlighter-rouge">$ bundle exec pod install</code> in the <code class="language-plaintext highlighter-rouge">Example</code> folder to get it in Xcode. Open up the Xcode
workspace for GitDawg and let’s fill in these files. These files are based on <a href="https://github.com/artsy/emission/blob/master/Pod/Classes/Core/AREmission.h">AREmission.h</a> and
<a href="https://github.com/artsy/emission/blob/master/Pod/Classes/Core/AREmission.m">AREmission.m</a>. For us, in a production app, <code class="language-plaintext highlighter-rouge">AREmission</code> has a few key responsibilities:</p>

<ol>
  <li>
    <p>Pass through the non-optional environment variables to expose in JS</p>
  </li>
  <li>
    <p>Create and retain the React Native bridge</p>
  </li>
  <li>
    <p>Set up the native modules so that we React Native can communicate with the host app</p>
  </li>
</ol>

<p>For this tutorial we don’t need all of these responsibilities, but we will handle the second one.</p>

<p>For the header file, <code class="language-plaintext highlighter-rouge">GitDawg.h</code>:</p>

<div class="language-objc highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#import &lt;Foundation/Foundation.h&gt;
#import &lt;React/RCTBridge.h&gt;
</span>
<span class="n">NS_ASSUME_NONNULL_BEGIN</span>

<span class="c1">/// The RN library API</span>
<span class="k">@interface</span> <span class="nc">GitDawg</span> <span class="p">:</span> <span class="nc">NSObject</span>

<span class="c1">/// The way in which we communicate with React Native</span>
<span class="k">@property</span> <span class="p">(</span><span class="n">nonatomic</span><span class="p">,</span> <span class="n">strong</span><span class="p">,</span> <span class="n">readonly</span><span class="p">)</span> <span class="n">RCTBridge</span> <span class="o">*</span><span class="n">bridge</span><span class="p">;</span>

<span class="c1">/// The single instance of a GitDawg</span>
<span class="k">+</span> <span class="p">(</span><span class="n">instancetype</span><span class="p">)</span><span class="n">sharedInstance</span><span class="p">;</span>
<span class="k">+</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">setSharedInstance</span><span class="p">:(</span><span class="n">GitDawg</span> <span class="o">*</span><span class="p">)</span><span class="nv">instance</span><span class="p">;</span>

<span class="c1">/// Pass in nil for a packagerURL to indicate this is in release mode</span>
<span class="k">-</span> <span class="p">(</span><span class="n">instancetype</span><span class="p">)</span><span class="nf">initWithPackagerURL</span><span class="p">:(</span><span class="n">nullable</span> <span class="n">NSURL</span> <span class="o">*</span><span class="p">)</span><span class="nv">packagerURL</span> <span class="n">NS_DESIGNATED_INITIALIZER</span><span class="p">;</span>
<span class="k">-</span> <span class="p">(</span><span class="n">instancetype</span><span class="p">)</span><span class="n">init</span> <span class="n">NS_UNAVAILABLE</span><span class="p">;</span>

<span class="k">@end</span>

<span class="n">NS_ASSUME_NONNULL_END</span>
</code></pre></div></div>

<p>And for the implementation file <code class="language-plaintext highlighter-rouge">GitDawg.m</code>:</p>

<div class="language-objc highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#import "GitDawg.h"
</span>
<span class="k">@interface</span> <span class="nc">GitDawg</span><span class="p">()</span> <span class="o">&lt;</span><span class="n">RCTBridgeDelegate</span><span class="o">&gt;</span>
<span class="k">@property</span> <span class="p">(</span><span class="n">nonatomic</span><span class="p">,</span> <span class="n">copy</span><span class="p">)</span> <span class="n">NSURL</span> <span class="o">*</span><span class="n">packagerURL</span><span class="p">;</span>
<span class="k">@end</span>

<span class="k">@implementation</span> <span class="nc">GitDawg</span>

<span class="k">static</span> <span class="n">GitDawg</span> <span class="o">*</span><span class="n">_sharedInstance</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">;</span>

<span class="k">+</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">setSharedInstance</span><span class="p">:(</span><span class="n">GitDawg</span> <span class="o">*</span><span class="p">)</span><span class="nv">instance</span><span class="p">;</span>
<span class="p">{</span>
    <span class="n">_sharedInstance</span> <span class="o">=</span> <span class="n">instance</span><span class="p">;</span>
<span class="p">}</span>

<span class="k">+</span> <span class="p">(</span><span class="n">instancetype</span><span class="p">)</span><span class="n">sharedInstance</span><span class="p">;</span>
<span class="p">{</span>
    <span class="n">NSParameterAssert</span><span class="p">(</span><span class="n">_sharedInstance</span><span class="p">);</span>
    <span class="k">return</span> <span class="n">_sharedInstance</span><span class="p">;</span>
<span class="p">}</span>

<span class="k">-</span> <span class="p">(</span><span class="n">instancetype</span><span class="p">)</span><span class="nf">initWithPackagerURL</span><span class="p">:(</span><span class="n">NSURL</span> <span class="o">*</span><span class="p">)</span><span class="nv">packagerURL</span>
<span class="p">{</span>
    <span class="n">self</span> <span class="o">=</span> <span class="p">[</span><span class="n">super</span> <span class="nf">init</span><span class="p">];</span>

    <span class="n">_packagerURL</span> <span class="o">=</span> <span class="n">packagerURL</span><span class="p">;</span>
    <span class="n">_bridge</span> <span class="o">=</span> <span class="p">[[</span><span class="n">RCTBridge</span> <span class="nf">alloc</span><span class="p">]</span> <span class="nf">initWithDelegate</span><span class="p">:</span><span class="n">self</span> <span class="nf">launchOptions</span><span class="p">:@{}];</span>

    <span class="k">return</span> <span class="n">self</span><span class="p">;</span>
<span class="p">}</span>

<span class="k">-</span> <span class="p">(</span><span class="n">NSURL</span> <span class="o">*</span><span class="p">)</span><span class="nf">sourceURLForBridge</span><span class="p">:(</span><span class="n">RCTBridge</span> <span class="o">*</span><span class="p">)</span><span class="nv">bridge</span>
<span class="p">{</span>
    <span class="k">return</span> <span class="n">self</span><span class="p">.</span><span class="n">packagerURL</span> <span class="p">?:</span> <span class="n">self</span><span class="p">.</span><span class="n">releaseBundleURL</span><span class="p">;</span>
<span class="p">}</span>

<span class="k">-</span> <span class="p">(</span><span class="n">NSURL</span> <span class="o">*</span><span class="p">)</span><span class="n">releaseBundleURL</span><span class="p">;</span>
<span class="p">{</span>
    <span class="k">return</span> <span class="p">[[</span><span class="n">NSBundle</span> <span class="nf">bundleForClass</span><span class="p">:</span><span class="n">self</span><span class="p">.</span><span class="n">class</span><span class="p">]</span> <span class="nf">URLForResource</span><span class="p">:</span><span class="s">@"GitDawg"</span> <span class="nf">withExtension</span><span class="p">:</span><span class="s">@"js"</span><span class="p">];</span>
<span class="p">}</span>

<span class="k">@end</span>
</code></pre></div></div>

<p>Then change your <code class="language-plaintext highlighter-rouge">GDWelcomeViewController.m</code> to use the shared <code class="language-plaintext highlighter-rouge">GitDawg</code>.</p>

<div class="language-diff highlighter-rouge"><div class="highlight"><pre class="highlight"><code> #import "GDWelcomeViewController.h"
<span class="gi">+#import "GitDawg.h"
</span> #import &lt;React/RCTRootView.h&gt;
<span class="gd">-#import &lt;React/RCTBridgeDelegate.h&gt;
-#import &lt;React/RCTBridge.h&gt;
</span>
 - (void)loadView
 {
<span class="gd">-    RCTBridge *bridge = [[RCTBridge alloc] initWithDelegate:self launchOptions:@{}];
</span><span class="gi">+    RCTBridge *bridge = [GitDawg sharedInstance].bridge;
</span>     self.view = [[RCTRootView alloc] initWithBridge:bridge
                                              moduleName:@"GitDawg"
                                     initialProperties:@{}];
 }

-// Just use our packaged JS for now
<span class="gd">-- (NSURL *)sourceURLForBridge:(RCTBridge *)bridge
-{
-    NSBundle *emissionBundle = [NSBundle bundleForClass:GDWelcomeViewController.class];
-    return [emissionBundle URLForResource:@"GitDawg" withExtension:@"js"];
-}
-
</span> @end
</code></pre></div></div>

<p>We use the UIAppDelegate callback to set up our React Native bridge (you want this ready as fast as possible
normally) so edit <code class="language-plaintext highlighter-rouge">Example/GitDawg/GDAppDelegate.m</code></p>

<div class="language-diff highlighter-rouge"><div class="highlight"><pre class="highlight"><code> #import "GDAppDelegate.h"
<span class="gi">+#import &lt;GitDawg/GitDawg.h&gt;
</span>
 @implementation GDAppDelegate

 - (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions
 {
<span class="gd">-    // Override point for customization after application launch.
</span><span class="gi">+    NSURL *packagerURL = [NSURL URLWithString:@"http://localhost:8081/src/index.bundle?platform=ios"];
+    GitDawg *dawg = [[GitDawg alloc] initWithPackagerURL:packagerURL];
+    [GitDawg setSharedInstance:dawg];
+
</span>     return YES;
 }
</code></pre></div></div>

<p>These changes give you the ability to switch between a dev mode and a release mode. Consider that React Native just
runs your JavaScript, the source of that could be anything, including from a local dev server. Well, almost.</p>

<p>Because of Apple’s HTTP security, you cannot connect to localhost in an app by default. To fix this, open up
<code class="language-plaintext highlighter-rouge">GitDawg-info.plist</code> and right-click to add a new row. Paste in <code class="language-plaintext highlighter-rouge">NSAppTransportSecurity</code> as the name, and Xcode will
switch it to “App Transport Security Settings”. Hit the <code class="language-plaintext highlighter-rouge">+</code> and add “Allow arbitrary loads” then set it to true.</p>

<p>From here: run the GitDawg app and you should see a red screen. This will be telling you to start the React Native
Packager. Let’s do that. From the root of the GitDwag repo run <code class="language-plaintext highlighter-rouge">$ yarn start</code>. This will start up a server. Once it
says “Metro Bundler Ready.” you can go back into your simulator for GitDawg and hit the reload button at the bottom.</p>

<p>That’s it.</p>

<p>We’re done.</p>

<p>So, there’s obviously a lot more to learn here. You’ve successfully set up a Pod that you can deploy to an app. To
make a real version you’d need to do a bit more process like creating a repo, and making tags.</p>

<p>We use our root view controller in Emission to trigger loading any of our view controllers, in different states. We
also mix that with some admin options, the ability to run someone’s PRs and <a href="https://storybook.js.org">storybooks</a>.</p>

<center><img src="/images/making_cp_pod/emission.png" width="100%" /></center>

<p>So good luck! Something like this probably easily scripted, but there’s a lot of value in understanding how every
piece comes together. So let me know if you make something cool - we’ve been using this structure for 2 years now
and I think it’s the right way to integrate React Native into an existing complex app. It keeps your JS tooling in a
completely different repo from your iOS tooling.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[React Native, 2 years later]]></title>
    <link href="https://artsy.github.io/blog/2018/03/17/two-years-of-react-native/"/>
    <updated>2018-03-17T00:00:00+00:00</updated>
    <id>https://artsy.github.io/blog/2018/03/17/two-years-of-react-native</id>
    <content type="html"><![CDATA[<p><a href="https://twitter.com/alloy/">@alloy</a> first mentioned React Native as an option for Artsy back <a href="https://github.com/artsy/mobile/issues/22">in March 2015</a>, and in February 2016 he
made <a href="https://github.com/artsy/emission/commit/b9154d4145feb49b38e713ee84594de04ea377e3#diff-9879d6db96fd29134fc802214163b95a">our first commit</a> to get the ball rolling. Since then, we’ve grown a new codebase, <a href="https://github.com/artsy/emission/">Emission</a>,
which has slowly taken over the responsibility for creating the UIViewControllers presented inside our iOS app.</p>

<p>We’ve come quite far from where we started, and I was asked if I could give a talk to summerize what we’ve learned in
the last 2 years as a set of native developers using React Native.</p>

<p>The <a href="https://speakerdeck.com/orta/react-native-2-years-later">slides are on speakerdeck</a>, and I’ve <a href="https://github.com/artsy/artsy.github.io/issues/420">opened comments</a> for this post if people have questions. Jump
through to get to the video or watch it <a href="https://www.prolificinteractive.com/iosoho/">on Prolific’s site</a> for <a href="https://www.meetup.com/iOSoho/">iOSoho</a>.</p>

<!-- more -->

<p>Table of Contents for the Video:</p>

<ul id="timers">
  <li><a href="#video" data-time="330">Why move? 5:30</a></li>
  <li><a href="#video" data-time="520">Why not Swift? 8:40</a></li>
  <li><a href="#video" data-time="590">What we expected vs what we have: 9:50</a></li>
  <li><a href="#video" data-time="960">Downsides: 16:00</a></li>
  <li><a href="#video" data-time="1235">Artsy Omakase: 20:35</a></li>
  <li><a href="#video" data-time="1420">Upsides: 23:40</a></li>
  <li><a href="#video" data-time="1645">In-App demo of Emission: 27:25</a></li>
  <li><a href="#video" data-time="2195">RN Brownfield Apps: 36:35</a></li>
  <li><a href="#video" data-time="2379">Our Deployment: 39:30</a></li>
</ul>

<center id="video">
  <iframe src="https://player.vimeo.com/video/260417482" width="100%" height="600" frameborder="0" webkitallowfullscreen="" mozallowfullscreen="" allowfullscreen=""></iframe>
</center>

<script src="https://player.vimeo.com/api/player.js"></script>

<script>
  $(() => {
    $('#timers a').click( function(e) {
      var time = $(this).attr("data-time");
      var iframe = document.querySelector('iframe');
      var player = new Vimeo.Player(iframe);
      player.setCurrentTime(time)
      e.stopPropagation()
    });
  })
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Integrating Redux and Socket.io]]></title>
    <link href="https://artsy.github.io/blog/2018/03/15/integrating-redux-and-socketio/"/>
    <updated>2018-03-15T00:00:00+00:00</updated>
    <id>https://artsy.github.io/blog/2018/03/15/integrating-redux-and-socketio</id>
    <content type="html"><![CDATA[<p>On the engineering team at Artsy, we’ve built a CMS for both internal and external editors to write and publish <a href="https://www.artsy.net/article/artsy-editorial-brooklyn-born-sisters-diego-rivera-dubbed-the-greatest-living-women-mural-painters">articles</a>. We have a team of a dozen in-house editors creating new content on a daily basis. As many people starting using the app simultaneously, something became apparent. Editors would unintentionally go and override each other’s work because there was no way to tell if someone else was currently editing an article. As a workaround, team members would be forced to edit drafts in another editor such as google docs and copy their work over once ready. This made for a lackluster collaborative experience.</p>

<p>So we decided to implement a system that would make our editors more confident in our CMS by ensuring only one editor could go in and edit an article at any given time. I was tasked with coming up with an elegant technical solution for this feature. Here’s the approach I took….</p>

<!-- more -->

<p>We decided to resolve this issue building an article locking mechanism. When an editor would start editing an article, all other users in sessions would be notified. One of the requirements for this new feature was for things needed to update without refreshing the page. In order to fulfill this, we needed to implement a system to push events from the server to clients.</p>

<p>Based on the requirements presented, I looked at potential solutions for this. Right away, the HTML5 WebSocket API seemed like the perfect solution to keep all clients synced in realtime, however a few issues arose. For one, many proxies and firewalls block WebSocket connections, so it’s not always an available option for clients. I needed to find another option to mitigate that problem. That’s where <a href="https://socket.io">socket.io</a> comes in.</p>

<p>Socket.io, a battle tested library for creating real-time bidirectional communication channels, helps mitigate those problems. In a gist socket.io initially establishes a long-polling HTTP connection, and in parallel tries to upgrade it to WebSocket.</p>

<p>By the time this project was proposed, we had already started the process of converting the app from using Coffeescript, Backbone + Jade to a modern javascript stack based on ES6, React for UI components and Redux for managing app state. Naturally, one of the goals was to leverage Redux to manage state for this feature. You’ve probably at least heard of Redux as it has emerged as the industry standard way of implementing one-way data flows in apps. If you’re not familiar with Redux and its architecture, here’s an excellent <a href="https://www.smashingmagazine.com/2016/06/an-introduction-to-redux/">intro to redux</a> article to familiarize yourself.</p>

<p>So how do we go about integrating socket.io in the Redux-based state architecture we just designed. I thought the best would be to change as little as possible to the code structures developers familiar with Redux are already used to. Namely, use standard Redux actions creators and simply use a decorator to enhance them.</p>

<p><img src="/images/2018-03-15-integrating-redux-and-socketio/example.gif" alt="/images/2018-03-15-integrating-redux-and-socketio/example.gif" /></p>

<p>Here’s a simplified version of the <a href="https://leanpub.com/javascriptallongesix/read#decorators">function decorator</a> which broadcasts redux actions via a socket connection to other connected clients.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// From client</span>
<span class="k">import</span> <span class="nx">io</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">socket.io-client</span><span class="dl">'</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">messageTypes</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">./messageTypes</span><span class="dl">'</span>

<span class="kd">let</span> <span class="nx">socket</span> <span class="o">=</span> <span class="nx">io</span><span class="p">(</span><span class="nx">rootURL</span><span class="p">)</span>

<span class="c1">// Helper to emit a redux action to our websocket server</span>
<span class="kd">const</span> <span class="nx">emitAction</span> <span class="o">=</span> <span class="p">(</span><span class="nx">actionCreator</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">return</span> <span class="p">(...</span><span class="nx">args</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="c1">// This return the action object which gets sent to our backend</span>
    <span class="c1">// server via the socket connection</span>
    <span class="kd">const</span> <span class="nx">result</span> <span class="o">=</span> <span class="nx">actionCreator</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="nx">args</span><span class="p">)</span>
    <span class="nx">socket</span><span class="p">.</span><span class="nx">emit</span><span class="p">(</span><span class="nx">result</span><span class="p">.</span><span class="nx">key</span><span class="p">,</span> <span class="p">{</span>
      <span class="p">...</span><span class="nx">result</span><span class="p">.</span><span class="nx">payload</span><span class="p">,</span>
      <span class="na">type</span><span class="p">:</span> <span class="nx">result</span><span class="p">.</span><span class="nx">type</span>
    <span class="p">})</span>
    <span class="k">return</span> <span class="nx">result</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>To recap the code above, <code class="language-plaintext highlighter-rouge">emitAction</code> is a <a href="https://leanpub.com/javascriptallongesix/read#decorators">function decorator</a> that enhances action creators to dispatch actions via the local store and also broadcast that same action to other connected clients. The following code snippet shows how it’s being used to wrap a typical redux action creator.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// actions.js</span>
<span class="k">import</span> <span class="nx">keyMirror</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">client/lib/keyMirror</span><span class="dl">'</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">emitAction</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">client/apps/websocket/client</span><span class="dl">'</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">messageTypes</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">client/apps/websocket/messageTypes</span><span class="dl">'</span>

<span class="k">export</span> <span class="kd">const</span> <span class="nx">actions</span> <span class="o">=</span> <span class="nx">keyMirror</span><span class="p">(</span>
  <span class="p">...</span>
  <span class="dl">'</span><span class="s1">START_EDITING_ARTICLE</span><span class="dl">'</span><span class="p">,</span>
  <span class="dl">'</span><span class="s1">STOP_EDITING_ARTICLE</span><span class="dl">'</span><span class="p">,</span>
  <span class="p">...</span>
<span class="p">)</span>

<span class="k">export</span> <span class="kd">const</span> <span class="nx">startEditingArticle</span> <span class="o">=</span> <span class="nx">emitAction</span><span class="p">((</span><span class="nx">data</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">return</span> <span class="p">{</span>
    <span class="na">type</span><span class="p">:</span> <span class="nx">actions</span><span class="p">.</span><span class="nx">START_EDITING_ARTICLE</span><span class="p">,</span>
    <span class="na">key</span><span class="p">:</span> <span class="nx">messageTypes</span><span class="p">.</span><span class="nx">userStartedEditing</span><span class="p">,</span>
    <span class="na">payload</span><span class="p">:</span> <span class="p">{</span>
      <span class="na">timestamp</span><span class="p">:</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">().</span><span class="nx">toISOString</span><span class="p">(),</span>
      <span class="p">...</span><span class="nx">data</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">})</span>

<span class="p">...</span>
</code></pre></div></div>

<p>On the receiving end, we simply add a reducer to process the event from the action payload which we can then return a new state from.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//reducers.js</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">data</span> <span class="k">as</span> <span class="nx">sd</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">sharify</span><span class="dl">'</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">actions</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">client/actions/editActions</span><span class="dl">'</span>
<span class="k">import</span> <span class="nx">u</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">updeep</span><span class="dl">'</span>

<span class="k">export</span> <span class="kd">const</span> <span class="nx">initialState</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">articles</span><span class="p">:</span> <span class="nx">sd</span><span class="p">.</span><span class="nx">ARTICLES</span><span class="p">,</span>
  <span class="na">articlesInSession</span><span class="p">:</span> <span class="nx">sd</span><span class="p">.</span><span class="nx">ARTICLES_IN_SESSION</span> <span class="o">||</span> <span class="p">{}</span>
<span class="p">}</span>

<span class="k">export</span> <span class="kd">function</span> <span class="nx">articlesReducer</span> <span class="p">(</span><span class="nx">state</span> <span class="o">=</span> <span class="nx">initialState</span><span class="p">,</span> <span class="nx">action</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">switch</span> <span class="p">(</span><span class="nx">action</span><span class="p">.</span><span class="nx">type</span><span class="p">)</span> <span class="p">{</span>
    <span class="p">...</span>
    <span class="k">case</span> <span class="nx">actions</span><span class="p">.</span><span class="nx">START_EDITING_ARTICLE</span><span class="p">:</span> <span class="p">{</span>
      <span class="kd">const</span> <span class="nx">session</span> <span class="o">=</span> <span class="nx">action</span><span class="p">.</span><span class="nx">payload</span>

      <span class="k">return</span> <span class="nx">u</span><span class="p">({</span>
        <span class="na">articlesInSession</span><span class="p">:</span> <span class="p">{</span>
          <span class="p">[</span><span class="nx">session</span><span class="p">.</span><span class="nx">article</span><span class="p">]:</span> <span class="nx">session</span>
        <span class="p">}</span>
      <span class="p">},</span> <span class="nx">state</span><span class="p">)</span>
    <span class="p">}</span>
    <span class="p">...</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>We can now use our <code class="language-plaintext highlighter-rouge">emitAction</code> decorator function to enhance any number of action creators. All that’s needed is to add a <code class="language-plaintext highlighter-rouge">key</code> property to the action object. We can then decide to either process actions
 on a backend service or proxy them directly to other clients. You can find the remainder of the server implementation and our <a href="https://github.com/artsy/positron/blob/master/src/client/apps/websocket/index.js">event handlers</a> in our <a href="https://github.com/artsy/positron">github repo</a> along with instructions on how to run the code.</p>

<h2 id="future-improvements">Future improvements</h2>

<p>There’s an opportunity to extract this module for reuse in other projects and apps. Another logical improvement to this project would be to implement collaborative editing using this architecture. It would also be nice to include helpers for handling events on backend servers.</p>

<h2 id="useful-links">Useful links</h2>

<ul>
  <li><a href="https://redux.js.org/">Redux</a></li>
  <li><a href="https://socket.io/docs/">Socket.io</a></li>
  <li><a href="https://github.com/substantial/updeep">Updeep</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Intro to React Native for an iOS Developer]]></title>
    <link href="https://artsy.github.io/blog/2017/07/06/React-Native-for-iOS-devs/"/>
    <updated>2017-07-06T00:00:00+00:00</updated>
    <id>https://artsy.github.io/blog/2017/07/06/React-Native-for-iOS-devs</id>
    <content type="html"><![CDATA[<p>React Native is a new native library that vastly changes the way in which you can create applications. The majority of the information and tutorials on the subject come from the angle of <em>“you are a web developer, and want to do native”</em>.</p>

<p>This makes sense, given that the size of the JavaScript/web audience is much bigger than native developers, and far more open in the idea of writing apps using JavaScript. For web developers it opens a new creative space to work, however for native developers it provides a way to work with different tools on the same problem. Considering that most developers with a few years on the platform will be comfortable with the Xcode suites of tools, recommending a change this drastic is a tough sell.</p>

<p>We’ve been using React Native now for about a year and a half, and have started to slow down on sweeping changes inside the codebase. This is great because it means we’re spending less time trying to get things to work, and more time building on top of a solid foundations. Now that we’re settled, it’s time to start deeply understanding what happens with React Native.</p>

<p>I’d like cover a lot of the common questions we get asked about from the perspective of native developers:</p>

<ul>
  <li>What is React Native?</li>
  <li>How do you use React Native?</li>
  <li>When is React Native a good technology choice?</li>
</ul>

<p>This article covers an awful lot, so free up at least 45 minutes, make a tea and then come back to this on your computer. It’s worth your time if you’re interested in all the hype around React Native.</p>

<!-- more -->

<div class="mobile-only">
<p>
  <strong>Before you get started</strong>, it looks like you're using a really small screen, this post is built for larger screens and having a terminal around will make it much easier to understand the ideas inside the post. <strong>So if you can, please switch to a different device.</strong> You will be missing sections otherwise.
</p>
</div>

<p>At the highest level, React Native is a way to write React apps that run as native programs. You write your app’s code in JavaScript, and React Native bridges that code with native UIView elements. React Native has two stated aims:</p>

<ul>
  <li>Learn Once, Write Anywhere.</li>
  <li>Make a native developer experience as fast as the web developer’s.</li>
</ul>

<p><strong>“Learn Once, Write Anywhere”</strong> is a play on Java’s <em>“Write Once, Run Anywhere”</em> - something that has not worked well for user-interface heavy mobile clients. The idea of running the same code everywhere encourages platform-less APIs which water down the positives of each platform.</p>

<p><strong>“Learn once”</strong> in this context means that you can re-use the same ideas and tools across many platforms. You don’t lose your ability to write the same user experiences as you can with native code, but you can re-use your existing skills across different platforms. That is the <strong>“Write Anywhere”</strong> aspect.</p>

<p>React Native makes it feasible to share a lot of code between iOS, Android and Web. It is not a panacea for making a cross-platform app though; cross-platform is not an <em>explicit</em> goal of the project. The project moves towards making the best per-platform apps.</p>

<p>To make a developer experience <strong>as fast as the web developer’s</strong> you need to really reflect on how slow native development is. A change in one part of the app required a full restart of the simulator, and for the developer to get back into the same position to see the changes. As a web developer you would just refresh the browser. For example with the simplest Xcode iOS app template, I made a single line change and did an incremental rebuild and it took 9 seconds to get me back into my app with the new change, on a 2015 MacBook Pro. 9 seconds per change leaves a lot of time to lose focus, and discourages playfulness.</p>

<p>If those are the stated goals of React Native specifically, what are the goals of React?</p>

<h1 id="react">React</h1>

<p>React provides a single-direction Component model that <em>can</em> handle what is traditionally handled by the MVC paradigm. The library was created originally for the web, where updates at the equivalent of <code class="language-plaintext highlighter-rouge">UIView</code> level are considered slow. React provides a diffing engine for a tree of components that would <em>eventually</em> be represented as HTML, allowing you to write the end-state of your interface and React would apply the difference to only the HTML that changes.</p>

<p>React was built out of a desire to abstract away a web page’s true view hierarchy (called the DOM) so that they could make changes to all of their views and then React would handle finding the differences between view states.</p>

<p>This pattern is applied by providing a consistent way to represent a component’s state. Imagine if every <code class="language-plaintext highlighter-rouge">UIView</code> subclass had a “<code class="language-plaintext highlighter-rouge">setState</code>” function where you can send a subset of all available options (backgroundColor, frame, alpha, etc) and then eventually UIKit would reconcile all changes to all views in batches.</p>

<p>To get a sense of what this feels like, I’ve created a simplified version of the React components for one of the screens in our app, the  <a href="https://github.com/artsy/emission/blob/e4bbde386d54bc8ca73565d667e2701ab0fad0f0/src/lib/Components/Consignments/Components/ArtistSearchResults.tsx">full implementation is here</a>. You can see the original design, a prototype of how that is then split into components, then the tree structure for those components and finally the props for each component.</p>

<div class="expand-please">
<p>Warning: You may need to expand the width of this window to see the full diagram.</p>
</div>

<div style="flex:1; text-align:center;">
<img style=" margin-top: 20px; margin-right:20px;" src="/images/what-is-rn/simple-overview-render.png" width="269" height="474" />
</div>
<div style="flex:1"><center><?xml version="1.0" encoding="UTF-8"?>
<svg width="300px" height="544px" viewBox="0 0 300 544" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
    <!-- Generator: Sketch 44.1 (41455) - http://www.bohemiancoding.com/sketch -->
    <defs></defs>
    <g id="Page-1" stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">
        <g id="Artist-Search-Prototype">
            <g id="PHONE" transform="translate(2.000000, 2.000000)">
                <rect id="Edge-Copy" stroke="#82D7DA" stroke-width="1.5" x="-0.75" y="-0.75" width="294.582031" height="541.06666" rx="3"></rect>
                <rect id="Rectangle-3-Copy" stroke="#82D7DA" x="13.5540321" y="15.7297041" width="268.635469" height="473.580283"></rect>
                <ellipse id="Oval-1-Copy-7" stroke="#82D7DA" cx="43.5062857" cy="204.513169" rx="12.5468775" ry="12.5540321"></ellipse>
                <ellipse id="Oval-1-Copy-9" stroke="#82D7DA" cx="43.5062857" cy="237.14825" rx="12.5468775" ry="12.5540321"></ellipse>
                <ellipse id="Oval-1-Copy-30" stroke="#82D7DA" cx="43.5062857" cy="269.78333" rx="12.5468775" ry="12.5540321"></ellipse>
                <path d="M14.1418681,293.521739 L281.750032,293.521739" id="Path-10-Copy-4" stroke="#82D7DA"></path>
                <ellipse id="Oval-1-Copy-6" stroke="#99E0E2" cx="145.949571" cy="515.823457" rx="17.5849219" ry="17.594565"></ellipse>
                <g id="Group" transform="translate(30.459408, 145.770025)">
                    <path d="M1.08783601,25.1621198 L233.884742,25.1621198" id="Path-10-Copy-3" stroke="#82D7DA"></path>
                    <path d="M220.83071,5.0608023 L227.357726,12.1080877" id="Path-10-Copy-5" stroke="#82D7DA"></path>
                    <path d="M220.83071,5.0608023 L227.357726,12.1080877" id="Path-10-Copy-5" stroke="#82D7DA" transform="translate(224.094218, 8.702688) scale(-1, 1) translate(-224.094218, -8.702688) "></path>
                    <path d="M6.40517841,2.6978333 C6.40517841,2.12345589 6.38777304,2.10605051 6.90993432,2.10605051 L8.14571603,2.10605051 C9.10301171,2.10605051 9.76441601,2.24529352 10.1647397,2.54118491 C10.4258203,2.73264405 10.5476579,3.37664297 10.5998741,3.81177737 C10.6869009,3.91620963 10.9827923,3.91620963 11.0524138,3.77696662 C11.0001977,3.25480534 11.1220353,1.84496987 11.3134945,1.13134945 C11.2786837,1.06172794 11.0872246,1.04432257 11.0001977,1.07913332 C10.7391171,1.5316731 10.5824687,1.56648385 9.64257837,1.56648385 L2.59340104,1.56648385 C1.79275374,1.56648385 1.21837633,1.58388923 1.11394407,1.02691719 C1.06172794,0.974701063 0.835458054,0.992106439 0.783241926,1.02691719 C0.661404293,1.72313224 0.400323651,2.83707631 0.121837633,3.62031823 C0.191459137,3.75956124 0.435134403,3.84658812 0.574377412,3.74215587 C0.76583655,3.30702146 0.939890311,2.92410319 1.35761934,2.54118491 C1.79275374,2.14086126 2.75004943,2.10605051 3.4984806,2.10605051 L4.45577629,2.10605051 C4.97793757,2.10605051 4.97793757,2.12345589 4.97793757,2.66302255 L4.97793757,10.4432257 C4.97793757,12.2707902 4.89091069,12.5318708 3.89880425,12.6188977 L3.27221071,12.6711138 C3.1329677,12.7581407 3.16777845,13.0540321 3.27221071,13.1062482 C4.38615478,13.0714375 4.99534295,13.0540321 5.69155799,13.0540321 C6.38777304,13.0540321 6.97955583,13.0714375 7.97166227,13.1062482 C8.07609452,13.0540321 8.11090527,12.7407353 8.00647302,12.6711138 L7.44950098,12.6188977 C6.43998917,12.5318708 6.40517841,12.2707902 6.40517841,10.4432257 L6.40517841,2.6978333 Z M13.1932751,11.10463 C13.1932751,12.357817 13.1758697,12.5144654 12.5318708,12.6188977 L12.2011687,12.6711138 C12.079331,12.7581407 12.1141418,13.0540321 12.2359794,13.1062482 C12.6885192,13.0714375 13.2106805,13.0540321 13.837274,13.0540321 C14.4464622,13.0540321 14.9512181,13.0714375 15.7692708,13.1062482 C15.8911084,13.0540321 15.9259192,12.7581407 15.8040815,12.6711138 L15.177488,12.6188977 C14.5160837,12.5666816 14.4812729,12.357817 14.4812729,11.10463 L14.4812729,8.73749882 C14.4812729,8.14571603 14.5334891,7.64096012 14.7075428,7.39728485 C14.8467858,7.20582572 15.0556503,7.04917733 15.3341364,7.04917733 C15.5778116,7.04917733 15.8388923,7.15360959 16.0999729,7.32766335 C16.2218105,7.39728485 16.3088374,7.44950098 16.4828912,7.44950098 C16.7613772,7.44950098 17.2313224,7.22323109 17.2313224,6.64885368 C17.2313224,6.23112465 16.8832148,5.95263864 16.4480804,5.95263864 C15.8040815,5.95263864 15.1426772,6.4922053 14.5334891,6.9969612 C14.4986783,6.97955583 14.4812729,6.9273397 14.4812729,6.84031282 L14.4812729,5.830801 C14.4812729,5.7611795 14.4290568,5.72636875 14.3420299,5.70896337 C13.9068955,5.97004401 12.9844106,6.42258379 12.5840869,6.5618268 C12.4970601,6.61404293 12.4970601,6.80550207 12.5666816,6.87512357 L12.7233299,6.97955583 C13.1932751,7.2928526 13.1932751,7.37987948 13.1932751,8.05868915 L13.1932751,11.10463 Z M19.3199675,10.1995504 L21.3912073,9.45111924 C21.6522879,9.36409236 21.6870987,9.20744397 21.6870987,8.94636333 L21.704504,8.14571603 C21.7219094,7.50171711 21.5130449,6.6314483 20.4339116,6.6314483 C19.946561,6.6314483 19.3547783,6.87512357 19.3199675,7.41469023 C19.3025621,7.69317625 19.2851567,7.90204076 19.1459137,8.00647302 C18.8848331,8.21533753 18.4148879,8.33717516 18.1538073,8.33717516 C17.9971589,8.33717516 17.910132,8.25014828 17.910132,8.0934999 C17.910132,7.18842034 19.8769395,5.95263864 21.147532,5.95263864 C22.4007191,5.95263864 23.0099072,6.68366443 22.9576911,7.98906764 L22.8532589,11.0176031 C22.8184481,11.8182504 22.9750965,12.5318708 23.6539062,12.5318708 C23.8279599,12.5318708 23.9846083,12.4796547 24.0890406,12.4274386 C24.1760674,12.3752224 24.2630943,12.3056009 24.3153104,12.3056009 C24.384932,12.3056009 24.4371481,12.4100332 24.4371481,12.5318708 C24.4371481,12.6188977 23.8279599,13.2977074 22.9750965,13.2977074 C22.5573675,13.2977074 22.1396384,13.141059 21.843747,12.7581407 C21.7741255,12.6537084 21.6696933,12.5144654 21.565261,12.5144654 C21.4434234,12.5144654 21.2345589,12.6711138 20.8864514,12.862573 C20.5035331,13.0714375 20.1206148,13.2977074 19.6332643,13.2977074 C19.1285084,13.2977074 18.7107793,13.1584644 18.4148879,12.8973837 C18.0841858,12.6014923 17.8753213,12.1663579 17.8753213,11.6790074 C17.8753213,11.0001977 18.2060234,10.5998741 19.3199675,10.1995504 Z M19.2155352,11.4701429 C19.2155352,11.7660343 19.4243998,12.5144654 20.3120739,12.5144654 C20.6601815,12.5144654 21.1997481,12.2533848 21.3738019,12.079331 C21.5826664,11.8704665 21.5826664,11.6267913 21.6000718,11.2612784 L21.6348825,10.2343612 C21.6348825,10.042902 21.565261,10.0080913 21.4608288,10.0080913 C21.3563965,10.0080913 21.0605051,10.0777128 20.7472083,10.182145 C19.7202912,10.5302526 19.2155352,10.7913332 19.2155352,11.4701429 Z M29.1365996,5.95263864 C26.2473072,5.95263864 24.9244986,7.95425689 24.9244986,9.83403751 C24.9244986,10.965387 25.3248223,11.8182504 25.9340104,12.4100332 C26.5431986,13.001816 27.396062,13.2977074 28.318547,13.2977074 C29.3280588,13.2977074 30.633462,12.8103568 31.2252448,11.522359 C31.2078394,11.3657106 31.051191,11.243873 30.911948,11.2786837 C30.5116243,11.8704665 29.9894631,12.3230063 28.9799513,12.3230063 C27.117576,12.3230063 26.1776857,10.7043063 26.1776857,9.34668698 C26.1776857,7.50171711 27.3612513,6.54442142 28.5796276,6.54442142 C29.293248,6.54442142 29.9372469,6.9969612 30.3201652,7.46690636 C30.3897867,7.55393324 30.4768136,7.58874399 30.5638405,7.58874399 C30.772705,7.58874399 30.9467588,7.25804184 30.9467588,6.94474507 C30.9467588,6.64885368 30.8249211,6.37036766 30.6856781,6.24853003 C30.215733,6.03966552 29.5369233,5.95263864 29.1365996,5.95263864 Z M36.742749,8.59825581 L33.5227544,8.59825581 C33.0702146,8.59825581 33.0528093,8.63306656 33.0528093,9.06820096 C33.0528093,10.826144 34.0797265,12.3230063 35.9421017,12.3230063 C36.5164791,12.3230063 37.0038296,12.1489525 37.5433963,11.4701429 C37.7174501,11.4179267 37.8392877,11.522359 37.8566931,11.6790074 C37.2823157,12.862573 36.0291286,13.2977074 35.124049,13.2977074 C33.9926996,13.2977074 33.1050254,12.8103568 32.6002695,12.1489525 C32.0781082,11.4701429 31.8692437,10.6520902 31.8692437,9.88625364 C31.8692437,7.74539238 33.2790792,5.95263864 35.3677243,5.95263864 C36.8645866,5.95263864 37.8392877,6.97955583 37.8392877,8.02387839 C37.8392877,8.26755366 37.8044769,8.40679667 37.7696662,8.47641817 C37.7174501,8.58085043 37.4737748,8.59825581 36.742749,8.59825581 Z M33.366106,8.07609452 L34.6018877,8.07609452 C35.8898856,8.07609452 36.2728038,8.00647302 36.4120469,7.90204076 C36.464263,7.86723001 36.5164791,7.7976085 36.5164791,7.57133861 C36.5164791,7.08398808 36.185777,6.47479992 35.1762652,6.47479992 C34.149348,6.47479992 33.2616738,7.41469023 33.2442684,7.98906764 C33.2442684,8.02387839 33.2442684,8.07609452 33.366106,8.07609452 Z M39.33615,17.3879708 C39.7364737,17.3879708 40.1542027,17.2313224 40.4500941,16.5699181 C41.3029575,14.6727321 42.7301984,11.6441966 43.3045758,10.4780364 L44.2792769,8.47641817 C44.8710597,7.24063647 45.1843564,6.73588056 45.7587338,6.6314483 L46.0546252,6.57923218 C46.1764629,6.47479992 46.1590575,6.21371928 46.0198145,6.14409777 C45.5324639,6.17890852 45.1321403,6.1963139 44.6970059,6.1963139 C44.2444661,6.1963139 43.7223048,6.17890852 43.1653328,6.14409777 C43.0260898,6.1963139 43.0086844,6.4922053 43.130522,6.57923218 L43.6700887,6.66625906 C43.9833855,6.71847518 44.0878177,6.84031282 44.0878177,6.96215045 C44.0878177,7.15360959 43.8615478,7.7976085 43.4786296,8.70268806 L42.8868468,10.0777128 C42.57355,10.7913332 42.295064,11.3308999 42.2428479,11.3657106 C42.1732264,11.3308999 41.8425242,10.4084149 41.738092,10.1299289 L41.1811199,8.5286343 C41.0766877,8.23274291 40.676364,7.10139346 40.676364,6.89252895 C40.676364,6.77069131 40.815607,6.71847518 41.0592823,6.66625906 L41.4944167,6.57923218 C41.6162543,6.4922053 41.5988489,6.1963139 41.4596059,6.14409777 C40.9026339,6.17890852 40.4152834,6.1963139 39.9453382,6.1963139 C39.3709608,6.1963139 38.8487995,6.17890852 38.2918275,6.14409777 C38.1525845,6.1963139 38.1351791,6.4922053 38.2396113,6.57923218 L38.6747458,6.66625906 C39.2839339,6.78809669 39.4057715,7.20582572 39.7016629,8.02387839 L41.0592823,11.7486289 C41.2855522,12.3926278 41.3551737,12.6014923 41.3551737,12.9495998 C41.3551737,13.1932751 41.233336,13.558788 41.1811199,13.698031 C41.0244715,14.11576 40.676364,14.8467858 40.1716081,15.6300278 C40.0497705,15.8214869 39.8757167,15.9433245 39.5972307,15.9433245 L39.2665285,15.9433245 C38.8836103,15.9433245 38.5703135,16.1695944 38.5703135,16.6395396 C38.5703135,17.074674 38.8313941,17.3879708 39.33615,17.3879708 Z" id="Tracey" fill="#82D7DA"></path>
                </g>
            </g>
            <path d="M95.5233465,486.582967 C102.211247,486.582967 103.731887,486.393363 104.777374,485.208886 C105.839635,484.005405 105.996219,482.321605 105.967341,474.739225 C105.962981,473.594646 105.961212,472.934324 105.961212,472.164621 C105.961212,470.785215 105.973719,469.582517 106.00164,467.785441 C106.10588,461.076081 105.986413,459.691009 104.987913,458.595058 C103.956817,457.46333 102.122056,457.215451 95.8590604,457.215451 C89.5470534,457.215451 87.4893798,457.538809 86.3715732,458.847861 C85.2904371,460.113969 85.1372609,461.755417 85.1900008,468.952794 C85.2002102,470.34606 85.2044919,471.18902 85.2044919,472.164621 C85.2044919,473.011976 85.2018977,473.741488 85.1956026,474.978435 C85.1584266,482.283239 85.3108702,483.923153 86.3590334,485.130577 C87.4112097,486.342624 89.1463085,486.582967 95.5233465,486.582967 Z" id="Oval-1-Copy-22" stroke="#82D7DA"></path>
            <g id="key2" transform="translate(32.459408, 384.918275)" stroke="#82D7DA">
                <path d="M10.8478099,29.8675158 C17.8662182,29.8675158 19.3439093,29.6490307 20.3117972,28.2220547 C21.2715546,26.8070657 21.2856755,26.5299835 21.2856755,15.4491697 C21.2856755,14.0697633 21.2981826,12.8670658 21.3261029,11.0699898 C21.4303431,4.36063006 21.3108767,2.97555764 20.3123765,1.87960647 C19.2812808,0.747878611 17.4465191,0.5 11.1835238,0.5 C4.8715168,0.5 2.81384321,0.823357307 1.6960366,2.13240968 C0.614900502,3.39851759 0.461724293,5.03996524 0.514464241,12.2373422 C0.524673628,13.6306088 0.528955327,14.4735684 0.528955327,15.4491697 C0.528955327,16.2965249 0.526361076,17.0260367 0.520065952,18.2629834 C0.48289002,25.5677876 0.635333552,27.2077015 1.68349682,28.4151256 C2.73567311,29.6271725 4.47077193,29.8675158 10.8478099,29.8675158 Z" id="Oval-1-Copy-19"></path>
                <path d="M90.8037565,29.8675158 C97.8221647,29.8675158 99.2998559,29.6490307 100.267744,28.2220547 C101.227501,26.8070657 101.241622,26.5299835 101.241622,15.4491697 C101.241622,14.0697633 101.254129,12.8670658 101.282049,11.0699898 C101.38629,4.36063006 101.266823,2.97555764 100.268323,1.87960647 C99.2372274,0.747878611 97.4024657,0.5 91.1394703,0.5 C84.8274634,0.5 82.7697898,0.823357307 81.6519832,2.13240968 C80.5708471,3.39851759 80.4176709,5.03996524 80.4704108,12.2373422 C80.4806202,13.6306088 80.4849019,14.4735684 80.4849019,15.4491697 C80.4849019,16.2965249 80.4823077,17.0260367 80.4760125,18.2629834 C80.4388366,25.5677876 80.5912801,27.2077015 81.6394434,28.4151256 C82.6916197,29.6271725 84.4267185,29.8675158 90.8037565,29.8675158 Z" id="Oval-1-Copy-20"></path>
                <path d="M170.759703,29.8675158 C177.778111,29.8675158 179.255802,29.6490307 180.22369,28.2220547 C181.183448,26.8070657 181.197569,26.5299835 181.197569,15.4491697 C181.197569,14.0697633 181.210076,12.8670658 181.237996,11.0699898 C181.342236,4.36063006 181.22277,2.97555764 180.22427,1.87960647 C179.193174,0.747878611 177.358412,0.5 171.095417,0.5 C164.78341,0.5 162.725736,0.823357307 161.60793,2.13240968 C160.526794,3.39851759 160.373617,5.03996524 160.426357,12.2373422 C160.436567,13.6306088 160.440848,14.4735684 160.440848,15.4491697 C160.440848,16.2965249 160.438254,17.0260367 160.431959,18.2629834 C160.394783,25.5677876 160.547227,27.2077015 161.59539,28.4151256 C162.647566,29.6271725 164.382665,29.8675158 170.759703,29.8675158 Z" id="Oval-1-Copy-21"></path>
                <path d="M37.4997921,29.8675158 C44.5182004,29.8675158 45.9958915,29.6490307 46.9637794,28.2220547 C47.9235367,26.8070657 47.9376577,26.5299835 47.9376577,15.4491697 C47.9376577,14.0697633 47.9501648,12.8670658 47.9780851,11.0699898 C48.0823253,4.36063006 47.9628588,2.97555764 46.9643587,1.87960647 C45.933263,0.747878611 44.0985013,0.5 37.835506,0.5 C31.523499,0.5 29.4658254,0.823357307 28.3480188,2.13240968 C27.2668827,3.39851759 27.1137065,5.03996524 27.1664464,12.2373422 C27.1766558,13.6306088 27.1809375,14.4735684 27.1809375,15.4491697 C27.1809375,16.2965249 27.1783433,17.0260367 27.1720481,18.2629834 C27.1348722,25.5677876 27.2873157,27.2077015 28.335479,28.4151256 C29.3876553,29.6271725 31.1227541,29.8675158 37.4997921,29.8675158 Z" id="Oval-1-Copy-22"></path>
                <path d="M117.455739,29.8675158 C124.474147,29.8675158 125.951838,29.6490307 126.919726,28.2220547 C127.879483,26.8070657 127.893604,26.5299835 127.893604,15.4491697 C127.893604,14.0697633 127.906111,12.8670658 127.934032,11.0699898 C128.038272,4.36063006 127.918805,2.97555764 126.920305,1.87960647 C125.88921,0.747878611 124.054448,0.5 117.791453,0.5 C111.479446,0.5 109.421772,0.823357307 108.303965,2.13240968 C107.222829,3.39851759 107.069653,5.03996524 107.122393,12.2373422 C107.132602,13.6306088 107.136884,14.4735684 107.136884,15.4491697 C107.136884,16.2965249 107.13429,17.0260367 107.127995,18.2629834 C107.090819,25.5677876 107.243262,27.2077015 108.291426,28.4151256 C109.343602,29.6271725 111.078701,29.8675158 117.455739,29.8675158 Z" id="Oval-1-Copy-23"></path>
                <path d="M197.411685,29.8675158 C204.430094,29.8675158 205.907785,29.6490307 206.875673,28.2220547 C207.83543,26.8070657 207.849551,26.5299835 207.849551,15.4491697 C207.849551,14.0697633 207.862058,12.8670658 207.889978,11.0699898 C207.994218,4.36063006 207.874752,2.97555764 206.876252,1.87960647 C205.845156,0.747878611 204.010394,0.5 197.747399,0.5 C191.435392,0.5 189.377719,0.823357307 188.259912,2.13240968 C187.178776,3.39851759 187.0256,5.03996524 187.07834,12.2373422 C187.088549,13.6306088 187.092831,14.4735684 187.092831,15.4491697 C187.092831,16.2965249 187.090236,17.0260367 187.083941,18.2629834 C187.046765,25.5677876 187.199209,27.2077015 188.247372,28.4151256 C189.299548,29.6271725 191.034647,29.8675158 197.411685,29.8675158 Z" id="Oval-1-Copy-24"></path>
                <path d="M64.1517743,29.8675158 C71.1701825,29.8675158 72.6478737,29.6490307 73.6157616,28.2220547 C74.5755189,26.8070657 74.5896399,26.5299835 74.5896399,15.4491697 C74.5896399,14.0697633 74.602147,12.8670658 74.6300673,11.0699898 C74.7343075,4.36063006 74.614841,2.97555764 73.6163409,1.87960647 C72.5852452,0.747878611 70.7504835,0.5 64.4874882,0.5 C58.1754812,0.5 56.1178076,0.823357307 55.000001,2.13240968 C53.9188649,3.39851759 53.7656887,5.03996524 53.8184286,12.2373422 C53.828638,13.6306088 53.8329197,14.4735684 53.8329197,15.4491697 C53.8329197,16.2965249 53.8303255,17.0260367 53.8240303,18.2629834 C53.7868544,25.5677876 53.9392979,27.2077015 54.9874612,28.4151256 C56.0396375,29.6271725 57.7747363,29.8675158 64.1517743,29.8675158 Z" id="Oval-1-Copy-25"></path>
                <path d="M144.107721,29.8675158 C151.126129,29.8675158 152.60382,29.6490307 153.571708,28.2220547 C154.531466,26.8070657 154.545586,26.5299835 154.545586,15.4491697 C154.545586,14.0697633 154.558094,12.8670658 154.586014,11.0699898 C154.690254,4.36063006 154.570788,2.97555764 153.572287,1.87960647 C152.541192,0.747878611 150.70643,0.5 144.443435,0.5 C138.131428,0.5 136.073754,0.823357307 134.955948,2.13240968 C133.874811,3.39851759 133.721635,5.03996524 133.774375,12.2373422 C133.784585,13.6306088 133.788866,14.4735684 133.788866,15.4491697 C133.788866,16.2965249 133.786272,17.0260367 133.779977,18.2629834 C133.742801,25.5677876 133.895245,27.2077015 134.943408,28.4151256 C135.995584,29.6271725 137.730683,29.8675158 144.107721,29.8675158 Z" id="Oval-1-Copy-26"></path>
                <path d="M224.063667,29.8675158 C231.082076,29.8675158 232.559767,29.6490307 233.527655,28.2220547 C234.487412,26.8070657 234.501533,26.5299835 234.501533,15.4491697 C234.501533,14.0697633 234.51404,12.8670658 234.54196,11.0699898 C234.646201,4.36063006 234.526734,2.97555764 233.528234,1.87960647 C232.497138,0.747878611 230.662377,0.5 224.399381,0.5 C218.087374,0.5 216.029701,0.823357307 214.911894,2.13240968 C213.830758,3.39851759 213.677582,5.03996524 213.730322,12.2373422 C213.740531,13.6306088 213.744813,14.4735684 213.744813,15.4491697 C213.744813,16.2965249 213.742219,17.0260367 213.735923,18.2629834 C213.698748,25.5677876 213.851191,27.2077015 214.899354,28.4151256 C215.951531,29.6271725 217.686629,29.8675158 224.063667,29.8675158 Z" id="Oval-1-Copy-27"></path>
            </g>
            <g id="key3" transform="translate(58.567472, 421.904699)" stroke="#82D7DA">
                <path d="M10.8478099,29.8675158 C17.8662182,29.8675158 19.3439093,29.6490307 20.3117972,28.2220547 C21.2715546,26.8070657 21.2856755,26.5299835 21.2856755,15.4491697 C21.2856755,14.0697633 21.2981826,12.8670658 21.3261029,11.0699898 C21.4303431,4.36063006 21.3108767,2.97555764 20.3123765,1.87960647 C19.2812808,0.747878611 17.4465191,0.5 11.1835238,0.5 C4.8715168,0.5 2.81384321,0.823357307 1.6960366,2.13240968 C0.614900502,3.39851759 0.461724293,5.03996524 0.514464241,12.2373422 C0.524673628,13.6306088 0.528955327,14.4735684 0.528955327,15.4491697 C0.528955327,16.2965249 0.526361076,17.0260367 0.520065952,18.2629834 C0.48289002,25.5677876 0.635333552,27.2077015 1.68349682,28.4151256 C2.73567311,29.6271725 4.47077193,29.8675158 10.8478099,29.8675158 Z" id="Oval-1-Copy-19"></path>
                <path d="M90.8037565,29.8675158 C97.8221647,29.8675158 99.2998559,29.6490307 100.267744,28.2220547 C101.227501,26.8070657 101.241622,26.5299835 101.241622,15.4491697 C101.241622,14.0697633 101.254129,12.8670658 101.282049,11.0699898 C101.38629,4.36063006 101.266823,2.97555764 100.268323,1.87960647 C99.2372274,0.747878611 97.4024657,0.5 91.1394703,0.5 C84.8274634,0.5 82.7697898,0.823357307 81.6519832,2.13240968 C80.5708471,3.39851759 80.4176709,5.03996524 80.4704108,12.2373422 C80.4806202,13.6306088 80.4849019,14.4735684 80.4849019,15.4491697 C80.4849019,16.2965249 80.4823077,17.0260367 80.4760125,18.2629834 C80.4388366,25.5677876 80.5912801,27.2077015 81.6394434,28.4151256 C82.6916197,29.6271725 84.4267185,29.8675158 90.8037565,29.8675158 Z" id="Oval-1-Copy-20"></path>
                <path d="M170.759703,29.8675158 C177.778111,29.8675158 179.255802,29.6490307 180.22369,28.2220547 C181.183448,26.8070657 181.197569,26.5299835 181.197569,15.4491697 C181.197569,14.0697633 181.210076,12.8670658 181.237996,11.0699898 C181.342236,4.36063006 181.22277,2.97555764 180.22427,1.87960647 C179.193174,0.747878611 177.358412,0.5 171.095417,0.5 C164.78341,0.5 162.725736,0.823357307 161.60793,2.13240968 C160.526794,3.39851759 160.373617,5.03996524 160.426357,12.2373422 C160.436567,13.6306088 160.440848,14.4735684 160.440848,15.4491697 C160.440848,16.2965249 160.438254,17.0260367 160.431959,18.2629834 C160.394783,25.5677876 160.547227,27.2077015 161.59539,28.4151256 C162.647566,29.6271725 164.382665,29.8675158 170.759703,29.8675158 Z" id="Oval-1-Copy-21"></path>
                <path d="M37.4997921,29.8675158 C44.5182004,29.8675158 45.9958915,29.6490307 46.9637794,28.2220547 C47.9235367,26.8070657 47.9376577,26.5299835 47.9376577,15.4491697 C47.9376577,14.0697633 47.9501648,12.8670658 47.9780851,11.0699898 C48.0823253,4.36063006 47.9628588,2.97555764 46.9643587,1.87960647 C45.933263,0.747878611 44.0985013,0.5 37.835506,0.5 C31.523499,0.5 29.4658254,0.823357307 28.3480188,2.13240968 C27.2668827,3.39851759 27.1137065,5.03996524 27.1664464,12.2373422 C27.1766558,13.6306088 27.1809375,14.4735684 27.1809375,15.4491697 C27.1809375,16.2965249 27.1783433,17.0260367 27.1720481,18.2629834 C27.1348722,25.5677876 27.2873157,27.2077015 28.335479,28.4151256 C29.3876553,29.6271725 31.1227541,29.8675158 37.4997921,29.8675158 Z" id="Oval-1-Copy-22"></path>
                <path d="M117.455739,29.8675158 C124.474147,29.8675158 125.951838,29.6490307 126.919726,28.2220547 C127.879483,26.8070657 127.893604,26.5299835 127.893604,15.4491697 C127.893604,14.0697633 127.906111,12.8670658 127.934032,11.0699898 C128.038272,4.36063006 127.918805,2.97555764 126.920305,1.87960647 C125.88921,0.747878611 124.054448,0.5 117.791453,0.5 C111.479446,0.5 109.421772,0.823357307 108.303965,2.13240968 C107.222829,3.39851759 107.069653,5.03996524 107.122393,12.2373422 C107.132602,13.6306088 107.136884,14.4735684 107.136884,15.4491697 C107.136884,16.2965249 107.13429,17.0260367 107.127995,18.2629834 C107.090819,25.5677876 107.243262,27.2077015 108.291426,28.4151256 C109.343602,29.6271725 111.078701,29.8675158 117.455739,29.8675158 Z" id="Oval-1-Copy-23"></path>
                <path d="M64.1517743,29.8675158 C71.1701825,29.8675158 72.6478737,29.6490307 73.6157616,28.2220547 C74.5755189,26.8070657 74.5896399,26.5299835 74.5896399,15.4491697 C74.5896399,14.0697633 74.602147,12.8670658 74.6300673,11.0699898 C74.7343075,4.36063006 74.614841,2.97555764 73.6163409,1.87960647 C72.5852452,0.747878611 70.7504835,0.5 64.4874882,0.5 C58.1754812,0.5 56.1178076,0.823357307 55.000001,2.13240968 C53.9188649,3.39851759 53.7656887,5.03996524 53.8184286,12.2373422 C53.828638,13.6306088 53.8329197,14.4735684 53.8329197,15.4491697 C53.8329197,16.2965249 53.8303255,17.0260367 53.8240303,18.2629834 C53.7868544,25.5677876 53.9392979,27.2077015 54.9874612,28.4151256 C56.0396375,29.6271725 57.7747363,29.8675158 64.1517743,29.8675158 Z" id="Oval-1-Copy-25"></path>
                <path d="M144.107721,29.8675158 C151.126129,29.8675158 152.60382,29.6490307 153.571708,28.2220547 C154.531466,26.8070657 154.545586,26.5299835 154.545586,15.4491697 C154.545586,14.0697633 154.558094,12.8670658 154.586014,11.0699898 C154.690254,4.36063006 154.570788,2.97555764 153.572287,1.87960647 C152.541192,0.747878611 150.70643,0.5 144.443435,0.5 C138.131428,0.5 136.073754,0.823357307 134.955948,2.13240968 C133.874811,3.39851759 133.721635,5.03996524 133.774375,12.2373422 C133.784585,13.6306088 133.788866,14.4735684 133.788866,15.4491697 C133.788866,16.2965249 133.786272,17.0260367 133.779977,18.2629834 C133.742801,25.5677876 133.895245,27.2077015 134.943408,28.4151256 C135.995584,29.6271725 137.730683,29.8675158 144.107721,29.8675158 Z" id="Oval-1-Copy-26"></path>
            </g>
            <g id="key1" transform="translate(19.405376, 345.756178)" stroke="#82D7DA">
                <path d="M10.8478099,29.8675158 C17.8662182,29.8675158 19.3439093,29.6490307 20.3117972,28.2220547 C21.2715546,26.8070657 21.2856755,26.5299835 21.2856755,15.4491697 C21.2856755,14.0697633 21.2981826,12.8670658 21.3261029,11.0699898 C21.4303431,4.36063006 21.3108767,2.97555764 20.3123765,1.87960647 C19.2812808,0.747878611 17.4465191,0.5 11.1835238,0.5 C4.8715168,0.5 2.81384321,0.823357307 1.6960366,2.13240968 C0.614900502,3.39851759 0.461724293,5.03996524 0.514464241,12.2373422 C0.524673628,13.6306088 0.528955327,14.4735684 0.528955327,15.4491697 C0.528955327,16.2965249 0.526361076,17.0260367 0.520065952,18.2629834 C0.48289002,25.5677876 0.635333552,27.2077015 1.68349682,28.4151256 C2.73567311,29.6271725 4.47077193,29.8675158 10.8478099,29.8675158 Z" id="Oval-1-Copy-8"></path>
                <path d="M91.3476745,29.8675158 C98.3660827,29.8675158 99.8437739,29.6490307 100.811662,28.2220547 C101.771419,26.8070657 101.78554,26.5299835 101.78554,15.4491697 C101.78554,14.0697633 101.798047,12.8670658 101.825967,11.0699898 C101.930208,4.36063006 101.810741,2.97555764 100.812241,1.87960647 C99.7811454,0.747878611 97.9463837,0.5 91.6833884,0.5 C85.3713814,0.5 83.3137078,0.823357307 82.1959012,2.13240968 C81.1147651,3.39851759 80.9615889,5.03996524 81.0143288,12.2373422 C81.0245382,13.6306088 81.0288199,14.4735684 81.0288199,15.4491697 C81.0288199,16.2965249 81.0262257,17.0260367 81.0199305,18.2629834 C80.9827546,25.5677876 81.1351981,27.2077015 82.1833614,28.4151256 C83.2355377,29.6271725 84.9706365,29.8675158 91.3476745,29.8675158 Z" id="Oval-1-Copy-12"></path>
                <path d="M169.671867,29.8675158 C176.690275,29.8675158 178.167966,29.6490307 179.135854,28.2220547 C180.095612,26.8070657 180.109733,26.5299835 180.109733,15.4491697 C180.109733,14.0697633 180.12224,12.8670658 180.15016,11.0699898 C180.2544,4.36063006 180.134934,2.97555764 179.136434,1.87960647 C178.105338,0.747878611 176.270576,0.5 170.007581,0.5 C163.695574,0.5 161.6379,0.823357307 160.520094,2.13240968 C159.438958,3.39851759 159.285781,5.03996524 159.338521,12.2373422 C159.348731,13.6306088 159.353012,14.4735684 159.353012,15.4491697 C159.353012,16.2965249 159.350418,17.0260367 159.344123,18.2629834 C159.306947,25.5677876 159.459391,27.2077015 160.507554,28.4151256 C161.55973,29.6271725 163.294829,29.8675158 169.671867,29.8675158 Z" id="Oval-1-Copy-15"></path>
                <path d="M36.9558741,29.8675158 C43.9742823,29.8675158 45.4519735,29.6490307 46.4198614,28.2220547 C47.3796187,26.8070657 47.3937397,26.5299835 47.3937397,15.4491697 C47.3937397,14.0697633 47.4062468,12.8670658 47.4341671,11.0699898 C47.5384073,4.36063006 47.4189408,2.97555764 46.4204407,1.87960647 C45.389345,0.747878611 43.5545833,0.5 37.291588,0.5 C30.979581,0.5 28.9219074,0.823357307 27.8041008,2.13240968 C26.7229647,3.39851759 26.5697885,5.03996524 26.6225284,12.2373422 C26.6327378,13.6306088 26.6370195,14.4735684 26.6370195,15.4491697 C26.6370195,16.2965249 26.6344253,17.0260367 26.6281301,18.2629834 C26.5909542,25.5677876 26.7433977,27.2077015 27.791561,28.4151256 C28.8437373,29.6271725 30.5788361,29.8675158 36.9558741,29.8675158 Z" id="Oval-1-Copy-10"></path>
                <path d="M117.455739,29.8675158 C124.474147,29.8675158 125.951838,29.6490307 126.919726,28.2220547 C127.879483,26.8070657 127.893604,26.5299835 127.893604,15.4491697 C127.893604,14.0697633 127.906111,12.8670658 127.934032,11.0699898 C128.038272,4.36063006 127.918805,2.97555764 126.920305,1.87960647 C125.88921,0.747878611 124.054448,0.5 117.791453,0.5 C111.479446,0.5 109.421772,0.823357307 108.303965,2.13240968 C107.222829,3.39851759 107.069653,5.03996524 107.122393,12.2373422 C107.132602,13.6306088 107.136884,14.4735684 107.136884,15.4491697 C107.136884,16.2965249 107.13429,17.0260367 107.127995,18.2629834 C107.090819,25.5677876 107.243262,27.2077015 108.291426,28.4151256 C109.343602,29.6271725 111.078701,29.8675158 117.455739,29.8675158 Z" id="Oval-1-Copy-13"></path>
                <path d="M197.955603,29.8675158 C204.974012,29.8675158 206.451703,29.6490307 207.419591,28.2220547 C208.379348,26.8070657 208.393469,26.5299835 208.393469,15.4491697 C208.393469,14.0697633 208.405976,12.8670658 208.433896,11.0699898 C208.538136,4.36063006 208.41867,2.97555764 207.42017,1.87960647 C206.389074,0.747878611 204.554312,0.5 198.291317,0.5 C191.97931,0.5 189.921637,0.823357307 188.80383,2.13240968 C187.722694,3.39851759 187.569518,5.03996524 187.622258,12.2373422 C187.632467,13.6306088 187.636749,14.4735684 187.636749,15.4491697 C187.636749,16.2965249 187.634154,17.0260367 187.627859,18.2629834 C187.590683,25.5677876 187.743127,27.2077015 188.79129,28.4151256 C189.843466,29.6271725 191.578565,29.8675158 197.955603,29.8675158 Z" id="Oval-1-Copy-16"></path>
                <path d="M63.0639383,29.8675158 C70.0823465,29.8675158 71.5600377,29.6490307 72.5279256,28.2220547 C73.4876829,26.8070657 73.5018039,26.5299835 73.5018039,15.4491697 C73.5018039,14.0697633 73.514311,12.8670658 73.5422313,11.0699898 C73.6464715,4.36063006 73.527005,2.97555764 72.5285049,1.87960647 C71.4974092,0.747878611 69.6626475,0.5 63.3996521,0.5 C57.0876452,0.5 55.0299716,0.823357307 53.912165,2.13240968 C52.8310289,3.39851759 52.6778527,5.03996524 52.7305926,12.2373422 C52.740802,13.6306088 52.7450837,14.4735684 52.7450837,15.4491697 C52.7450837,16.2965249 52.7424895,17.0260367 52.7361943,18.2629834 C52.6990184,25.5677876 52.8514619,27.2077015 53.8996252,28.4151256 C54.9518015,29.6271725 56.6869003,29.8675158 63.0639383,29.8675158 Z" id="Oval-1-Copy-11"></path>
                <path d="M143.563803,29.8675158 C150.582211,29.8675158 152.059902,29.6490307 153.02779,28.2220547 C153.987548,26.8070657 154.001668,26.5299835 154.001668,15.4491697 C154.001668,14.0697633 154.014176,12.8670658 154.042096,11.0699898 C154.146336,4.36063006 154.02687,2.97555764 153.028369,1.87960647 C151.997274,0.747878611 150.162512,0.5 143.899517,0.5 C137.58751,0.5 135.529836,0.823357307 134.41203,2.13240968 C133.330893,3.39851759 133.177717,5.03996524 133.230457,12.2373422 C133.240667,13.6306088 133.244948,14.4735684 133.244948,15.4491697 C133.244948,16.2965249 133.242354,17.0260367 133.236059,18.2629834 C133.198883,25.5677876 133.351327,27.2077015 134.39949,28.4151256 C135.451666,29.6271725 137.186765,29.8675158 143.563803,29.8675158 Z" id="Oval-1-Copy-14"></path>
                <path d="M224.063667,29.8675158 C231.082076,29.8675158 232.559767,29.6490307 233.527655,28.2220547 C234.487412,26.8070657 234.501533,26.5299835 234.501533,15.4491697 C234.501533,14.0697633 234.51404,12.8670658 234.54196,11.0699898 C234.646201,4.36063006 234.526734,2.97555764 233.528234,1.87960647 C232.497138,0.747878611 230.662377,0.5 224.399381,0.5 C218.087374,0.5 216.029701,0.823357307 214.911894,2.13240968 C213.830758,3.39851759 213.677582,5.03996524 213.730322,12.2373422 C213.740531,13.6306088 213.744813,14.4735684 213.744813,15.4491697 C213.744813,16.2965249 213.742219,17.0260367 213.735923,18.2629834 C213.698748,25.5677876 213.851191,27.2077015 214.899354,28.4151256 C215.951531,29.6271725 217.686629,29.8675158 224.063667,29.8675158 Z" id="Oval-1-Copy-17"></path>
                <path d="M250.171732,29.8675158 C257.19014,29.8675158 258.667831,29.6490307 259.635719,28.2220547 C260.595476,26.8070657 260.609597,26.5299835 260.609597,15.4491697 C260.609597,14.0697633 260.622104,12.8670658 260.650025,11.0699898 C260.754265,4.36063006 260.634798,2.97555764 259.636298,1.87960647 C258.605203,0.747878611 256.770441,0.5 250.507446,0.5 C244.195439,0.5 242.137765,0.823357307 241.019958,2.13240968 C239.938822,3.39851759 239.785646,5.03996524 239.838386,12.2373422 C239.848595,13.6306088 239.852877,14.4735684 239.852877,15.4491697 C239.852877,16.2965249 239.850283,17.0260367 239.843988,18.2629834 C239.806812,25.5677876 239.959255,27.2077015 241.007419,28.4151256 C242.059595,29.6271725 243.794694,29.8675158 250.171732,29.8675158 Z" id="Oval-1-Copy-18"></path>
            </g>
            <path d="M34.529563,450.652014 C45.9490791,450.652014 46.6141737,450.605859 47.9452086,449.344841 C49.2502595,448.10844 49.2657594,447.895435 49.2657594,436.898115 C49.2657594,434.866505 49.4108518,429.132885 49.3974522,428.169269 C49.3668423,425.967982 49.1184179,424.78879 48.4998312,424.036192 C47.3139522,422.593401 45.4444892,422.404791 34.9972047,422.404791 C24.4001268,422.404791 22.4408227,422.595072 21.0902938,424.052391 C20.3786445,424.820313 20.0505532,426.024524 19.947162,428.179333 C19.8801369,429.576225 19.9591461,436.929453 19.9591461,436.898115 C19.9591461,438.104565 19.9357498,441.575274 19.934983,441.867481 C19.930693,443.502361 19.9503602,444.580356 20.0098066,445.492819 C20.1430737,447.538382 20.4898786,448.665942 21.2008775,449.354916 C22.4956509,450.609581 23.1079599,450.652014 34.529563,450.652014 Z" id="Oval-1-Copy-19" stroke="#82D7DA"></path>
            <path d="M34.529563,485.462766 C45.9490791,485.462766 46.6141737,485.416611 47.9452086,484.155593 C49.2502595,482.919192 49.2657594,482.706188 49.2657594,471.708867 C49.2657594,469.677257 49.4108518,463.943638 49.3974522,462.980021 C49.3668423,460.778735 49.1184179,459.599543 48.4998312,458.846944 C47.3139522,457.404153 45.4444892,457.215544 34.9972047,457.215544 C24.4001268,457.215544 22.4408227,457.405824 21.0902938,458.863144 C20.3786445,459.631066 20.0505532,460.835276 19.947162,462.990086 C19.8801369,464.386977 19.9591461,471.740205 19.9591461,471.708867 C19.9591461,472.915317 19.9357498,476.386026 19.934983,476.678233 C19.930693,478.313114 19.9503602,479.391108 20.0098066,480.303571 C20.1430737,482.349135 20.4898786,483.476694 21.2008775,484.165668 C22.4956509,485.420333 23.1079599,485.462766 34.529563,485.462766 Z" id="Oval-1-Copy-28" stroke="#82D7DA"></path>
            <path d="M67.1646432,485.462766 C78.5841594,485.462766 79.2492539,485.416611 80.5802889,484.155593 C81.8853398,482.919192 81.9008396,482.706188 81.9008396,471.708867 C81.9008396,469.677257 82.045932,463.943638 82.0325325,462.980021 C82.0019225,460.778735 81.7534981,459.599543 81.1349115,458.846944 C79.9490324,457.404153 78.0795695,457.215544 67.6322849,457.215544 C57.0352071,457.215544 55.0759029,457.405824 53.7253741,458.863144 C53.0137247,459.631066 52.6856335,460.835276 52.5822423,462.990086 C52.5152172,464.386977 52.5942264,471.740205 52.5942264,471.708867 C52.5942264,472.915317 52.57083,476.386026 52.5700633,476.678233 C52.5657733,478.313114 52.5854404,479.391108 52.6448868,480.303571 C52.778154,482.349135 53.1249588,483.476694 53.8359577,484.165668 C55.1307312,485.420333 55.7430401,485.462766 67.1646432,485.462766 Z" id="Oval-1-Copy-29" stroke="#82D7DA"></path>
            <path d="M262.975125,450.652014 C274.394641,450.652014 275.059735,450.605859 276.39077,449.344841 C277.695821,448.10844 277.711321,447.895435 277.711321,436.898115 C277.711321,434.866505 277.856413,429.132885 277.843014,428.169269 C277.812404,425.967982 277.56398,424.78879 276.945393,424.036192 C275.759514,422.593401 273.890051,422.404791 263.442766,422.404791 C252.845688,422.404791 250.886384,422.595072 249.535855,424.052391 C248.824206,424.820313 248.496115,426.024524 248.392724,428.179333 C248.325699,429.576225 248.404708,436.929453 248.404708,436.898115 C248.404708,438.104565 248.381311,441.575274 248.380545,441.867481 C248.376255,443.502361 248.395922,444.580356 248.455368,445.492819 C248.588635,447.538382 248.93544,448.665942 249.646439,449.354916 C250.941213,450.609581 251.553522,450.652014 262.975125,450.652014 Z" id="Oval-1-Copy-29" stroke="#82D7DA"></path>
            <rect id="Rectangle" stroke="#82D7DA" x="113.459273" y="457.215451" width="99.0809127" height="29.3723814" rx="2"></rect>
            <rect id="Rectangle-Copy" stroke="#82D7DA" x="220.067202" y="457.215451" width="59.9188164" height="29.3723814" rx="2"></rect>
            <path d="M141.711748,322.030283 C141.711748,322.399309 141.664639,322.770292 141.57042,323.143244 C141.4762,323.516196 141.340762,323.86755 141.164101,324.197318 C140.987439,324.527086 140.76956,324.831332 140.510457,325.110064 C140.251354,325.388796 139.956922,325.618453 139.627154,325.79904 C139.415161,325.916814 139.18943,326.011032 138.949956,326.081697 C138.710482,326.152361 138.465122,326.209284 138.213871,326.252468 C137.962619,326.295652 137.711371,326.325095 137.460119,326.340799 C137.208867,326.356502 136.965471,326.364353 136.729922,326.364353 L134.715993,326.364353 L134.715993,317.649103 L136.69459,317.649103 C137.000803,317.649103 137.3129,317.662843 137.630891,317.690324 C137.948881,317.717804 138.264904,317.768839 138.578969,317.843429 C138.893034,317.91802 139.195316,318.020089 139.485826,318.149641 C139.776336,318.279192 140.039361,318.449963 140.27491,318.661956 C140.510458,318.866098 140.71656,319.09968 140.893221,319.362709 C141.069883,319.625739 141.219061,319.902504 141.340761,320.193014 C141.462461,320.483524 141.554716,320.785806 141.617529,321.099871 C141.680342,321.413936 141.711748,321.72407 141.711748,322.030283 Z M140.098249,322.030283 C140.098249,321.62985 140.017771,321.239238 139.856813,320.858435 C139.695855,320.477632 139.466199,320.153757 139.167837,319.886802 C138.963695,319.706215 138.749742,319.566851 138.525971,319.468706 C138.3022,319.370561 138.07058,319.297934 137.831106,319.250825 C137.591632,319.203715 137.346273,319.176235 137.095021,319.168383 C136.843769,319.160531 136.588595,319.156606 136.329492,319.156606 L136.329492,324.856851 L136.671036,324.856851 C137.063616,324.856851 137.426748,324.835259 137.760442,324.792075 C138.094136,324.748891 138.437639,324.629156 138.790961,324.432865 C139.002955,324.315091 139.189428,324.167876 139.350386,323.991214 C139.511344,323.814553 139.648746,323.620228 139.762594,323.408235 C139.876443,323.196241 139.960846,322.972473 140.015808,322.736925 C140.070769,322.501376 140.098249,322.265831 140.098249,322.030283 Z M152.095459,322.030283 C152.095459,322.658412 151.975724,323.247274 151.736249,323.796888 C151.496775,324.346501 151.168975,324.823479 150.752839,325.227838 C150.336704,325.632196 149.851873,325.952144 149.298335,326.187693 C148.744796,326.423241 148.157896,326.541014 147.537618,326.541014 C146.909489,326.541014 146.320627,326.423241 145.771014,326.187693 C145.2214,325.952144 144.738533,325.632196 144.322398,325.227838 C143.906262,324.823479 143.578462,324.346501 143.338988,323.796888 C143.099513,323.247274 142.979778,322.658412 142.979778,322.030283 C142.979778,321.394302 143.099513,320.799551 143.338988,320.246012 C143.578462,319.692473 143.904299,319.209606 144.316509,318.797396 C144.728719,318.385186 145.211586,318.061312 145.765125,317.825763 C146.318664,317.590215 146.909489,317.472442 147.537618,317.472442 C148.165748,317.472442 148.756573,317.590215 149.310112,317.825763 C149.863651,318.061312 150.346518,318.385186 150.758728,318.797396 C151.170938,319.209606 151.496775,319.692473 151.736249,320.246012 C151.975724,320.799551 152.095459,321.394302 152.095459,322.030283 Z M150.48196,322.018505 C150.48196,321.610221 150.407371,321.221572 150.25819,320.852546 C150.109009,320.48352 149.902907,320.161609 149.639878,319.886802 C149.376849,319.611996 149.064752,319.392154 148.703578,319.22727 C148.342403,319.062386 147.953754,318.979945 147.537618,318.979945 C147.121483,318.979945 146.732834,319.062386 146.371659,319.22727 C146.010485,319.392154 145.698388,319.611996 145.435359,319.886802 C145.172329,320.161609 144.966228,320.48352 144.817047,320.852546 C144.667866,321.221572 144.593277,321.610221 144.593277,322.018505 C144.593277,322.426789 144.669829,322.813476 144.822936,323.178576 C144.976042,323.543676 145.184107,323.863625 145.447136,324.138431 C145.710165,324.413238 146.020299,324.631117 146.377548,324.792075 C146.734796,324.953033 147.121483,325.033511 147.537618,325.033511 C147.945902,325.033511 148.330626,324.953033 148.6918,324.792075 C149.052975,324.631117 149.365072,324.413238 149.628101,324.138431 C149.89113,323.863625 150.099195,323.543676 150.252301,323.178576 C150.405408,322.813476 150.48196,322.426789 150.48196,322.018505 Z M158.957737,326.364353 L155.318531,320.028131 L155.294977,320.028131 L155.294977,326.364353 L153.681477,326.364353 L153.681477,317.649103 L155.518747,317.649103 L159.12262,323.985325 L159.146175,323.985325 L159.146175,317.649103 L160.759674,317.649103 L160.759674,326.364353 L158.957737,326.364353 Z M162.663682,326.364353 L162.663682,317.649103 L167.351073,317.649103 L167.351073,319.156606 L164.277181,319.156606 L164.277181,321.288309 L167.221522,321.288309 L167.221522,322.795812 L164.277181,322.795812 L164.277181,324.856851 L167.351073,324.856851 L167.351073,326.364353 L162.663682,326.364353 Z" id="DONE" fill="#82D7DA"></path>
            <path d="M73.6753389,200.508315 C73.6753389,199.933937 73.6579335,199.916532 74.1800948,199.916532 L75.4158765,199.916532 C76.3731722,199.916532 77.0345765,200.055775 77.4349001,200.351666 C77.6959808,200.543125 77.8178184,201.187124 77.8700345,201.622259 C77.9570614,201.726691 78.2529528,201.726691 78.3225743,201.587448 C78.2703582,201.065287 78.3921958,199.655451 78.583655,198.941831 C78.5488442,198.872209 78.3573851,198.854804 78.2703582,198.889615 C78.0092775,199.342155 77.8526292,199.376965 76.9127388,199.376965 L69.8635615,199.376965 C69.0629142,199.376965 68.4885368,199.394371 68.3841045,198.837399 C68.3318884,198.785182 68.1056185,198.802588 68.0534024,198.837399 C67.9315648,199.533614 67.6704841,200.647558 67.3919981,201.4308 C67.4616196,201.570043 67.7052949,201.65707 67.8445379,201.552637 C68.035997,201.117503 68.2100508,200.734585 68.6277798,200.351666 C69.0629142,199.951343 70.0202099,199.916532 70.7686411,199.916532 L71.7259368,199.916532 C72.248098,199.916532 72.248098,199.933937 72.248098,200.473504 L72.248098,208.253707 C72.248098,210.081272 72.1610712,210.342352 71.1689647,210.429379 L70.5423712,210.481595 C70.4031282,210.568622 70.4379389,210.864514 70.5423712,210.91673 C71.6563153,210.881919 72.2655034,210.864514 72.9617185,210.864514 C73.6579335,210.864514 74.2497163,210.881919 75.2418227,210.91673 C75.346255,210.864514 75.3810657,210.551217 75.2766335,210.481595 L74.7196615,210.429379 C73.7101496,210.342352 73.6753389,210.081272 73.6753389,208.253707 L73.6753389,200.508315 Z M80.4634356,208.915111 C80.4634356,210.168298 80.4460302,210.324947 79.8020313,210.429379 L79.4713291,210.481595 C79.3494915,210.568622 79.3843023,210.864514 79.5061399,210.91673 C79.9586797,210.881919 80.480841,210.864514 81.1074345,210.864514 C81.7166227,210.864514 82.2213786,210.881919 83.0394312,210.91673 C83.1612689,210.864514 83.1960796,210.568622 83.074242,210.481595 L82.4476485,210.429379 C81.7862442,210.377163 81.7514334,210.168298 81.7514334,208.915111 L81.7514334,206.54798 C81.7514334,205.956197 81.8036495,205.451442 81.9777033,205.207766 C82.1169463,205.016307 82.3258108,204.859659 82.6042968,204.859659 C82.8479721,204.859659 83.1090527,204.964091 83.3701334,205.138145 C83.491971,205.207766 83.5789979,205.259982 83.7530517,205.259982 C84.0315377,205.259982 84.5014828,205.033713 84.5014828,204.459335 C84.5014828,204.041606 84.1533753,203.76312 83.7182409,203.76312 C83.074242,203.76312 82.4128377,204.302687 81.8036495,204.807443 C81.7688388,204.790037 81.7514334,204.737821 81.7514334,204.650794 L81.7514334,203.641282 C81.7514334,203.571661 81.6992173,203.53685 81.6121904,203.519445 C81.177056,203.780525 80.2545711,204.233065 79.8542474,204.372308 C79.7672205,204.424524 79.7672205,204.615983 79.836842,204.685605 L79.9934904,204.790037 C80.4634356,205.103334 80.4634356,205.190361 80.4634356,205.869171 L80.4634356,208.915111 Z M86.590128,208.010032 L88.6613677,207.261601 C88.9224484,207.174574 88.9572591,207.017925 88.9572591,206.756845 L88.9746645,205.956197 C88.9920699,205.312199 88.7832054,204.44193 87.704072,204.44193 C87.2167215,204.44193 86.6249387,204.685605 86.590128,205.225172 C86.5727226,205.503658 86.5553172,205.712522 86.4160742,205.816954 C86.1549936,206.025819 85.6850484,206.147657 85.4239678,206.147657 C85.2673194,206.147657 85.1802925,206.06063 85.1802925,205.903981 C85.1802925,204.998902 87.1471,203.76312 88.4176925,203.76312 C89.6708795,203.76312 90.2800677,204.494146 90.2278516,205.799549 L90.1234193,208.828085 C90.0886086,209.628732 90.245257,210.342352 90.9240666,210.342352 C91.0981204,210.342352 91.2547688,210.290136 91.359201,210.23792 C91.4462279,210.185704 91.5332548,210.116082 91.5854709,210.116082 C91.6550924,210.116082 91.7073086,210.220515 91.7073086,210.342352 C91.7073086,210.429379 91.0981204,211.108189 90.245257,211.108189 C89.8275279,211.108189 89.4097989,210.95154 89.1139075,210.568622 C89.044286,210.46419 88.9398538,210.324947 88.8354215,210.324947 C88.7135839,210.324947 88.5047193,210.481595 88.1566118,210.673054 C87.7736935,210.881919 87.3907753,211.108189 86.9034247,211.108189 C86.3986688,211.108189 85.9809398,210.968946 85.6850484,210.707865 C85.3543463,210.411974 85.1454818,209.976839 85.1454818,209.489489 C85.1454818,208.810679 85.4761839,208.410355 86.590128,208.010032 Z M86.4856957,209.280624 C86.4856957,209.576516 86.6945602,210.324947 87.5822344,210.324947 C87.9303419,210.324947 88.4699086,210.063866 88.6439624,209.889812 C88.8528269,209.680948 88.8528269,209.437273 88.8702322,209.07176 L88.905043,208.044843 C88.905043,207.853383 88.8354215,207.818573 88.7309892,207.818573 C88.626557,207.818573 88.3306656,207.888194 88.0173688,207.992626 C86.9904516,208.340734 86.4856957,208.601815 86.4856957,209.280624 Z M96.4067601,203.76312 C93.5174677,203.76312 92.1946591,205.764738 92.1946591,207.644519 C92.1946591,208.775868 92.5949827,209.628732 93.2041709,210.220515 C93.8133591,210.812297 94.6662225,211.108189 95.5887074,211.108189 C96.5982192,211.108189 97.9036225,210.620838 98.4954052,209.33284 C98.4779999,209.176192 98.3213515,209.054354 98.1821085,209.089165 C97.7817848,209.680948 97.2596235,210.133488 96.2501117,210.133488 C94.3877365,210.133488 93.4478462,208.514788 93.4478462,207.157168 C93.4478462,205.312199 94.6314117,204.354903 95.8497881,204.354903 C96.5634085,204.354903 97.2074074,204.807443 97.5903257,205.277388 C97.6599472,205.364415 97.7469741,205.399225 97.834001,205.399225 C98.0428655,205.399225 98.2169192,205.068523 98.2169192,204.755226 C98.2169192,204.459335 98.0950816,204.180849 97.9558386,204.059011 C97.4858934,203.850147 96.8070838,203.76312 96.4067601,203.76312 Z M104.012909,206.408737 L100.792915,206.408737 C100.340375,206.408737 100.32297,206.443548 100.32297,206.878682 C100.32297,208.636625 101.349887,210.133488 103.212262,210.133488 C103.78664,210.133488 104.27399,209.959434 104.813557,209.280624 C104.987611,209.228408 105.109448,209.33284 105.126854,209.489489 C104.552476,210.673054 103.299289,211.108189 102.394209,211.108189 C101.26286,211.108189 100.375186,210.620838 99.87043,209.959434 C99.3482687,209.280624 99.1394042,208.462572 99.1394042,207.696735 C99.1394042,205.555874 100.54924,203.76312 102.637885,203.76312 C104.134747,203.76312 105.109448,204.790037 105.109448,205.83436 C105.109448,206.078035 105.074637,206.217278 105.039827,206.2869 C104.987611,206.391332 104.743935,206.408737 104.012909,206.408737 Z M100.636267,205.886576 L101.872048,205.886576 C103.160046,205.886576 103.542964,205.816954 103.682207,205.712522 C103.734423,205.677711 103.78664,205.60809 103.78664,205.38182 C103.78664,204.89447 103.455937,204.285281 102.446426,204.285281 C101.419508,204.285281 100.531834,205.225172 100.514429,205.799549 C100.514429,205.83436 100.514429,205.886576 100.636267,205.886576 Z M106.606311,215.198452 C107.006634,215.198452 107.424363,215.041804 107.720255,214.380399 C108.573118,212.483213 110.000359,209.454678 110.574736,208.288518 L111.549437,206.2869 C112.14122,205.051118 112.454517,204.546362 113.028894,204.44193 L113.324786,204.389714 C113.446623,204.285281 113.429218,204.024201 113.289975,203.954579 C112.802624,203.98939 112.402301,204.006795 111.967166,204.006795 C111.514627,204.006795 110.992465,203.98939 110.435493,203.954579 C110.29625,204.006795 110.278845,204.302687 110.400683,204.389714 L110.940249,204.47674 C111.253546,204.528957 111.357978,204.650794 111.357978,204.772632 C111.357978,204.964091 111.131708,205.60809 110.74879,206.513169 L110.157007,207.888194 C109.84371,208.601815 109.565224,209.141381 109.513008,209.176192 C109.443387,209.141381 109.112685,208.218896 109.008252,207.94041 L108.45128,206.339116 C108.346848,206.043224 107.946524,204.911875 107.946524,204.70301 C107.946524,204.581173 108.085767,204.528957 108.329443,204.47674 L108.764577,204.389714 C108.886415,204.302687 108.869009,204.006795 108.729766,203.954579 C108.172794,203.98939 107.685444,204.006795 107.215499,204.006795 C106.641121,204.006795 106.11896,203.98939 105.561988,203.954579 C105.422745,204.006795 105.40534,204.302687 105.509772,204.389714 L105.944906,204.47674 C106.554094,204.598578 106.675932,205.016307 106.971823,205.83436 L108.329443,209.55911 C108.555713,210.203109 108.625334,210.411974 108.625334,210.760081 C108.625334,211.003757 108.503497,211.369269 108.45128,211.508512 C108.294632,211.926241 107.946524,212.657267 107.441769,213.440509 C107.319931,213.631968 107.145877,213.753806 106.867391,213.753806 L106.536689,213.753806 C106.153771,213.753806 105.840474,213.980076 105.840474,214.450021 C105.840474,214.885155 106.101555,215.198452 106.606311,215.198452 Z M119.625532,208.253707 C119.625532,210.081272 119.538505,210.342352 118.546399,210.429379 L117.972021,210.481595 C117.867589,210.586027 117.9024,210.864514 118.006832,210.91673 C119.033749,210.881919 119.625532,210.864514 120.373963,210.864514 L121.940447,210.864514 C123.489525,210.864514 125.038604,210.881919 126.605088,210.91673 C126.831358,210.446784 127.266492,209.106571 127.38833,208.497382 C127.318708,208.340734 127.075033,208.288518 126.953195,208.375545 C126.500655,209.280624 126.03071,209.889812 125.717414,210.063866 C125.334495,210.255325 124.829739,210.324947 123.489525,210.324947 C121.957852,210.324947 121.592339,210.133488 121.383475,209.924623 C121.104989,209.628732 121.052773,209.036949 121.052773,208.114464 L121.052773,205.660306 C121.052773,205.207766 121.104989,205.190361 121.62715,205.190361 L122.636662,205.190361 C123.315472,205.190361 123.733201,205.207766 123.976876,205.277388 C124.324983,205.364415 124.446821,205.625495 124.516443,205.938792 L124.673091,206.617602 C124.760118,206.722034 125.056009,206.722034 125.125631,206.600196 C125.125631,206.217278 125.056009,205.555874 125.056009,204.92928 C125.056009,204.267876 125.125631,203.589066 125.125631,203.171337 C125.056009,203.0495 124.760118,203.0495 124.673091,203.153932 L124.533848,203.867552 C124.446821,204.302687 124.324983,204.407119 124.116119,204.47674 C123.907254,204.546362 123.367688,204.581173 122.636662,204.581173 L121.62715,204.581173 C121.104989,204.581173 121.052773,204.581173 121.052773,204.093822 L121.052773,200.612747 C121.052773,199.951343 121.052773,199.916532 121.574934,199.916532 L122.828121,199.916532 C123.593958,199.916532 124.15093,199.933937 124.516443,200.020964 C125.421522,200.247234 125.57817,200.856422 125.839251,201.674475 C125.926278,201.778907 126.204764,201.744096 126.274386,201.639664 C126.204764,200.873828 126.100332,199.620641 125.9959,199.324749 C125.787035,199.376965 124.760118,199.376965 123.646174,199.376965 L120.373963,199.376965 C119.660343,199.376965 119.06856,199.35956 118.320129,199.324749 C118.215696,199.376965 118.180886,199.690262 118.285318,199.759884 L118.563804,199.794694 C119.590721,199.916532 119.625532,200.177613 119.625532,201.987772 L119.625532,208.253707 Z M138.49296,208.915111 C138.49296,210.168298 138.475554,210.324947 137.831555,210.429379 L137.518259,210.481595 C137.396421,210.568622 137.431232,210.864514 137.553069,210.91673 C138.04042,210.881919 138.510365,210.864514 139.136958,210.864514 C139.746147,210.864514 140.250903,210.881919 140.82528,210.91673 C140.947118,210.864514 140.981928,210.568622 140.860091,210.481595 L140.442362,210.429379 C139.815768,210.342352 139.780957,210.168298 139.780957,208.915111 L139.780957,205.921387 C139.780957,204.720416 139.102148,203.76312 137.709718,203.76312 C136.891665,203.76312 136.038802,204.163444 135.342587,204.650794 C135.185938,204.755226 135.0641,204.824848 134.907452,204.790037 C134.420102,204.076417 133.932751,203.76312 133.062482,203.76312 C132.227024,203.76312 131.408971,204.180849 130.747567,204.650794 C130.62573,204.650794 130.556108,204.563767 130.556108,204.459335 C130.556108,204.302687 130.556108,204.041606 130.590919,203.641282 C130.556108,203.554256 130.469081,203.519445 130.39946,203.519445 C130.051352,203.780525 129.059246,204.233065 128.658922,204.372308 C128.571895,204.424524 128.571895,204.615983 128.641517,204.685605 L128.798165,204.790037 C129.26811,205.103334 129.26811,205.190361 129.26811,205.869171 L129.26811,208.915111 C129.26811,210.168298 129.250705,210.342352 128.606706,210.429379 L128.188977,210.481595 C128.067139,210.568622 128.10195,210.864514 128.223788,210.91673 C128.763354,210.881919 129.285516,210.864514 129.912109,210.864514 C130.521297,210.864514 131.026053,210.881919 131.495998,210.91673 C131.617836,210.864514 131.652647,210.568622 131.530809,210.481595 L131.217512,210.429379 C130.590919,210.324947 130.556108,210.168298 130.556108,208.915111 L130.556108,206.217278 C130.556108,205.660306 130.643135,205.434036 130.817189,205.225172 C131.078269,204.911875 131.56562,204.598578 132.27924,204.598578 C133.358374,204.598578 133.880535,205.225172 133.880535,206.391332 L133.880535,208.915111 C133.880535,210.168298 133.86313,210.324947 133.219131,210.429379 L132.905834,210.481595 C132.783996,210.568622 132.818807,210.864514 132.940645,210.91673 C133.427995,210.881919 133.89794,210.864514 134.524534,210.864514 C135.133722,210.864514 135.638478,210.881919 136.160639,210.91673 C136.282477,210.864514 136.317288,210.568622 136.19545,210.481595 L135.829937,210.429379 C135.203343,210.342352 135.168533,210.168298 135.168533,208.915111 L135.168533,206.252089 C135.168533,205.642901 135.220749,205.468847 135.429613,205.207766 C135.673289,204.89447 136.212855,204.598578 136.87426,204.598578 C137.970798,204.598578 138.49296,205.207766 138.49296,206.391332 L138.49296,208.915111 Z M142.966141,208.915111 C142.966141,210.168298 142.948736,210.342352 142.304737,210.429379 L141.939224,210.481595 C141.817386,210.568622 141.852197,210.864514 141.974035,210.91673 C142.461385,210.881919 142.983547,210.864514 143.61014,210.864514 C144.219328,210.864514 144.724084,210.881919 145.246246,210.91673 C145.368083,210.864514 145.402894,210.568622 145.281056,210.481595 L144.915543,210.429379 C144.28895,210.342352 144.254139,210.168298 144.254139,208.915111 L144.254139,205.782144 C144.254139,205.068523 144.28895,204.233065 144.323761,203.623877 C144.306355,203.554256 144.236734,203.519445 144.149707,203.519445 C143.749383,203.780525 142.757277,204.233065 142.356953,204.372308 C142.269926,204.424524 142.269926,204.615983 142.339548,204.685605 L142.496196,204.790037 C142.966141,205.103334 142.966141,205.190361 142.966141,205.869171 L142.966141,208.915111 Z M143.540519,200.003559 C143.018357,200.003559 142.600628,200.369072 142.600628,200.943449 C142.600628,201.413394 142.948736,201.813718 143.488303,201.813718 C143.975653,201.813718 144.410787,201.535232 144.410787,200.908638 C144.410787,200.421288 144.06268,200.003559 143.540519,200.003559 Z M147.439323,208.915111 C147.439323,210.168298 147.421918,210.342352 146.777919,210.429379 L146.412406,210.481595 C146.290568,210.568622 146.325379,210.864514 146.447216,210.91673 C146.934567,210.881919 147.456728,210.864514 148.083322,210.864514 C148.69251,210.864514 149.197266,210.881919 149.667211,210.91673 C149.789049,210.864514 149.823859,210.568622 149.702022,210.481595 L149.388725,210.429379 C148.762131,210.324947 148.727321,210.168298 148.727321,208.915111 L148.727321,206.252089 C148.727321,205.747333 148.762131,205.503658 148.988401,205.207766 C149.232077,204.877064 149.806454,204.598578 150.467858,204.598578 C151.651424,204.598578 152.103964,205.329604 152.103964,206.32171 L152.103964,208.915111 C152.103964,210.168298 152.086558,210.324947 151.442559,210.429379 L151.111857,210.481595 C150.99002,210.568622 151.02483,210.864514 151.146668,210.91673 C151.616613,210.881919 152.138774,210.864514 152.765368,210.864514 C153.374556,210.864514 153.879312,210.881919 154.401473,210.91673 C154.523311,210.864514 154.558122,210.568622 154.436284,210.481595 L154.053366,210.429379 C153.426772,210.342352 153.391962,210.168298 153.391962,208.915111 L153.391962,205.921387 C153.391962,204.755226 152.800179,203.76312 151.355533,203.76312 C150.467858,203.76312 149.649806,204.198254 148.91878,204.650794 C148.796942,204.650794 148.727321,204.563767 148.727321,204.459335 C148.727321,204.302687 148.727321,204.041606 148.762131,203.641282 C148.727321,203.554256 148.640294,203.519445 148.570672,203.519445 C148.222565,203.780525 147.230458,204.233065 146.830135,204.372308 C146.743108,204.424524 146.743108,204.615983 146.812729,204.685605 L146.969378,204.790037 C147.439323,205.103334 147.439323,205.190361 147.439323,205.869171 L147.439323,208.915111 Z" id="Tracey-Emin" fill="#82D7DA"></path>
            <path d="M73.6753389,233.143395 C73.6753389,232.569018 73.6579335,232.551612 74.1800948,232.551612 L75.4158765,232.551612 C76.3731722,232.551612 77.0345765,232.690855 77.4349001,232.986747 C77.6959808,233.178206 77.8178184,233.822205 77.8700345,234.257339 C77.9570614,234.361771 78.2529528,234.361771 78.3225743,234.222528 C78.2703582,233.700367 78.3921958,232.290532 78.583655,231.576911 C78.5488442,231.50729 78.3573851,231.489884 78.2703582,231.524695 C78.0092775,231.977235 77.8526292,232.012046 76.9127388,232.012046 L69.8635615,232.012046 C69.0629142,232.012046 68.4885368,232.029451 68.3841045,231.472479 C68.3318884,231.420263 68.1056185,231.437668 68.0534024,231.472479 C67.9315648,232.168694 67.6704841,233.282638 67.3919981,234.06588 C67.4616196,234.205123 67.7052949,234.29215 67.8445379,234.187718 C68.035997,233.752583 68.2100508,233.369665 68.6277798,232.986747 C69.0629142,232.586423 70.0202099,232.551612 70.7686411,232.551612 L71.7259368,232.551612 C72.248098,232.551612 72.248098,232.569018 72.248098,233.108584 L72.248098,240.888787 C72.248098,242.716352 72.1610712,242.977432 71.1689647,243.064459 L70.5423712,243.116675 C70.4031282,243.203702 70.4379389,243.499594 70.5423712,243.55181 C71.6563153,243.516999 72.2655034,243.499594 72.9617185,243.499594 C73.6579335,243.499594 74.2497163,243.516999 75.2418227,243.55181 C75.346255,243.499594 75.3810657,243.186297 75.2766335,243.116675 L74.7196615,243.064459 C73.7101496,242.977432 73.6753389,242.716352 73.6753389,240.888787 L73.6753389,233.143395 Z M83.074242,236.3982 C85.0236441,236.3982 86.6075333,237.860252 86.6075333,240.001113 C86.6075333,242.176785 85.110671,243.743269 82.934999,243.743269 C80.9333807,243.743269 79.3668969,242.333434 79.3668969,240.157762 C79.3668969,237.964684 81.0204076,236.3982 83.074242,236.3982 Z M85.110671,240.279599 C85.110671,238.800142 84.5188882,236.920362 82.8653775,236.920362 C81.7166227,236.920362 80.8637592,238.0169 80.8637592,239.931492 C80.8637592,241.515381 81.5773796,243.221108 83.1090527,243.221108 C84.6407258,243.221108 85.110671,241.619813 85.110671,240.279599 Z M98.1472977,241.550192 C98.1472977,242.803379 98.1298923,242.960027 97.4858934,243.064459 L97.1725967,243.116675 C97.050759,243.203702 97.0855698,243.499594 97.2074074,243.55181 C97.6947579,243.516999 98.1647031,243.499594 98.7912966,243.499594 C99.4004848,243.499594 99.9052407,243.516999 100.479618,243.55181 C100.601456,243.499594 100.636267,243.203702 100.514429,243.116675 L100.0967,243.064459 C99.4701063,242.977432 99.4352956,242.803379 99.4352956,241.550192 L99.4352956,238.556467 C99.4352956,237.355496 98.7564859,236.3982 97.3640558,236.3982 C96.5460031,236.3982 95.6931397,236.798524 94.9969246,237.285874 C94.8402763,237.390307 94.7184386,237.459928 94.5617902,237.425117 C94.0744397,236.711497 93.5870892,236.3982 92.7168204,236.3982 C91.8813623,236.3982 91.0633096,236.815929 90.4019053,237.285874 C90.2800677,237.285874 90.2104462,237.198848 90.2104462,237.094415 C90.2104462,236.937767 90.2104462,236.676686 90.245257,236.276363 C90.2104462,236.189336 90.1234193,236.154525 90.0537978,236.154525 C89.7056903,236.415606 88.7135839,236.868145 88.3132602,237.007388 C88.2262333,237.059605 88.2262333,237.251064 88.2958548,237.320685 L88.4525032,237.425117 C88.9224484,237.738414 88.9224484,237.825441 88.9224484,238.504251 L88.9224484,241.550192 C88.9224484,242.803379 88.905043,242.977432 88.2610441,243.064459 L87.8433151,243.116675 C87.7214774,243.203702 87.7562882,243.499594 87.8781258,243.55181 C88.4176925,243.516999 88.9398538,243.499594 89.5664473,243.499594 C90.1756355,243.499594 90.6803914,243.516999 91.1503365,243.55181 C91.2721742,243.499594 91.3069849,243.203702 91.1851473,243.116675 L90.8718505,243.064459 C90.245257,242.960027 90.2104462,242.803379 90.2104462,241.550192 L90.2104462,238.852358 C90.2104462,238.295386 90.2974731,238.069116 90.4715268,237.860252 C90.7326075,237.546955 91.219958,237.233658 91.9335784,237.233658 C93.0127118,237.233658 93.534873,237.860252 93.534873,239.026412 L93.534873,241.550192 C93.534873,242.803379 93.5174677,242.960027 92.8734688,243.064459 L92.560172,243.116675 C92.4383344,243.203702 92.4731451,243.499594 92.5949827,243.55181 C93.0823333,243.516999 93.5522784,243.499594 94.178872,243.499594 C94.7880601,243.499594 95.292816,243.516999 95.8149773,243.55181 C95.936815,243.499594 95.9716257,243.203702 95.8497881,243.116675 L95.4842752,243.064459 C94.8576816,242.977432 94.8228709,242.803379 94.8228709,241.550192 L94.8228709,238.887169 C94.8228709,238.277981 94.875087,238.103927 95.0839515,237.842847 C95.3276268,237.52955 95.8671934,237.233658 96.5285977,237.233658 C97.6251364,237.233658 98.1472977,237.842847 98.1472977,239.026412 L98.1472977,241.550192 Z M110.418088,240.888787 C110.418088,242.716352 110.331061,242.977432 109.338955,243.064459 L108.712361,243.116675 C108.573118,243.203702 108.607929,243.499594 108.712361,243.55181 C109.826305,243.516999 110.435493,243.499594 111.131708,243.499594 C111.827923,243.499594 112.419706,243.516999 113.411813,243.55181 C113.516245,243.499594 113.551056,243.186297 113.446623,243.116675 L112.889651,243.064459 C111.880139,242.977432 111.845329,242.716352 111.845329,240.888787 L111.845329,233.143395 C111.845329,232.569018 111.827923,232.551612 112.350085,232.551612 L113.933974,232.551612 C115.970403,232.551612 116.370727,232.67345 116.370727,233.769988 L116.370727,241.550192 C116.370727,242.803379 116.353321,242.994838 115.709322,243.064459 L115.274188,243.116675 C115.15235,243.203702 115.187161,243.499594 115.308999,243.55181 C115.865971,243.516999 116.388132,243.499594 117.014725,243.499594 C117.623914,243.499594 118.12867,243.516999 118.650831,243.55181 C118.772668,243.499594 118.807479,243.186297 118.685642,243.116675 L118.320129,243.064459 C117.693535,242.977432 117.658724,242.803379 117.658724,241.550192 L117.658724,238.626088 C117.658724,238.0169 117.71094,237.929873 118.024237,237.668793 C118.337534,237.407712 118.790074,237.198848 119.381857,237.198848 C120.495801,237.198848 121.035367,237.947279 121.035367,239.061223 L121.035367,241.550192 C121.035367,242.803379 121.017962,242.960027 120.373963,243.064459 L120.025856,243.116675 C119.904018,243.203702 119.938829,243.499594 120.060666,243.55181 C120.530611,243.516999 121.052773,243.499594 121.679366,243.499594 C122.288554,243.499594 122.79331,243.516999 123.419904,243.55181 C123.541741,243.499594 123.576552,243.203702 123.454715,243.116675 L122.984769,243.064459 C122.358176,242.994838 122.323365,242.803379 122.323365,241.550192 L122.323365,238.643494 C122.323365,237.425117 121.731582,236.3982 120.078072,236.3982 C119.190397,236.3982 118.354939,236.815929 117.728346,237.30328 C117.67613,237.268469 117.658724,237.129226 117.658724,236.972578 L117.658724,233.317449 C117.658724,232.551612 117.693535,231.681343 117.71094,231.159182 C117.67613,231.089561 117.606508,231.05475 117.536887,231.05475 L116.370727,231.524695 L116.370727,231.76837 C116.31851,231.907613 116.040024,232.012046 115.082729,232.012046 L107.859498,232.012046 C107.05885,232.012046 106.484473,232.029451 106.380041,231.472479 C106.327825,231.420263 106.101555,231.437668 106.049338,231.472479 C105.927501,232.168694 105.66642,233.282638 105.387934,234.06588 C105.457556,234.205123 105.701231,234.29215 105.840474,234.187718 C106.031933,233.752583 106.205987,233.369665 106.623716,232.986747 C107.05885,232.586423 108.016146,232.551612 108.764577,232.551612 L109.895927,232.551612 C110.418088,232.551612 110.418088,232.569018 110.418088,233.108584 L110.418088,240.888787 Z M128.119355,236.3982 C130.068758,236.3982 131.652647,237.860252 131.652647,240.001113 C131.652647,242.176785 130.155784,243.743269 127.980112,243.743269 C125.978494,243.743269 124.41201,242.333434 124.41201,240.157762 C124.41201,237.964684 126.065521,236.3982 128.119355,236.3982 Z M130.155784,240.279599 C130.155784,238.800142 129.564002,236.920362 127.910491,236.920362 C126.761736,236.920362 125.908873,238.0169 125.908873,239.931492 C125.908873,241.515381 126.622493,243.221108 128.154166,243.221108 C129.685839,243.221108 130.155784,241.619813 130.155784,240.279599 Z M143.192411,241.550192 C143.192411,242.803379 143.175006,242.960027 142.531007,243.064459 L142.21771,243.116675 C142.095872,243.203702 142.130683,243.499594 142.252521,243.55181 C142.739871,243.516999 143.209817,243.499594 143.83641,243.499594 C144.445598,243.499594 144.950354,243.516999 145.524732,243.55181 C145.646569,243.499594 145.68138,243.203702 145.559542,243.116675 L145.141813,243.064459 C144.51522,242.977432 144.480409,242.803379 144.480409,241.550192 L144.480409,238.556467 C144.480409,237.355496 143.801599,236.3982 142.409169,236.3982 C141.591117,236.3982 140.738253,236.798524 140.042038,237.285874 C139.88539,237.390307 139.763552,237.459928 139.606904,237.425117 C139.119553,236.711497 138.632203,236.3982 137.761934,236.3982 C136.926476,236.3982 136.108423,236.815929 135.447019,237.285874 C135.325181,237.285874 135.25556,237.198848 135.25556,237.094415 C135.25556,236.937767 135.25556,236.676686 135.29037,236.276363 C135.25556,236.189336 135.168533,236.154525 135.098911,236.154525 C134.750804,236.415606 133.758697,236.868145 133.358374,237.007388 C133.271347,237.059605 133.271347,237.251064 133.340968,237.320685 L133.497617,237.425117 C133.967562,237.738414 133.967562,237.825441 133.967562,238.504251 L133.967562,241.550192 C133.967562,242.803379 133.950156,242.977432 133.306157,243.064459 L132.888428,243.116675 C132.766591,243.203702 132.801402,243.499594 132.923239,243.55181 C133.462806,243.516999 133.984967,243.499594 134.611561,243.499594 C135.220749,243.499594 135.725505,243.516999 136.19545,243.55181 C136.317288,243.499594 136.352098,243.203702 136.230261,243.116675 L135.916964,243.064459 C135.29037,242.960027 135.25556,242.803379 135.25556,241.550192 L135.25556,238.852358 C135.25556,238.295386 135.342587,238.069116 135.51664,237.860252 C135.777721,237.546955 136.265071,237.233658 136.978692,237.233658 C138.057825,237.233658 138.579986,237.860252 138.579986,239.026412 L138.579986,241.550192 C138.579986,242.803379 138.562581,242.960027 137.918582,243.064459 L137.605285,243.116675 C137.483448,243.203702 137.518259,243.499594 137.640096,243.55181 C138.127447,243.516999 138.597392,243.499594 139.223985,243.499594 C139.833174,243.499594 140.337929,243.516999 140.860091,243.55181 C140.981928,243.499594 141.016739,243.203702 140.894901,243.116675 L140.529389,243.064459 C139.902795,242.977432 139.867984,242.803379 139.867984,241.550192 L139.867984,238.887169 C139.867984,238.277981 139.9202,238.103927 140.129065,237.842847 C140.37274,237.52955 140.912307,237.233658 141.573711,237.233658 C142.67025,237.233658 143.192411,237.842847 143.192411,239.026412 L143.192411,241.550192 Z M147.439323,245.988563 L147.439323,238.504251 C147.439323,237.825441 147.439323,237.738414 146.969378,237.425117 L146.812729,237.320685 C146.743108,237.251064 146.743108,237.059605 146.830135,237.007388 C147.282675,236.815929 148.100727,236.3982 148.553267,236.067498 C148.657699,236.067498 148.727321,236.102309 148.762131,236.189336 C148.727321,236.502633 148.69251,236.763713 148.69251,236.989983 C148.69251,237.111821 148.727321,237.216253 148.849158,237.216253 C149.075428,237.111821 150.171967,236.3982 151.285911,236.3982 C153.043854,236.3982 154.175203,237.825441 154.175203,239.583384 C154.175203,242.002731 152.399855,243.743269 149.928292,243.743269 C149.614995,243.743269 149.127644,243.708458 148.970996,243.673648 C148.814348,243.708458 148.727321,243.795485 148.727321,244.160998 L148.727321,245.988563 C148.727321,247.224344 148.762131,247.380993 149.388725,247.46802 L150.067535,247.555046 C150.189372,247.642073 150.154562,247.937965 150.032724,247.990181 C149.197266,247.95537 148.69251,247.937965 148.083322,247.937965 C147.456728,247.937965 146.934567,247.95537 146.447216,247.990181 C146.325379,247.937965 146.290568,247.642073 146.412406,247.555046 L146.777919,247.50283 C147.421918,247.415803 147.439323,247.24175 147.439323,245.988563 Z M148.727321,238.747926 L148.727321,241.741651 C148.727321,242.298623 148.901375,242.507487 149.249482,242.785973 C149.59759,243.047054 150.137156,243.168892 150.502669,243.168892 C151.92991,243.168892 152.765368,241.846083 152.765368,240.035924 C152.765368,238.643494 151.982126,237.233658 150.415642,237.233658 C149.667211,237.233658 149.127644,237.512144 148.936185,237.721009 C148.779537,237.912468 148.727321,238.173549 148.727321,238.747926 Z M158.021792,236.3982 C156.698983,236.3982 155.65466,237.111821 155.65466,238.382413 C155.65466,239.339709 156.368281,239.948897 157.377793,240.523274 C158.021792,240.888787 158.718007,241.323922 158.718007,242.124569 C158.718007,242.873 158.17844,243.238513 157.551846,243.238513 C156.55974,243.238513 156.002768,242.403055 155.706877,241.445759 C155.61985,241.341327 155.39358,241.358732 155.306553,241.463165 C155.271742,242.037542 155.376174,242.890406 155.515417,243.221108 C155.950552,243.569215 156.55974,243.743269 157.377793,243.743269 C158.665791,243.743269 159.884167,243.081865 159.884167,241.759056 C159.884167,240.523274 159.031303,239.931492 158.108818,239.40933 C157.49963,239.061223 156.768605,238.678305 156.768605,237.964684 C156.768605,237.338091 157.203739,236.902956 157.882549,236.902956 C158.596169,236.902956 159.11833,237.407712 159.414222,238.173549 C159.501249,238.277981 159.762329,238.24317 159.831951,238.121333 C159.831951,237.651387 159.710113,237.094415 159.553465,236.711497 C159.396816,236.572254 158.752817,236.3982 158.021792,236.3982 Z M164.722861,236.3982 C166.672264,236.3982 168.256153,237.860252 168.256153,240.001113 C168.256153,242.176785 166.75929,243.743269 164.583618,243.743269 C162.582,243.743269 161.015516,242.333434 161.015516,240.157762 C161.015516,237.964684 162.669027,236.3982 164.722861,236.3982 Z M166.75929,240.279599 C166.75929,238.800142 166.167508,236.920362 164.513997,236.920362 C163.365242,236.920362 162.512379,238.0169 162.512379,239.931492 C162.512379,241.515381 163.225999,243.221108 164.757672,243.221108 C166.289345,243.221108 166.75929,241.619813 166.75929,240.279599 Z M170.571068,241.550192 C170.571068,242.803379 170.553662,242.977432 169.909663,243.064459 L169.544151,243.116675 C169.422313,243.203702 169.457124,243.499594 169.578961,243.55181 C170.066312,243.516999 170.588473,243.499594 171.215067,243.499594 C171.824255,243.499594 172.329011,243.516999 172.798956,243.55181 C172.920794,243.499594 172.955604,243.203702 172.833767,243.116675 L172.52047,243.064459 C171.893876,242.960027 171.859066,242.803379 171.859066,241.550192 L171.859066,238.887169 C171.859066,238.382413 171.893876,238.138738 172.120146,237.842847 C172.363822,237.512144 172.938199,237.233658 173.599603,237.233658 C174.783169,237.233658 175.235709,237.964684 175.235709,238.956791 L175.235709,241.550192 C175.235709,242.803379 175.218303,242.960027 174.574304,243.064459 L174.243602,243.116675 C174.121765,243.203702 174.156575,243.499594 174.278413,243.55181 C174.748358,243.516999 175.270519,243.499594 175.897113,243.499594 C176.506301,243.499594 177.011057,243.516999 177.533218,243.55181 C177.655056,243.499594 177.689867,243.203702 177.568029,243.116675 L177.185111,243.064459 C176.558517,242.977432 176.523706,242.803379 176.523706,241.550192 L176.523706,238.556467 C176.523706,237.390307 175.931924,236.3982 174.487277,236.3982 C173.599603,236.3982 172.781551,236.833335 172.050525,237.285874 C171.928687,237.285874 171.859066,237.198848 171.859066,237.094415 C171.859066,236.937767 171.859066,236.676686 171.893876,236.276363 C171.859066,236.189336 171.772039,236.154525 171.702417,236.154525 C171.35431,236.415606 170.362203,236.868145 169.96188,237.007388 C169.874853,237.059605 169.874853,237.251064 169.944474,237.320685 L170.101123,237.425117 C170.571068,237.738414 170.571068,237.825441 170.571068,238.504251 L170.571068,241.550192 Z" id="Tom-Thompson" fill="#82D7DA"></path>
            <path d="M73.6753389,265.778475 C73.6753389,265.204098 73.6579335,265.186692 74.1800948,265.186692 L75.4158765,265.186692 C76.3731722,265.186692 77.0345765,265.325935 77.4349001,265.621827 C77.6959808,265.813286 77.8178184,266.457285 77.8700345,266.892419 C77.9570614,266.996852 78.2529528,266.996852 78.3225743,266.857609 C78.2703582,266.335447 78.3921958,264.925612 78.583655,264.211991 C78.5488442,264.14237 78.3573851,264.124964 78.2703582,264.159775 C78.0092775,264.612315 77.8526292,264.647126 76.9127388,264.647126 L69.8635615,264.647126 C69.0629142,264.647126 68.4885368,264.664531 68.3841045,264.107559 C68.3318884,264.055343 68.1056185,264.072748 68.0534024,264.107559 C67.9315648,264.803774 67.6704841,265.917718 67.3919981,266.70096 C67.4616196,266.840203 67.7052949,266.92723 67.8445379,266.822798 C68.035997,266.387663 68.2100508,266.004745 68.6277798,265.621827 C69.0629142,265.221503 70.0202099,265.186692 70.7686411,265.186692 L71.7259368,265.186692 C72.248098,265.186692 72.248098,265.204098 72.248098,265.743664 L72.248098,273.523868 C72.248098,275.351432 72.1610712,275.612513 71.1689647,275.69954 L70.5423712,275.751756 C70.4031282,275.838783 70.4379389,276.134674 70.5423712,276.18689 C71.6563153,276.152079 72.2655034,276.134674 72.9617185,276.134674 C73.6579335,276.134674 74.2497163,276.152079 75.2418227,276.18689 C75.346255,276.134674 75.3810657,275.821377 75.2766335,275.751756 L74.7196615,275.69954 C73.7101496,275.612513 73.6753389,275.351432 73.6753389,273.523868 L73.6753389,265.778475 Z M83.074242,269.033281 C85.0236441,269.033281 86.6075333,270.495332 86.6075333,272.636193 C86.6075333,274.811865 85.110671,276.378349 82.934999,276.378349 C80.9333807,276.378349 79.3668969,274.968514 79.3668969,272.792842 C79.3668969,270.599764 81.0204076,269.033281 83.074242,269.033281 Z M85.110671,272.914679 C85.110671,271.435222 84.5188882,269.555442 82.8653775,269.555442 C81.7166227,269.555442 80.8637592,270.651981 80.8637592,272.566572 C80.8637592,274.150461 81.5773796,275.856188 83.1090527,275.856188 C84.6407258,275.856188 85.110671,274.254893 85.110671,272.914679 Z M98.1472977,274.185272 C98.1472977,275.438459 98.1298923,275.595107 97.4858934,275.69954 L97.1725967,275.751756 C97.050759,275.838783 97.0855698,276.134674 97.2074074,276.18689 C97.6947579,276.152079 98.1647031,276.134674 98.7912966,276.134674 C99.4004848,276.134674 99.9052407,276.152079 100.479618,276.18689 C100.601456,276.134674 100.636267,275.838783 100.514429,275.751756 L100.0967,275.69954 C99.4701063,275.612513 99.4352956,275.438459 99.4352956,274.185272 L99.4352956,271.191547 C99.4352956,269.990576 98.7564859,269.033281 97.3640558,269.033281 C96.5460031,269.033281 95.6931397,269.433604 94.9969246,269.920955 C94.8402763,270.025387 94.7184386,270.095008 94.5617902,270.060198 C94.0744397,269.346577 93.5870892,269.033281 92.7168204,269.033281 C91.8813623,269.033281 91.0633096,269.45101 90.4019053,269.920955 C90.2800677,269.920955 90.2104462,269.833928 90.2104462,269.729496 C90.2104462,269.572847 90.2104462,269.311767 90.245257,268.911443 C90.2104462,268.824416 90.1234193,268.789605 90.0537978,268.789605 C89.7056903,269.050686 88.7135839,269.503226 88.3132602,269.642469 C88.2262333,269.694685 88.2262333,269.886144 88.2958548,269.955765 L88.4525032,270.060198 C88.9224484,270.373494 88.9224484,270.460521 88.9224484,271.139331 L88.9224484,274.185272 C88.9224484,275.438459 88.905043,275.612513 88.2610441,275.69954 L87.8433151,275.751756 C87.7214774,275.838783 87.7562882,276.134674 87.8781258,276.18689 C88.4176925,276.152079 88.9398537,276.134674 89.5664473,276.134674 C90.1756355,276.134674 90.6803914,276.152079 91.1503365,276.18689 C91.2721742,276.134674 91.3069849,275.838783 91.1851473,275.751756 L90.8718505,275.69954 C90.245257,275.595107 90.2104462,275.438459 90.2104462,274.185272 L90.2104462,271.487439 C90.2104462,270.930467 90.2974731,270.704197 90.4715268,270.495332 C90.7326075,270.182035 91.219958,269.868739 91.9335784,269.868739 C93.0127118,269.868739 93.534873,270.495332 93.534873,271.661492 L93.534873,274.185272 C93.534873,275.438459 93.5174677,275.595107 92.8734688,275.69954 L92.560172,275.751756 C92.4383344,275.838783 92.4731451,276.134674 92.5949827,276.18689 C93.0823333,276.152079 93.5522784,276.134674 94.178872,276.134674 C94.7880601,276.134674 95.292816,276.152079 95.8149773,276.18689 C95.936815,276.134674 95.9716257,275.838783 95.8497881,275.751756 L95.4842752,275.69954 C94.8576816,275.612513 94.8228709,275.438459 94.8228709,274.185272 L94.8228709,271.522249 C94.8228709,270.913061 94.875087,270.739007 95.0839515,270.477927 C95.3276268,270.16463 95.8671934,269.868739 96.5285977,269.868739 C97.6251364,269.868739 98.1472977,270.477927 98.1472977,271.661492 L98.1472977,274.185272 Z M112.872246,273.193165 C112.872246,271.539655 111.793113,270.530143 110.696574,269.851333 L109.304144,268.981064 C108.660145,268.580741 107.824687,267.849715 107.824687,266.840203 C107.824687,266.039556 108.1902,264.908206 109.895927,264.908206 C111.566843,264.908206 112.036788,266.039556 112.263058,266.875014 C112.350085,266.979446 112.628571,266.92723 112.698192,266.822798 C112.698192,266.091772 112.541544,265.117071 112.384895,264.699342 C112.245652,264.699342 112.001977,264.664531 111.775707,264.59491 C111.323167,264.473072 110.696574,264.36864 110.157007,264.36864 C107.894308,264.36864 106.606311,265.708854 106.606311,267.362364 C106.606311,268.789605 107.615822,269.781712 108.486091,270.356089 L110.139602,271.435222 C111.410194,272.253275 111.566843,273.106139 111.566843,273.871975 C111.566843,274.916298 110.853222,275.873593 109.391171,275.873593 C107.372147,275.873593 106.658527,274.167866 106.397446,273.280192 C106.327825,273.17576 106.066744,273.210571 105.979717,273.332408 C106.014528,274.150461 106.240798,275.386243 106.449662,275.769161 C106.780364,275.96062 107.702849,276.41316 109.164901,276.41316 C111.4276,276.41316 112.872246,275.107757 112.872246,273.193165 Z M115.83116,273.280192 L117.9024,272.531761 C118.16348,272.444734 118.198291,272.288086 118.198291,272.027005 L118.215696,271.226358 C118.233102,270.582359 118.024237,269.71209 116.945104,269.71209 C116.457753,269.71209 115.865971,269.955765 115.83116,270.495332 C115.813754,270.773818 115.796349,270.982683 115.657106,271.087115 C115.396025,271.295979 114.92608,271.417817 114.665,271.417817 C114.508351,271.417817 114.421324,271.33079 114.421324,271.174142 C114.421324,270.269062 116.388132,269.033281 117.658724,269.033281 C118.911911,269.033281 119.5211,269.764306 119.468883,271.06971 L119.364451,274.098245 C119.32964,274.898892 119.486289,275.612513 120.165099,275.612513 C120.339152,275.612513 120.495801,275.560297 120.600233,275.50808 C120.68726,275.455864 120.774287,275.386243 120.826503,275.386243 C120.896124,275.386243 120.94834,275.490675 120.94834,275.612513 C120.94834,275.69954 120.339152,276.378349 119.486289,276.378349 C119.06856,276.378349 118.650831,276.221701 118.354939,275.838783 C118.285318,275.73435 118.180886,275.595107 118.076453,275.595107 C117.954616,275.595107 117.745751,275.751756 117.397644,275.943215 C117.014725,276.152079 116.631807,276.378349 116.144457,276.378349 C115.639701,276.378349 115.221972,276.239106 114.92608,275.978026 C114.595378,275.682134 114.386514,275.247 114.386514,274.759649 C114.386514,274.08084 114.717216,273.680516 115.83116,273.280192 Z M115.726728,274.550785 C115.726728,274.846676 115.935592,275.595107 116.823266,275.595107 C117.171374,275.595107 117.71094,275.334027 117.884994,275.159973 C118.093859,274.951108 118.093859,274.707433 118.111264,274.34192 L118.146075,273.315003 C118.146075,273.123544 118.076453,273.088733 117.972021,273.088733 C117.867589,273.088733 117.571697,273.158355 117.258401,273.262787 C116.231484,273.610894 115.726728,273.871975 115.726728,274.550785 Z M125.647792,269.033281 C122.7585,269.033281 121.435691,271.034899 121.435691,272.914679 C121.435691,274.046029 121.836015,274.898892 122.445203,275.490675 C123.054391,276.082458 123.907254,276.378349 124.829739,276.378349 C125.839251,276.378349 127.144654,275.890999 127.736437,274.603001 C127.719032,274.446353 127.562383,274.324515 127.42314,274.359326 C127.022817,274.951108 126.500655,275.403648 125.491144,275.403648 C123.628768,275.403648 122.688878,273.784948 122.688878,272.427329 C122.688878,270.582359 123.872444,269.625063 125.09082,269.625063 C125.80444,269.625063 126.448439,270.077603 126.831358,270.547548 C126.900979,270.634575 126.988006,270.669386 127.075033,270.669386 C127.283897,270.669386 127.457951,270.338684 127.457951,270.025387 C127.457951,269.729496 127.336113,269.45101 127.19687,269.329172 C126.726925,269.120307 126.048116,269.033281 125.647792,269.033281 Z M129.302921,274.185272 C129.302921,275.438459 129.285516,275.629918 128.641517,275.69954 L128.206382,275.751756 C128.084545,275.838783 128.119355,276.134674 128.241193,276.18689 C128.798165,276.152079 129.320326,276.134674 129.94692,276.134674 C130.556108,276.134674 131.060864,276.152079 131.583025,276.18689 C131.704863,276.134674 131.739674,275.821377 131.617836,275.751756 L131.252323,275.69954 C130.62573,275.612513 130.590919,275.438459 130.590919,274.185272 L130.590919,271.261169 C130.590919,270.651981 130.643135,270.564954 130.956432,270.303873 C131.269728,270.042792 131.722268,269.833928 132.314051,269.833928 C133.427995,269.833928 133.967562,270.582359 133.967562,271.696303 L133.967562,274.185272 C133.967562,275.438459 133.950156,275.595107 133.306157,275.69954 L132.95805,275.751756 C132.836212,275.838783 132.871023,276.134674 132.992861,276.18689 C133.462806,276.152079 133.984967,276.134674 134.611561,276.134674 C135.220749,276.134674 135.725505,276.152079 136.352098,276.18689 C136.473936,276.134674 136.508747,275.838783 136.386909,275.751756 L135.916964,275.69954 C135.29037,275.629918 135.25556,275.438459 135.25556,274.185272 L135.25556,271.278574 C135.25556,270.060198 134.663777,269.033281 133.010266,269.033281 C132.122592,269.033281 131.287134,269.45101 130.66054,269.93836 C130.608324,269.903549 130.590919,269.764306 130.590919,269.607658 L130.590919,265.952529 C130.590919,265.186692 130.62573,264.316424 130.643135,263.794262 C130.608324,263.724641 130.538703,263.68983 130.469081,263.68983 C129.842488,264.020532 129.024435,264.281613 128.589301,264.420856 C128.502274,264.473072 128.502274,264.716747 128.589301,264.768963 L128.763354,264.873396 C129.285516,265.186692 129.302921,265.291125 129.302921,266.318042 L129.302921,274.185272 Z M139.972417,269.033281 C138.649608,269.033281 137.605285,269.746901 137.605285,271.017493 C137.605285,271.974789 138.318906,272.583977 139.328418,273.158355 C139.972417,273.523868 140.668632,273.959002 140.668632,274.759649 C140.668632,275.50808 140.129065,275.873593 139.502471,275.873593 C138.510365,275.873593 137.953393,275.038135 137.657502,274.08084 C137.570475,273.976407 137.344205,273.993813 137.257178,274.098245 C137.222367,274.672622 137.326799,275.525486 137.466042,275.856188 C137.901177,276.204295 138.510365,276.378349 139.328418,276.378349 C140.616415,276.378349 141.834792,275.716945 141.834792,274.394136 C141.834792,273.158355 140.981928,272.566572 140.059443,272.044411 C139.450255,271.696303 138.719229,271.313385 138.719229,270.599764 C138.719229,269.973171 139.154364,269.538036 139.833174,269.538036 C140.546794,269.538036 141.068955,270.042792 141.364847,270.808629 C141.451874,270.913061 141.712954,270.87825 141.782576,270.756413 C141.782576,270.286468 141.660738,269.729496 141.50409,269.346577 C141.347441,269.207334 140.703442,269.033281 139.972417,269.033281 Z" id="Tom-Sachs" fill="#82D7DA"></path>
            <g id="React" opacity="0.500509511" transform="translate(15.229704, 18.405376)" fill="#D8D8D8" fill-opacity="0">
                <rect id="r-v" x="0" y="0" width="269.196388" height="324.17513"></rect>
                <rect id="r-v-textfield" x="0" y="110.959273" width="269.196388" height="48.9526204"></rect>
                <rect id="r-v-results" x="0" y="158.824057" width="269.196388" height="121.837633"></rect>
                <rect id="r-v-results-tom-s" x="0" y="237.14825" width="269.196388" height="30.4594082"></rect>
                <rect id="r-v-results-tom-t" x="0" y="204.513169" width="269.196388" height="30.4594082"></rect>
                <rect id="r-v-results-tracey" x="0" y="171.878089" width="269.196388" height="30.4594082"></rect>
                <rect id="r-v-done" x="0" y="280.66169" width="269.196388" height="43.5134403"></rect>
            </g>
        </g>
    </g>
</svg>
</center></div>
<div style="flex:1" id="simple-components">
  <div class="component" style="height:474px; width: 249px; margin-top: 20px;" id="sc-v" data-props="{ query: 'Tracy', results: [{ name: 'Tracy Emin', url: 'img/tracy.png' }, { name: 'Tom Thompson', url: 'img/tom-t.png' }, { name: 'Tom Sachs', url: 'img/tom-s.png' }] }" data-title="View"><p>View</p>
    <div class="component" id="sc-v-textfield" data-props="{ text: 'Tracy', onChange: function(){} }" data-title="SearchQueryInput"><p>SearchQueryInput</p></div>
    <div class="component" id="sc-v-results" data-props="{ scrollEnabled: false }" data-title="ScrollView"><p>ScrollView</p>
      <div class="component" id="sc-v-results-tracey" data-props="{ name: 'Tracy Emin', url: 'img/tracy.png' }" data-title="ArtistResult"><p>ArtistResult</p></div>
      <div class="component" id="sc-v-results-tom-t" data-props="{ name: 'Tom Thompson', url: 'img/tom-t.png' }" data-title="ArtistResult"><p>ArtistResult</p></div>
      <div class="component" id="sc-v-results-tom-s" data-props="{ name: 'Tom Sachs', url: 'img/tom-s.png' }" data-title="ArtistResult"><p>ArtistResult</p></div>
    </div>
    <div class="component" id="sc-v-done" data-props="{ onTap: function(){} }" data-title="Button"><p>Button</p></div>
  </div>
</div>
<div id="simple-components-props" style="flex:1; ">
  <code><pre style="margin-top: 20px; width: 269px; height:452px;">// Hover on prototype for props
{
  ...
}
  </pre></code>
</div>

<script>
var JSONWithFuncs = function(key, val) {
  if (typeof val === 'function') {
    return "() => void" 
  }
  return val;
};

var highlight = function(id) {
  var $svgComponent = $("#r-" + id)
  var $component = $("#sc-" + id)

  $svgComponent.attr("stroke", "black")
  $component.addClass("highlight")

  var props = $component.data("props")
  var object = eval("(" + props + ")")
  var formatString = JSON.stringify(object, JSONWithFuncs, "  ").replace('"() => void"', "() => void")
  $("#simple-components-props pre").text("// Props for " + $component.data("title") + "\n\n" + formatString) 
}
var unHighlight = function(id) {
  $("#r-" + id).attr("stroke", "none")
  $("#sc-" + id).removeClass("highlight")
}

$("svg").find("g#React > rect").hover(function(){
    var newID = this.id.replace(/^r-/, "")
    highlight(newID)
}, function () {
    var newID = this.id.replace(/^r-/, "")
    unHighlight(newID)
});

$(".component").hover(function(){
    var newID = this.id.replace(/^sc-/, "")
    highlight(newID)
}, function () {
    var newID = this.id.replace(/^sc-/, "")
    unHighlight(newID)
});
</script>

<p>This kind of tree structure should feel quite similar to the <code class="language-plaintext highlighter-rouge">UIView</code> tree that you see inside a tool like Reveal, or inside the Xcode visual inspector. Next up I want to show you what the code for this would look like in JavaScript:</p>

<!-- The {{ and }} get eaten by mustache -->
<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Import React, and native components from React Native</span>
<span class="k">import</span> <span class="o">*</span> <span class="k">as</span> <span class="nx">React</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react</span><span class="dl">"</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">ScrollView</span><span class="p">,</span> <span class="nx">Text</span><span class="p">,</span> <span class="nx">Image</span><span class="p">,</span> <span class="nx">View</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react-native</span><span class="dl">"</span>

<span class="c1">// Re-use our existing search TextInput component</span>
<span class="k">import</span> <span class="nx">TextInput</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">./text_input</span><span class="dl">"</span>

<span class="c1">// Exports a React component called Search Results from this file</span>
<span class="k">export</span> <span class="k">default</span> <span class="kd">class</span> <span class="nx">SearchResults</span> <span class="kd">extends</span> <span class="nx">React</span><span class="p">.</span><span class="nx">Component</span> <span class="p">{</span>

  <span class="c1">// The tree of components that this component represents</span>
  <span class="nx">render</span><span class="p">()</span> <span class="p">{</span>
    <span class="c1">// This is JSX code, JSX is a source-code transformer that converts code from </span>
    <span class="c1">// HTML-like brackets into a specific method call. E.g  `&lt;Text font="Garamond" /&gt;`</span>
    <span class="c1">// turns into; `React.createElement('Text', {font: 'Garamond'}, null)`</span>
    <span class="k">return</span> <span class="p">(</span>
      <span class="o">&lt;</span><span class="nx">View</span><span class="o">&gt;</span>
        <span class="o">&lt;</span><span class="nx">SearchQueryInput</span> <span class="nx">text</span><span class="o">=</span><span class="p">{{</span> <span class="na">value</span><span class="p">:</span> <span class="nx">props</span><span class="p">.</span><span class="nx">query</span> <span class="p">}}</span> <span class="nx">onChange</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">onQueryChange</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="k">this</span><span class="p">)}</span><span class="sr">/</span><span class="err">&gt;
</span>        <span class="o">&lt;</span><span class="nx">ScrollView</span><span class="o">&gt;</span>
          <span class="p">{</span><span class="nx">props</span><span class="p">.</span><span class="nx">results</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="nx">rowForResult</span><span class="p">)}</span>
        <span class="o">&lt;</span><span class="sr">/ScrollView</span><span class="err">&gt;
</span>      <span class="o">&lt;</span><span class="sr">/View</span><span class="err">&gt;
</span>    <span class="p">)</span>
  <span class="p">}</span>

  <span class="c1">// Returns a single component for a row in the search</span>
  <span class="nx">rowForResult</span><span class="p">(</span><span class="nx">result</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="p">(</span>
      <span class="o">&lt;</span><span class="nx">ArtistResult</span><span class="o">&gt;</span>
        <span class="o">&lt;</span><span class="nx">Image</span> <span class="nx">source</span><span class="o">=</span><span class="p">{{</span> <span class="na">uri</span><span class="p">:</span> <span class="nx">result</span><span class="p">.</span><span class="nx">url</span> <span class="p">}}</span> <span class="sr">/</span><span class="err">&gt;
</span>        <span class="o">&lt;</span><span class="nx">Text</span><span class="o">&gt;</span><span class="p">{</span><span class="nx">result</span><span class="p">.</span><span class="nx">name</span><span class="p">}</span><span class="o">&lt;</span><span class="sr">/Text</span><span class="err">&gt;
</span>      <span class="o">&lt;</span><span class="sr">/ArtistResult</span><span class="err">&gt;
</span>    <span class="p">)</span>
  <span class="p">}</span>

  <span class="c1">// A function to handle changes to the search query</span>
  <span class="nx">onQueryChange</span><span class="p">(</span><span class="nx">query</span><span class="p">)</span> <span class="p">{</span>
    <span class="p">...</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<blockquote>
  <p>You’re looking at a subclass of <code class="language-plaintext highlighter-rouge">React.Component</code> with two functions, <code class="language-plaintext highlighter-rouge">render</code> and <code class="language-plaintext highlighter-rouge">rowForResult</code>. <code class="language-plaintext highlighter-rouge">render</code> is the key function for defining your tree.</p>
</blockquote>

<p>Instead of MVC, React uses composition of components to handle complexity - this should feel quite similar to iOS development. The screen of an iOS app is typically made up of <code class="language-plaintext highlighter-rouge">UIView</code>s, and <code class="language-plaintext highlighter-rouge">UIViewController</code>s which exist as 2 interlinked trees of hierarchy. A <code class="language-plaintext highlighter-rouge">UIViewController</code> itself doesn’t have a visual representation, but exists to manipulate data, handle actions and the view structure for <code class="language-plaintext highlighter-rouge">UIViews</code> who do.</p>

<p>By merging the responsibilities of a <code class="language-plaintext highlighter-rouge">UIView</code> and <code class="language-plaintext highlighter-rouge">UIViewController</code> into a Component, there is a consistent way to work with all aspects of your app.</p>

<p>To try to understand this, let’s take a trivial example. Downloading some data from the network and showing it on a screen.</p>

<p>In UIKit-world you would:</p>

<ul>
  <li>Create a <code class="language-plaintext highlighter-rouge">UIViewController</code> subclass, which makes the API request on its <code class="language-plaintext highlighter-rouge">viewDidLoad</code></li>
  <li>While the request is sent you present a set of views during loading</li>
  <li>When the API request has returned, you convert the data into native model objects, remove the loading screen</li>
  <li>You then create a new view hierarchy for your model, and pass down attributes of the model to those views</li>
</ul>

<p>In React you would:</p>

<ul>
  <li>Create a <code class="language-plaintext highlighter-rouge">React.Component</code> subclass, which makes the API request on its <code class="language-plaintext highlighter-rouge">onMount</code></li>
  <li>While the request is sent you render a set of components during loading</li>
  <li>When the API request has returned, you change your “state” on the main component with the API request’s JSON</li>
  <li>The state change re-runs your render method, which passes the API “state” down to the component for your page</li>
</ul>

<p>They are conceptually very similar. React does two key things differently: Handle “state” changes on any component, and handle view creation/addition and removal.</p>

<h2 id="handling-state-changes">Handling “State” Changes</h2>

<p>So, I’ve been quoting “state”, I should explain this. There are two types of “state” inside React, and I’ve been using the quoted term to refer to both for simplicity till now.</p>

<blockquote>
  <p>There are two types of data that control a component: <code class="language-plaintext highlighter-rouge">props</code> and <code class="language-plaintext highlighter-rouge">state</code>. <code class="language-plaintext highlighter-rouge">props</code> are set by the parent and they are fixed throughout the lifetime of a component. For data that is going to change, we have to use <code class="language-plaintext highlighter-rouge">state</code>.</p>

  <p><a href="https://facebook.github.io/react-native/docs/state.html">React Native - State</a></p>
</blockquote>

<p>So in our case above, getting the API results only changes the state on the component which makes the request. However, the results are passed down into the props <em>(properties)</em> of the component’s children as any further changes to the API data (for example if you were polling for updates) would result in a re-render of the child-components.</p>

<p>So for the lifetime of that top-level component, the changes due to the API request are put in state. Then the results are passed down to its children as props. This means the children can potentially change when an API response is received.</p>

<p>This is a hard abstraction to grok outright, so it’s good to take a second opinion. I felt that <a href="https://github.com/arjunsk/react-guide/blob/3bde47efae5dd8e238d0e8176083bd6d1ca03bb3/props-vs-state.md#props-vs-state">this guide from uberVU</a> as well as the official docs above explain it in different ways. Which can help ground your understanding. Overall, these are the rules:</p>

<blockquote>
  <table>
    <thead>
      <tr>
        <th> </th>
        <th><em>props</em></th>
        <th><em>state</em></th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td>Can get initial value from parent Component?</td>
        <td>Yes</td>
        <td>Yes</td>
      </tr>
      <tr>
        <td>Can be changed by parent Component?</td>
        <td>Yes</td>
        <td>No</td>
      </tr>
      <tr>
        <td>Can set default values inside Component?</td>
        <td>Yes</td>
        <td>Yes</td>
      </tr>
      <tr>
        <td>Can change inside Component?</td>
        <td>No</td>
        <td>Yes</td>
      </tr>
      <tr>
        <td>Can set initial value for child Components?</td>
        <td>Yes</td>
        <td>Yes</td>
      </tr>
      <tr>
        <td>Can change in child Components?</td>
        <td>Yes</td>
        <td>No</td>
      </tr>
    </tbody>
  </table>

  <p>From <a href="https://github.com/uberVU/react-guide">uberVU’s react-guide</a></p>
</blockquote>

<h2 id="handling-view-management">Handling View Management</h2>

<p>Because of the consolidated rules around state management React can quite easily know when there have been changes throughout your component tree and to call <code class="language-plaintext highlighter-rouge">render</code> for those components. <code class="language-plaintext highlighter-rouge">render</code> is the function where you declare the tree of children for a component.</p>

<blockquote>
  <p>The flow [of data] in React is one-directional. We maintain a hierarchy of components, in which each component depends only on its parent and its own internal state. We do this with properties: data is passed from a parent to its children in a top-down manner. If an ancestor component relies on the state of its descendant, one should pass down a callback to be used by the descendant to update the ancestor.</p>
</blockquote>

<blockquote>
  <p><a href="https://facebook.github.io/react-native/docs/communication-ios.html">React Native - Communication between native and React Native</a></p>
</blockquote>

<p>Props are treated as the equivalent of a Swift <code class="language-plaintext highlighter-rouge">let</code> variable in this case, any changes to props require a new version of the component to exist in the tree and thus <code class="language-plaintext highlighter-rouge">render</code> is called.</p>

<p>So, in summary: React’s paradigm is a component tree, where the <code class="language-plaintext highlighter-rouge">render</code> function of a component passes down one component’s state into the props of the children.</p>

<h1 id="react-native">React Native</h1>

<p>React was built for the web - but <a href="https://youtu.be/KVZ-P-ZI6W4?t=12m54s">some-one realised</a> that they could de-couple the React component tree from the HTML output, and instead that could be a tree of <code class="language-plaintext highlighter-rouge">UIView</code>’s.</p>

<p>That is the core idea of React Native. Bridge the React component tree to native primitives. React Native runs on a lot of platforms:</p>

<ul>
  <li>Officially: iOS, Android, tvOS &amp; VR.</li>
  <li>Unofficially: macOS, Windows &amp; Ubuntu.</li>
</ul>

<p>Each of these platforms will have their own way of showing some text e.g.</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">RCTText</code> for iOS and tvOS - <a href="https://github.com/facebook/react-native/blob/559805d0b04da99b80a0813917b7eaa2716faa4c/Libraries/Text/RCTText.m#L117">which uses NSTextStorage, and drawRect</a></li>
  <li><code class="language-plaintext highlighter-rouge">Textfield</code> for Android - which uses <a href="https://github.com/facebook/react-native/blob/559805d0b04da99b80a0813917b7eaa2716faa4c/ReactAndroid/src/main/java/com/facebook/react/flat/DrawTextLayout.java">Canvas and a DrawCommand</a></li>
  <li><code class="language-plaintext highlighter-rouge">Three.js view primitive</code> for VR - which uses <a href="https://github.com/facebook/react-vr/blob/1f037c118b2088f7881c240fdfd6c204de8b2c65/OVRUI/src/UIView/UIView.js#L221">BitmapFontGeometry</a> + <a href="https://github.com/facebook/react-vr/blob/master/OVRUI/src/SDFFont/SDFFont.js">Shaders</a></li>
  <li><code class="language-plaintext highlighter-rouge">RCTText</code> for macOS <a href="https://github.com/ptmt/react-native-macos/blob/f3ce1d124e32a95e48ed26c05865e150714887da/Libraries/Text/RCTText.m#L182">which also uses NSTextStorage, and drawRect</a></li>
  <li><code class="language-plaintext highlighter-rouge">ReactTextShadowNode</code> for Windows - which uses a <a href="https://github.com/Microsoft/react-native-windows/blob/2cc697859c80f59350e9613565a975023ae1046e/ReactWindows/ReactNative/Views/Text/ReactTextShadowNode.cs#L252">RichTextBlock</a></li>
  <li><code class="language-plaintext highlighter-rouge">QQuickItem</code> for Ubuntu - Which uses <a href="https://github.com/CanonicalLtd/react-native/blob/98e0ce38cdcb8c489a064c436a353be754e95f89/ReactUbuntu/runtime/src/reactrawtextmanager.cpp#L84">QString to render</a></li>
</ul>

<p>But when working at React-level, you would use the component <code class="language-plaintext highlighter-rouge">Text</code>. This means you work at a “React in JS” level, and rely on the primitives provided by each implementation of React Native.</p>

<p>For iOS, this works by using a JavaScript runtime (running via JavaScriptCore in your app) which sends <a href="https://twitter.com/nicklockwood/status/876130867177033730">messages across a bridge</a> that handles the native <code class="language-plaintext highlighter-rouge">UIView</code> hierarchy. Most of the messaging work is handled inside the <code class="language-plaintext highlighter-rouge">RCTUIManager</code> which receives calls like <code class="language-plaintext highlighter-rouge">createView:viewName:rootTag:props:</code>, <code class="language-plaintext highlighter-rouge">setChildren:reactTags:</code>, <code class="language-plaintext highlighter-rouge">updateView:viewName:props:</code> and <code class="language-plaintext highlighter-rouge">createAnimatedNode:config</code>.</p>

<p>This bridging is how you get a lot of the positive aspects of working with the JavaScript tooling ecosystem. The JavaScript used by React can be updated independent of the app, but so long as it is working with the same native bridge version. This bridging technique is how React can safely have a reliable version of <a href="http://johnholdsworth.com/injection.html?index=438">Injection for Xcode</a>. It re-evaluates your JavaScript code, and that triggers a new set of messages to the native side.</p>

<p>Like any cross-platform abstraction, React Native can be leaky. To write a cross-platform app that purely lives inside JS Runtime, you have to write React-only code. React and React Native doesn’t have ways to handle primitives like <code class="language-plaintext highlighter-rouge">UINavigationController</code> - they want your entire app to be represented as a series of components that can be mapped across many platforms.</p>

<p>This isn’t optimal when you’re coming in from the native world - where you’re used to building platform-specific experiences, and are genuinely excited at the prospect of platform-specific APIs. Generally you can look for other teams who have felt the same and are willing to write native-bridged code that’s specific to iOS. Shout-out to <a href="https://duckduckgo.com/?q=wix+engineering&amp;t=osx&amp;ia=web">Wix</a> and <a href="https://medium.com/airbnb-engineering/tagged/mobile">AirBnB</a> who are doing great work in this space.</p>

<p>Is this a critical problem against React Native? I don’t think so, we’ve added native abstractions where it was the right decision and we’ve used JavaScript when it was the right decision.</p>

<p>For example, our <code class="language-plaintext highlighter-rouge">Image</code> component is a bridged native component that uses <code class="language-plaintext highlighter-rouge">SDWebImage</code> under the hood so that we can share an image cache for thumbnails with the native side of the app. It works by:</p>

<ul>
  <li><a href="https://github.com/artsy/emission/blob/e4bbde386d54bc8ca73565d667e2701ab0fad0f0/src/lib/Components/OpaqueImageView.tsx#L50-L135">Declaring a JavaScript component</a> to represent your native component</li>
  <li><a href="https://github.com/artsy/emission/blob/e4bbde386d54bc8ca73565d667e2701ab0fad0f0/src/lib/Components/OpaqueImageView.tsx#L135">Letting React Native know</a> you mean to reference native code for your component</li>
  <li><a href="https://github.com/artsy/emission/blob/e4bbde386d54bc8ca73565d667e2701ab0fad0f0/Pod/Classes/OpaqueImageViewComponent/AROpaqueImageView.h">Creating a native view</a> with the same interface as your props</li>
  <li><a href="https://github.com/artsy/emission/blob/e4bbde386d54bc8ca73565d667e2701ab0fad0f0/Pod/Classes/OpaqueImageViewComponent/AROpaqueImageViewManager.m#L25-L41">Using bridging macros</a> to expose your interface to JavaScript</li>
</ul>

<p>Here is a commit that initially added <a href="https://github.com/artsy/emission/commit/a404ccf1519ec79fc0bfadf6e572d990caa0a9ec">the native component</a>, before it became more complex from production usage. The bridging macros cannot be used in Swift, but you can <a href="https://facebook.github.io/react-native/docs/native-modules-ios.html#exporting-swift">still bridge to existing Swift code</a> too.</p>

<p>This fundamentally means you can have both: a faster more elegant way to write your interfaces and the ability to still work with any part of the native toolchains you want. You can pick based on the problem, and the domain.</p>

<h2 id="ten-minutes-to-try-out-react">Ten minutes to try out React</h2>

<p>OK, no joke, don’t skip this bit, you try React Native right now. This will require some terminal skills, and about 5 minutes, it shouldn’t be more complex than using CocoaPods via the terminal.</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># If you don't have homebrew</span>
<span class="c"># see https://brew.sh</span>

<span class="c"># Install the JavaScript tools you'll need</span>
brew <span class="nb">install </span>nodejs yarn

<span class="c"># You'll want Visual Studio Code to work on this</span>
brew cask <span class="nb">install </span>visual-studio-code

<span class="c"># Install the React Native CLI</span>
yarn global add react-native-cli

<span class="c"># Create a new React Native</span>
<span class="c"># project called TrendingArtists</span>
react-native init TrendingArtists
</code></pre></div></div>

<p>You'll need <code>node</code> and <code>yarn</code> installed globally so you can run JavaScript and handle dependency management respectively.</p>

<p>For working inside a JavaScript project, I'd strongly recommend using Microsoft's <a href="https://code.visualstudio.com">Visual Studio Code</a>, it does a great job for React Native.</p>

<p>Next up we're going to make the initial project and look around, so once all the installing has finished. You can follow along with the next section.</p>

<p>If the command `react-native` isn't working, <a href="https://github.com/keitaito">@keitaito</a> has some useful advice in the <a href="#comments">comments</a>.</p>

<p>Alright, so that should do a lot of downloading, and you’ll have a new folder with a fully set up project for iOS and Android. We’ll be focusing on the iOS side.</p>

<p>Open up <code class="language-plaintext highlighter-rouge">TrendingArtists</code> in your editor and inside your terminal with <code class="language-plaintext highlighter-rouge">cd TrendingArtists</code> then <code class="language-plaintext highlighter-rouge">code .</code>. From the terminal you can get the Xcode project compiled, and your new app open inside the iOS simulator with <code class="language-plaintext highlighter-rouge">react-native run-ios</code>. This will will set you up to work without Xcode.</p>

<p>The <code class="language-plaintext highlighter-rouge">run-ios</code> command first uses <code class="language-plaintext highlighter-rouge">xcodebuild</code> to compile the native app found in <code class="language-plaintext highlighter-rouge">ios/TrendingArtists.xcodeproj</code> it will then load up the the React Native Packager. We’ll cover that later, for now, think of it as a JavaScript file change watcher.</p>

<p>Once a simulator has popped up, you’ll see the “Welcome to React Native” screen. Now that we’ve got “an app” running. It will take a minute or two to parse all your JavaScript. So then let’s take a moment to look through what we have in our file system now.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># If you want tree: brew install tree
$ tree .

├── __tests__
│   ├── index.android.js
│   └── index.ios.js
├── android - [snipped]
├── app.json
├── index.android.js
├── index.ios.js
├── ios
│   ├── TrendingArtists
│   │   ├── AppDelegate.h
│   │   ├── AppDelegate.m
│   │   ├── Base.lproj
│   │   │   └── LaunchScreen.xib
│   │   ├── Images.xcassets
│   │   │   └── AppIcon.appiconset
│   │   │       └── Contents.json
│   │   ├── Info.plist
│   │   └── main.m
│   ├── TrendingArtists-tvOS
│   │   └── Info.plist
│   ├── TrendingArtists-tvOSTests
│   │   └── Info.plist
│   ├── TrendingArtists.xcodeproj
│   │   ├── project.pbxproj
│   │   ├── project.xcworkspace
│   │   │   ├── contents.xcworkspacedata
│   └── TrendingArtistsTests
│       ├── Info.plist
│       └── TrendingArtistsTests.m
├── jsconfig.json
├── package.json
├── node_modules [x million files snipped]
└── yarn.lock
</code></pre></div></div>

<p><strong>What are we looking at?</strong></p>

<p>First up - we have some test files, these files are unique per platform - though they do have the same code right now. In React Native imports can resolve to be different per-platform, which is why you see <code>.android.js</code> or <code>.ios.js</code>.</p>

<p><code>index.android.js</code> and <code>index.ios.js</code>  are the launching point for this app, so it's in there you'll find the code for what we're seeing on screen.</p>

<p>In the <code>ios</code> folder, we have the native side of React Native. Looks pretty empty from here, but when you open the workspace you'll note that it is referring to a lot of <code>xcproject</code>s which are inside your <code>node_modules</code> folder.</p>

<p>The Xcode project is really barebones, it's just an <code>AppDelegate</code> that creates a <code>UIView</code> subclass. You can see that it references <code>index.ios.js</code> which is where your JavaScript side starts.</p>

<p>Then you have the <code>package.json</code> which is like an Xcodeproj + Podfile in one, and the <code>node_modules</code> folder. This file houses all your JavaScript dependencies, your runtime scripts and app metadata.</p>

<p>I’d like to show you how to make a change appear instantly. In your iOS Simulator, perform a shake gesture (<code>cmd + ctrl + z</code>) and in the React Native debug menu, hit “Enable Hot Reloading”. It will trigger a reload of all your JS code again.</p>

<p>Now you can go into your text editor and change some of the words inside <code class="language-plaintext highlighter-rouge">index.ios.js</code> - those changes will be reflected almost instantly. You can do this for almost anything, almost anywhere. We’ve been working <a href="https://github.com/artsy/emission/">on Emission</a> for over a year, and this is still close to instant in every part of the codebase.</p>

<p>One of the key changes here is that React Native will occasionally make you wait a bit longer (parsing all of the JavaScript) in exchange for very often giving you sub-second changes reflected on screen. This is an incredibly positive change from 9 seconds per iteration from my blank native app.</p>

<p>This substantially changes how easily I can focus on my work in React Native, and how effortlessly I can experiment with code. It makes me feel really productive, and makes pairing a joy.</p>

<p>If you’d like to go through a tutorial from this point, I’d recommend these:</p>

<ul>
  <li><a href="https://facebook.github.io/react-native/docs/tutorial.html">The React Native site</a></li>
  <li><a href="https://egghead.io/browse/frameworks/react-native">Egghead.io - React Native</a></li>
  <li><a href="http://www.reactnativeexpress.com">React Native Express</a></li>
  <li><a href="http://makeitopen.com">Building the f8 2016 app</a></li>
</ul>

<p>We’re now going back to talking about the hows and whys. Good luck with those tutorials though - <a href="/images/what-is-rn/you-have-got-this.gif">you’ve got this :D</a></p>

<h2 id="writing-javascript">Writing JavaScript</h2>

<p>JavaScript is a deceptively simple language with a lot of weird gotchas, which makes it easy downplay. Especially coming from the native world, where you are used to vendor-owned programming languages which are more focused and have useful type systems.</p>

<p>I think it’s safe to say that the majority of JavaScript’s warts are fixed by community tooling nowadays. Tools like ESLint, TSLint, Babel, Prettier, TypeScript and Flow make it difficult to write bad code, and the JavaScript community really comes together to fix it’s own problems. This differs from the <a href="https://en.wikipedia.org/wiki/Damocles">Sword of Damocles</a> that <a href="http://artsy.github.io/blog/2017/02/05/Retrospective-Swift-at-Artsy/#Developer.Experience">exists for big OSS projects</a> in the iOS community.</p>

<p>Here’s a collection of tools that we use every day in the JS world:</p>

<table>
  <thead>
    <tr>
      <th>Project</th>
      <th>What it does</th>
      <th>Why it’s awesome</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><a href="https://babeljs.io">Babel</a></td>
      <td>Transform source code</td>
      <td>You can pick and choose language features</td>
    </tr>
    <tr>
      <td><a href="http://www.typescriptlang.org">TypeScript</a></td>
      <td>Transform source code</td>
      <td>Microsoft choose all your language features</td>
    </tr>
    <tr>
      <td><a href="https://www.npmjs.com/">NPM</a></td>
      <td>CocoaPods for JS</td>
      <td>Make your own standard library</td>
    </tr>
    <tr>
      <td><a href="https://yarnpkg.com/lang/en/">Yarn</a></td>
      <td>Improved CocoaPods for JS</td>
      <td>An NPM compatible re-think of the NPM CLI</td>
    </tr>
    <tr>
      <td><a href="http://eslint.org">ESLint</a></td>
      <td>Static code linter</td>
      <td>Makes it hard to write bad code in JS</td>
    </tr>
    <tr>
      <td><a href="https://palantir.github.io/tslint/">TSLint</a></td>
      <td>Static code linter</td>
      <td>Makes it hard to write bad code in TS</td>
    </tr>
    <tr>
      <td><a href="https://prettier.io">prettier</a></td>
      <td>Code formatter</td>
      <td>Never argue about syntax for JS/TS/CSS/JSON</td>
    </tr>
    <tr>
      <td><a href="https://facebook.github.io/jest/">Jest</a></td>
      <td>Test runner</td>
      <td>Fast, watches for changes, runs only changed code, etc</td>
    </tr>
    <tr>
      <td><a href="https://storybook.js.org">Storybooks</a></td>
      <td>Prototyping environment</td>
      <td>Make browsable scenes of state + components</td>
    </tr>
    <tr>
      <td><a href="https://github.com/typicode/husky">Husky</a></td>
      <td>Simplify Git Hooks</td>
      <td>Easily ensure code is consistent</td>
    </tr>
    <tr>
      <td><a href="http://danger.systems/js/">DangerJS</a></td>
      <td>Code review automation</td>
      <td>Stop asking for CHANGELOG entries etc</td>
    </tr>
    <tr>
      <td><a href="https://github.com/facebook/metro-bundler/">Metro Bundler</a></td>
      <td>Code bundler for React Native</td>
      <td>Handles code changes at runtime for you</td>
    </tr>
  </tbody>
</table>

<p>These inter-linked, composable tools basically represent the entire idea of the JavaScript community. You add them to your project, and your project gets all these small config files that eventually create the kind of cohesive tooling that you would expect from a single vendor in a native environment.</p>

<p>The good part is that they are interchangeable, for example, we switched from Flow to TypeScript with roughly 2 weeks work, then a week to come close to perfect. The bad side is that the configuration aspects of these projects feels like something you do once, then forget until it needs to change.</p>

<p>I wrote up a glossary of terms from JavaScript when I first started understanding the community, you can <a href="/blog/2016/11/14/JS-Glossary/">find it here</a>.</p>

<p><em>“But JavaScript is such a downgrade compared to Swift”</em>, I hear you echoing from the back. This is my own perspective but I consider my workflow in TypeScript to be significantly better than working in Swift. My code is statically analyzed as I type, it is auto-styled as I save, my tests are instant, permanently running and show inside my editor at all times, it’s portable across platforms, it’s quick to execute and embarrassingly fast to compile. I can contribute to all of these tools to improve them. I’d rather work in that environment.</p>

<p>Syntax wise, TypeScript doesn’t have enums with associated types, which I like, nor implicit trailing closures. As a trade-off though TypeScript has <a href="https://www.typescriptlang.org/docs/handbook/advanced-types.html">union types</a>, which work really well for data-modeling.</p>

<p>One particular thing I like a lot about JavaScript that the code you read is generally simpler, as nearly all symbols that you use need to be defined in that file. This is because you can only import a single file, instead of an entire target. Meaning if you include a library, you either import the functions you want, or the library as a whole and then extract the functions, and variables that you want.</p>

<p>If there’s one major flaw with the JavaScript code we have written so far, it’s the complicated ugliness surrounding the <code class="language-plaintext highlighter-rouge">this</code> keyword. It is <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this">genuinely complicated</a>, and a good source of dev-time errors for me. No linters can really catch those errors, so it becomes frustrating.</p>

<h2 id="nodejs">Node.js</h2>

<p>Next to React Native, there are two main environments for writing JavaScript in: the browser, and inside Node. Node is the JavaScript runtime from Google Chrome (called V8, their version of JavaScriptCore) with a UNIX-like baseline set of APIs.</p>

<p>It provides relatively few APIs, it is expected that you would use an NPM module for anything particularly high level. The principle being that a standard library (like Foundation in iOS) is always going to be out of date, and incompatible with what web-browsers ship.</p>

<p>An NPM module is a set of JavaScript files with a particular structure. Generally, there is a <code class="language-plaintext highlighter-rouge">package.json</code> to describe the library, and an <code class="language-plaintext highlighter-rouge">index.js</code> with the code for the library. Libraries can be as small as a single-function to a typical “XYZKit” you would expect from a CocoaPod. As JavaScript tends to be bundled and minified based on code used, developers mainly worry about the overall file-size of their library. You would use a package manager like NPM or Yarn to manage these dependencies. Node modules have the unique, and dangerous idea of allowing multiple versions of the same library to exist inside your application. This “fixes” the problem of dependency hell, at the cost of potential runtime issues. Here’s a full <a href="https://lexi-lambda.github.io/blog/2016/08/24/understanding-the-npm-dependency-model/">explanation of the pattern</a>.</p>

<p>When writing JavaScript with React Native, you are using node modules, but <em>strictly speaking</em> you are not writing a node app. The code that you write is executed inside JavaScriptCore and so doesn’t have access to the UNIX-like API from node.</p>

<p>This can make it a bit confusing about whether you can or can’t use a library from NPM. This also gets a bit more tricky, for example your tests <em>are</em> running inside node. So, it’s fine for your tests to use all of those APIs and libraries, but not your app’s code. So far, from my experience this hasn’t been a problem, in part because of how we use React Native (mainly API -&gt; UI). For example, I researched all of this during the creation of this post, as I hadn’t really noticed the mismatch during active development.</p>

<h2 id="js-tooling">JS Tooling</h2>

<p>Facebook’s tooling is 👍. They have an IDE-like text editor called <a href="https://nuclide.io">Nuclide</a>, which is built on GitHub’s text editor Atom. If you’re using the default setup for React Native then you’ll probably have a good time with it.</p>

<p>We opted for using TypeScript to provide a type system to our React Native - I covered why inside <a href="/blog/2017/02/05/Retrospective-Swift-at-Artsy/">Retrospective: Swift at Artsy</a>. It’s got substantially easier to use TypeScript with React Native since version 0.45 includes work from Artsy and <a href="http://futurice.com">futurice</a> making it possible via config settings alone. The alternative to TypeScript <a href="https://flow.org">is Flow</a>, which is also a great choice.</p>

<p>We choose TypeScript because of how well VS Code and TypeScript integrate. It provides an Xcode-like level of integration. Which, IMO, is a high baseline for expectations. It’s definitely less polished, but it’s <a href="https://github.com/Microsoft/vscode/">Open Source</a> and has substantial monthly releases - which is a very fair trade-off to me.</p>

<p>The node community is great at automation; we have code formatters and language linters that will auto-fix your code as you press save. We have pre-commit and pre-push hooks that are set up automatically when you start using the project. It means you spend less time thinking about trivial details that add up. It’s wonderful.</p>

<p>We use the debugging tools built into Chrome for our React Native, instead of something like LLDB. It supports all of the kinds of runtime introspection you would expect from Xcode.</p>

<h1 id="testing">Testing</h1>

<p>Testing was never a priority in the iOS world. I feel like it’s always getting better with each Xcode version, particularly the change in Xcode 9 which allows tests to run in another simulator without turning off your app.</p>

<p>We really put a lot of time and patience into our native testing on iOS. Coming from that world, to the absolute ease of testing in the JavaScript world is pretty breath-taking. Check out my <a href="/blog/2017/02/05/Front-end-JavaScript-at-Artsy-2017/#Jest">coverage of Jest’s features</a>.</p>

<p>There are two ways to write tests for your React Native code: in process and out of process. E.g. from the JavaScript side, or in native side.</p>

<ul>
  <li>
    <p>JS side: Choice of many Open Source test runners, built with hundreds of contributors involved in multi-year test runners.</p>
  </li>
  <li>
    <p>Native side: Probably one or two people making XCTest, one person trying to get some improvements in Xcode each year. <a href="https://github.com/apple/swift-corelibs-xctest">Semi-closed source</a>.</p>
  </li>
</ul>

<p>We tried out a few native tests, but very quickly we stopped running them. Mainly as we were spending most of our time in a JavaScript environment, so tests would need to run in Xcode. As we don’t need a Mac to run our tests, we can use linux CI servers and get 3-4 minute CI runs.</p>

<h1 id="deployment">Deployment</h1>

<p>This one is a bit tricky to get your head around at first. React Native is a client-side native library that you don’t make source-code changes to, which interacts with the JavaScript that you bundle with the app (or use the React Native Packager at dev-time.) The JavaScript part of your application is just a file that can be updated, amended or fixed at any time.</p>

<p>This is not dynamically swizzing or fishhooking methods, you can ship new JavaScript code to your app which can interact with the exact same version of your compiled React Native library. The swizzling, and arbitrary native code changes are the problem that caused app store rejections early in 2017. <a href="https://github.com/facebook/react-native/issues/12778#issuecomment-284940049">React Native wasn’t the cause of those rejections</a>.</p>

<p>The “deploy my JS anytime” idea is a little bit tricky though, because you can expose native code to your JavaScript. By exposing new functions, you end up with a “versioned bridge” where you make sure that the native functions your JavaScript expects actually exist. So you need to keep track of <em>when</em> you can update the JavaScript and the exposed native functions.</p>

<p>This is what makes it possible to ship bug fixes to your app as fast as the web. We use this, but only for admin users. They can choose the JavaScript for any commit on master, or any active pull request inside a beta version of our app. We don’t ship bug fixes to deployed apps, but we use this ability to provide a simple version of Testflight for our JavaScript code.</p>

<p>Our app release cadence is still about a month long, moving to React Native hasn’t changed that. We’ve automated the entire process, so it’s a cultural artifact rather than technical. So a day or two for the App Store review is fine, ideally our betas should be getting longer than that for testing.</p>

<h2 id="doing-it-right-per-platform">Doing it right per platform</h2>

<p>I’ve used the term cross-platform quite flippantly in this article to describe code that can run on many platforms. We’ve tried thinking of it as React Native gives us the ability to think in cross-platform terms. We now have most of our app’s root view controllers in React Native, which means we could make a pretty simple Android app re-using that code with a pretty small amount of effort.</p>

<p>We don’t though. The apps we make <em>need</em> to fit the platform and feel like the best experience you can get, when you’re potentially buying a <a href="https://www.artsy.net/collect?color=lightblue&amp;price_range=50000.00-%2A&amp;sort=-prices">&gt; $100,000 artwork</a>. We’d need an Android engineer with a lot of experience to work on the app, they’d need to be able to work on React Native for Android when we hit roadblocks and to provide useful context on how the app should feel. <em>BTW, if this is you - get in touch (orta@artsymail.com) ;)</em>.</p>

<p>We already have some cross-platform code to get us started - but it won’t feel like the app we want to create until there is native code to take that React and make it shine.</p>

<p>So, where does the cross-platform aspect come from? For most users of React Native, native development has <em>always</em> been unavailable to them, and now it’s not, because React Native has lowered the barrier to entry. This means many people are aiming to make cross-platform React Native apps that are entirely in JavaScript (see <a href="#Create.React.Native.App">Create React Native App</a>.) They are just trying to get <em>something</em> shipped, which could be different from what <em>you the reader</em> are probably doing. As a native dev, you’re probably more interested in making something really fit the platform and shine. Lots of probablys, yes, but it fits the questions we’re being asked.</p>

<p>Both aspects of this are reasonable. React Native will let you do both. While React Native encourages you to think entirely at the V in MVC only, we still structure our React Native into <code class="language-plaintext highlighter-rouge">UIViewController</code>s and still support unique iOS features via native code.</p>

<p>One place where this difference in perspective shows up is with navigation. In iOS it’s pretty straight forwards: use <code class="language-plaintext highlighter-rouge">UINavigationController</code>. For React Native, it’s actually <em>really tricky</em>, check out <a href="https://github.com/artsy/emission/issues/501">this issue where I write up all the trade-offs</a> for the current set of APIs. Some of this is just a statement that figuring out the right abstraction is hard here, the other is that a lot of big apps are also at the same size as ours with ~2 years of React Native adoption.</p>

<h2 id="create-react-native-app">Create React Native App</h2>

<p>One of the biggest projects to happen in the React Native world in the last 6 months is Create React Native App (CRNA). This is the “super easy to get started” React Native experience.</p>

<p>Remember that most of the people coming to React Native are web developers, and the idea of writing Objective-C/Swift/Java to them is unappealing. CRNA actually removes the ability for you to write native code, and trades that with letting a company called Expo do it for you.</p>

<p><a href="https://expo.io">Expo</a> are a pretty new VC-backed company, whose work is entirely open source. They’ve done a lot of foundational work in the community, and as individuals they are well respected for contributions to React Native the library - and a bunch of related libraries. You can use the <a href="https://itunes.apple.com/app/apple-store/id982107779?ct=www&amp;mt=8">Expo app</a> from the App Store to run your CRNA project on any iOS/Android device instantly, and the app has a lot more baseline UI components to work with than React Native does on its own.</p>

<p>With CRNA you are giving up control of the native side, but gaining a lot on the ease-of-use side. CRNA doesn’t force the project to stay this way though, you can eject your app from using Expo and start adding native code to the app.</p>

<p>Why did I even mention this? Well, if you’re looking at React Native for a greenfield app (e.g. something new), CRNA may be your best option. When you’re getting started, less options is better, and this is the optimal setup according to the React Native team.</p>

<h2 id="animations">Animations</h2>

<p>A question which regularly comes up is “How can React Native handle animations?” - at this point the answer is “well enough for 80% of all apps, it’s enough for ours.”</p>

<p>There are two primitives for animation from React Native:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">Animated</code> - This is a fine-grained API for handling changes (we use this in <a href="https://github.com/artsy/emission/blob/e4bbde386d54bc8ca73565d667e2701ab0fad0f0/src/lib/Components/Buttons/InvertedButton.tsx#L40-L48">our buttons</a> and <a href="https://github.com/artsy/emission/blob/e4bbde386d54bc8ca73565d667e2701ab0fad0f0/src/lib/Components/Home/ArtistRails/ArtistRail.tsx#L63-L73">view transitions</a>.)</li>
  <li><code class="language-plaintext highlighter-rouge">LayoutAnimation</code> - This API feels a little bit like <code class="language-plaintext highlighter-rouge">UIView +animate:</code> - in that you can tell the layout engine that the next update should be animated instead of replaced. (we use this to <a href="https://github.com/artsy/emission/blob/e4bbde386d54bc8ca73565d667e2701ab0fad0f0/src/lib/Components/Home/ArtworkRails/ArtworkRail.tsx#L77-L80">handle view expansion</a>)</li>
</ul>

<p>These provide enough for most use-cases, but there is a more direct API and a few more JS-level techniques that you can use if you are really starting to feel like you’re dropping frames inside a specific animation.</p>

<h2 id="the-long-term-aspects-of-react-native">The long-term aspects of React Native</h2>

<p>What if Facebook stop maintaining React Native? Today it obviously doesn’t look like it, but if you’re talking the next 5 years - maybe it’s not that rosy. The JavaScript world moves real fast, 5 years ago React didn’t exist and Node still hadn’t had its <a href="http://anandmanisankar.com/posts/nodejs-iojs-why-the-fork/">big divorce</a> and <a href="https://nodejs.org/en/blog/announcements/foundation-v4-announce/">got back together</a>.</p>

<p>Our perspective on dependencies has been that <a href="/blog/2015/09/17/Cocoa-Architecture-Dependencies/">you should always own them</a> in the sense that you have an understanding of how they work technically and culturally. This means for the larger projects, you should feel comfortable being able to make PRs back to the project, or feel comfortable that the vendor will fix bugs for you. The latter is not necessarily something that Facebook will be doing for you. They specifically call out that React Native is being built in the open, but that they are building and working on things that affect Facebook in production and then look at larger platform issues. You can get a sense of this by reading <a href="https://github.com/facebook/react-native/wiki/Roadmap">the React Native roadmap</a>. These aims cover the rest of this year, and next year they’ll re-evaluate.</p>

<p>We’re pretty comfortable that if Facebook stop committing to React Native tomorrow, we (as Artsy) can continue to keep the project stable and at the same place across iOS releases. There’d be a learning curve, but we’re not the only company that’d be willing to do this too: AirBnb, Expo, Uber, Microsoft, GeekyAnts and Wix all participate at <a href="https://facebook.github.io/react-native/blog/2017/06/21/react-native-monthly-1.html">a very granular level</a> and would probably make sure that the code you ship today will work with iOS 12 and so on - as they need that too. Should you rely on that? If you’re small enough then I think it’s reasonable. If you’re a medium sized company, I think you should have at least one engineer who understands and can deep dive into the dependency.</p>

<p>As a relevant example, Three20 had a very <a href="https://github.com/jverkoey/nimbus/wiki/Three20-Migration-Guide">reasonable deprecation path</a>, it’s just that a lot of people didn’t have the technical ability to migrate off. Frameworks like React Native and Three20 lower the barrier to entry considerably. The trade-off is that once you end up having to leave those frameworks, you have a pretty big learning curve to the baseline OS frameworks.</p>

<p>From my perspective, in Artsy there are only 2-3 projects that are 5 years old (Artsy was roughly founded in 2010) and I know a few of those are <a href="/blog/2017/04/14/artsy-technology-stack-2017/">getting split into new apps</a>. I’m not sure if <em>we</em> need to be looking <em>that far</em> ahead. Our keystone <a href="https://github.com/artsy/eigen">iOS app, Eigen</a> was started in 2013, and has already gone through 2 complete internal transformations as our requirements and opportunities change. It’s very feasible that in 4 years we’ll be at a very different place again. We choose to not turn down something that so drastically improves our developer and speed for end users for that risk.</p>

<p>That said, Facebook indeed seem to be really happy with React, and React Native - making this question a useful hypothetical. Facebook are moving more big projects to use it internally, and there is a great discussion on how that is ongoing in <a href="https://www.youtube.com/watch?v=cSUxHv-kH7w&amp;list=PLb0IAmt7-GS0kj3saZuh4vzfldxEdH5RH&amp;index=2">this React Conf keynote from Jing Chen</a>.</p>

<h2 id="performance">Performance</h2>

<p>Your app is now running a lot of its code in JavaScript, isn’t that slower? It’s definitely true that your JavaScript will not be as fast as Objective-C or Swift. We haven’t benchmarked our before/after view controllers because it’s not a fair comparison, we switched <a href="/blog/2016/06/19/graphql-for-mobile/">from REST to GrahpQL</a> at the same time. Our networking time was reduced so drastically, that it’s hard to talk about the JS vs native performance.</p>

<p>However there are a few advantages to running your app in JavaScript:</p>

<ul>
  <li>There is no main thread, so you cannot block the UIKit UI thread</li>
  <li>There is no need to recreate JSON into native representations</li>
  <li>A lot of the hard work in React Native (layout, view manipulation) is done natively and in its own off-main thread</li>
  <li>For critical code, you can move to native, we did this for our <a href="https://github.com/artsy/emission/commit/a404ccf1519ec79fc0bfadf6e572d990caa0a9ec">image thumbnails</a></li>
</ul>

<p>One place that doesn’t feel good writing in JavaScript is scroll events. This code has to generally be performance critical. This affects you when you want to have fancy transitions in your view controllers, however the animations API uses native code and with some careful consideration it’s very feasible to re-write those scroll events into a declarative API.</p>

<p>Sometimes you can look for better abstractions in React Native, the new <a href="https://facebook.github.io/react-native/docs/listview.html">ListView</a> component provides quite a lot of the behavior you might want to use scroll events for, other times you may want to outright create a native view and then expose that as a component.</p>

<p>We found that the majority of our view controllers do a lot of work on init, then generally don’t do any more heavy lifting. So aside from our custom image thumbnails, we’ve not hit a point where we’ve had to move any code to be native in a year and a half.</p>

<h2 id="facebook-patent-clause">Facebook patent clause</h2>

<p>Facebook used to have a <a href="https://gist.github.com/gaearon/df0c4025e67399af72786d7ac7c819cc">custom BSD license</a> for their OSS projects like React and React Native, so you’ll still read comments about how you can’t trust those projects due to these patent rights in the license. In 2017, React moved to MIT and in 2018 React Native moved to BSD. Now this is a non-issue.</p>

<h2 id="react-dependencies">React Dependencies</h2>

<p>This comes up in every post we make on React Native, because it’s always worth mentioning. React Native has <a href="https://www.npmjs.com/package/react-native">51 dependencies</a>, which when resolved comes up to <a href="https://libraries.io/npm/react-native/0.46.0-rc.2/tree">around ~650 dependent</a> projects. This is a <em>lot</em> of dependencies. Remember that the JavaScript ecosystem does not have the <a href="https://developer.apple.com/documentation/foundation">equivalent of Foundation</a>, and so to create a standard library, you use dependencies.</p>

<p>A dependency can be as small as <a href="https://yarnpkg.com/en/packages?q=lodash-a&amp;p=1">a single function</a>, or as fully featured as React Native. So it doesn’t really help to know the number in terms of anything other than “it’s a lot”. In this case, it is just the culture of JavaScript and node to work in this fashion. It’s like if you had to ship your version of Foundation and Cocoa with your app, instead of relying on the ones built into the OS. First you’d have to pay the <a href="https://twitter.com/mikeal/status/874711319412330496">memory and load time</a> price for it in your app, and then you have a bazillion dependencies you don’t need like iAd or SpriteKit.</p>

<p>These unused dependencies <a href="https://rollupjs.org">can be removed at deploy time</a>, but React Native is not at this point yet.</p>

<h2 id="places-where-react-native-hasnt-fit-for-us">Places where React Native hasn’t fit for us</h2>

<p>My first draft had notes on some of our mobile apps where we thought it might not fit. After some discussion, we changed our mind. So then our answer: Nowhere.</p>

<p>Note though, <em>the types of apps we create are exclusively API driven, with a unique visual style which totally covers the exposed UI surface. React Native is a great fit for this kind of app</em>.</p>

<p>Our main app Eigen, is a <code class="language-plaintext highlighter-rouge">UIViewController</code> browser, and React Native components are just one type of <code class="language-plaintext highlighter-rouge">UIViewController</code> that can be browsed. Nearly every <code class="language-plaintext highlighter-rouge">UIViewController</code> is the representation of an API endpoint, so React Native + <a href="https://facebook.github.io/relay/">Relay</a> is a great match.</p>

<p>I used to say that <a href="http://artsy.github.io/blog/2014/11/13/eidolon-retrospective/">our Kiosk app, Eidolon</a>, might not be a good fit because of its reliance on handling a credit-card reader and that the app was good fit for being a storyboard-driven app. However, I’m not so sure about this anymore.</p>

<p>The project <a href="https://storybook.js.org">React Storybooks</a> is not a direct replacement for storyboards, but as a live-programming/prototyping environment it’s 👍. The credit-card reader is already wrapped into a Reactive paradigm, going one step further and making it a JavaScript EventEmitter isn’t a big-jump.</p>

<p>Our tvOS app Emergence could probably be re-written in a week at this point. Is it worth a re-write? No. If I had to write it from scratch, would I use React Native? Probably, but it would depend on how stable tvOS support feels.</p>

<p>Our oldest app, Energy, is an app for keeping your portfolio of artworks with you at all times. Again, API -&gt; UI. It’s an app which currently has a lot of demands on running offline. This is the only part that used to make me feel a bit unsure what that could look like with respect to moving the interface to React Native. However, changes to the <a href="https://facebook.github.io/relay/">Relay ecosystem</a> which could allow us to create a simple Core Data backend, have reduced those worries.</p>

<h2 id="when-to-choose-react-native">When to choose React Native?</h2>

<p>React Native provides a cross-platform API, and so it can fall into a watered down version of the API it abstracts. This means that it can be a bit more work than normal to use obviously iOS-specific features like <code class="language-plaintext highlighter-rouge">ARKit</code>, <code class="language-plaintext highlighter-rouge">NSUserActivity</code>, <code class="language-plaintext highlighter-rouge">CSSearchableIndex</code> or <code class="language-plaintext highlighter-rouge">UIUserNotification</code>s.</p>

<p>I say more work, because you definitely can still use them, but that transitions between your React code and your native code will require a bit more work than had you always been writing it natively.</p>

<p>That’s not enough of a downside to contrast against:</p>

<ul>
  <li>A <em>significantly</em> better way to handle state and user-interfaces</li>
  <li>The potential to write code that is cross-platform, and also share ideas with the web</li>
  <li>An open development environment that respects your time</li>
</ul>

<p>Especially when there is an Xcode project which you can use to do whatever you want with, you just need to learn how to jump back and forth between the two worlds.</p>

<p>React Native is a great fit for apps that:</p>

<ul>
  <li>Are driven by an API, or an obvious state-store</li>
  <li>Want to have a unique look and feel</li>
</ul>

<p>Here’s the final thing. When React Native was proposed as an option for us, the majority of our mobile dev team were not exactly excited at the prospect of using it. As we grew to understand the positive changes it was bringing for us, and our users, I was really happy that <a href="http://twitter.com/alloy">Eloy</a> was willing to say <em>“I think this could work.”</em> Ash’s <a href="https://ashfurrow.com/blog/swift-vs-react-native-feels/">experience feels similar</a>.</p>

<p>It’s less risky now, but it’s obviously a big dependency inside your app. Ideally, someone in your team should be able to feel comfortable reading, and potentially fixing code inside React Native for the platforms you ship.</p>

<h2 id="integrating-into-an-existing-app">Integrating into an Existing app</h2>

<p>If you’re thinking of adding React Native to an existing app, first read <a href="/blog/2016/08/24/On-Emission/">on emission</a>. Our usage of React Native is that it offers a series of components which are consumed by our app as a CocoaPod. This CocoaPods exposes <code class="language-plaintext highlighter-rouge">UIViewController</code>s which can be used anywhere inside the app. This is the probably same pattern Airbnb, and Facebook use.</p>

<p>After you’ve read post, check out AirBnB’s experiences <a href="https://www.youtube.com/watch?v=tWitQoPgs8w">in this video</a> and Facebook’s <a href="https://www.youtube.com/watch?v=cSUxHv-kH7w&amp;list=PLb0IAmt7-GS0kj3saZuh4vzfldxEdH5RH&amp;index=2">in this video</a>.</p>

<h2 id="greenfield">Greenfield</h2>

<p>I’d recommend to start with a CRNA app, it’s a good starting point. I would feel safe that <a href="https://github.com/react-community/create-react-native-app/blob/master/EJECTING.md">you can eject</a> out of the environment provided when the app becomes complex enough to warrant native code.</p>

<h1 id="wrap-up">Wrap-up</h1>

<p>This is the right place for a big call to action, where I declare that React Native is the future for all development and that it fixes all problems. I’m not going to do that. I think React Native is definitely the right choice for our team, and there are many apps that could have been created faster and cheaper by using React Native.</p>

<p>It’s safe to say we all were initially put off by JavaScript, but TypeScript has grown to be my favourite language, knocking Ruby off that pedestal. <a href="https://bugs.ruby-lang.org/issues/9999">There’s potential that could change</a> but we can only live in the present.</p>

<p>For us, React Native is a well thought out library, that can really help build better products when you understand the right way to apply it. It can help you be cross-platform on mobile, but also cross-platform with the web. For example, our React Native project has a sibling project on the web with the <a href="https://github.com/artsy/reaction">exact same setup</a>, so any improvements in one move to the other. Which was unimaginable 2 years ago. We can truly consider sharing logic and ideas with the web.</p>

<p>If you’re considering a new app, or a grand re-write, React Native should be considered as one of your options.</p>

]]></content>
  </entry>
  
</feed>
