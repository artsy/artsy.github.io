<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: refactoring | Artsy Engineering]]></title>
  <link href="https://artsy.github.io/blog/categories/refactoring/atom.xml" rel="self"/>
  <link href="https://artsy.github.io/"/>
  <updated>2024-10-30T17:33:51+00:00</updated>
  <id>https://artsy.github.io/</id>
  <author>
    <name><![CDATA[]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Using Context to Simplify a VERY Large React Form]]></title>
    <link href="https://artsy.github.io/blog/2022/02/01/using-context-to-simplify-a-react-form/"/>
    <updated>2022-02-01T00:00:00+00:00</updated>
    <id>https://artsy.github.io/blog/2022/02/01/using-context-to-simplify-a-react-form</id>
    <content type="html"><![CDATA[<p>For those unfamiliar, Artsy is a fine art marketplace. Knowing that, it follows logically to say that the form via
which our partners list artworks for sale is an integral part of Artsy’s core systems. This form, known only as
“The Artwork Form,” is whispered about in the halls of Arty’s New York headquarters. It is legendary. It is a
colossus. It is old enough not only to predate React v16.8 hooks and context APIs, but Artsy’s use of React
entirely. The first version of the Artwork Form was built in 2014 using ruby and haml, and began its refactoring
into JS/JQuery/React a full 2 years later, after having expanded considerably from the original implementation.
That process (at least what we’ve gleaned from our git excavation) was incremental, experimental, and passed
through many hands before it landed in the lap of the current Partner Experience (PX) team.</p>

<!-- more -->

<p>PX has since been tasked with the maintenance of this unwieldy kaiju, spending endless amounts of time on seemingly
insignificant changes to behavior or UI, all while watching its performance degrade. Many of the people reading
this are already familiar with the story we’re telling. Many have worked in their very own version of the tale, and
borne witness to the fact that legacy code of this scale becomes a living, breathing entity. The developers that
tend these beasts learn their patterns and idiosyncrasies, their little moans and groans, and for the sake of
expediency work within those constraints to accomplish their tasks. But when is enough, enough? When does the
developer time expended working within the constraints of an obsolete design begin to outweigh the time it would
take to simply <em>fix</em> <em>the code</em>?</p>

<p>First, let’s be honest: there is no single right answer to this question. When working in software development we
have to deal with certain realities: user experience vs. developer experience, lead time to the next release,
buy-in from stakeholders, etc. These factors may weigh more or less depending on the shop and the product. At Artsy
we’re very lucky, in that our engineering department is given the time to attend to our tech debt and to be
deliberate about when and how we go about this. In the case of the Artwork Form, there were several issues that had
become too glaring to ignore:</p>

<ol>
  <li>The data coming in, and subsequently being passed to individual components, was being completely obscured by the
amount of prop drilling and spreading that existed within the composed form.</li>
  <li>The prolific use of <code class="language-plaintext highlighter-rouge">any</code> when typing data was disabling typescript and consequently removing its usefulness
while still imposing all of its burdens.</li>
  <li>The components within the form were tightly coupled, the number and specificity of props needed for each
disallowing reuse in other parts of the app.</li>
</ol>

<p>A few of us on the PX team decided to take matters into our own hands and address some of these key problems with
the Artwork Form. We came up with a plan to incrementally convert the form to use values from the Formik context,
use these values wherever possible to reduce prop-drilling, add much more complete types to the components to get
rid of all the <code class="language-plaintext highlighter-rouge">any</code>’s, and update some of our testing strategies as needed.</p>

<p>Here are the steps we took to do this conversion:</p>

<ol>
  <li>
    <p>Create a hook that allows us to use the Formik context throughout the form</p>

    <p>The hook wraps <a href="https://formik.org/docs/api/useFormikContext"><code class="language-plaintext highlighter-rouge">useFormikContext</code></a> to allow all of our components
inside of Formik to access the values from Formik context. It looks like this:</p>

    <div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">export</span> <span class="kd">function</span> <span class="nx">useArtworkForm</span><span class="p">():</span> <span class="nx">FormikContextType</span><span class="o">&lt;</span><span class="nx">ArtworkValues</span><span class="o">&gt;</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">formikContext</span> <span class="o">=</span> <span class="nx">useFormikContext</span><span class="o">&lt;</span><span class="nx">ArtworkValues</span><span class="o">&gt;</span><span class="p">()</span>
  <span class="k">return</span> <span class="nx">formikContext</span>
<span class="p">}</span>
</code></pre></div>    </div>

    <p>We use <code class="language-plaintext highlighter-rouge">ArtworkValues</code> as the generic type so that when we are accessing <code class="language-plaintext highlighter-rouge">values</code> anywhere inside the component
tree, <code class="language-plaintext highlighter-rouge">values</code> can be type-checked.</p>
  </li>
  <li>Convert all of the components in the form to functional components and to TypeScript. (Because the form is
several years old, there were still many class components and many components that were not yet using
TypeScript.) This step could be done in parallel with Step 1. One note here is that when converting files from
JavaScript to TypeScript, we did not explicitly type the props in an interface. Once we can take advantage of
our <code class="language-plaintext highlighter-rouge">useArtworkForm</code> hook, we will reduce the amount of props needed in each component, so we will hold off on
typing the props until step 3.</li>
  <li>
    <p>The bulk of the work was making use of the <code class="language-plaintext highlighter-rouge">useArtworkForm</code> hook in the Artwork Form components. Starting with
the lowest leaves of the component tree and moving up, we removed the <code class="language-plaintext highlighter-rouge">props</code> from the component definition and
destructured any values we needed in the component from the <code class="language-plaintext highlighter-rouge">useArtworkForm</code> hook. Once we used everything we
could from the context, we added back in any additional props that we would still need to have passed down from
the parent. In many cases, this was no props at all—a particularly satisfying case. If the component still
needed props passed down, we explicitly typed the props at the top of each component in an interface because we
now knew exactly which props we would need inside of the component. Another key step here was going into the
parent component and getting rid of any prop spreading (this: <code class="language-plaintext highlighter-rouge">...props</code>) and instead explicitly passing down
exactly the props needed in the component (if there were any).</p>

    <ol>
      <li>A note on tests: Whenever we took advantage of the Formik context in a component, we were breaking that
component’s tests, because the wrappers we were using in the tests did not have access to the Formik context
and were being passed props that the component was no longer looking at. We created a helper test wrapper
that we could use in all of our Artwork Form tests to wrap the test’s specific wrapper inside of a
<code class="language-plaintext highlighter-rouge">&lt;Formik/&gt;</code> component and provide the specific <code class="language-plaintext highlighter-rouge">values</code> to use as the initial values for <code class="language-plaintext highlighter-rouge">Formik</code>. Many of
our test cases involve passing different <code class="language-plaintext highlighter-rouge">values</code> into the component, which we originally did via props but
now will do via the Formik context through the wrapper. Here’s what the wrapper looks like:</li>
    </ol>

    <div class="language-tsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">export</span> <span class="kd">const</span> <span class="nx">TestFormikWrapper</span><span class="p">:</span> <span class="nx">React</span><span class="p">.</span><span class="nx">FC</span><span class="o">&lt;</span><span class="nx">TestFormikWrapperProps</span><span class="o">&gt;</span> <span class="o">=</span> <span class="p">(</span><span class="nx">props</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="p">{</span> <span class="nx">children</span><span class="p">,</span> <span class="nx">values</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">props</span>

  <span class="k">return</span> <span class="p">(</span>
    <span class="p">&lt;</span><span class="nc">Formik</span> <span class="na">initialValues</span><span class="p">=</span><span class="si">{</span><span class="nx">values</span><span class="si">}</span> <span class="na">onSubmit</span><span class="p">=</span><span class="si">{</span><span class="nx">jest</span><span class="p">.</span><span class="nx">fn</span><span class="p">()</span><span class="si">}</span><span class="p">&gt;</span>
      <span class="si">{</span><span class="nx">children</span><span class="si">}</span>
    <span class="p">&lt;/</span><span class="nc">Formik</span><span class="p">&gt;</span>
  <span class="p">)</span>
<span class="p">}</span>
</code></pre></div>    </div>

    <p>Here is an example of <code class="language-plaintext highlighter-rouge">TestFormikWrapper</code> used in a test:</p>

    <div class="language-tsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">describe</span><span class="p">(</span><span class="dl">"</span><span class="s2">TestComponent</span><span class="dl">"</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">it</span><span class="p">(</span><span class="dl">"</span><span class="s2">displays values</span><span class="dl">"</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">wrapper</span> <span class="o">=</span> <span class="nx">mount</span><span class="p">(</span>
      <span class="p">&lt;</span><span class="nc">TestFormikWrapper</span> <span class="na">values</span><span class="p">=</span><span class="si">{</span><span class="p">{</span> <span class="na">name</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Andy Warhol</span><span class="dl">"</span> <span class="p">}</span><span class="si">}</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nc">TestComponent</span> <span class="p">/&gt;</span>
      <span class="p">&lt;/</span><span class="nc">TestFormikWrapper</span><span class="p">&gt;</span>
    <span class="p">)</span>

    <span class="kd">const</span> <span class="nx">name</span> <span class="o">=</span> <span class="nx">wrapper</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="dl">"</span><span class="s2">#name</span><span class="dl">"</span><span class="p">).</span><span class="nx">html</span><span class="p">()</span>
    <span class="nx">expect</span><span class="p">(</span><span class="nx">name</span><span class="p">).</span><span class="nx">toInclude</span><span class="p">(</span><span class="dl">"</span><span class="s2">Andy Warhol</span><span class="dl">"</span><span class="p">)</span>
  <span class="p">})</span>
<span class="p">})</span>
</code></pre></div>    </div>
  </li>
  <li>Once we completed the conversion all the way up the tree to the root component, the <code class="language-plaintext highlighter-rouge">ArtworkForm</code>, we typed that
component as strictly as possible and made sure to get rid of <code class="language-plaintext highlighter-rouge">any</code>’s. There were quite a few when we started
the process.</li>
</ol>

<p>So, where did we end up? Now all of the components in the Artwork Form are making use of the <code class="language-plaintext highlighter-rouge">useArtworkForm</code> hook
if they were previously accessing any of the values from the Formik context from props. We have much less prop
drilling between components and instead explicitly pass down the props needed from parent to child. It’s now much
more clear for developers what data is passing between the components and what data is actually being used in the
child. All of the components are also explicitly typed so we know exactly which props, if any, need to be passed
down from the parent. If any of these props are removed, TypeScript helps us by failing loudly.</p>

<p>One of the main pain points of the Artwork Form is that it’s very difficult for new developers (whether new to
Artsy or new to the Partner Experience team) to contribute and make changes to the form without breaking something
or spending extra time figuring out how data is passed within the form. Hopefully, this change will make it easier
for developers to understand the Artwork From.</p>

<p>How did the Artwork Form get so complicated? Well, as we shared, the Artwork Form is the key to achieving one of
the PX team’s core goals: surfacing the most accurate and rich information about artworks to collectors. We have to
allow partners to add more and increasingly specific pieces of metadata to artworks. The form has been growing and
for better or worse, will need to keep growing. Even though we expect to grow the form to meet metadata needs, we
do not put too much focus on the UX/UI of the Artwork Form in order to prioritize our collector-facing apps. (The
Artwork Form is only used by a relatively small subset of users, mostly gallery partners.) Hopefully, this refactor
will allow us to expand the form more seamlessly and will make it easier to navigate as it grows.</p>

<p>This refactor is still in its early days. The next steps for making the form easier to use (for both developers and
our end users) will require larger changes. When we think about further progress on revamping the Artwork Form, our
team is considering breaking the form up into smaller forms. Imagine, we are rendering several different top-level
<code class="language-plaintext highlighter-rouge">Formik</code> components that include discrete sections of the form, instead of just one giant <code class="language-plaintext highlighter-rouge">Formik</code> tree as we have
now. We would then combine these “mini forms” together, making better use of React’s core principle of composition.</p>

<p>Breaking up the form would be a big change for the developer experience (but hopefully made easier by this
refactor). It could also involve big changes to the UI. The Artwork Form is not just hard to navigate for
developers. It’s hard for users too. Over the next couple of months, our Product Manager will be working with one
of Artsy’s user researchers to conduct user testing on the form. Feedback from galleries will help determine where
we next take this project. We’re excited to have buy-in from our product team to work on a project that will
elevate the user experience while allowing us to use that opportunity to improve the developer experience as well.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Unbearable Lightness of Refactoring]]></title>
    <link href="https://artsy.github.io/blog/2019/09/10/unbearable-lightness-of-refactoring/"/>
    <updated>2019-09-10T00:00:00+00:00</updated>
    <id>https://artsy.github.io/blog/2019/09/10/unbearable-lightness-of-refactoring</id>
    <content type="html"><![CDATA[<p>As engineers we are constantly in the process of building new features and improving our existing ones. Nowadays, with the help of tools and processes like code reviews one could argue the quality of the code being written has risen. At Artsy a pull request normally has one Assignee and possibly one or more Reviewers, so why do we still do a lot of refactoring?</p>

<blockquote>
  <p>There is no means of testing which decision is better, because there is no basis for comparison. We live everything as it comes, without warning, like an actor going on cold. And what can life be worth if the first rehearsal for life is life itself?</p>

  <p>― Milan Kundera, <a href="https://en.wikipedia.org/wiki/The_Unbearable_Lightness_of_Being">The Unbearable Lightness of Being</a></p>
</blockquote>

<p>Part of me wants to end this blogpost by Kundra’s quote, but for now let’s get deeper.</p>

<!-- more -->

<h2 id="the-refactor">“The Refactor”</h2>
<p>Recently we’ve started adding <a href="https://stripe.com/docs/strong-customer-authentication">Strong Customer Authentication (SCA)</a> support to one of our services. This service is relatively young in our stack and very well-reviewed. While the original code and approach looked nice and simple, as this service naturally grew and we started adding more logic to it, things got more and more complicated. During SCA support efforts, we realized it’s time to refactor. The code I was trying to refactor was less than a year old and <a href="https://twitter.com/davidwalshblog/status/953663412013293569">originally written, well… by me</a>!</p>

<p>Should I be worried? Embarrassed? Well, not really. As engineers, when we build things we tend to look at current state of affairs, and we attempt to predict the future as much as possible. But the future is always changing, moving. SCA feature we were about to add to our existing logic weren’t a requirement a year ago (a year ago I didn’t know what SCA was). So first thing, <strong>never be embarrassed about refactoring</strong>, because the thing you’re working on is often entirely unknown and you can’t expect to get something unknown totally right the first time around. Looked at it in this light, refactoring is healthy.</p>

<h3 id="lets-get-more-specific">Lets Get More Specific</h3>

<p>Back to our SCA change, we ended up having some discussions about how to improve our already complicated logic in a way that easily supports future updates. We started by trying to separate the different steps that an order has to go through to fully get submitted and try to simplify it, weighing the pros and cons of each approach. While pretty much all of our solutions would have some disadvantages, we managed to find our best option and started refactoring. Without getting too technical, lets look at the actual change.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">## before refactor</span>
<span class="n">order</span><span class="p">.</span><span class="nf">submit!</span> <span class="k">do</span>
  <span class="n">order</span><span class="p">.</span><span class="nf">line_items</span><span class="p">.</span><span class="nf">each</span> <span class="p">{</span> <span class="o">|</span><span class="n">li</span><span class="o">|</span> <span class="n">li</span><span class="p">.</span><span class="nf">update!</span><span class="p">(</span><span class="ss">commission_fee_cents: </span><span class="n">li</span><span class="p">.</span><span class="nf">current_commission_fee_cents</span><span class="p">)</span> <span class="p">}</span>
  <span class="n">totals</span> <span class="o">=</span> <span class="no">BuyOrderTotals</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="n">order</span><span class="p">)</span>
  <span class="n">order</span><span class="p">.</span><span class="nf">update!</span><span class="p">(</span>
   <span class="c1"># set totals</span>
  <span class="p">)</span>
  <span class="n">order_processor</span><span class="p">.</span><span class="nf">hold!</span>
  <span class="k">raise</span> <span class="no">Errors</span><span class="o">::</span><span class="no">InsufficientInventoryError</span> <span class="k">if</span> <span class="n">order_processor</span><span class="p">.</span><span class="nf">failed_inventory?</span>
  <span class="c1"># in case of failed transaction, we need to rollback this block,</span>
  <span class="c1"># but still need to add transaction, so we raise an ActiveRecord::Rollback</span>
  <span class="k">raise</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Rollback</span> <span class="k">if</span> <span class="n">order_processor</span><span class="p">.</span><span class="nf">failed_payment?</span> <span class="o">||</span> <span class="n">order_processor</span><span class="p">.</span><span class="nf">requires_action?</span>

  <span class="n">order</span><span class="p">.</span><span class="nf">update!</span><span class="p">(</span>
    <span class="c1"># set payment</span>
  <span class="p">)</span>
  <span class="n">order</span><span class="p">.</span><span class="nf">transactions</span> <span class="o">&lt;&lt;</span> <span class="n">order_processor</span><span class="p">.</span><span class="nf">transaction</span>
  <span class="no">PostTransactionNotificationJob</span><span class="p">.</span><span class="nf">perform_later</span><span class="p">(</span><span class="n">order_processor</span><span class="p">.</span><span class="nf">transaction</span><span class="p">.</span><span class="nf">id</span><span class="p">,</span> <span class="n">user_id</span><span class="p">)</span>
  <span class="k">raise</span> <span class="no">Errors</span><span class="o">::</span><span class="no">FailedTransactionError</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="ss">:charge_authorization_failed</span><span class="p">,</span> <span class="n">order_processor</span><span class="p">.</span><span class="nf">transaction</span><span class="p">)</span> <span class="k">if</span> <span class="n">order_processor</span><span class="p">.</span><span class="nf">failed_payment?</span>
  <span class="k">if</span> <span class="n">order_processor</span><span class="p">.</span><span class="nf">requires_action?</span>
    <span class="c1"># because of an issue with `ActiveRecord::Rollback` we have to force a reload here</span>
    <span class="c1"># rollback does not clean the model and calling update on it will raise error</span>
    <span class="n">order</span><span class="p">.</span><span class="nf">reload</span><span class="p">.</span><span class="nf">update!</span><span class="p">(</span><span class="ss">external_charge_id: </span><span class="n">order_processor</span><span class="p">.</span><span class="nf">transaction</span><span class="p">.</span><span class="nf">external_id</span><span class="p">)</span>
    <span class="no">Exchange</span><span class="p">.</span><span class="nf">dogstatsd</span><span class="p">.</span><span class="nf">increment</span> <span class="s1">'******'</span>
    <span class="k">raise</span> <span class="no">Errors</span><span class="o">::</span><span class="no">PaymentRequiresActionError</span><span class="p">,</span> <span class="n">order_processor</span><span class="p">.</span><span class="nf">action_data</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>In the original solution, we wrapped all of our changes in a database transaction within <code class="language-plaintext highlighter-rouge">order.submit!</code> to have a lock on that record. This was all good since we would ensure data integrity provided by database transaction. This way we ensure updates to <code class="language-plaintext highlighter-rouge">order</code> and <code class="language-plaintext highlighter-rouge">line_items</code> happen only in case of success. A failure in this block would rollback all changes which is good 👍</p>

<p>But things got complicated once some of the changes in the block <em>should</em> have been preserved, even in case of rollback. Specifically we want to make sure a <code class="language-plaintext highlighter-rouge">transaction</code> is stored on the <code class="language-plaintext highlighter-rouge">order</code> if it payment fails or requires action.
We found out that we can use <code class="language-plaintext highlighter-rouge">raise ActiveRecord::Rollback</code> which is a specific exception in Rails that only bubbles up in the surrounding transaction and does not get thrown outside of the block. This already makes things super complicated.</p>

<p>In order to make our code less complicated, we did a few things:</p>

<ul>
  <li>We delegated more responsibility to a service class,<code class="language-plaintext highlighter-rouge">OrderProcessor</code>.</li>
  <li>Instead of wrapping all code in one transaction, we now optimistically <code class="language-plaintext highlighter-rouge">submit</code> the order at the beginning and in case anything went wrong, we revert the changes.</li>
</ul>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">order_processor</span> <span class="o">=</span> <span class="no">OrderProcessor</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="n">order</span><span class="p">,</span> <span class="n">user_id</span><span class="p">)</span>
<span class="k">raise</span> <span class="no">Errors</span><span class="o">::</span><span class="no">ValidationError</span><span class="p">,</span> <span class="n">order_processor</span><span class="p">.</span><span class="nf">validation_error</span> <span class="k">unless</span> <span class="n">order_processor</span><span class="p">.</span><span class="nf">valid?</span>

<span class="n">order_processor</span><span class="p">.</span><span class="nf">advance_state</span><span class="p">(</span><span class="ss">:submit!</span><span class="p">)</span>
<span class="k">unless</span> <span class="n">order_processor</span><span class="p">.</span><span class="nf">deduct_inventory</span>
  <span class="n">order_processor</span><span class="p">.</span><span class="nf">revert!</span>
  <span class="k">raise</span> <span class="no">Errors</span><span class="o">::</span><span class="no">InsufficientInventoryError</span>
<span class="k">end</span>

<span class="n">order_processor</span><span class="p">.</span><span class="nf">set_totals!</span>
<span class="n">order_processor</span><span class="p">.</span><span class="nf">hold</span>
<span class="n">order_processor</span><span class="p">.</span><span class="nf">store_transaction</span>

<span class="k">if</span> <span class="n">order_processor</span><span class="p">.</span><span class="nf">failed_payment?</span>
  <span class="n">order_processor</span><span class="p">.</span><span class="nf">revert!</span>
  <span class="k">raise</span> <span class="no">Errors</span><span class="o">::</span><span class="no">FailedTransactionError</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="ss">:charge_authorization_failed</span><span class="p">,</span> <span class="n">order_processor</span><span class="p">.</span><span class="nf">transaction</span><span class="p">)</span>
<span class="k">elsif</span> <span class="n">order_processor</span><span class="p">.</span><span class="nf">requires_action?</span>
  <span class="n">order_processor</span><span class="p">.</span><span class="nf">revert!</span>
  <span class="no">Exchange</span><span class="p">.</span><span class="nf">dogstatsd</span><span class="p">.</span><span class="nf">increment</span> <span class="s1">'******'</span>
  <span class="k">raise</span> <span class="no">Errors</span><span class="o">::</span><span class="no">PaymentRequiresActionError</span><span class="p">,</span> <span class="n">order_processor</span><span class="p">.</span><span class="nf">action_data</span>
<span class="k">end</span>
<span class="n">order_processor</span><span class="p">.</span><span class="nf">on_success</span>
</code></pre></div></div>
<p>Well, this at least is a lot more readable.</p>

<h3 id="get-the-change-to-production">Get The Change to Production</h3>

<p>The next question is how to get this to production. We tried to isolate this specific refactoring by:</p>

<ul>
  <li>Open a PR that only focuses on our refactoring</li>
  <li>Make sure in the PR above we don’t touch any API level tests and make sure all these tests still pass. This would give us more confidence that we are not impacting our existing clients.</li>
  <li>Review and merge refactoring PR and test on staging.</li>
  <li>Deploy everything in current pipeline to isolate the refactor deploy.</li>
  <li>Deploy the refactoring PR to production.</li>
</ul>

<h2 id="how-did-it-go">How Did It Go?</h2>

<p>This plan worked for us, for the most part. We ended up having to rollback the deploy since we found a bug in a non-API part of our app. From this we learned that even if we already have tests written in different layers of our app, we still need to verify them and make sure they cover all cases. Relying too much on existing tests can often lead to trouble – verify!</p>

<h2 id="our-learnings">Our learnings</h2>
<ul>
  <li>Don’t be afraid of refactors. They are natural and a healthy engineering tool / practice.</li>
  <li>Ensure that refactor PR’s only include refactor-related changes. It’s often tempting to fix other things along the way, but those fixes can take place in follow-up PRs.</li>
  <li>Don’t rely only on existing tests. Refactoring is a great opportunity to review and verify your tests. Verify them and make sure they cover all scenarios.</li>
</ul>

<p>Curious about the PR? At Artsy we believe in <a href="https://github.com/artsy/README/blob/master/culture/engineering-principles.md#open-source-by-default">Open Source By Default</a>, so check out the code <a href="https://github.com/artsy/exchange/pull/475/files">here</a>.</p>
]]></content>
  </entry>
  
</feed>
