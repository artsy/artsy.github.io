<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: blogging | Artsy Engineering]]></title>
  <link href="https://artsy.github.io/blog/categories/blogging/atom.xml" rel="self"/>
  <link href="https://artsy.github.io/"/>
  <updated>2024-08-07T18:22:11+00:00</updated>
  <id>https://artsy.github.io/</id>
  <author>
    <name><![CDATA[]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Engineering Blog Post Templates]]></title>
    <link href="https://artsy.github.io/blog/2017/12/01/engineering-blog-post-templates/"/>
    <updated>2017-12-01T00:00:00+00:00</updated>
    <id>https://artsy.github.io/blog/2017/12/01/engineering-blog-post-templates</id>
    <content type="html"><![CDATA[<p>Hello! My name is Ash and I work on the Auctions team at Artsy. I like to blog, and I like to tell people they should blog, too (you should blog btw). I‚Äôve been trying to increase how many blog posts get written by Artsy engineers for six months or so, but have only seen modest results. I‚Äôve been holding weekly office hours to help with writing, but it‚Äôs not often attended. So I started reaching out to team members individually to suggest they write something, but they‚Äôre very busy and often can‚Äôt spare the time. Hmm.</p>

<p>A simple solution came out of a discussion with other engineering teams surrounding how to build team culture. <a href="https://twitter.com/sdhingra89">Sonam Dhingra</a> of <a href="http://ustwo.com">UsTwo</a> solves the problem of ‚Äúnot enough blog posts are getting written‚Äù simply by providing templates that can be used to compose blog posts very quickly. Even if someone was in a hurry or not a confident writer, they could still contribute to the engineering blog. What a marvelous idea!</p>

<!-- more -->

<p>I took some time to write out three distinct blog post templates:</p>

<ul>
  <li>A ‚Äúregular‚Äù post that authors fill in like Mad Libs.</li>
  <li>A ‚Äúlong‚Äù post where authors create standard intro-body-conclusion posts.</li>
  <li>An ‚Äúepic‚Äù post where authors write a traditional narrative structure.</li>
</ul>

<p>Each template fits a different niche, and we might add more as time goes on. The templates also include a note to authors about how the template is best used.</p>

<p>The templates are available in <a href="https://github.com/artsy/artsy.github.io">our blog‚Äôs repository</a> ‚Äì please feel free to use them in your own writing pursuits. Have a good one!</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using GitHub Issues for Blog Comments]]></title>
    <link href="https://artsy.github.io/blog/2017/07/15/Comments-are-on/"/>
    <updated>2017-07-15T00:00:00+00:00</updated>
    <id>https://artsy.github.io/blog/2017/07/15/Comments-are-on</id>
    <content type="html"><![CDATA[<p>I‚Äôve worked on a few large-scale OSS projects, and I believe that people find it easier to just leave a comment and rely on a contributor to explain a problem rather than consulting the documentation. I consider doing everything you can to make people find their own answers a strong part of <a href="/blog/2016/07/03/handling-big-projects/">defensive open source</a>.</p>

<p>For the posts I write, I have an even lower tolerance for comments. For example, I added the ability to turn off comments per-post and haven‚Äôt allowed comments on any posts I‚Äôve written here. A lot of transitory discussion around an article happens on twitter via <a href="https://twitter.com/ArtsyOpenSource/">@ArtsyOpenSource</a>.</p>

<p>I‚Äôm willing to give it another shot though, and so I got around to creating a simple system for allowing opt-in comments on posts using GitHub Issues. The rest of this post will be about how you can do it also, and a bit about why I think GitHub Issues are a happy medium for the comments.</p>

<!-- more -->

<div><div class="comment"><div class="comment-header"><a class="comment-username" href="https://github.com/orta"><img src="https://avatars6.githubusercontent.com/u/49038?v=4" alt="" width="40" height="40" />orta</a> commented <a class="comment-date" href="https://github.com/artsy/artsy.github.io/issues/355#issuecomment-313158506">2 days ago</a></div><div class="comment-body"><p>Comments can be worth a shot.</p>
<p>With a static site like ours it can be a bit tricky, but with an external server and some simple JavaScript it can work out <g-emoji alias="+1" fallback-src="https://assets-cdn.github.com/images/icons/emoji/unicode/1f44d.png" ios-version="6.0">üëç</g-emoji>.</p></div></div></div>

<h1 id="getting-set-up">Getting set up</h1>

<p>The general concept is that you have some JavaScript in your page which requests a list of comments from GitHub. These are available as a JSON API, you can grab that then style the results. Sounds easy right?</p>

<p>Turns out to be a bit more complicated. GitHub‚Äôs API has rate-limits for IP addresses, and they‚Äôre reasonably low. So, you‚Äôll want to use authenticated requests, but you don‚Äôt really want to include your access tokens inside the JavaScript on your blog.</p>

<p>I‚Äôve worked around this with a project called <a href="https://github.com/orta/gh-commentify">gh-commentify</a>, a node app whose job is to wrap your comment API requests with an access token. You can create your own instance on heroku using <a href="https://heroku.com/deploy?template=https://github.com/orta/gh-commentify">this link</a>. It gets scoped to a single org/user, so you can avoid others using your heroku instance for their blog.</p>

<p>From there you need to be able to declare in a post what issue it is hooked up to. This blog uses Jekyll, which has <a href="https://jekyllrb.com/docs/frontmatter/">YAML Front Matter</a> on posts. So, I edited our post templates to look for a key <code class="language-plaintext highlighter-rouge">comment_id</code>.</p>

<p>From there you need to grab the comments JSON, and move them into the DOM.</p>

<p>I based my work on these two posts:</p>

<ul>
  <li><a href="http://ivanzuzak.info/2011/02/18/github-hosted-comments-for-github-hosted-blogs.html">GitHub hosted comments for GitHub hosted blogs</a></li>
  <li><a href="http://donw.io/post/github-comments/">Replacing Disqus with Github Comments</a></li>
</ul>

<p>However this version is more reliable (GitHub authenticated requests) and has fewer dependencies (no jQuery for example).</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code>{% if page.comment_id %}
  <span class="nt">&lt;article</span> <span class="na">class=</span><span class="s">'post'</span><span class="nt">&gt;</span>
    {% include gh_comments.html %}
  <span class="nt">&lt;/article&gt;</span>
{% endif %}
</code></pre></div></div>

<p>This then imports the required JavaScript into the page. It feels a lot like this:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">writeToComment</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">element</span><span class="p">,</span> <span class="nx">html</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">var</span> <span class="nx">element</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="nx">element</span><span class="p">)</span>
  <span class="nx">element</span><span class="p">.</span><span class="nx">innerHTML</span> <span class="o">=</span> <span class="nx">html</span>
  <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="dl">"</span><span class="s2">comments</span><span class="dl">"</span><span class="p">).</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">element</span><span class="p">)</span>
<span class="p">}</span>

<span class="kd">var</span> <span class="nx">loadComments</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">writeToComment</span><span class="p">(</span><span class="dl">"</span><span class="s2">h2</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">Comments</span><span class="dl">"</span><span class="p">)</span>
  
  <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">data</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">commentHTML</span> <span class="o">=</span> <span class="p">[...]</span>
    <span class="nx">writeToComment</span><span class="p">(</span><span class="dl">"</span><span class="s2">div</span><span class="dl">"</span><span class="p">,</span> <span class="nx">commentHTML</span><span class="p">)</span>
  <span class="p">}</span>

  <span class="kd">var</span> <span class="nx">callToAction</span> <span class="o">=</span> <span class="p">[...]</span>
  <span class="nx">writeToComment</span><span class="p">(</span><span class="dl">"</span><span class="s2">div</span><span class="dl">"</span><span class="p">,</span> <span class="nx">callToAction</span><span class="p">)</span>
<span class="p">}</span>

<span class="kd">var</span> <span class="nx">writeFirstComment</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
  <span class="kd">var</span> <span class="nx">callToAction</span> <span class="o">=</span> <span class="p">[...]</span>
  <span class="nx">writeToComment</span><span class="p">(</span><span class="dl">"</span><span class="s2">div</span><span class="dl">"</span><span class="p">,</span> <span class="nx">callToAction</span><span class="p">)</span>
<span class="p">}</span>

<span class="c1">// This is mostly there now: http://caniuse.com/#feat=fetch</span>
<span class="k">if</span> <span class="p">(</span><span class="nb">window</span><span class="p">.</span><span class="nx">fetch</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">var</span> <span class="nx">url</span> <span class="o">=</span>
    <span class="dl">"</span><span class="s2">https://artsy-blog-gh-commentify.herokuapp.com/repos/artsy/artsy.github.io/issues/{{ page.comment_id }}/comments</span><span class="dl">"</span>

  <span class="nb">window</span>
    <span class="p">.</span><span class="nx">fetch</span><span class="p">(</span><span class="nx">url</span><span class="p">,</span> <span class="p">{</span> <span class="na">Accept</span><span class="p">:</span> <span class="dl">"</span><span class="s2">application/vnd.github.v3.html+json</span><span class="dl">"</span> <span class="p">})</span>
    <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">response</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">return</span> <span class="nx">response</span><span class="p">.</span><span class="nx">json</span><span class="p">()</span>
    <span class="p">})</span>
    <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">json</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">if</span><span class="p">(</span><span class="nx">json</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">loadComments</span><span class="p">(</span><span class="nx">json</span><span class="p">)</span>
      <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="nx">writeFirstComment</span><span class="p">()</span>
      <span class="p">}</span>
    <span class="p">})</span>
<span class="p">}</span>
</code></pre></div></div>

<p>No-one is going to award this JavaScript with a prize for elegance, but it works just fine. That‚Äôs basically it, you can edit the DOM however you want.</p>

<p>The full PR for these changes is here: <a href="https://github.com/artsy/artsy.github.io/pull/363">artsy.github.io#363</a> - and you can see the current <a href="https://github.com/artsy/artsy.github.io/blob/source/_includes/gh_comments.html">HTML/JS here</a>.</p>

<h1 id="styling">Styling</h1>

<p>The style of our comments are built to evoke the GitHub UI for issues. This is done to prime people for a relatively different type of comment creation, but still feel like it‚Äôs a part of the Artsy OSS style.</p>

<p><img src="/images/comments-are-on/example-comment.png" /></p>

<div><div class="comment"><div class="comment-header"><a class="comment-username" href="https://github.com/orta"><img src="https://avatars6.githubusercontent.com/u/49038?v=4" alt="" width="40" height="40" />orta</a> commented <a class="comment-date" href="https://github.com/artsy/artsy.github.io/issues/355#issuecomment-313158506">10 days ago</a></div><div class="comment-body"><p>This is done and dusted.</p>
</div></div></div>

<h1 id="why-github">Why GitHub?</h1>

<p>It‚Äôs easier for you to keep track of the conversations, you‚Äôre likely already having a lot of conversations in a place like GitHub. This means you can use the same flow and tools as your daily job, not relying on a third party service‚Äôs emails.</p>

<p>You have good admin tools: you can edit comments, block and report problematic users. These are tools that you have for all repos.</p>

<p>People will be using their developer accounts, which I‚Äôd like to hope they will take pride in. You‚Äôre probably more likely to get high quality responses. The lack of threading is a bit of a shame in this context, but we‚Äôve lived with it in GitHub Issues for this long, so I‚Äôm OK with this.</p>

<p>This setup makes it trivial to drop comments from the blog anytime, and you still have all the comments around in a constructive way after. We don‚Äôt have to hope that other services have export features and open data. Everything public is <a href="https://github.com/blog/2298-github-data-ready-for-you-to-explore-with-bigquery">open data</a> on GitHub.</p>

<p>So: low maintenance, works on static sites, data isn‚Äôt silo-ed and it‚Äôs more likely to result in positive interactions.</p>

]]></content>
  </entry>
  
</feed>
