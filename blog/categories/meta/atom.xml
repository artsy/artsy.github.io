<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: meta | Artsy Engineering]]></title>
  <link href="https://artsy.github.io/blog/categories/meta/atom.xml" rel="self"/>
  <link href="https://artsy.github.io/"/>
  <updated>2024-10-30T17:23:09+00:00</updated>
  <id>https://artsy.github.io/</id>
  <author>
    <name><![CDATA[]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Engineering Highlights]]></title>
    <link href="https://artsy.github.io/blog/2018/10/18/long-term-highlights/"/>
    <updated>2018-10-18T00:00:00+00:00</updated>
    <id>https://artsy.github.io/blog/2018/10/18/long-term-highlights</id>
    <content type="html"><![CDATA[<p>Engineering is an inherently long-term process. The Artsy engineering team has been around for 7 years, and that’s
quite a lot of time to get things done. We use software that keeps track of changes over time thanks to source
control, but tools like git only help keep track of small passages of time. I want to keep track of events that
could take months to ship.</p>

<p>We’ve been doing a lot of long-term introspection as a team in 2018. Externally, this has been visible through
things like opening our docs and creating our engineering principles. I’m expanding on this with an idea that I
took from my work in building large open source projects: <a href="https://github.com/artsy/README/blob/master/culture/highlights.md#readme">Highlight docs</a>.</p>

<!-- more -->

<p>I’ve been the main contributor for <a href="https://danger.systems/">Danger</a> and <a href="https://github.com/danger/peril">Peril</a> for about three years, working mostly solo, and it can
be hard to feel like you’re actually getting things done. There’s an infinite backlog of people’s requests for
improvements, and polite mentions of the flaws in your work. So, as a counter-balance it’s nice to take stock of
events you’re proud of. I initially mocked this out as <a href="https://github.com/danger/peril/issues/235">an issue in the peril repo</a> but when I
re-applied the idea to the whole of Artsy I used our existing open documentation repo <a href="https://github.com/artsy/README/"><code class="language-plaintext highlighter-rouge">artsy/README</code></a>
instead.</p>

<p>The core idea isn’t complicated, however it’s somewhat time-consuming and requires collaborators. I used the best
method I know for getting a lot of people’s attention: spamming slack threads asking folks what were some of their
highlights. I used these to fuel the main arcs of the doc.</p>

<p>A lot of the time, just starting something like this and putting some effort in up-front means others will start to
participate. The trickiest part was finding the right definitive links for a particular event. Ideally we have open
links (so people without private GitHub access (internally and externally) can enjoy them) but sometimes the right
link is private and that’s ok. It’s not open source by diktat.</p>

<p>Trying to find the right balance between an “Artsy” event vs an “Engineering” event can sometimes be a bit vague,
but I like to believe that more is more. It’s about pointing out important events, so more is always a net
positive. With that in mind, here’s a few of ours, the rest is a click away:</p>

<p><a href="https://github.com/artsy/README/blob/master/culture/highlights.md#readme"><img src="/images/highlights/highlights.png" /></a></p>

<p>I think I’m going to make one of these with every new large scale project I work on, I kinda wish we had one for
the Artsy iOS app now. Maybe I’m going to need to do that now. Ergh, this is what I get for writing blog posts.</p>

<p>I’d love to see some other companies or OSS projects using this idea - let me know in the comments if you are!</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Defining Our Engineering Guiding Principles]]></title>
    <link href="https://artsy.github.io/blog/2018/08/22/engineering-guiding-principles/"/>
    <updated>2018-08-22T00:00:00+00:00</updated>
    <id>https://artsy.github.io/blog/2018/08/22/engineering-guiding-principles</id>
    <content type="html"><![CDATA[<p>The Artsy Engineering team recently underwent the process of defining our guiding principles; you can read through the pull request <a href="https://github.com/artsy/meta/pull/41">here</a> and the finished principles <a href="https://github.com/artsy/README/blob/master/culture/engineering-principles.md">here</a>. In this blog post, I’d like to use our experience of defining these to answer the following questions:</p>

<ul>
  <li>Why define engineering guiding principles?</li>
  <li>What makes principles different from company values?</li>
  <li>How to define guiding principles?</li>
</ul>

<p>Let’s dive in.</p>

<!-- more -->

<h2 id="why-define-engineering-principles">Why Define Engineering Principles?</h2>

<p>Artsy’s CEO has a <a href="https://www.artsy.net/article/carter-cleveland-why-define-company-values">blog post</a> that discusses why you should define company values and, unsurprisingly, a lot of the same rationale applies to an engineering team’s guiding principles. In summary:</p>

<ul>
  <li>Undefined principles lead to cultural debt (similar to technical debt, but in terms of a team’s culture).</li>
  <li>Defined values lead to greater empowerment (engineers feel safe making decisions on their own, based on the principles).</li>
  <li>Defined values reduce the risk of unconscious bias (we help our decisions get made consistently).</li>
  <li>Values are your brand (this is true for Artsy Engineering, but our <a href="https://github.com/artsy">contributions</a> to the software industry are also a significant part of brand).</li>
</ul>

<p>I think each of these reasons applies to defining guiding principles as well. Over the past four years, I’ve seen the Artsy Engineering team encounter situations related to the reasons outlined above and, while the company values have helped us navigate disagreement, they haven’t been entirely satisfactory.</p>

<p>The two biggest shortcomings of the values have been an <strong>inconsistent practice</strong> and a <strong>difficulty making team-based decisions</strong>.</p>

<p>Artsy Engineering supports the business primarily through product teams, which each have their own responsibilities and KPIs. Over time, different teams have developed their own subculture. In earnest, I think this is really cool, but it <em>has</em> eventually led to two teams taking radically different approaches to similar problems, or even repeating work that another team is already working on.</p>

<p>That missing consistency also led to difficulties making team-based decisions: how can teams make decisions <em>as a team</em> without having a clear set of guidelines with which to evaluate a decision? As I’ll explain in the next section, the Artsy company values often left us without a clear answer.</p>

<h2 id="what-makes-guiding-principles-different-from-company-values">What Makes Guiding Principles Different from Company Values?</h2>

<p>Artsy’s <a href="https://github.com/artsy/README/blob/master/culture/what-is-artsy.md#artsy-values">five core values</a> are as follows:</p>

<ul>
  <li>Art meets Science</li>
  <li>People are Paramount</li>
  <li>Quality Worthy of Art</li>
  <li>Positive Energy</li>
  <li>Openness</li>
</ul>

<p>Those have been an incredibly useful framework for guiding Artsy’s growth, for three years now. They’re good values. But they are <em>very</em> general, designed specifically to be inclusive of every member of, and every team in, our company.</p>

<p>That can lead to challenges when applying the values to specific teams, including engineering. In our day-to-day work, the values can help guide our general actions (being positive in pull request reviews, for example), but lack the specifics necessary to drive decision-making on a team level. The values also sometimes conflict with one another, and navigating those conflicts is difficult without a set of down-to-Earth guiding principles.</p>

<p>Let’s take a look at an example. “Quality Worthy of Art” is a really great value – personally, it motivates me to build software that would be worthy of hanging in a studio or gallery. However, the process of <em>getting</em> to that quality is often very messy; we might try one approach, switch to another, ship with <code class="language-plaintext highlighter-rouge">TODO</code> comments left in, etc. Real artists ship, after all. When <a href="http://artsy.github.io/series/open-source-by-default/">developing software in the open</a>, which value wins? The openness value, or the quality value?</p>

<p>Our CEO has encouraged the company to lean into these tensions and use them to grow and learn together, which was a motivating factor in defining our guiding principles.</p>

<h2 id="how-to-define-guiding-principles">How to Define Guiding Principles?</h2>

<p>This is a very tricky question, since so much of the answer for Artsy Engineering is specific to us at Artsy (your process will necessarily be different) and specific to our team <em>within</em> Artsy (engineers make up less than 15% of Artsy’s employee headcount). Orta helped define the values by looking at <a href="https://www.objc.io/issues/22-scale/artsy/">artefact’s of our mobile team’s culture</a> (since our mobile team <em>did</em> have a strong culture) and by talking to engineers privately to ask them for input. That was only half the work, though.</p>

<p>Orta opened <a href="https://github.com/artsy/meta/pull/41">the pull request</a> with the guiding principles that he had synthesized from past documentation and from conversations with engineers, but explicitly marked the PR as a work-in-progress. The values he had were a good starting point, but we iterated extensively on them. We also added many more that had been missed by Orta’s starting work (we had to start somewhere, after all). The whole process took about two weeks, and I learned a lot about how other engineers work at Artsy.</p>

<p>Most of my experience at Artsy has been engineering front-end systems, and through the process of defining these principles, I learned a lot about how our back-end engineers work. We don’t always work in the same way (remember, tensions?) but I value those differences; we have so much to learn from each other! Now with the guidelines, I’ll be able to appreciate the back-end perspective.</p>

<hr />

<p>So with all that said, what are the Artsy Engineering Guiding Principles? You can read the <a href="https://github.com/artsy/README/blob/master/culture/engineering-principles.md">current principles here</a> (they are a living set of guidelines), but the principles we decided on are:</p>

<ul>
  <li>Open Source by Default</li>
  <li>Own Your Dependencies</li>
  <li>Incremental Revolution</li>
  <li>Being Nice is Nice</li>
  <li>Minimum Viable Process</li>
  <li>Leverage Your Impact</li>
  <li>De-silo Engineers</li>
  <li>Build for 10x</li>
  <li>Done Means Done</li>
</ul>

<p>I encourage you to read the document for explanations of what each of these mean.</p>

<p>Day-to-day, I don’t expect <em>that</em> much to change now that we have these defined. But the differences they make will be key to the longevity and growth of our engineering team’s culture.</p>

<p>Remember that earlier example of openness-vs-quality? That is answered explicitly by the principles. The principles are <em>actionable</em>, they are <em>specific</em>, and they are <em>ours</em>.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Open Expectations]]></title>
    <link href="https://artsy.github.io/blog/2016/01/13/OSS-Expectations/"/>
    <updated>2016-01-13T11:09:00+00:00</updated>
    <id>https://artsy.github.io/blog/2016/01/13/OSS-Expectations</id>
    <content type="html"><![CDATA[<p>The Artsy engineering team has been moving towards Open Source by Default. In 2015 the Mobile team managed to get there. Since then, we’ve been writing up our process on this blog and offering advice to anyone would would ask for it.</p>

<p>I’ve been in talks with lots of companies you’ve heard of, on the how and the why of this. Recently <a href="https://ello.co">Ello</a> got in touch, and we tried to <a href="https://en.wikipedia.org/wiki/Dyson_sphere">capture the process</a>.  They came out with a great post that I’d strongly <a href="https://ello.co/jayzes/post/tqLL-Z8U8GfbDySRk6wbKg">recommend reading</a>. I’d like to try and come from the other side, and address what are the questions people ask. Consider this a FAQ for how the mobile team does/got to OSS by default.</p>

<!-- more -->

<p><img src="https://d324imu86q1bqn.cloudfront.net/uploads/asset/attachment/3421690/ello-optimized-08acbd80.gif" /></p>

<h3 id="really-is-everything-open-source">Really, is <em>everything</em> Open Source?</h3>

<p>No, and it probably never will. There are companies who are (e.g. <a href="https://buffer.com/transparency">Buffer</a> &amp; <a href="https://automattic.com">Automattic</a>) however Artsy is considerably less transparent in-comparison. We have code-bases that will stay closed, and we have data that could stay closed.</p>

<p>Companies revolve around ideas, and understanding what your core value is important. A company who make money purely off selling their apps could be easily copied, and OSS by default won’t work for them. Artsy is a platform, but OSS by default can work for us because a technical platform is just one aspect of what we offer.</p>

<h3 id="how-did-we-start-the-process">How did we start the process?</h3>

<p>We’re lucky to have <a href="http://www.forbes.com/special-report/2014/30-under-30/art-and-style.html">technical</a> <a href="https://www.linkedin.com/in/sebastiancwilich">co-founders</a>, and a CTO with a strong belief in <a href="http://code.dblock.org/2015/02/09/becoming-open-source-by-default.html">Open Source</a>. So we had a head-start, I respect that.</p>

<p>Like all big ideas, it started out small. We’d abstract out shared concerns into libraries. This is something that anyone who has heard a little bit about Open Source can get behind. “We’re building on top of <em>x</em>, so we really should give back out <em>x</em>+<em>y</em>” it’s low-risk, and potentially high reward. Getting the company on-board with your OSS libraries is about acclimatisation.</p>

<p>This works best by taking small incremental steps. You need buy-in from everyone involved through-out the process. Moving to OSS by Default is 30% technical work and 70% political relationships. There has to be infrastructure in place in order to not leak secrets, but you also need to ensure that the entire company doesn’t feel threatened by the insight offered by opening the development process. There is no shortcut here.</p>

<p>For me, this process involved talking with everyone involved in each project. Setting aside 1-on-1 time specifically on the subject to answer question about the ramifications for OSSing it. This ranged from “we will need to change the flow around <em>x</em> and <em>y</em>.” to “Yes, the competition will be able to see how we do <em>x</em> and <em>y</em>.” I came very prepared to these meetings.</p>

<p>For our mobile apps, we progressively introduced Open by Default to our apps based on their age. We started out by creating a whole <a href="/blog/2014/11/13/eidolon-retrospective/">new project</a> as Open Source. Then started applying what we had learned to <a href="/blog/2015/04/28/how-we-open-sourced-eigen/">older</a> <a href="/blog/2015/08/06/open-sourcing-energy/">projects</a>. They had more risk, given that they were mature apps.</p>

<h3 id="couldnt-someone-make-a-business-copying-me">Couldn’t someone make a business copying me?</h3>

<p>It’s also worth remembering that an app being OSS does not stop it <a href="http://venturebeat.com/2014/03/30/threes-vs-2048-when-rip-offs-do-better-than-the-original-game/">being copied</a>. Or, well, your <a href="http://www.bloomberg.com/bw/articles/2012-02-29/the-germany-website-copy-machine">entire business</a>.</p>

<p>Code only represents the <em>past to almost present</em> of your business, losing a valuable colleague hurts because of their ability to move your business forwards. A “fresh replacement” has a while to go in terms of being able to make the change you want. Someone trying to build off your source, has to learn to understand your motivations, your aspirations and then try build what they’d like around that. It’s not good business sense.</p>

<h3 id="license-selection">License Selection</h3>

<p>I covered this in <a href="/blog/2015/12/10/License-and-You/">Licensing for OSS</a>. If you want the TL:DR for Apps on app stores, jump to “Viral”.</p>

<p>We use the <a href="https://en.wikipedia.org/wiki/MIT_License">MIT license</a> on all Open Source projects. It’s worked out so far for us, because as a platform each individual component can exist standalone. Having a fork of all our projects does not make you a competitor to us.</p>

<h3 id="i-have-code-that-has-to-stay-hidden">I have code that <em>has</em> to stay hidden</h3>

<p>So do we! In the iOS world, we use API compatible Open/Closed CocoaPods that allow for us to mock out for OSS consumers and let us use <a href="/blog/2014/06/20/artsys-first-closed-source-pod/">private implementations</a>. If you’re trying to hide secret API calls, it’s probably easier for someone to run a <a href="http://www.charlesproxy.com">proxy</a> than it is to find the section of code calling it.</p>

<p>Having the core of your application Open Source doesn’t mean you cannot develop features in private. I <a href="https://github.com/artsy/eigen/pull/302">built a WatchOS app</a> for Eigen entirely on a private repo, where once a week for 2 months I rebase’d changes from the main repo. When we felt comfortable about making it known publicly we were working on it - I brought it over to a public repo and initiated the <a href="https://github.com/artsy/eigen/pull/302">code review</a>.</p>

<h3 id="our-expectations-of-oss-contributors">Our expectations of OSS contributors</h3>

<p>We don’t expect people to contribute to our apps. For libraries, that’s different. I think <a href="https://ello.co/jayzes/post/tqLL-Z8U8GfbDySRk6wbKg">Ello’s write-up</a> really nailed this point, so I’ll just quote jayzes:</p>

<blockquote>
  <p>On one hand, we have library and infrastructure code — things that are more generic and reusable. These are the sort of thing that we can more easily envision starting to grow communities around, albeit small ones.</p>
</blockquote>

<blockquote>
  <p>On the other hand, we have custom-built applications, which are likely to have limited utility outside of their current purpose due to size and coupling to other parts of Ello’s infrastructure (the Ello API, for one). We don’t envision these apps building much of a community around themselves in the way that most open source tools and libraries do, and see the primary value in opening them up coming as a result of increased transparency. That having been said, we’ll certainly accept pull requests that fit our product roadmap and engineering standards, should anyone feel like jumping in and contributing!</p>
</blockquote>

<p>Beautiful. This is exactly how I feel, and in over a year these expectations have been met. Some of our libraries have become big, and our apps have received small feature PRs. We’re pleasantly surprised when it happens, but we don’t expect it.</p>

<h3 id="what-didnt-we-expect">What didn’t we expect?</h3>

<p>I didn’t expect to be told face to face how many people have read, and learned from our codebases. We get around 120 unique clones of our iOS apps every week. People tell us that it’s where they found a certain technique, or that they could see how the trade-offs were made for certain decisions.</p>

<p>I also under-estimated how useful open code is in encouraging a culture of writing. Ash once quoted <a href="https://twitter.com/ashfurrow/status/676814159363842048">me in a tweet</a> saying:</p>

<blockquote>
  <p>Order of importance: blog posts &gt; types &gt; tests</p>
</blockquote>

<p>While it is a joke against functional programmers, in general; having these huge codebases gives a lot to talk about. A commit says the what, a pull request the how and a blog post gives the why. Writing about our code allows us to provide documentation for future employees with the context around how decisions were made. Nobody <em>wants</em> to ship messy code, but a lot of the time you choose to in order to provide something positive.</p>

<h3 id="how-does-open-source-affect-security">How does Open Source affect security</h3>

<p>Artsy has a <a href="https://www.artsy.net/security">security policy</a>, with bounties and ways to report issues. From our perspective so far, having this open has not affected the reports we receive. If 1Password <a href="https://teams.1password.com/white-paper/1Password%20for%20Teams%20White%20Paper.pdf">can say</a></p>

<blockquote>
  <p>We believe that openness always trumps “security through obscurity”.</p>
</blockquote>

<p>Then show off their algorithms that keep passwords safe, then so long as we’re careful about our keys and stick to best security practices. We seem to be doing alright.</p>

<h3 id="what-is-a-good-approach-to-talk-to-the-legal-team">What is a good approach to talk to the legal team?</h3>

<p>I have a friend who works in a very large company. He told me that he was aiming to Open Source his app. He had had a few meetings with the legal team that didn’t really go anywhere. After a few meetings, he explained that they weren’t aiming for community-building with this, but aiming to develop in the open. This change of perspective, changed the tone of the meetings from then on in. It became much easier to start the political work necessary to even begin working on the technical aspect.</p>

<h3 id="alright-so-im-gonna-need-ammo-for-these-meetings">Alright, so I’m gonna need ammo for these meetings.</h3>

<p>Looking back at the last year, here’s been some highlights:</p>

<h4 id="personal">Personal</h4>

<ul>
  <li>It’s gratifying to give back to communities who help you get things done.</li>
  <li>It’s so much easier to talk about <a href="https://github.com/artsy/eigen/issues/586">technical challenges</a>, and <a href="/blog/2015/12/15/Automating-Testflight-Deploys/">achievements</a> when you can let people explore; before, the code review, and after.</li>
  <li>The code you write does not become unavailable to you when you leave the company. Carry your best ideas between jobs.</li>
</ul>

<h4 id="company-wide">Company-wide</h4>

<ul>
  <li>You can structure in a way so that contributions within your team reflect how working in the OSS community is. Lowering the barrier of entry for your team to contribute back to their dependencies. There is little cultural differences between being a high-level contributor to CocoaPods and working in the Artsy mobile team.</li>
  <li>Working in the open is a great way to raise the profiles of your team, and the individuals on it. This opens extra potential for personal growth for individuals. Not just professional.</li>
  <li>It can make it easier to hire, because you can “<a href="https://github.com/artsy/mobile/">show</a>”, not “<a href="https://www.artsy.net/article/artsy-jobs-mobile-engineer">tell</a>” the positives in your team culture.</li>
  <li>You open the doors to potential contributors. Those contributors could eventually become hires.</li>
</ul>

<p>This is still pretty new, there’s a lot to explore in the space. The mobile team at Artsy is always happy to talk with people interested in doing it themselves. Send us an email at <a href="mailto:mobile@artsy.net">mobile@artsy.net</a>, tweet to <a href="https://twitter.com/ArtsyOpenSource">@ArtsyOpenSource</a> or DM me <a href="https://twitter.com/orta">@orta</a>.</p>
]]></content>
  </entry>
  
</feed>
