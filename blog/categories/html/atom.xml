<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: html | Artsy Engineering]]></title>
  <link href="https://artsy.github.io/blog/categories/html/atom.xml" rel="self"/>
  <link href="https://artsy.github.io/"/>
  <updated>2024-05-17T14:49:02+00:00</updated>
  <id>https://artsy.github.io/</id>
  <author>
    <name><![CDATA[]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Server-Rendering Responsively]]></title>
    <link href="https://artsy.github.io/blog/2019/05/24/server-rendering-responsively/"/>
    <updated>2019-05-24T00:00:00+00:00</updated>
    <id>https://artsy.github.io/blog/2019/05/24/server-rendering-responsively</id>
    <content type="html"><![CDATA[<p>We use server-side rendering (SSR) to deliver every page you hit on <a href="https://artsy.net">artsy.net</a>. We decided on
using SSR for many reasons, amongst them performance.
<a href="https://artsy.github.io/blog/2013/11/30/rendering-on-the-server-and-client-in-node-dot-js/">We wrote about this all the way back in 2013</a>!</p>

<p>We’ve also built our site using responsive design, so you get a browsing experience optimized for your device.</p>

<p>Combining SSR and responsive design is a non-trivial problem. There are many concerns to manage, and they are
sometimes in conflict with each other. We server render for performance reasons, but we also want to be sure our
app is performant when your browser takes over, all while optimizing for accessibility and SEO.</p>

<p>This article describes the tools we use on <a href="https://artsy.net">artsy.net</a> to combine SSR and responsive design.</p>

<!-- more -->

<h2 id="tool-1-styled-system">Tool 1: <a href="https://styled-system.com"><code class="language-plaintext highlighter-rouge">styled-system</code></a></h2>

<p>We handle the majority of responsive styling differences with
<a href="https://styled-system.com/responsive-styles"><code class="language-plaintext highlighter-rouge">styled-system</code></a>. This has been a really great addition to our
toolbox. Here’s a component that would render a <code class="language-plaintext highlighter-rouge">div</code> (<code class="language-plaintext highlighter-rouge">Box</code>) with a width of 50% for small screens, 75% for
medium-sized screens, and 100% for anything larger:</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;Box</span> <span class="na">width=</span><span class="s">{["50%",</span> <span class="err">"75%",</span> <span class="err">"100%"]}</span><span class="nt">&gt;</span>
  ...
<span class="nt">&lt;/Box&gt;</span>
</code></pre></div></div>

<p>Another example:</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;Flex</span> <span class="na">flexDirection=</span><span class="s">{["column",</span> <span class="err">"row"]}</span><span class="nt">&gt;</span>
  <span class="nt">&lt;Box</span> <span class="na">px=</span><span class="s">{40}</span> <span class="na">background=</span><span class="s">"black10"</span><span class="nt">&gt;</span>
    ...
  <span class="nt">&lt;/Box&gt;</span>
<span class="nt">&lt;/Box&gt;</span>
</code></pre></div></div>

<p>While only one property in this example is specifying an array of values to be used at different breakpoints, all
of those properties <em>can</em> take an array for different breakpoints. As developers, we love this experience. We can
apply subtle differences to components across breakpoints with very little code and effort.</p>

<p>We use <a href="https://styled-system.com"><code class="language-plaintext highlighter-rouge">styled-system</code></a> extensively within
<a href="https://palette.artsy.net/">our design system</a>. You can
<a href="https://github.com/artsy/reaction/blob/32de03fe526355258655ded510d23335a456b9ce/src/Components/NavBar/Menus/MoreNavMenu.tsx#L23-L28">poke around our source</a>
to see how much we’ve embraced <a href="https://styled-system.com"><code class="language-plaintext highlighter-rouge">styled-system</code></a>’s responsive styles.</p>

<p>There’s one type of challenge with building a responsive app that <a href="https://styled-system.com"><code class="language-plaintext highlighter-rouge">styled-system</code></a>
can’t solve: when we need to emit different layouts across different breakpoints. In this case, we need something
that can render very different component sub-trees. We couldn’t find an approach that satisfied our needs, so we
wrote our own.</p>

<h2 id="tool-2-artsyfresnel">Tool 2: <a href="https://github.com/artsy/fresnel"><code class="language-plaintext highlighter-rouge">@artsy/fresnel</code></a></h2>

<p>First off, an announcement: we’ve just released <a href="https://github.com/artsy/fresnel"><code class="language-plaintext highlighter-rouge">@artsy/fresnel</code></a> version 1.0!</p>

<p><a href="https://github.com/artsy/fresnel"><code class="language-plaintext highlighter-rouge">@artsy/fresnel</code></a> allows you to define a set of breakpoint widths, then
declaratively render component sub-trees when those breakpoints are met. It looks something like this:</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">&lt;</span>&gt;
  <span class="nt">&lt;Media</span> <span class="na">at=</span><span class="s">"xs"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;MobileLayout</span> <span class="nt">/&gt;</span>
  <span class="nt">&lt;/Media&gt;</span>
  <span class="nt">&lt;Media</span> <span class="na">greaterThan=</span><span class="s">"xs"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;NonMobileLayout</span> <span class="nt">/&gt;</span>
  <span class="nt">&lt;/Media&gt;</span>
<span class="err">&lt;</span>/&gt;
</code></pre></div></div>

<p>In this example, we’re emitting the <code class="language-plaintext highlighter-rouge">MobileLayout</code> component for devices at or below our <code class="language-plaintext highlighter-rouge">xs</code> breakpoint, and the
<code class="language-plaintext highlighter-rouge">NonMobileLayout</code> for devices greater than our <code class="language-plaintext highlighter-rouge">xs</code> breakpoint. You can imagine that the <code class="language-plaintext highlighter-rouge">MobileLayout</code> and
<code class="language-plaintext highlighter-rouge">NonMobileLayout</code> components contain complicated sub-trees, with more significant differences than
<a href="https://styled-system.com"><code class="language-plaintext highlighter-rouge">styled-system</code></a> could handle.</p>

<h3 id="how-it-works">How it works</h3>

<p>The first important thing to note is that when server-rendering with
<a href="https://github.com/artsy/fresnel"><code class="language-plaintext highlighter-rouge">@artsy/fresnel</code></a>, <strong>all</strong> breakpoints get rendered by the server. Each <code class="language-plaintext highlighter-rouge">Media</code>
component is wrapped by plain CSS that will only show that breakpoint if it matches the user’s current browser
size. This means that the client can accurately start rendering the HTML/CSS <em>while</em> it receives it, which is long
before the React application has booted. This improves perceived performance for end-users.</p>

<p>Why not just the breakpoint that the current device needs? Because we can’t <em>accurately</em> identify which breakpoint
your device needs on the server. We could use a library to sniff the browser <code class="language-plaintext highlighter-rouge">user-agent</code>, but those aren’t always
accurate, and they wouldn’t give us all the information we need to know when we are server-rendering.</p>

<p>If you’re interested, you can
<a href="https://github.com/artsy/reaction/issues/1367">read the issue that originally inspired us to build <code class="language-plaintext highlighter-rouge">@artsy/fresnel</code></a>.
One of the neat things about Artsy being <a href="/series/open-source-by-default/">open-source by default</a> is that you can
see decisions being made and libraries being built <em>as they happen</em>; not just after they’re complete.</p>

<h2 id="tool-3-artsydetect-responsive-traits">Tool 3: <a href="https://github.com/artsy/detect-responsive-traits"><code class="language-plaintext highlighter-rouge">@artsy/detect-responsive-traits</code></a></h2>

<p>I mentioned above that it’s difficult to accurately detect devices by user agent to identify which breakpoint to
render. We didn’t want this to be our primary strategy for combining SSR with responsive design.</p>

<p>But with <a href="https://github.com/artsy/fresnel"><code class="language-plaintext highlighter-rouge">@artsy/fresnel</code></a> as our primary approach, we felt that we could make
some further optimizations with user agent detection. In the event that we don’t know your device by its user
agent, we’ll still render all breakpoints on the server. But if we are certain you are on a device that only ever
needs a subset of the breakpoints, we only render those on the server. This saves a bit of rendering time; more
importantly it reduces the number of bytes sent over the wire.</p>

<p>We really wanted to not maintain our own list of user agents. Alas, we found that none of the existing user agent
detection libraries surfaced all the information we needed in a single resource. We needed to know the minimum
width for a browser on a given device, and if it was resizable, and to what dimensions it was resizable. If any
existing libraries <em>did</em> have this data, they didn’t provide it to us easily.</p>

<p>So we did some experimentation, given the browsers and devices we knew we needed to support. And yeah…we
(reluctantly) created our own user-agent detection library,
<a href="https://github.com/artsy/detect-responsive-traits">@artsy/detect-responsive-traits</a>. We’re using this to determine
if your browser is likely going to use only the mobile breakpoint of our app, in which case we don’t have to also
render the desktop version. The library is currently targeting only the browsers and devices we support on
<a href="artsy.net">artsy.net</a>, but
<a href="https://github.com/artsy/detect-responsive-traits">we’re always open to contributions</a>!</p>

<p>We aren’t doing any detection of desktop browsers. They are more resizable than mobile browsers, and we are more
concerned with mobile users getting less content sent over their 3G connection.</p>

<h2 id="why-didnt-you-___">Why didn’t you ___?</h2>

<p>Those are our primary tools for combining SSR with responsive design! They work well for us. We considered many
many other options along the way. Here are a couple:</p>

<h3 id="react-media-or-react-responsive"><a href="https://github.com/ReactTraining/react-media"><code class="language-plaintext highlighter-rouge">react-media</code></a> or <a href="https://github.com/contra/react-responsive"><code class="language-plaintext highlighter-rouge">react-responsive</code></a></h3>

<p>We investigated both <a href="https://github.com/ReactTraining/react-media"><code class="language-plaintext highlighter-rouge">react-media</code></a> and
<a href="https://github.com/contra/react-responsive"><code class="language-plaintext highlighter-rouge">react-responsive</code></a>, but found that they didn’t approach the SSR side
of the problem as deeply as we needed.</p>

<p>We also weren’t fans of the imperative API in <a href="https://github.com/ReactTraining/react-media"><code class="language-plaintext highlighter-rouge">react-media</code></a>. We
started with a similar API when building <a href="https://github.com/artsy/fresnel"><code class="language-plaintext highlighter-rouge">@artsy/fresnel</code></a>, but found ourselves
inhibited by the restriction that only one branch can be rendered. This contradicted our strategy of emitting all
breakpoints from the server.</p>

<p>With <a href="https://github.com/contra/react-responsive"><code class="language-plaintext highlighter-rouge">react-responsive</code></a>, we didn’t like that it relied on user agent
detection as its primary method of handling SSR.</p>

<h3 id="rely-solely-on-css">Rely solely on CSS</h3>

<p>As mentioned before, we render all breakpoints from the server and hide the non-matching branches with CSS. The
issue with this approach, when combined with React, is that after
<a href="https://reactjs.org/docs/react-dom.html#hydrate">hydration</a> you have many components that are mounted and rendered
unnecessarily. There’s a performance hit you take for rendering components your user isn’t seeing, but even worse
is the potential for duplicate side-effects.</p>

<p>Imagine a component that, when rendered, emits a call to an analytics service. If this component exists in both a
mobile and desktop branch, you’re now double-stuffing your analytics. Hopefully your analytics service is smart
enough to count only one call, but it’s still a bad idea to duplicate components that have side-effects.</p>

<p><a href="https://github.com/artsy/fresnel"><code class="language-plaintext highlighter-rouge">@artsy/fresnel</code></a> will only client-render the breakpoint that matches your
browser dimensions, so you don’t have to worry about duplicate side-effects.</p>

<h2 id="whats-left-to-solve">What’s left to solve?</h2>

<p>Our SSR and responsive design toolbox does a lot of things well. We get great performance from both the server and
client. Our site looks great on any device.</p>

<p>We do have some SEO concerns, though. Since we’re server-rendering multiple breakpoints, it’s likely that search
engine bots are seeing double the content on our pages. We <em>think</em> this is okay.
<a href="https://youtu.be/WsgrSxCmMbM">Google WebMasters</a> says it’s okay. We haven’t noticed any awful side-effects from
this yet, but SEO is a bit of a dark art, yeah?</p>

<h2 id="our-advice">Our advice</h2>

<p>Responsive design is hard, especially when layouts change significantly between desktop and mobile. Server-side
rendering in React is hard to get right, period. Combining SSR with responsive design compounds the challenges.</p>

<p>At the end of the day, you should do everything you can to limit layout differences between mobile and desktop. Use
responsive props from <a href="https://styled-system.com"><code class="language-plaintext highlighter-rouge">styled-system</code></a>. Play around with <code class="language-plaintext highlighter-rouge">flexbox</code> and
<code class="language-plaintext highlighter-rouge">flex-direction</code>, start learning about CSS <code class="language-plaintext highlighter-rouge">grid</code>, and use CSS <code class="language-plaintext highlighter-rouge">@media</code> queries when you can. If you absolutely
must render different views on different breakpoints, render all the UI and hide what’s not needed for that
breakpoint. You want your users to see the right content as quickly as possible. Send them HTML and CSS from your
server that their client can use.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How hard could it be to create an email?]]></title>
    <link href="https://artsy.github.io/blog/2018/11/19/mjml/"/>
    <updated>2018-11-19T00:00:00+00:00</updated>
    <id>https://artsy.github.io/blog/2018/11/19/mjml</id>
    <content type="html"><![CDATA[<!-- OUTLINE -->

<p>Let’s talk about email HTML.</p>

<p>If you’ve never worked on emails before, you might think the process works something like this:</p>

<ol>
  <li>Write some HTML, but maybe with a few more tables than you usually use since emails like those.</li>
  <li>Render it in your browser. Nice! Looking great.</li>
  <li>Send yourself a quick test. Just like in your browser! Sweet!</li>
  <li>Send that PR and move on to the next thing.</li>
</ol>

<p><img src="/images/2018-11-19-mjml/example.png" alt="/images/2018-11-19-mjml/example.png" /></p>

<p>In reality, it’s more like this:</p>

<ol>
  <li>Write some HTML with more tables than you think could possibly be necessary. There’s no way it’ll break with all
these tables, right?</li>
  <li>Render it in the browser. Cool, looks fine.</li>
  <li>Send yourself a test, and send one to a service like <a href="https://www.litmus.com">Litmus</a> or
<a href="https://www.emailonacid.com">Email on Acid</a> that renders the email in dozens of clients</li>
  <li>Looking good in Gmail…good in Apple mail…wait why is it completely broken in Outlook 2007 (and 2010, 2013,
and 2019)? And Yahoo Mail on Internet Explorer? Shoot.</li>
  <li>Better add some more tables. That’s usually the solution.</li>
  <li>Well…that didn’t work. Find a post from 2009 in a forum for Netscape enthusiasts that implies you might want
to add an extra Outlook-only table using <code class="language-plaintext highlighter-rouge">&lt;!--[if mso | IE]&gt;</code> with
<code class="language-plaintext highlighter-rouge">role="presentation" and cellpadding="0" cellspacing="0"</code>. Maybe that’ll work.</li>
  <li>Outlook 2007 is fixed! Nice! Oh…but now it looks broken on iPhones. Back to the drawing board.</li>
</ol>

<p><img src="/images/2018-11-19-mjml/outlook-2019-broken.png" alt="/images/2018-11-19-mjml/outlook-2019-broken.png" /></p>

<!-- more -->

<p>And after a few hours, you’ve probably squished most bugs on most clients and are ready to ship it, but also ready
to tear your hair out. Creating emails that render gracefully in clients that were built 15 years ago and in
clients that were built this year isn’t easily done. That’s where MJML comes in.</p>

<h2 id="what-is-mjml">What is MJML?</h2>

<p><a href="https://mjml.io">MJML</a>, short for Mailjet Markup Language, is a markup language that is written like simplified
HTML/CSS and renders email-friendly, responsive HTML. So instead of having to code a few thousand lines of complex
HTML, you code a couple hundred lines of MJML, and it outputs code that looks good on <em>every single client</em>.</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;mjml&gt;</span>
  <span class="nt">&lt;mj-head&gt;</span>
    <span class="c">&lt;!-- global styles --&gt;</span>
    <span class="nt">&lt;mj-attributes&gt;</span>
      <span class="nt">&lt;mj-text</span>
        <span class="na">font-family=</span><span class="s">"HelveticaNeue, Helvetica, Arial, sans-serif"</span>
        <span class="na">font-size=</span><span class="s">"14px"</span>
        <span class="na">line-height=</span><span class="s">"21px"</span>
        <span class="na">padding=</span><span class="s">"0"</span>
      <span class="nt">/&gt;</span>
      <span class="nt">&lt;mj-section</span> <span class="na">padding=</span><span class="s">"0"</span> <span class="nt">/&gt;</span>
    <span class="nt">&lt;/mj-attributes&gt;</span>
  <span class="nt">&lt;/mj-head&gt;</span>
  <span class="nt">&lt;mj-body</span> <span class="na">width=</span><span class="s">"450px"</span> <span class="na">background-color=</span><span class="s">"#fff"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;mj-section</span> <span class="na">padding=</span><span class="s">"20px"</span> <span class="na">border=</span><span class="s">"1px solid #e5e5e5"</span> <span class="na">border-bottom=</span><span class="s">"0"</span><span class="nt">&gt;</span>
      <span class="nt">&lt;mj-group&gt;</span>
        <span class="nt">&lt;mj-column</span> <span class="na">vertical-align=</span><span class="s">"middle"</span> <span class="na">width=</span><span class="s">"19%"</span><span class="nt">&gt;</span>
          <span class="nt">&lt;mj-image</span> <span class="na">width=</span><span class="s">"66px"</span> <span class="na">align=</span><span class="s">"left"</span> <span class="na">padding=</span><span class="s">"0"</span> <span class="na">src=</span><span class="s">"jared-french-prose.png"</span> <span class="nt">/&gt;</span>
        <span class="nt">&lt;/mj-column&gt;</span>
        <span class="nt">&lt;mj-column</span> <span class="na">padding-left=</span><span class="s">"20px"</span> <span class="na">vertical-align=</span><span class="s">"middle"</span> <span class="na">width=</span><span class="s">"81%"</span><span class="nt">&gt;</span>
          <span class="nt">&lt;mj-text&gt;</span>Order #B135790<span class="nt">&lt;/mj-text&gt;</span>
          <span class="nt">&lt;mj-text&gt;</span>Jared French<span class="nt">&lt;/mj-text&gt;</span>
          <span class="nt">&lt;mj-text&gt;</span>Prose, ca. 1948<span class="nt">&lt;/mj-text&gt;</span>
        <span class="nt">&lt;/mj-column&gt;</span>
      <span class="nt">&lt;/mj-group&gt;</span>
    <span class="nt">&lt;/mj-section&gt;</span>
  <span class="nt">&lt;/mj-body&gt;</span>
<span class="nt">&lt;/mjml&gt;</span>
</code></pre></div></div>

<p>Looking good in Outlook 2007:
<img src="/images/2018-11-19-mjml/outlook-2007-fixed.png" alt="/images/2018-11-19-mjml/outlook-2007-fixed.png" /></p>

<p>It feels pretty magical.</p>

<p>When the marketing team was getting ready to revamp our user-facing emails in summer 2017, we found MJML and
thought, “hey, this could make life a lot simpler in the long run.” It took some time to get comfortable with it,
but maybe not as much as you’d think due to its similarities with HTML.</p>

<p>It can be tricky figuring out how to accomplish something really, really specific in MJML. Our design team sent
over templates with pretty specific needs—mobile vs. desktop padding, for example, and it took us a while to learn
how to make those types of tricky changes (though still less time than it would have taken in raw HTML, I’m sure).</p>

<h2 id="limitations">Limitations</h2>

<p>Of course, MJML is still limited by the boundaries of email clients. It can’t make gifs render in old versions of
Outlook, or fix the way Lotus Notes ignores stated image widths in favor of actual widths. We’ve run into issues
with background images that MJML couldn’t completely alleviate on all clients (they’re pretty poorly supported),
and because lots of mobile clients don’t support media queries, we’ve had to develop in a way that makes sure our
desktop layouts and sizes will look good on small screens.</p>

<p>And it’s worth noting that the HTML file output by MJML is going to be large. On our biggest emails, the ones
featuring articles, artists, artworks, events, ads, and more, we’ve had to deal with clipping by minifying our
output (which comes with its own share of difficulties, since again, things that work fine when minifying for web
will break email clients). If you’re curious, we use the <a href="http://kangax.github.io/html-minifier/">Kangax Minifier</a>
with <a href="/images/2018-11-19-mjml/kangax-settings.png">these particular settings</a>.</p>

<p>One thing that’s helped tremendously with these issues is MJML’s great
<a href="https://slacking-inviter.herokuapp.com/">Slack community</a>. Both the devs of MJML and several avid users (including
both of us) are good about answering questions from new and seasoned users alike.</p>

<h2 id="bringing-mjml-to-engineering">Bringing MJML to Engineering</h2>

<p>Part of what the email marketing team appreciated about MJML is that it could be written by someone who just knew
HTML and CSS—you don’t have to be an experienced programmer to make it work. The engineering team wasn’t much
involved with the development of the Marketing team’s emails in MJML, but when they began working on new
transactional emails for <a href="https://www.artsy.net/collect?acquireable=true">Buy Now</a> inventory, Erik (on Engineering)
and Matt (on Marketing) sat down together to see if it could be a good fit for them as well.</p>

<p>Artsy’s transactional emails cover everything from internal reporting to messaging for gallery partners, art
collectors and auction bidders. As these emails have evolved and become more complex, our approaches to balancing
beauty with stability have pushed the limits of reasonable human effort. Similar to how frontend frameworks like
<a href="https://getbootstrap.com/">Bootstrap</a> added a level of comfortable abstraction to stylesheets, or the way your
React.js <code class="language-plaintext highlighter-rouge">&lt;Button /&gt;</code> component became so much more than a plain old <code class="language-plaintext highlighter-rouge">&lt;button /&gt;</code>, MJML’s xml ‘components’ abstract
the messy bits away.</p>

<h2 id="state-of-the-email-union">State of the (Email) Union</h2>

<p>Today, we’re using MJML for all of our B2C emails, a few of our B2B emails, and our new transactional emails (all
three are generated by different mail services, so it takes some time to bring them all up to date). We’ve found
that we’re able to iterate on designs much faster, and our emails look better in more clients than they ever have
before.</p>

<p>What else have we learned during this process? MJML takes a bit of time to master, especially the idea of
<code class="language-plaintext highlighter-rouge">&lt;mj-head&gt;</code> as a kind of global stylesheet and the <code class="language-plaintext highlighter-rouge">body --&gt; section --&gt; column</code> flow. Once we got comfortable with
conventions like this, though, life before MJML became hard to imagine. It has offered Artsy the chance to raise
the level of accessibility of design <em>and</em> speed of development in this niche area, a major win for the engineering
team and cross-team collaboration as a whole.</p>

<p>For more information or to get started using MJML, <a href="https://mjml.io">check out their website</a>.</p>
]]></content>
  </entry>
  
</feed>
