<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: best practices | Artsy Engineering]]></title>
  <link href="https://artsy.github.io/blog/categories/best-practices/atom.xml" rel="self"/>
  <link href="https://artsy.github.io/"/>
  <updated>2024-08-06T19:48:16+00:00</updated>
  <id>https://artsy.github.io/</id>
  <author>
    <name><![CDATA[]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Are you using the right Mongo geospatial query?]]></title>
    <link href="https://artsy.github.io/blog/2023/02/10/mongo-geospatial-queries/"/>
    <updated>2023-02-10T00:00:00+00:00</updated>
    <id>https://artsy.github.io/blog/2023/02/10/mongo-geospatial-queries</id>
    <content type="html"><![CDATA[<p>We recently got a report from one of our galleries in the Los Angeles area that
they weren’t showing up on our
<a href="https://www.artsy.net/shows/los-angeles-ca-usa">Los Angeles exhibition listings</a>.</p>

<p>I fielded the report and right away confirmed: when we asked our core API for
<code class="language-plaintext highlighter-rouge">/shows?near=&lt;los angeles coordinates&gt;</code>, sure enough this gallery partner didn’t
make the cut.</p>

<p>Turns out they are based in Santa Monica, a separate and neighboring
municipality. They must not be within the 25km radius that we use by default for
these sorts of queries.</p>

<p><em>Case closed</em>. Or so I thought.</p>

<!-- more -->

<p>After some back and forth with our partner I decided to investigate more
thoroughly, this time using some tricks of the trade from
<a href="https://www.anandarooproy.com">my other life</a> outside of Artsy.</p>

<h2 id="casting-a-wider-net">Casting a wider net</h2>

<p>If there was something wrong with our 25km radius query, I wanted to start by
casting a wider net and visualizing the results.</p>

<p>I consulted our Rails application code to find the query logic in question, and
then issued the same query directly to MongoDB. Something like the following
query (simplified for clarity):</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// a $geoWithin $center query</span>

<span class="nx">db</span><span class="p">.</span><span class="nx">events</span><span class="p">.</span><span class="nx">find</span><span class="p">({</span>
  <span class="na">coordinates</span><span class="p">:</span> <span class="p">{</span>
    <span class="na">$geoWithin</span><span class="p">:</span> <span class="p">{</span>
      <span class="na">$center</span><span class="p">:</span> <span class="p">[[</span><span class="o">-</span><span class="mf">118.24</span><span class="p">,</span> <span class="mf">34.05</span><span class="p">],</span> <span class="mi">25</span> <span class="o">/</span> <span class="mf">111.32</span><span class="p">],</span>
    <span class="p">},</span>
  <span class="p">},</span>
<span class="p">})</span>
</code></pre></div></div>

<p>In the query above we are asking MongoDB to give us all events within a 25km
radius around the point 34.05°N, 118.24°W which we have designated as a central
point within Los Angeles. For our purposes in this post we can consider “events”
≈ “exhibitions” ≈ “shows.”</p>

<p>We are not asking for the 25km radius directly, but rather converting it into an
equivalent amount of geographic degrees by using a conversion factor of 1° ≈
111.32 kilometers, a factor which is true at enough the equator.</p>

<p>I modified the above query to cast a 50km net in order to see if there were some
edges cases that needed scrutiny. Taking the resulting JSON response, I fired up
<a href="https://www.placemark.io/">Placemark</a>, my favorite new tool for wrangling
geospatial data.</p>

<p>(Incidentally I recommend reading Tom Macwright’s
<a href="https://macwright.com/2023/01/28/placemark.html">recent reflection on creating Placemark</a>
as a bootstrapped indie developer.)</p>

<figure class="illustration">
  <img src="/images/2023-02-10-mongo-geospatial-queries/1.png" alt="Screenshot of a visualization in Placemark showing Los Angeles area exhibitions within a 50km radius." />
  <figcaption>All shows within a 50km radius</figcaption>
</figure>

<h2 id="ball-of-confusion">Ball of confusion</h2>

<p>One nice feature of Placemark is that it lets us place geodesic circles on the
map, that is, circles that represent a constant radius around a point, as
plotted on a globe.</p>

<p>When I placed a 25km radius circle on the map, something stood out immediately.</p>

<figure class="illustration">
  <img src="/images/2023-02-10-mongo-geospatial-queries/2.png" alt="Screenshot of a visualization in Placemark showing Los Angeles area exhibitions within a 50km radius, with a 25km radius superimposed." />
  <figcaption>25km radius superimposed. <a style="padding-bottom: 1px; border-bottom: solid 1px lightgray" href="https://en.wikipedia.org/wiki/Ball_of_Confusion_%28That%27s_What_the_World_Is_Today%29">Ball of Confusion</a>, that's what the world was that day.</figcaption>
</figure>

<p>The partner in question is highlighted in pink — and is clearly within the 25km
radius. <strong>What gives?</strong></p>

<p>By spot-checking a few points on the map against our current geo query I found
that edge cases near the top or bottom of the circle were likely to be evaluated
correctly, while edges cases at the left and right were being incorrectly
omitted, as our partner gallery was.</p>

<p>A fuller visualization of that finding would look like this:</p>

<figure class="illustration">
  <img src="/images/2023-02-10-mongo-geospatial-queries/3.png" alt="Screenshot of a visualization in Placemark showing the results of a $geoWithin $center query" />
  <figcaption>Results of a <code>$geoWithin $center</code> query around Los Angeles, evaluated against a grid of test points.</figcaption>
</figure>

<p>A distinctly <em>non</em>-circular circle — that rung a bell.</p>

<h2 id="more-than-one-way-to-draw-a-circle-on-the-earth">More than one way to draw a circle on the Earth</h2>

<p>It was at this point that I recalled the specific form of the geospatial query
our code was performing, and consulted the
<a href="https://www.mongodb.com/docs/manual/reference/operator/query/geoWithin/">MongoDB docs for the $geoWithin query</a>.</p>

<p>Turns out that you can invoke this as a radius query in one of two ways, by
specifying
<a href="https://www.mongodb.com/docs/manual/reference/operator/query/center/">$center</a>
or
<a href="https://www.mongodb.com/docs/manual/reference/operator/query/centerSphere/">$centerSphere</a>.</p>

<p>Per the
<a href="https://www.mongodb.com/docs/manual/reference/operator/query/center/#behavior">docs</a>
for <code class="language-plaintext highlighter-rouge">$center</code>, this query…</p>

<blockquote>
  <p>calculates distances using flat (planar) geometry</p>
</blockquote>

<p>Let us pause for a moment to note that while only some maps are
<a href="https://press.uchicago.edu/ucp/books/book/chicago/H/bo27400568.html">deceitful</a>,
<em>all</em> maps are untruths. In the sense that they flatten three dimensions down to
two, and inevitably distort the world in the process.</p>

<p>The surface of a three-dimensional globe cannot be flattened down to a
two-dimensional plane without some stretching or tearing, any more than an
orange peel can be. The mathematical algorithms for turning those three
dimensions into two are what we know as map projections. (Ah, the good old days
when “dimensionality reduction” meant <em>from three to two</em>.)</p>

<p>If you do your distance calculations in such a flattened, projected coordinate
system — as the <code class="language-plaintext highlighter-rouge">$geoWithin $center</code> query does — then you are accepting
whatever distortions are inherent to that projection.</p>

<p>That’s the situation we were in. We thought we were catching everything inside
the green circle, but in fact we were only catching everything inside the red
egg:</p>

<figure class="illustration">
  <img src="/images/2023-02-10-mongo-geospatial-queries/5.png" alt="Screenshot of a visualization in Placemark showing the results of a $geoWithin $center query compared to the expected results" />
  <figcaption>Actual <code>$geoWithin $center</code> results vs. expected results.</figcaption>
</figure>

<p>And our unfortunate partner was <em>just</em> outside the egg, thus being incorrectly
omitted.</p>

<h2 id="fixing-the-query">Fixing the query</h2>

<p>Luckily the solution was simple.</p>

<p>As noted above MongoDB supports a second variant for radius queries using a
<code class="language-plaintext highlighter-rouge">$centerSphere</code> operator instead of the <code class="language-plaintext highlighter-rouge">$center</code> that we were using.</p>

<p>Per the
<a href="https://www.mongodb.com/docs/manual/reference/operator/query/centerSphere/">docs</a>
for <code class="language-plaintext highlighter-rouge">$centerSphere</code>, this version…</p>

<blockquote>
  <p>defines a circle for a geospatial query that uses spherical geometry</p>
</blockquote>

<p>In other words, this query effectively draws our circle on the three-dimensional
globe rather than on the stretched and distorted two-dimensional map.</p>

<p>We just need to rewrite our query as follows:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// a $geoWithin $centerSphere query</span>

<span class="nx">db</span><span class="p">.</span><span class="nx">events</span><span class="p">.</span><span class="nx">find</span><span class="p">({</span>
  <span class="na">coordinates</span><span class="p">:</span> <span class="p">{</span>
    <span class="na">$geoWithin</span><span class="p">:</span> <span class="p">{</span>
      <span class="c1">// $center: [[-118.24, 34.05], 25 / 111.32],    /* BEFORE */</span>
      <span class="na">$centerSphere</span><span class="p">:</span> <span class="p">[[</span><span class="o">-</span><span class="mf">118.24</span><span class="p">,</span> <span class="mf">34.05</span><span class="p">],</span> <span class="mi">25</span> <span class="o">/</span> <span class="mf">6378.1</span><span class="p">]</span> <span class="cm">/* AFTER */</span><span class="p">,</span>
    <span class="p">},</span>
  <span class="p">},</span>
<span class="p">})</span>
</code></pre></div></div>

<p>There is a new conversion factor in play here, this time denoting that the
radius of the earth is approximately 6378.1 km. In this <code class="language-plaintext highlighter-rouge">$centerSphere</code> flavor
of the query we are working in unprojected
<a href="https://en.wikipedia.org/wiki/Spherical_coordinate_system">spherical coordinates</a>,
measured in <a href="https://en.wikipedia.org/wiki/Radian">radians</a>. Thus we need to
account for the size of the sphere that we are calculating upon.</p>

<p>We can re-run
<a href="https://gist.github.com/anandaroop/a1b794559615b2bbdea097678321c93f">our test</a>
with this version of the query, and now we see that the results are finally in
line with what we were expecting:</p>

<figure class="illustration">
  <img src="/images/2023-02-10-mongo-geospatial-queries/4.png" alt="Screenshot of a visualization in Placemark showing the results of a $geoWithin $centerSphere query" />
  <figcaption>Results of a <code>$geoWithin $centerSphere</code> query around Los Angeles, evaluated against a grid of test points.</figcaption>
</figure>

<p>Having updated our API to use this variant of the query, we solved the problem
and returned our partner gallery to its rightful place in our listings, as shown
by the pink highlight above.</p>

<p>That was the happy ending we were looking for.</p>

<h2 id="a-postscript-on-map-distortion">A postscript on map distortion</h2>

<p>But if you’re curious to learn a little more about map distortion, let’s dig a
bit deeper into the nature of the problem that we were encountering.</p>

<p>Returning to <a href="https://www.placemark.io/">Placemark</a>’s ability to draw different
kinds of circles on the map, let’s now place a <em>geographic</em> circle on the map
rather than a geodesic one. This one is computed in the simplest possible map
projection — a geographic projection where we simply treat the longitude as the
X coordinate and the latitude as the Y coordinate. (This projection goes by many
names, such as “geographic”, “equirectangular”, “Plate Carrée” or even
<em>“unprojected”</em>, which is not quite accurate.)</p>

<p>This corresponds to what you get when you use MongoDB’s <code class="language-plaintext highlighter-rouge">$geoWithin</code> <code class="language-plaintext highlighter-rouge">$center</code>
query on geospatial data:</p>

<figure class="illustration">
  <img src="/images/2023-02-10-mongo-geospatial-queries/6.gif" alt="Animation showing the distortion a geographic circle encounters at various latitudes" />
  <figcaption>Animation showing the distortion a geographic circle encounters at various latitudes.</figcaption>
</figure>

<p>As you can see, we get: a moderately oblong egg at the latitude of Los Angeles;
a nice circle as we get close to the equator; and a very oblong egg as we
approach the poles.</p>

<p>If you are wondering why you should trust my claims about the egginess of <em>this</em>
two-dimensional image after I just said that all such maps are lies — good
question!</p>

<p>It just so happens that nearly all web-based interactive maps, including
Placemark, use a variation of the Mercator projection, the one you might
remember from schoolroom maps. Mercator is a so-called
“<a href="https://en.wikipedia.org/wiki/Conformal_map_projection">conformal</a>”
projection, meaning that <em>its</em> particular lie is to sacrifice area in favor of
shape.</p>

<p>A shape drawn on a globe will be correctly maintained in a Mercator map, but the
scale will vary across the map: true at the equator and very incorrect towards
the poles. This is the reason for the common complaint that
<a href="https://www.nature.com/nature-index/news-blog/data-visualisation-animated-map-mercater-projection-true-size-countries">Mercator maps show Greenland as about the same size as Africa</a>,
when in fact Africa is about 14 times larger.</p>

<p>The amount and nature of the distortion introduced by map projections is such an
important topic that cartographers have long relied on a clever technique for
communicating this distortion visually, known as
“<a href="https://en.wikipedia.org/wiki/Tissot%27s_indicatrix">Tissot’s indicatrix</a>.”</p>

<p>To give you a sense of the kind of distortion we encountered with the <code class="language-plaintext highlighter-rouge">$center</code>
query, here is what Tissot’s indicatrix looks like for the geographic
projection. This shows essentially the inverse of the animation above — what
does a true circle plotted on the globe look like at various locations on this
map projection?</p>

<figure class="illustration">
  <img src="/images/2023-02-10-mongo-geospatial-queries/7.png" alt="Tissot's indicatrix for equirectangular projection" />
  <figcaption>Tissot's indicatrix for equirectangular projection. Credit: Justin Kunimune, <a href="https://creativecommons.org/licenses/by-sa/4.0">CC BY-SA 4.0</a>, via Wikimedia Commons</figcaption>
</figure>

<p>Now, imagine the inverse operation of this ⤴︎, drawing <em>true</em> circles on this
planar space, in order to get a sense of how distorted your query results on a
globe would be.</p>

<p>Finally, here is Tissot’s indicatrix for the Mercator projection, demonstrating
its ability to preserve shapes at the expense of sizes.</p>

<figure class="illustration">
  <img src="/images/2023-02-10-mongo-geospatial-queries/8.png" alt="Tissot's indicatrix for Mercator projection" />
  <figcaption>Tissot's indicatrix for Mercator projection. Credit: Eric Gaba, <a href="http://creativecommons.org/licenses/by-sa/4.0/">CC BY-SA 4.0</a>, via Wikimedia Commons</figcaption>
</figure>

<p>An interesting recent development is that the web’s reliance on Mercator is
changing, but only very slowly.
<a href="https://www.theverge.com/2018/8/5/17653122/google-maps-update-mercator-projection-earth-isnt-flat">Google began to make this change</a>
a few years ago, and
<a href="https://www.mapbox.com/blog/adaptive-projections">Mapbox has written about their approach</a>
as well.</p>

<p>Hopefully this digression into the display of geospatial data has been
illuminating. There is much more to say on this topic, since geospatial is more
or less one asterisk after another. For example, we haven’t mentioned that the
Mercator projection above is incapable of depicting the north or south poles at
all! Nor have we touched on MongoDB’s various geospatial
<a href="https://www.mongodb.com/docs/manual/geospatial-queries/#geospatial-data">data formats</a>,
<a href="https://www.mongodb.com/docs/manual/geospatial-queries/#geospatial-indexes">indexes</a>,
or
<a href="https://www.mongodb.com/docs/manual/reference/operator/query/near/">the $near query</a>
and its spherical sibling
<a href="https://www.mongodb.com/docs/manual/reference/operator/query/nearSphere/">the $nearSphere query</a>,
all worthy topics.</p>

<p>But we hope that understanding this crucial distinction between planar
(<code class="language-plaintext highlighter-rouge">$center</code>) and spherical (<code class="language-plaintext highlighter-rouge">$centerSphere</code>) calculations will help you make the
right choice when devising your own radius queries with MongoDB or other
geospatial engines.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Diagnosing our Radiation Problems]]></title>
    <link href="https://artsy.github.io/blog/2019/11/14/diagnosing-our-radiation-problems/"/>
    <updated>2019-11-14T00:00:00+00:00</updated>
    <id>https://artsy.github.io/blog/2019/11/14/diagnosing-our-radiation-problems</id>
    <content type="html"><![CDATA[<p>Email! Electronic mail! What a concept! Like many companies, Artsy has built products on top of email, but this is
a decision that (like many companies) Artsy periodically regrets. But overall, our email systems work well!</p>

<p>But what about when it doesn’t? Well that’s what today’s blog post is about: what happens when things break and you
don’t know why?</p>

<!-- more -->

<p>I have learned a lot
<a href="https://artsy.github.io/blog/2018/05/30/my-first-week-on-call/">since my first on-call shift</a>, but going on call
still gives me a little stage fright. As I start a shift, I’m on the look-out for things that might break, and soon
after starting a recent on-call shift, “breaking” is exactly what things did.</p>

<p><img src="/images/2019-11-07-diagnosing-our-radiation-problems/alert.png" alt="Screenshot of Slack alert" /></p>

<p>We got an automated alert on Slack that one of our email services, code-named “Radiation”, had really high response
times. We <em>then</em> received an alert that too many requests to Radiation were failing completely. Yikes. The next
twenty two hours was a deep dive into Heroku, New Relic, Rails, and PostgreSQL, all to isolate the problem and
produce a solution.</p>

<p>The nice thing about email, as a protocol, is that it’s based on a store-and-forward concept. That means that if a
message delivery fails, email servers will try again later (typically with an exponential backoff). SendGrid, our
email processor, has built their REST API around this same store-and-forward concept. While the Radiation server
was unresponsive, SendGrid wouldn’t receive successful HTTP responses from the webhook deliveries, so it would
attempt to re-deliver the failing emails later. Email deliveries would be delayed, but the emails themselves would
not be dropped. We wasted no time addressing the problem, but we were also confident that once we fixed the issue,
the data would be okay.</p>

<p>After the alert, Ashkan (Radiation’s point-person) and I communicated with our colleagues (engineers and affected
non-engineers) about the problem. With the help of Chung-Yi, we began investigating the immediate problem (with a
focus on <em>mitigating</em> it, rather than necessarily <em>fixing</em> it). Oh, we tried it all: spinning up more Heroku Dynos
to handle requests, increasing concurrency on the individual Dynos, restarting Redis and PostgreSQL stores. Each
time, things would work briefly before the Radiation API would begin timing out again. More accurately, the
requests sent to Radiation were taking longer than the Heroku router was giving them (30 seconds) before the router
gave up and timed out the request. We started examining the Radiation code and database (keeping our <em>ion the
prize</em>: mitigation).</p>

<p>Ashkan investigated slow database queries. We added new PostgreSQL indexes to speed up queries, and restructured
others to avoid expensive joins. Unfortunately, all this accomplished was extending the time after a Dyno reboot
that things would work (before beginning to timeout again). Because
<a href="https://artsy.github.io/blog/2017/05/30/database-encryption/">Artsy stores emails as encrypted-at-rest</a>, it was
difficult to pinpoint which exact message could be causing the timeouts. And Radiation itself didn’t have much in
the way of logging, which would normally help us debug the problem.</p>

<p>It was frustrating to try to fix something but only manage to improve how long it took to break again. We had
enhanced Radiation’s performance to the point where it was taking 10 minutes after a Dyno reboot to begin timing
out again, up from 30 seconds at the beginning of the incident. Despite an afternoon and evening spent trying to
fix the problem, we were stuck. We decided that the best course of action was a good night’s sleep; we would ask
for help in the morning.</p>

<p>The next day, Ashkan and I got <em>up and atom</em> to address the problem. We brought my on-call partner Devon up to
speed, detailing the incident symptoms and what we had tried so far. While Devon and Ashkan worked on additional
logging and new timeout strategies, I took another approach.</p>

<p>Artsy has been moving to <a href="https://www.datadoghq.com">DataDog</a> for server performance monitoring, but Radiation was
still using <a href="https://newrelic.com">New Relic</a>. My background is in iOS app development and I had never really dug
into New Relic before, but I <em>am</em> very experienced at profiling iOS applications, and the Ruby and Objective-C
runtimes have more in common than they have have differences. I used New Relic to profile a production Radiation
Dyno for five minutes and, to our collective surprise, we found that more than 90% of CPU time was being spent in
<a href="https://github.com/thoughtbot/griddler/blob/ff2ad16949bf5190f93df1a3e83eb0192f136c6d/app/controllers/griddler/emails_controller.rb#L4-L10">an innocuous function of a dependency</a>,
the open source library <a href="https://github.com/thoughtbot/griddler">Griddler</a>.</p>

<p>Artsy uses Griddler to parse and sanitize emails that we receive from <a href="https://sendgrid.com">SendGrid</a>. Griddler
contained the problematic code, which was responsible for parsing email responses from threaded replies. So if an
email body received by Radiation looks like this:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>This is the most recent reply in this email conversation.

On September 28th, 2019, Someone Else Wrote:

[The rest of the email thread]
</code></pre></div></div>

<p>Then Griddler parses out the string “This is the most recent reply in this email conversation.” for Radiation to
process. This is really important because some of the threads in Radiation are <em>thousands</em> of emails long. In fact,
I learned that Radiation has Artsy’s largest production database.</p>

<p>Griddler does this processing via regular expressions. Ashkan had the insight to look for existing issues from
other Griddler users who ran into similar problems, and to our delight,
<a href="https://github.com/thoughtbot/griddler/pull/310">we found a pull request</a> that appeared to address the <em>exact</em>
issue that we were having.</p>

<p>It turns out that emails with large amounts of repeated newline characters would totally stall Griddler’s regex.
Heroku’s router would timeout any request after 30 seconds, but would leave the Ruby code churning on that regex.
That would leave the Rails server unable to respond to subsequent HTTP requests, causing more timeouts. And because
of email’s store-and-forward nature, SendGrid would begin sending more problematic emails pretty quickly after any
Radiation reboot. A small change to add a regex group was all that was necessary to fix the issue.</p>

<p>Phew! We forked Griddler to Artsy’s GitHub organization and applied the change from the pull request. We were
concerned about security implications of using a different regex, but my
<a href="https://artsy.github.io/blog/2018/02/06/apogee-technical-retrospective/">previous work in regular expressions</a>
helped me vet the change. We pointed Radiation’s Gemfile to Artsy’s fork and deployed the change.</p>

<p><img src="/images/2019-11-07-diagnosing-our-radiation-problems/heroku.png" alt="Screenshot of Heroku Dashboard, indicating a drop in load" /></p>

<p>Then, we waited. Would the system start timing out again? It took a half hour for any of us to breathe a sigh of
relief. But things appeared to be stable: response times were normal and Dyno load dropped precipitously. Our
<em>Curie</em> worked. (Okay, enough radiation puns.)</p>

<p>During our weekly incident review, Devon guided the rest of our team through our incident response and what we
learned. Radiation is now in a much better state, so that future problems will be easier to track down. We
responded to the Griddler pull request, encouraging the maintainers to merge the commit so other teams would avoid
this problem. The incident review meeting explored a number of options to mitigate future issues, including
migrating Radiation to our Kubernetes cluster, and Sam (our VP of Engineering) suggested writing this post. So here
we are.</p>

<p>Ashkan also followed up with peer feedback for Devon, Chung-Yi, and myself. In part, it read:</p>

<blockquote>
  <p>It’s rare and odd to say dealing with incident was fun, but with your help it actually was productive and fun.</p>
</blockquote>

<p>Which, honestly? One of my proudest accomplishments at Artsy.</p>

<p>In the end, we solved the problem and restored access to our email systems in under 24 hours. We kept our cool, we
communicated effectively with our non-engineering colleagues, and we learned a lot. What more could you want from a
Radiation incident?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How Artsy Hires Engineers]]></title>
    <link href="https://artsy.github.io/blog/2019/01/23/artsy-engineering-hiring/"/>
    <updated>2019-01-23T00:00:00+00:00</updated>
    <id>https://artsy.github.io/blog/2019/01/23/artsy-engineering-hiring</id>
    <content type="html"><![CDATA[<p>Interviewing is hard. Interviewers want to make sure they’re hiring the person who will add the most value to their
team; candidates want to make sure they’re joining a company that aligns with their goals and perspectives.</p>

<p>Recent trends in hiring are white-boarding sessions, trivia questions, and hours of take-home assignments. At
Artsy, we don’t use any of these. We often get asked why not - and how we assess technical skill without them.</p>

<!-- more -->

<p>We think our interview process at Artsy is unique, but we also think our interview process is great. We’d love to
see the tech community examine its hiring practices, and hopefully to adopt some of what’s made our hiring process
successful. Focusing on knowledge and facts that are already acquired is one way to approach hiring; we prefer to
look at how a person can fill a gap in our team and help us grow.</p>

<aside class="dialogue">
  <div class="question">
    <h3>What surprised you about the hiring process at Artsy while you were a candidate?</h3>
  </div>
  <div class="answer">
    <img src="/images/dialogue/ash.jpg" />
    <p class="intro">Ash Furrow says...</p>
    <p>What most surprised me at the time was <em>who</em> was interviewing me. I had a teleconference screening with Artsy's now-CTO before moving on to in-person interviews. Since I was living in Amsterdam at the time, Artsy flew me to its nascent London office to meet two interviewers: a data engineer and a member of (what was then) the Arts team.</p>
    <p>I was surprised, but encouraged, to be speaking with someone who wasn't an engineer. They asked me questions to find out what motivated me, to evaluate how well those motivations would help Artsy achieve its mission. It was a natural fit!</p>
  </div>
  <div class="answer">
    <img src="/images/dialogue/lily.jpg" />
    <p class="intro">Lily Pace says...</p>
    <p>Everything. I was pleasantly surprised by how different the interview process at Artsy was from my previous experiences, which felt more like standardized tests than conversations. The underlying presumption with "traditional" tech hiring practices is that candidates are somehow trying to trick their way into positions they aren’t qualified for. It's no wonder that impostor syndrome is so prevalent in underrepresented groups when the interview process is set up like an interrogation.</p>
    <p>I felt like the interviewers at Artsy had read my resume and cv and taken it at face value, so the interview was spent diving deeper into my skill-set and personality and determining compatibility, instead of trying to identify gaps in my knowledge.</p>
  </div>
  <div class="answer">
    <img src="/images/dialogue/steve.jpg" />
    <p class="intro">Steve Hicks says...</p>
    <p>With 20 years (!!!) of experience as a software engineer, I've seen my share of interviews - from both sides. On the hiring side, I've said for years that technical interviews are unnecessary. If I can get a 30 minute conversation with a candidate, I feel like I can learn enough about them to know if they can do the job from a technical perspective. It's much less about knowing trivia or syntax, and much more about having the personality to solve problems.</p>
    <p>I'd never experienced that on the candidate side, though. When I did, I definitely felt like Artsy had forgotten part of the interview. Where was the whiteboard? The homework? People looking over my shoulder while I coded an anagram-checker? A technical challenge has been a part of every interview I've done as a candidate - until Artsy.</p>
  </div>
</aside>

<p>Artsy’s process of hiring new engineers was created and is maintained <em>by</em> our current engineers. It has evolved
over time as we learn new lessons and new perspectives join our team. Our process has always been driven by a
top-down culture of respect for candidates, which aligns with
<a href="https://github.com/artsy/README/blob/master/culture/what-is-artsy.md#artsy-values">our company values</a>. Our team
currently has 36 engineers, and we refreshed our hiring practices last year to support our team’s growth; we hired
a dozen engineers in 2018. We don’t use recruiters (though we did to hire our recent VP of Engineering).</p>

<p>Our former Director of Web Engineering has a blog post where he
<a href="https://www.zamiang.com/post/learning-from-artsy-how-to-hire-awesome-engineers">describes Artsy’s hiring process</a>.
Though some specifics have since changed, the foundations remain the same.</p>

<blockquote>
  <p>If Artsy has a secret sauce, it is how it hires. All else falls from the assumption that they have hired the best
people who want to work together to achieve Artsy’s mission.</p>
</blockquote>

<p>Our hiring process starts with an informational, where candidates are met for a coffee or over a teleconference
call. We have <a href="https://github.com/artsy/README/blob/master/playbooks/informationals.md">public documentation</a> so
candidates can know what to expect. We do a lot of these and move candidates who we think would succeed at Artsy on
to in-person interviews. The interviews last 3 hours and are split across four 45-minute
<a href="https://www.livecareer.com/career/advice/interview/behavioral-interviewing">behavioral interviews</a>, conducted by
engineers and other colleagues, ranging from gallery liaisons to product managers to editorial writers. Artsy
generally, and Engineering specifically, have both significantly invested in helping interviewers be effective and
consistent; this includes documentation, question banks, and <a href="https://managingbias.fb.com">unconscious bias</a>
training.</p>

<p>Each interviewer is given key areas to focus on, based on the candidate’s background. We have documentation
specifying how to evaluate each of these areas, including example questions. These areas include, but aren’t
limited to:</p>

<ul>
  <li>Comprehension of Artsy</li>
  <li>Artsy company values alignment</li>
  <li>Ability to communicate complex ideas</li>
  <li>Learning and adaptation</li>
  <li>Self-learning and drive</li>
  <li>Independence and teamwork</li>
  <li>Systems development</li>
  <li>Product knowledge</li>
</ul>

<p>After the interview, feedback is written up as quickly as possible. To limit bias, interviewers can’t see each
other’s feedback until after they write up their own. The write-up includes a recommendation: do you think we
should move on to reference checks? Answers are either “strong yes”, “yes”, “no”, or “strong no”; after everyone
has completed their write-ups, the interviewers debrief and reflect on how to do a better job next time. Their
feedback is used by the hiring manager to decide whether to move on to reference checks.</p>

<p>Quoting again from our former Director of Web’s blog post:</p>

<blockquote>
  <p>Artsy believes that ‘references are not a defense against hiring poorly, they are a way to hire great people’.</p>
</blockquote>

<p>Artsy’s reference checks are in-depth and deserve their own blog post; they are <em>key</em> to our hiring process. We
know that job interviewers only evaluate how good someone is at interviewing, so we put a larger emphasis than most
companies on references. The most accurate predictor of future job performance is past job performance, not how
well someone can perform in an interview.</p>

<p>If we decide to hire the candidate, we make them a job offer. Artsy offers what we think is a fair wage based on
the local market and the candidate; we do not low-ball candidates and we don’t negotiate on compensation.</p>

<h2 id="whats-wrong-with-typical-hiring-practices">What’s wrong with typical hiring practices?</h2>

<p>There are many tactics for assessing a candidate’s technical abilities, but we’ve found that many are unfair to the
candidate. Some strategies put unnecessary pressure on the candidate. Some select against qualified candidates who
have competing responsibilities outside work. Some unwittingly weed out underrepresented applicants, even at a time
when companies are trying to diversify their teams.</p>

<h3 id="in-person-coding-challenges">In-person coding challenges</h3>

<p>The intention of in-person coding challenges is to verify that the engineer can “actually write code.” This
strategy puts excessive pressure on the candidate to perform in front of an audience. This is usually not a good
reflection of what the candidate would be doing if they were hired. Sometimes it <strong>is</strong> a reflection of the
stressful conditions on the team, and the act of applying pressure to the candidate is intentional, to measure
their ability to handle it. In either case, we don’t feel like this is how we want to measure engineers; it just
doesn’t reflect reality.</p>

<h3 id="whiteboard-interviews">Whiteboard interviews</h3>

<p>One intention of whiteboard interviews is to reduce the stress on the candidate, because they don’t have to worry
about code syntax while under a microscope. These types of interviews still lead to
<a href="https://code.dblock.org/2012/12/08/five-ways-to-torture-candidates-in-a-technical-interview.html">stressful conditions</a>,
though, and they don’t provide a good measure of what makes a great teammate or even a great developer. Again,
sometimes the pressure is intentional, to see how the candidate reacts.</p>

<p>It can be very difficult to find a problem that is succinct enough for a whiteboard exercise but still reflective
of the work the candidate will actually be doing on the job. The ability to write an algorithm to search a binary
tree might be reflective of whether a candidate has a traditional Computer Science degree, but doesn’t necessarily
speak to their ability to build complex interfaces or streamline performance. More importantly, whether or not they
can write a binary search tree from scratch on a whiteboard doesn’t even necessarily speak to their ability to
<em>use</em> search trees in day-to-day work. Questions like this can eliminate excellent developers who took a
non-traditional approach to their knowledge building but are still highly capable.</p>

<h3 id="sample-code">Sample code</h3>

<p>Sometimes a company will request a code sample from candidates - after all, what shows off their ability to code
better than their actual code? The downfall of this strategy is that it eliminates developers who don’t have code
they can share. Many great engineers work for closed-source companies; many great engineers have family
responsibilities that prevent them from contributing to open-source at night.</p>

<p>It is also important to consider the insularity and biases that exist in the open source community that can make
contributing more difficult for developers from underrepresented groups. A study published in the PeerJ Computer
Science journal found that women’s contributions to open source projects were accepted more frequently than men’s
contributions when the gender of the contributor was unknown. However, when the gender of the contributor was
apparent, men’s contributions were
<a href="https://code.likeagirl.io/gender-bias-in-open-source-d1deda7dec28">accepted more frequently than women’s</a>.</p>

<h3 id="take-home-challenges">Take-home challenges</h3>

<p>The most recent trend in hiring is the take-home exercise. The goal is honorable - have the candidate produce code
on their own time, so they aren’t overwhelmed with the pressure of an audience. We’ve found that requiring this
early in the process is unfair, and including it later in the process is uninformative; by the time a take-home
challenge would be appropriate, we have already evaluated the candidate’s technical skills to our satisfaction
(more on that later).</p>

<p>This strategy also assumes the candidate has time to work on homework. Many single parents do not for example, nor
do engineers who care for family members. There can also be misalignment on the expected time to complete a
take-home challenge. While the exercise might take a current engineer at the company 2 hours to complete, that
doesn’t consider several factors: (1) a candidate might not be familiar with all technologies requested, and can
easily lose time to research and learning; (2) the candidate wants to look good, so they’re likely to work longer
than you expect; and (3) the candidate might be interviewing for several companies at once, and have multiple
competing assignments to work on.</p>

<p>Many companies use take-home challenges early in the hiring process to shift the burden of evaluation from the
company on to the candidates themselves. This unfairly excludes lots of potentially amazing colleagues.</p>

<aside class="dialogue">
  <div class="question">
    <h3>Why do you think these kinds of bad hiring practices are so common in the tech industry? And what sets hiring practices in tech apart from hiring in other industries?</h3>
  </div>
    <div class="answer">
    <img src="/images/dialogue/steve.jpg" />
    <p class="intro">Steve Hicks says...</p>
    <p>We are very logical people in the tech industry. We want to create algorithms or heuristics for everything, including hiring. Using a yardstick like "Fizz Buzz" or trivia questions allows us to easily narrow down the candidate pool. It's a simple, intentional form of gate-keeping. The hiring algorithm is much easier to write when it's "Oh, you don't know what a closure is? Sorry, we're not interested." It's much harder to write a hiring algorithm that respects nuance: "well...it depends. Maybe you have different experiences than I do. It'll take some digging to find out if our experiences will complement each other."</p>
  </div>
  <div class="answer">
    <img src="/images/dialogue/lily.jpg" />
    <p class="intro">Lily Pace says...</p>
    <p>I think the tech industry has an elitism problem, and this is reflected in the way candidates are evaluated. There’s a general feeling in some parts of the industry that what we do is different and somehow elevated from other professions, that engineering is a skill that only a select few are capable of, not something that anyone can learn with the right training and enthusiasm. Making candidates go through a gauntlet of challenges during the interview process reinforces this idea.</p>
  </div>
  <div class="answer">
    <img src="/images/dialogue/ash.jpg" />
    <p class="intro">Ash Furrow says...</p>
    <p>I think when looking at the current state of the computer programming industry, and its hiring practices, we need to pay special attention to its history. The original computer programmers of the twentieth century were women, but they were <a href="https://www.theguardian.com/careers/2017/aug/10/how-the-tech-industry-wrote-women-out-of-history">systematically pushed out of the industry</a>. One way they were pushed out was through discriminatory hiring practices, especially interview questions and techniques specifically designed to exclude non-white, non-male applicants. Sadly, these hiring practices persist, even if their original motivations have been obscured by time.</p>
  </div>
</aside>

<h2 id="what-we-do-instead">What we do instead</h2>

<p>In addition to the above strategies not being fair, we’ve found that they measure things that are secondary to what
we’re looking for.</p>

<p>Artsy is more complicated than FizzBuzz. Too complicated for any one engineer to build, in fact. Individual
engineers working alone can’t build the software Artsy needs to succeed – they must work together. So the skills we
evaluate for are things like empathy, communication, and kindness. Not that technical skills aren’t important, but
the ability to communicate and learn is more important.</p>

<p>Engineers who excel at empathy, communication, and kindness can pick up the technical stuff once they’re hired;
personal and interpersonal skills are harder to teach. Adding a colleague to the team who lacks these skills could
harm the culture we’ve built.</p>

<p>When you interview with Artsy as an engineer, you won’t just meet other engineers and a manager. You’ll meet with
people from other departments too. If you’re hired as an Artsy engineer, you’re going to work with folks from all
across the company - we want to make sure you can communicate with them because that’s something we do every day.</p>

<aside class="dialogue">
  <div class="question">
    <h3>How has this impacted your day-to-day work at Artsy so far?</h3>
  </div>
  <div class="answer">
    <img src="/images/dialogue/lily.jpg" />
    <p class="intro">Lily Pace says...</p>
    <p>I had a negative experience in the past with a coworker who lacked empathy and boundaries and made me feel unwelcome and othered as the only woman on the team and someone from a non-traditional background. It made me afraid to ask for help and stifled my progress. This experience made me hesitant to open up to new coworkers, especially when I needed assistance. Because Artsy evaluates candidates based on empathy, communication, and kindness, I arrived with a <a href="https://medium.com/artsy-blog/what-it-feels-like-to-work-in-a-supportive-environment-for-female-engineers-3c994a001007">level of trust in my new coworkers</a> that usually takes weeks or months to develop. </p>
  </div>
  <div class="answer">
    <img src="/images/dialogue/steve.jpg" />
    <p class="intro">Steve Hicks says...</p>
    <p>In most of my previous jobs, it's taken me a while to learn who I can be vulnerable around and who I can't. At Artsy I have quickly learned that I don't need to worry about it. I feel an incredible sense of psychological safety with the Artsy team. I can be vocal about not understanding something, and I can ask for help without feeling like a burden or fool.</p>
  </div>
  <div class="answer">
    <img src="/images/dialogue/ash.jpg" />
    <p class="intro">Ash Furrow says...</p>
    <p>I'm a sensitive person. I don't like pointless or inflammatory conflict – I find it distracting and counterproductive. However, I can relax and let my guard down at Artsy. My sensitivity to how others are feeling is a part of my contributions to the team, and I'm able to fold the emotional wellbeing that <strong>I</strong> get from everyone back into our team: a sort of constantly-accelerating feedback loop of good feelings.</p>
  </div>
</aside>

<h2 id="but-we-still-evaluate-technical-aptitude">But we still evaluate technical aptitude</h2>

<p>Technical aptitude is less important to us than interpersonal skills, but it is still important. Note that we said
“aptitude,” not “skills”: we don’t expect our engineers to already know everything about the tech stack we’re
using. Instead, we expect them to have a strong ability to learn our stack and use it effectively once they have.
(This is touched on in our docs on
<a href="https://github.com/artsy/README/blob/master/careers/juniors.md">what we look for in junior engineers</a>.)</p>

<p>So if we skip all the usual tactics for evaluating technical aptitude, how do we do it? <strong>By talking to people</strong>.</p>

<p>We learn a lot about candidates in their interviews. We’ll have a conversation with them about technology. Instead
of white-boarding, we ask them to describe what they like about their favorite library, or what they wish they
could change. We ask them to describe some legacy code they’ve worked with, and ask them how they think it got that
way. We’re looking for a mix of technical skills as well as empathy and an ability to communicate nuanced ideas.</p>

<h2 id="references-are-important-to-us">References are important to us</h2>

<p>We also learn a lot through reference checks. Our reference checks aren’t simply validation of your employment
history - they are a 30 minute-long conversation with each of your three references that go into detail about your
work history and career growth. It’s quite an in-depth conversation, with questions structured to dig into
specifics about the candidate’s behavior.</p>

<p>An Artsy reference call might include the following structured questions:</p>

<blockquote>
  <p>In your capacity as [relationship to the candidate], how many people have you worked with in the candidate’s
role?</p>
</blockquote>

<blockquote>
  <p>Okay, in <em>just</em> terms of job performance, how you rank the candidate out of that [X] many people?</p>
</blockquote>

<blockquote>
  <p>Okay, finally, what’s the difference between [the candidate’s rank] and number one? How would the candidate need
to grow to get to number one?</p>
</blockquote>

<p>The first question establishes the context for the reference. The second question primes the reference to use that
context when answering the next question. The third question is what we’re <em>actually</em> interested in. These aren’t
easy or comfortable questions, but they give us an insight into the candidate’s career, history, and areas to grow.</p>

<p>Fully half of our decision to make an offer or not is based on our reference checks. Artsy Engineering candidates
go through the same reference check process as anyone applying for a job at Artsy, with Engineers sitting in on the
call with Artsy’s hiring staff.</p>

<h3 id="but-seriously-we-really-care-about-the-personal-side">But seriously, we really care about the personal side</h3>

<p>We also make sure every interview ends amicably. No candidate should feel bad after interviewing with Artsy, even
if we don’t give them an offer. This seems self-evident to us, given our values, but it makes a lot of business
sense to maintain our reputation as an engineering team.</p>

<h2 id="our-hiring-practice-philosophy">Our hiring practice philosophy</h2>

<p>One of our core values at Artsy is that
<a href="https://github.com/artsy/README/blob/master/culture/what-is-artsy.md#people-are-paramount">People Are Paramount</a>.
We like to think that our interview process was built to reflect this.</p>

<p>We see the interview process as an opportunity to build a relationship with a candidate. We talk to them to find
out if they’re a good fit for Artsy, and we help them decide if Artsy is a good fit for them. Our hiring process
focuses more on human skills than most processes do. It’s not perfect, but it has served us well.</p>

<aside class="dialogue">
  <div class="question">
    <h3>Where do you still think Artsy has to grow, in terms of how it hires engineers?</h3>
  </div>
  <div class="answer">
    <img src="/images/dialogue/lily.jpg" />
    <p class="intro">Lily Pace says...</p>
    <p>I think Artsy is really unique and innovative in how it evaluates candidates and I think the more we can express this in our job postings the better. Stressing alignment with our values and an ability to learn and posting fewer hard requirements are some simple ways to convey to potential applicants that we evaluate differently.</p>
  </div>
  <div class="answer">
    <img src="/images/dialogue/ash.jpg" />
    <p class="intro">Ash Furrow says...</p>
    <p>I think one area we've historically struggled with, and still do, is sourcing candidates from a wide range of backgrounds. Artsy Engineering's hiring pool still draws heavily from the professional networks of existing Artsy staff; while this has a lot of benefits, it also has the potential to exclude groups who aren't already represented on our team.</p>
  </div>
  <div class="answer">
    <img src="/images/dialogue/steve.jpg" />
    <p class="intro">Steve Hicks says...</p>
    <p>I agree with Ash. I think all companies hire based on their employees' networks, because that's the easiest way to find people. <a href="https://twitter.com/seldo/">Laurie Voss</a> talked about this recently on <a href="https://reactpodcast.simplecast.fm/33">the React Podcast</a>. He pointed out that diversity at NPM has been better than average since the company started; and that the ratios of diversity have been consistent from the beginning, as a result of hiring from their own networks. I'd love to see Artsy hire beyond our networks (and as a result expand our networks).</p>
  </div>
</aside>

<p>Our hiring process will never be “finished” because we’re always improving on it. Some recent improvements are
inward-facing to help <em>us</em> get better, like:</p>

<ul>
  <li>Starting a #dev-ersity Slack channel for talking about how to diversify our team and the industry at large.</li>
  <li>Integrating hiring updates into our weekly standup.</li>
  <li>Creating a Slack bot for engineers to monitor our hiring pipeline.</li>
  <li>Periodically rotating hiring managers to spread institutional knowledge and get new perspectives.</li>
  <li>Many, many docs written on guiding the process.</li>
</ul>

<p>Artsy engineers, guided by our company values, created the hiring process for new engineers. Combined with an
iterative process and a desire to constantly improve, we’ve created a hiring process that is fair, effective, and
respectful. This kind of engineering-led approach is gaining popularity; for example, Microsoft recently
<a href="https://blog.usejournal.com/rethinking-how-we-interview-in-microsofts-developer-division-8f404cfd075a">revamped its hiring process</a>
with this approach.</p>

<p>We hope this catches on.</p>

<p>So what can <em>you</em> do? A great first step is to send this post to your HR rep. Another great step is to open source
your hiring documentation; you’d be surprised how motivating this can be, and it’s a great opportunity to get
feedback from other companies. Leave a comment below, let’s brainstorm on other ways to improve the state of hiring
in software engineering!</p>

<p>And remember: while <em>you</em> might be motivated based on what feels “right”, businesses are motivated by bottom lines.
Fortunately for us, the evidence is on our side: this is a better way to hire, for everyone.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Keeping Artsy's dependencies up to date]]></title>
    <link href="https://artsy.github.io/blog/2018/11/26/keeping-dependencies-updated/"/>
    <updated>2018-11-26T00:00:00+00:00</updated>
    <id>https://artsy.github.io/blog/2018/11/26/keeping-dependencies-updated</id>
    <content type="html"><![CDATA[<p>Hey everyone! I’m Justin, a senior engineer here at Artsy. I’ve been here for about 6 months and I’m a bit overdue
on my first blog post. This will be one of a series of posts I’m dubbing <em>roads and bridges</em> (<a href="https://www.fordfoundation.org/about/library/reports-and-studies/roads-and-bridges-the-unseen-labor-behind-our-digital-infrastructure/">thanks Orta</a>)
describing infrastructure and tooling work here at Artsy.</p>

<h3 id="backstory">Backstory</h3>

<p>Here at Artsy we have a lot of internal dependencies. Keeping these dependencies up to date across all of our
projects can be a bit of a headache. For example, there’s <a href="https://github.com/artsy/palette">Palette</a> (our <a href="https://www.uxpin.com/studio/blog/design-systems-vs-pattern-libraries-vs-style-guides-whats-difference/">design system</a>)
which is consumed by <a href="https://github.com/artsy/reaction">Reaction</a> (our react component/app library), <a href="https://github.com/artsy/emission">Emission</a> (our React Native
application), <a href="https://github.com/artsy/force">Force</a> (our main site), and <a href="https://github.com/artsy/positron">Positron</a> (our editorial creation tool). That’s not
even an exhaustive list. As you can imagine, after making an update to <a href="https://github.com/artsy/palette">Palette</a> we have to make a lot of
Pull Requests to get everything synced up across our many projects. And that’s just <em>one</em> dependency.</p>

<!-- more -->

<h3 id="evaluating-the-problem">Evaluating the problem</h3>

<p>There are a few services out there that connect to GitHub and helps you keep your dependencies up to date. I’d
personally used <a href="https://greenkeeper.io/">Greenkeeper</a> in the past and it seemed to work fairly well for my uses. I’d also
heard about <a href="https://renovatebot.com/">Renovate</a> which is another option that actually supports more package managers than just
yarn/npm. Great! Plenty to evaluate here. Anytime I’m evaluating a new service there are a few questions I ask
myself upfront to help a good decision:</p>

<ol>
  <li>What are my exact needs</li>
  <li>Can this solution scale to meet future needs</li>
</ol>

<p>The first point is straight-forward, but there’s a little twist. We have a <em>lot</em> of dependencies. If we got PRs for
all of them we’d be pretty much unable to do anything. In this case we wanted to specifically limit it to packages
that are published by Artsy (on the <code class="language-plaintext highlighter-rouge">@artsy</code> npm namespace).</p>

<p>The second you have to be a bit careful with. Don’t try to project too far or you’ll end up choosing a solution far
too complex for your current needs. In this case, I wanted something that we could selectively extend in the future
to cover other dependencies. Things like <code class="language-plaintext highlighter-rouge">react</code> and <code class="language-plaintext highlighter-rouge">react-dom</code> or <code class="language-plaintext highlighter-rouge">typescript</code>. Incremental increases without a
ton of noise.</p>

<h3 id="picking-a-solution">Picking a solution</h3>

<p>First things first… we have to have a solution that can update only Artsy’s dependencies. I started digging
through <a href="https://greenkeeper.io/">Greenkeeper</a>’s docs and found a reference to an <a href="https://greenkeeper.io/docs.html#ignoring-dependencies">ignore</a> option.
Essentially any package that you don’t want <a href="https://greenkeeper.io/">GreenKeeper</a> to automatically update you can put in this
ignore list. That’s not really doable in our usecase because we want to ignore everything but a small subset of
packages.</p>

<p>Checking out <a href="https://renovatebot.com/">Renovate</a>’s docs I found a more promising option:
<a href="https://renovatebot.com/docs/configuration-options/#excludepackagepatterns">excludePackagePatterns</a>. All I really want to do is include Artsy packages, but this sounded
like I could do the inverse by excluding all non-Artsy packages. Being as it had that option, supported more
package managers, and had a more friendly pricing scheme than <a href="https://greenkeeper.io/">Greenkeeper</a> I decided to give
<a href="https://renovatebot.com/">Renovate</a> a shot.</p>

<h3 id="making-it-happen">Making it happen</h3>

<p>I began by enabling <a href="https://renovatebot.com/">Renovate</a> on <a href="https://github.com/artsy/force">Force</a>. You can see the PR <a href="https://github.com/artsy/force/pull/3086">here</a>.
<a href="https://renovatebot.com/">Renovate</a> has a <em>really</em> excellent on-boarding experience. It first creates a PR that adds its own
configuration. It shows you what packages will be updated based on that configuration. As you update the config,
Renovate will update the PR body to show you the results of your changes. This gives you the opportunity to update
the configuration before it officially activates. If you click the edited dropdown on the PR body you’ll see all
the changes Renovate made to the issue while I was trying to figure out the configuration.</p>

<p><img src="/images/2018-11-26-keeping-dependencies-updated/issue-history.png" alt="GitHub PR edit history" /></p>

<p>It took me a while to figure everything out, just take a look at the <a href="https://github.com/artsy/force/pull/3086/commits">commit history</a>. I’m going to
work through the final setup just to give you an idea of our setup.</p>

<p>First, I extended <a href="https://renovatebot.com/">Renovate</a>’s base config.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>{
  "extends": [
    "config:base"
  ],
  ...
}
</code></pre></div></div>

<p>If you’ve worked with <a href="https://eslint.org">eslint</a>, <a href="https://babeljs.io/docs/en/options#extends">babel</a>, or other tools in the js ecosystem, you’ve probably
seen this type of configuration extension. It essentially allows us to use their best practices out of the box.
Check out their <a href="https://github.com/renovatebot/presets/blob/ef6a6e2e6d3e6ba25239d57d808b0e4dc64f32a3/packages/renovate-config-config/package.json#L19-L34">presets repo</a> if you want to know what it adds specifically.</p>

<p>Next, I set the <a href="https://help.github.com/articles/assigning-issues-and-pull-requests-to-other-github-users/">assignees</a>. When <a href="https://renovatebot.com/">Renovate</a> opens a new PR, it’ll assign it to these people
so that the PR doesn’t get missed.</p>

<p>The actual meat of the change is the <code class="language-plaintext highlighter-rouge">packageRules</code> setup.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>{
  ...
  "packageRules": [{
    "packagePatterns": ["*"],
    "excludePackagePatterns": ["^@artsy"],
    "enabled": false
  }],
  ...
}
</code></pre></div></div>

<p><a href="https://renovatebot.com/">Renovate</a> allows you to set up multiple different <code class="language-plaintext highlighter-rouge">packageRules</code> and there’s a lot of configuration for
them. I’m not going to go through more than I did, but feel free to read more in their
<a href="https://renovatebot.com/docs/configuration-options/#packagerules">docs</a>. In the <code class="language-plaintext highlighter-rouge">packageRule</code> that I setup, I specified <code class="language-plaintext highlighter-rouge">packagePatterns</code> with an
asterisk to select all dependencies. Then using <code class="language-plaintext highlighter-rouge">excludePackagePatteners</code> I excluded anything that started with
<code class="language-plaintext highlighter-rouge">@artsy</code>. Finally (and most importantly), I set <code class="language-plaintext highlighter-rouge">enabled</code> to <code class="language-plaintext highlighter-rouge">false</code> to disable the dependencies matching those
combinations of rules. That last part took me a while to figure out. When you’re building package rules in
<a href="https://renovatebot.com/">Renovate</a>, think of it as building out a list of operations to perform.</p>

<p>The last few pieces of config are a little more straight-forward and you can read about those in the docs. The one
thing that I’ll mention is that <a href="https://renovatebot.com/docs/configuration-options/#vulnerabilityalerts">vulnerabilityAlerts</a> <em>ignores</em> <code class="language-plaintext highlighter-rouge">packageRules</code> and
triggers update PRs for anything that’s reported to have a vulnerability. You’ll have to explicitly disable it if
you only want reports on certain packages. Though, having it on probably isn’t a bad idea…</p>

<h3 id="wrapping-up">Wrapping up</h3>

<p>So, that’s how we configured <a href="https://renovatebot.com/">Renovate</a> to automatically update npm dependencies in Artsy’s namespace.
It’s been extremely useful already. I also went ahead and pulled our configuration out into a <a href="https://github.com/artsy/renovate-config">shared
repo</a> so that we didn’t have to copy these configurations across all of our projects. That’s
a blog post for another day.</p>

<p>Be well friends.</p>

<!-- prettier-ignore -->

<!-- prettier-ignore -->

<!-- prettier-ignore -->
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A History of Artsy's Web Frontend]]></title>
    <link href="https://artsy.github.io/blog/2018/10/04/artsy-frontend-history/"/>
    <updated>2018-10-04T00:00:00+00:00</updated>
    <id>https://artsy.github.io/blog/2018/10/04/artsy-frontend-history</id>
    <content type="html"><![CDATA[<p>As Artsy Engineering grows in 2018, we have so many newcomers looking for context: they want to understand the
systems they’ll be working in day-to-day. Awesome! But it’s not enough to understand the systems themselves, it’s
often helpful to understand the <em>history</em> of how we ended up where we are.</p>

<p>Frontend web development has changed a <em>lot</em> during Artsy’s existence, and it continues to advance at a blistering
pace. It’s easy to get caught up in the churn of frameworks and languages and tools, so I want to use this post as
an opportunity to contextualize each transition that Artsy’s web presence has made over the past seven years. We’ve
changed technologies, but we’ve tried to do so with care and attention. Documenting these decisions is important
(and is ideally done <a href="https://ashfurrow.com/blog/contemporaneous-blogging/">contemporaneously</a>), but even with the best documentation, <a href="https://github.com/artsy/artsy.github.io/pull/489#discussion_r221301472">sometimes our own documentation
is unclear to us</a>.</p>

<p>In an effort to help contextualize our web frontend (which is <a href="https://github.com/artsy/force">open source</a>), this blog post will document
the major transitions that Artsy’s web presence has made over the past seven years. Let’s begin!</p>

<!-- more -->

<h2 id="backbone--coffeescript">Backbone + CoffeeScript</h2>

<p>Artsy as you know it today began as a standard Rails application. We ran <code class="language-plaintext highlighter-rouge">git init</code> in January 2011, which coupled
our backend API to our web frontend, but since our frontend was just a fancy user interface for our API, this
worked for over two years. The web app itself was a kind of simplified MVC – controller logic lived inside the
views and models dealt with backend communication and notifying the view of state changes. For CSS, we used the
SASS CSS preprocessor. The Rails backend served initial pages that were then populated with follow-up API calls
made on the client-side. At a <em>very</em> high level, this isn’t <em>that</em> different from what we do today with React.</p>

<p>Our site was built with a framework called <a href="http://backbonejs.org">Backbone</a>, which was really well-suited for our needs at the time.
From their documentation:</p>

<blockquote>
  <p>Philosophically, Backbone is an attempt to discover the minimal set of data-structuring (models and collections)
and user interface (views and URLs) primitives that are generally useful when building web applications with
JavaScript. In an ecosystem where overarching, decides-everything-for-you frameworks are commonplace, and many
libraries require your site to be reorganized to suit their look, feel, and default behavior — Backbone should
continue to be a tool that gives you the <em>freedom</em> to design the full experience of your web application.</p>
</blockquote>

<p>As an outsider to the web at that time, I can’t comment too heavily on Backbone. It seems like the freedom
(emphasis theirs) that they describe is a freedom from tangled jQuery code everywhere. I think our definition of
freedom on the web frontend has evolved since then, but that’s just my feeling.</p>

<p>The other key component to our web frontend was <a href="https://coffeescript.org">CoffeeScript</a>. According to its documentation, “CoffeeScript is
a little language that compiles into JavaScript”, which was pretty important at the time. JavaScript in 2011 was
very different from JavaScript today. The CoffeeScript docs also state that “JavaScript has always had a gorgeous
heart”, which I’m not sure I’d agree with to be honest, but the CoffeeScript project really shows how a handful of
engineers working to improve something they care about can change an entire industry. While I don’t think
contemporary JavaScript would have gotten as good as it has without CoffeeScript, it’s a bit anachronistic to see
it used today.</p>

<p>Our goal as a (very small!) engineering team at the time was to keep our moving parts to a minimum.
Rails+SASS+CoffeeScript+Backbone helped us achieve that goal, and we couldn’t have gotten this far without the help
of those projects.</p>

<h2 id="ezel--friends">Ezel &amp; Friends</h2>

<p>In November 2013, we split our web frontend from the API backend. You can read
<a href="2013_review">all the details in this blog post</a>, but the story is summarized nicely as “moving from a single
monolithic application to modular Backbone apps that run in Node and the browser and consume our external API.”
This move from monolith to modular systems continues to influence day-to-day work on the Artsy Engineering team.</p>

<p>We had already started moving away from a typical Rails app by moving our API to <a href="https://github.com/ruby-grape/grape">Grape</a> in order to support an
iOS application. The monolith also had some clear drawbacks including severe page load times, maintaining
duplicated backend and frontend UI templates, slow test suites, and poor developer productivity. We took the
project of building our mobile web frontend, m.artsy.net (still known as “martsy” internally) as an opportunity to
address these problems.</p>

<p>We built our new site with <a href="https://github.com/ruby-grape/grape">Node.js</a> since it allowed us to share and consolidate our server/client rendering
code. We split out areas of concern into separate “apps”, with their own bundled CSS/JS to help page load times. We
server-side rendered above-the-fold content and used client-side JS to load the rest, which helped SEO and user
experience. We took a <a href="http://getbem.com/introduction/">BEM</a>-like approach to our CSS, which helped developer productivity. Our technical
decisions were driven primarily by our desire to create great user experiences.</p>

<p>And because we are an open source by default organization, we collected these approaches into an open source
project called <a href="https://github.com/artsy/ezel">Ezel</a>. While our main app used this Ezel approach, other new web apps – CMS systems for our
partners, auction-management systems for our admins, etc – were built on new internal tools to share assets and
code across the apps. We experimented a lot; we got pretty good at sharing resources across codebases. Most of our
web projects started on Heroku before moving to heavier-duty deployments as needed. Our frontend mindset at the
time (2015) was focused on getting to a stable, predictable stack. However… we started experimenting with React
around the same time.</p>

<p>CoffeeScript and Backbone were still working for us, and we still use them in production in many systems. However,
the state of the art in web development moved on. When I joined the auctions team and helped maintain one of our
CoffeeScript+Backbone apps, I was <em>very</em> confused about how data flowed from one part of the app to another, across
languages, with a lot of magic happening. I think that’s typical in these kinds of apps – “convention over
configuration” is a good mantra <em>if</em> you can expect that incoming engineers are familiar with the conventions.
That’s just not the case anymore.</p>

<p>By 2016, we had <a href="http://artsy.github.io/blog/2015/04/08/creating-a-dynamic-single-page-app-for-our-genome-team-using-react/">experimented with React</a> and followed up with <a href="http://artsy.github.io/blog/2016/08/09/the-tech-behind-live-auction-integration/">another app built with the
technology</a>. React (and Redux) were very well-suited for our realtime auction bidding UI, and would later
prove helpful in our <a href="https://github.com/artsy/positron">editorial CMS</a>. These experiences helped prove the technology was ready for
production use <em>and</em> convinced us that React was great at reducing the complexities of building user interfaces
(the realtime nature of our auctions product was particularly well-suited for Redux’s state management; it was our
first from-scratch React app).</p>

<p>When the Artsy business require us to make changes to how we build software, like splitting up our monolith, we try
to take full advantage of those changes to improve how we work, which means evaluating new tools. Adopting Node.js
and Ezel wouldn’t make sense today, but at the time, they helped us scale up Artsy’s business without the same
scaling up of our engineering resources. Ezel helped us do more with less, which is still an important criteria we
use for evaluating new tools.</p>

<h2 id="react">React</h2>

<p>By 2017, the divisions between our mobile frontend and web frontend teams had been totally dissolved (as they
should – the division between mobile and web developers is a false dichotomy). Our <a href="http://artsy.github.io/blog/2017/04/14/artsy-technology-stack-2017/">2017 tech stack
post</a> discusses this in depth, but our goal was really to unify the paradigm that frontend engineers
at Artsy use to build user interfaces, whether that’s on mobile or web. React and React Native were our answer to
that challenge.</p>

<p>On the web side of things, however, Artsy had another challenge. Sure, React is great, and sure, it’s how we want
to build user interfaces, but how do we get there? We’re not fans of large rewriting projects, so we opted for what
we call an “incremental revolution” approach. We built a library called <a href="https://github.com/artsy/stitch">Stitch</a> that would let us mount React
components inside our existing app. Using this approach, we could migrate to React component-by-component. We’ve
been using Stitch in production for over a year and have been very happy with its approach; you can read more
details of integrating it into our main frontend app <a href="http://artsy.github.io/blog/2017/09/05/Modernizing-Force/">in this blog post</a>.</p>

<p>Today, principal React work takes place in <a href="https://github.com/artsy/reaction">a shared components repo</a>. We share these components across
several of our web apps using Stitch. We have been pretty pleased with the results! But our dive into React is only
just beginning. The community is moving quickly to figure out what best practices make sense in the React paradigm,
and we’re a part of that. We are evaluating technologies like <a href="https://www.styled-components.com">styled-components</a> and <a href="https://jxnblk.com/styled-system/">styled-system</a> to create
a universal design system within Artsy. The area is under very active development, so I’ll save details for a
future blog post.</p>

<p>I can’t go too much further without talking about GraphQL. v1 of our API (REST) is still in use around much of
Artsy and, despite the best efforts of some of our engineers, v2 of our API (<a href="http://stateless.co/hal_specification.html">HAL</a>) hasn’t gained significant
internal use yet. Instead, we found ourselves building a <a href="https://graphql.org">GraphQL</a> server to orchestrate API calls to our
existing APIs. This confers many benefits, which I describe from a mobile perspective in some detail <a href="https://ashfurrow.com/blog/the-spirit-of-moya/">here</a>.
The key thing to understand about our GraphQL server, <a href="https://github.com/artsy/metaphysics/">which is open source</a>, is that it is under the
stewardship of our frontend engineers, not our platform engineers. That’s not to say that our platform team isn’t
involved with its development – in fact, they’ve been key to scaling it up – but Artsy frontend engineers created
the server to help us build better UIs, and while the technology is still very new, we continue to see it pay
dividends.</p>

<p>Okay so remember earlier when I said that we dissolved our mobile team? Well, I was on that team and it wasn’t like
our mobile engineers all learned how Artsy does web – we brought our culture and tools with us and, together with
our web colleagues, have built an integrated engineering team that’s greater than the sum of its parts. One thing
that was important to mobile engineers was type safety, so we had to have a conversation about JavaScript.</p>

<p>On its own, JavaScript can’t guarantee type safety. We investigated two options: <a href="http://www.typescriptlang.org">TypeScript</a> and <a href="https://flow.org">Flow</a>. <a href="http://artsy.github.io/blog/2017/02/05/Front-end-JavaScript-at-Artsy-2017/">This
blog post</a> goes into detail about our decision, but tl;dr we chose TypeScript. We have been building (and
helping to build) tools <a href="https://github.com/relay-tools/relay-compiler-language-typescript">relay-compiler-language-typescript</a> to take full advantage of interoperability
between TypeScript types and GraphQL types through <a href="https://facebook.github.io/relay/">Relay</a>, as well as using Babel 7 to migrate existing projects
to TypeScript incrementally, which you can read about in more detail <a href="https://artsy.github.io/blog/2017/11/27/Babel-7-and-TypeScript/">here</a>. It’s all very exciting – you
can read more on how Relay and GraphQL interoperate <a href="http://artsy.github.io/blog/2018/07/25/Relay-Networking-Deep-Dive/">in this blog post</a>.</p>

<p>We started building software in React not because it was trendy, but because it helped our engineering team deliver
more value to the business. It’s been a huge success, but not without its costs. We’ve tried to mitigate those
costs by using tools like Stitch to migrate apps to React incrementally, and through spreading knowledge of how our
stack through internal knowledge-sharing like <a href="http://artsy.github.io/series/javascriptures/">JavaScriptures</a>. While the transition to React has had its costs,
<em>not</em> moving would also be costly, too.</p>

<hr />

<p>Since I joined Artsy, I’ve seen us continually investing in tooling that helps us build better software. The
results of this culture-of-continuous-improvement speak for themselves: with fewer than 30 engineers total, we
support a growing company with a suite of software built for many canvasses <em>and</em> we have an outsized impact on the
software industry relative to our size. Our frontend web stack is just one facet of our evolving technology –
there’s lots of exciting stuff on the backend, too (<a href="https://github.com/artsy/hokusai">for example…</a>). Through my research for this blog
post, I learned a lot about what drives technological decisions on our team. From humble beginnings as a Rails app,
to CoffeeScript and Bootstrap, to React and GraphQL, Artsy Engineering has evolved our frontend software to achieve
a quality worthy of art – both from the user’s perspective and from the developer’s. I’m very excited about what’s
coming next, and I can’t wait to share it with you. Have a great day!</p>

]]></content>
  </entry>
  
</feed>
