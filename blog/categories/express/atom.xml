<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Express | Artsy Engineering]]></title>
  <link href="https://artsy.github.io/blog/categories/express/atom.xml" rel="self"/>
  <link href="https://artsy.github.io/"/>
  <updated>2024-08-06T19:48:16+00:00</updated>
  <id>https://artsy.github.io/</id>
  <author>
    <name><![CDATA[]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Express Reloadable: Optimizing Express.js Development Speed]]></title>
    <link href="https://artsy.github.io/blog/2017/12/05/Express-Reloadable-Update/"/>
    <updated>2017-12-05T14:18:00+00:00</updated>
    <id>https://artsy.github.io/blog/2017/12/05/Express-Reloadable-Update</id>
    <content type="html"><![CDATA[<p>In <a href="artsy.github.io/blog/2017/09/05/Modernizing-Force/">Modernizing Force</a> we discussed some of the tools we’ve been working with to modernize <a href="https://www.artsy.net/">Artsy.net</a>’s development environment, from introducing Babel and React to the creation of <a href="https://github.com/artsy/stitch">@artsy/stitch</a>. Increasing overall development speed was another aim, and to that end we released <a href="https://github.com/artsy/express-reloadable">@artsy/express-reloadable</a> which automatically hot-swaps Express.js code without the restart. In this post I’d like to cover some of the issues we’ve faced since then, and in particular our solution to library code-sharing in Express apps.</p>

<!-- more -->

<p>It’s common to share NPM packages across projects, and oftentimes packages are developed in parallel. Package <code class="language-plaintext highlighter-rouge">A</code> depends on <code class="language-plaintext highlighter-rouge">B</code>, but <code class="language-plaintext highlighter-rouge">B</code> has a bug and you don’t want to have to republish (and reinstall) the package in order to see changes made locally. <code class="language-plaintext highlighter-rouge">yarn link</code> (or <code class="language-plaintext highlighter-rouge">npm link</code>) was developed for instances like this and while it works great for stop and start processes where boot time is quick, it falls short if the development environment takes a while to load. In UI-rich environments like <a href="https://github.com/artsy/positron">Positron</a> (our Publishing CMS called “Writer”) and <a href="https://github.com/artsy/force">Force</a>, each boot would come at a high time-cost due to upfront compilation of assets. Tools like <a href="https://github.com/remy/nodemon">nodemon</a> would automatically stop and start our server process when assets changed but that still didn’t alleviate slow iteration times.</p>

<p>To recap from a <a href="/blog/2017/09/05/Modernizing-Force#iteration-time">previous post</a>, <a href="https://github.com/artsy/express-reloadable">@artsy/express-reloadable</a> allows devs to immediately see changes to running Express.js app code:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">express</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">express</span><span class="dl">'</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">createReloadable</span><span class="p">,</span> <span class="nx">isDevelopment</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">@artsy/express-reloadable</span><span class="dl">'</span>

<span class="kd">const</span> <span class="nx">app</span> <span class="o">=</span> <span class="nx">express</span><span class="p">()</span>

<span class="k">if</span> <span class="p">(</span><span class="nx">isDevelopment</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">mountAndReload</span> <span class="o">=</span> <span class="nx">createReloadable</span><span class="p">(</span><span class="nx">app</span><span class="p">,</span> <span class="nx">require</span><span class="p">)</span>
  <span class="nx">mountAndReload</span><span class="p">(</span><span class="dl">'</span><span class="s1">./api</span><span class="dl">'</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Changes made within the <code class="language-plaintext highlighter-rouge">api</code> folder are detected and instantly hot-swapped in, and all that’s required is a new http request; this is down from an average dev cycle of about 40 seconds for Artsy.net. However, we found an exception while building out Artsy’s new <a href="https://www.artsy.net/article/artsy-editorial-midwest-made-artists-mike-kelley-jim-shaw">editorial pages</a>, which involved sharing React components from our UI library <a href="https://github.com/artsy/reaction">Reaction</a> <a href="https://github.com/artsy/positron/blob/master/client/apps/edit/components/content/section_tool/index.jsx#L11">between Positron</a> <a href="https://github.com/artsy/force/blob/master/desktop/apps/article/components/InfiniteScrollArticle.js#L9">and Force</a>. Even though we ran <code class="language-plaintext highlighter-rouge">yarn link @artsy/reaction</code> in each consumer app, changes would not be detected and so we had to do a full restart.</p>

<p>To address this, a new <code class="language-plaintext highlighter-rouge">watchModules</code> feature <a href="https://github.com/artsy/express-reloadable/pull/3">was added</a>:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">mountAndReload</span><span class="p">(</span><span class="dl">'</span><span class="s1">./api</span><span class="dl">'</span><span class="p">,</span> <span class="p">{</span>
  <span class="na">watchModules</span><span class="p">:</span> <span class="p">[</span>
    <span class="dl">'</span><span class="s1">@artsy/reaction</span><span class="dl">'</span><span class="p">,</span>
  <span class="p">]</span>
<span class="p">})</span>
</code></pre></div></div>

<p>Similar to how files in <code class="language-plaintext highlighter-rouge">api/</code> are hot-swapped in on change, symlinked NPM modules placed in the <code class="language-plaintext highlighter-rouge">watchModules</code> array will now be reloaded, too.</p>

<p>References:</p>

<ul>
  <li><a href="https://github.com/artsy/express-reloadable">@artsy/express-reloadable</a></li>
  <li><a href="https://github.com/artsy/positron">Positron</a></li>
  <li><a href="https://github.com/artsy/reaction">Reaction</a></li>
  <li><a href="https://github.com/artsy/force">Force</a></li>
</ul>
]]></content>
  </entry>
  
</feed>
