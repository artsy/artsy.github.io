<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: concepts | Artsy Engineering]]></title>
  <link href="https://artsy.github.io/blog/categories/concepts/atom.xml" rel="self"/>
  <link href="https://artsy.github.io/"/>
  <updated>2024-08-07T18:22:11+00:00</updated>
  <id>https://artsy.github.io/</id>
  <author>
    <name><![CDATA[]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Engineering Highlights]]></title>
    <link href="https://artsy.github.io/blog/2018/10/18/long-term-highlights/"/>
    <updated>2018-10-18T00:00:00+00:00</updated>
    <id>https://artsy.github.io/blog/2018/10/18/long-term-highlights</id>
    <content type="html"><![CDATA[<p>Engineering is an inherently long-term process. The Artsy engineering team has been around for 7 years, and that’s
quite a lot of time to get things done. We use software that keeps track of changes over time thanks to source
control, but tools like git only help keep track of small passages of time. I want to keep track of events that
could take months to ship.</p>

<p>We’ve been doing a lot of long-term introspection as a team in 2018. Externally, this has been visible through
things like opening our docs and creating our engineering principles. I’m expanding on this with an idea that I
took from my work in building large open source projects: <a href="https://github.com/artsy/README/blob/master/culture/highlights.md#readme">Highlight docs</a>.</p>

<!-- more -->

<p>I’ve been the main contributor for <a href="https://danger.systems/">Danger</a> and <a href="https://github.com/danger/peril">Peril</a> for about three years, working mostly solo, and it can
be hard to feel like you’re actually getting things done. There’s an infinite backlog of people’s requests for
improvements, and polite mentions of the flaws in your work. So, as a counter-balance it’s nice to take stock of
events you’re proud of. I initially mocked this out as <a href="https://github.com/danger/peril/issues/235">an issue in the peril repo</a> but when I
re-applied the idea to the whole of Artsy I used our existing open documentation repo <a href="https://github.com/artsy/README/"><code class="language-plaintext highlighter-rouge">artsy/README</code></a>
instead.</p>

<p>The core idea isn’t complicated, however it’s somewhat time-consuming and requires collaborators. I used the best
method I know for getting a lot of people’s attention: spamming slack threads asking folks what were some of their
highlights. I used these to fuel the main arcs of the doc.</p>

<p>A lot of the time, just starting something like this and putting some effort in up-front means others will start to
participate. The trickiest part was finding the right definitive links for a particular event. Ideally we have open
links (so people without private GitHub access (internally and externally) can enjoy them) but sometimes the right
link is private and that’s ok. It’s not open source by diktat.</p>

<p>Trying to find the right balance between an “Artsy” event vs an “Engineering” event can sometimes be a bit vague,
but I like to believe that more is more. It’s about pointing out important events, so more is always a net
positive. With that in mind, here’s a few of ours, the rest is a click away:</p>

<p><a href="https://github.com/artsy/README/blob/master/culture/highlights.md#readme"><img src="/images/highlights/highlights.png" /></a></p>

<p>I think I’m going to make one of these with every new large scale project I work on, I kinda wish we had one for
the Artsy iOS app now. Maybe I’m going to need to do that now. Ergh, this is what I get for writing blog posts.</p>

<p>I’d love to see some other companies or OSS projects using this idea - let me know in the comments if you are!</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Defining Our Engineering Guiding Principles]]></title>
    <link href="https://artsy.github.io/blog/2018/08/22/engineering-guiding-principles/"/>
    <updated>2018-08-22T00:00:00+00:00</updated>
    <id>https://artsy.github.io/blog/2018/08/22/engineering-guiding-principles</id>
    <content type="html"><![CDATA[<p>The Artsy Engineering team recently underwent the process of defining our guiding principles; you can read through the pull request <a href="https://github.com/artsy/meta/pull/41">here</a> and the finished principles <a href="https://github.com/artsy/README/blob/master/culture/engineering-principles.md">here</a>. In this blog post, I’d like to use our experience of defining these to answer the following questions:</p>

<ul>
  <li>Why define engineering guiding principles?</li>
  <li>What makes principles different from company values?</li>
  <li>How to define guiding principles?</li>
</ul>

<p>Let’s dive in.</p>

<!-- more -->

<h2 id="why-define-engineering-principles">Why Define Engineering Principles?</h2>

<p>Artsy’s CEO has a <a href="https://www.artsy.net/article/carter-cleveland-why-define-company-values">blog post</a> that discusses why you should define company values and, unsurprisingly, a lot of the same rationale applies to an engineering team’s guiding principles. In summary:</p>

<ul>
  <li>Undefined principles lead to cultural debt (similar to technical debt, but in terms of a team’s culture).</li>
  <li>Defined values lead to greater empowerment (engineers feel safe making decisions on their own, based on the principles).</li>
  <li>Defined values reduce the risk of unconscious bias (we help our decisions get made consistently).</li>
  <li>Values are your brand (this is true for Artsy Engineering, but our <a href="https://github.com/artsy">contributions</a> to the software industry are also a significant part of brand).</li>
</ul>

<p>I think each of these reasons applies to defining guiding principles as well. Over the past four years, I’ve seen the Artsy Engineering team encounter situations related to the reasons outlined above and, while the company values have helped us navigate disagreement, they haven’t been entirely satisfactory.</p>

<p>The two biggest shortcomings of the values have been an <strong>inconsistent practice</strong> and a <strong>difficulty making team-based decisions</strong>.</p>

<p>Artsy Engineering supports the business primarily through product teams, which each have their own responsibilities and KPIs. Over time, different teams have developed their own subculture. In earnest, I think this is really cool, but it <em>has</em> eventually led to two teams taking radically different approaches to similar problems, or even repeating work that another team is already working on.</p>

<p>That missing consistency also led to difficulties making team-based decisions: how can teams make decisions <em>as a team</em> without having a clear set of guidelines with which to evaluate a decision? As I’ll explain in the next section, the Artsy company values often left us without a clear answer.</p>

<h2 id="what-makes-guiding-principles-different-from-company-values">What Makes Guiding Principles Different from Company Values?</h2>

<p>Artsy’s <a href="https://github.com/artsy/README/blob/master/culture/what-is-artsy.md#artsy-values">five core values</a> are as follows:</p>

<ul>
  <li>Art meets Science</li>
  <li>People are Paramount</li>
  <li>Quality Worthy of Art</li>
  <li>Positive Energy</li>
  <li>Openness</li>
</ul>

<p>Those have been an incredibly useful framework for guiding Artsy’s growth, for three years now. They’re good values. But they are <em>very</em> general, designed specifically to be inclusive of every member of, and every team in, our company.</p>

<p>That can lead to challenges when applying the values to specific teams, including engineering. In our day-to-day work, the values can help guide our general actions (being positive in pull request reviews, for example), but lack the specifics necessary to drive decision-making on a team level. The values also sometimes conflict with one another, and navigating those conflicts is difficult without a set of down-to-Earth guiding principles.</p>

<p>Let’s take a look at an example. “Quality Worthy of Art” is a really great value – personally, it motivates me to build software that would be worthy of hanging in a studio or gallery. However, the process of <em>getting</em> to that quality is often very messy; we might try one approach, switch to another, ship with <code class="language-plaintext highlighter-rouge">TODO</code> comments left in, etc. Real artists ship, after all. When <a href="http://artsy.github.io/series/open-source-by-default/">developing software in the open</a>, which value wins? The openness value, or the quality value?</p>

<p>Our CEO has encouraged the company to lean into these tensions and use them to grow and learn together, which was a motivating factor in defining our guiding principles.</p>

<h2 id="how-to-define-guiding-principles">How to Define Guiding Principles?</h2>

<p>This is a very tricky question, since so much of the answer for Artsy Engineering is specific to us at Artsy (your process will necessarily be different) and specific to our team <em>within</em> Artsy (engineers make up less than 15% of Artsy’s employee headcount). Orta helped define the values by looking at <a href="https://www.objc.io/issues/22-scale/artsy/">artefact’s of our mobile team’s culture</a> (since our mobile team <em>did</em> have a strong culture) and by talking to engineers privately to ask them for input. That was only half the work, though.</p>

<p>Orta opened <a href="https://github.com/artsy/meta/pull/41">the pull request</a> with the guiding principles that he had synthesized from past documentation and from conversations with engineers, but explicitly marked the PR as a work-in-progress. The values he had were a good starting point, but we iterated extensively on them. We also added many more that had been missed by Orta’s starting work (we had to start somewhere, after all). The whole process took about two weeks, and I learned a lot about how other engineers work at Artsy.</p>

<p>Most of my experience at Artsy has been engineering front-end systems, and through the process of defining these principles, I learned a lot about how our back-end engineers work. We don’t always work in the same way (remember, tensions?) but I value those differences; we have so much to learn from each other! Now with the guidelines, I’ll be able to appreciate the back-end perspective.</p>

<hr />

<p>So with all that said, what are the Artsy Engineering Guiding Principles? You can read the <a href="https://github.com/artsy/README/blob/master/culture/engineering-principles.md">current principles here</a> (they are a living set of guidelines), but the principles we decided on are:</p>

<ul>
  <li>Open Source by Default</li>
  <li>Own Your Dependencies</li>
  <li>Incremental Revolution</li>
  <li>Being Nice is Nice</li>
  <li>Minimum Viable Process</li>
  <li>Leverage Your Impact</li>
  <li>De-silo Engineers</li>
  <li>Build for 10x</li>
  <li>Done Means Done</li>
</ul>

<p>I encourage you to read the document for explanations of what each of these mean.</p>

<p>Day-to-day, I don’t expect <em>that</em> much to change now that we have these defined. But the differences they make will be key to the longevity and growth of our engineering team’s culture.</p>

<p>Remember that earlier example of openness-vs-quality? That is answered explicitly by the principles. The principles are <em>actionable</em>, they are <em>specific</em>, and they are <em>ours</em>.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Context Switching]]></title>
    <link href="https://artsy.github.io/blog/2018/08/10/On-Context-Switching/"/>
    <updated>2018-08-10T00:00:00+00:00</updated>
    <id>https://artsy.github.io/blog/2018/08/10/On-Context-Switching</id>
    <content type="html"><![CDATA[<p>Programming generally requires getting into a good <a href="https://en.wikipedia.org/wiki/Flow_(psychology)">flow state</a> and working on a tricky problem for some time.
In the last 2 years, most of my work at Artsy (and in the OSS world) has been less about longer-term building of
hard things, but working on many smaller tasks across a lot of different areas.</p>

<p>Somehow, during this period I managed to end up in the top of “most active” <a href="https://gist.github.com/paulmillr/2657075">GitHub members</a>, I feel like a
lot of this is due to doing <a href="http://artsy.github.io/series/open-source-by-default/">Open Source by Default</a> at Artsy and second to being good at context switching. I
want to try and talk though some of my techniques for handling context switching, as well as a bit of philosophy
around adopting and owning your tools.</p>

<!-- more -->

<h2 id="shallow-and-wide-work">Shallow and Wide Work</h2>

<p>I want to encourage as many people as possible to work on fun, deep-flow projects at Artsy. One of the most
successful ways of achieving this, that I’ve found, is to spend most of my time working on shallower tasks. An
example from my last few weeks is hiring. The communication aspects require dozens of emails and internal updates
that can’t be scheduled into safe blocks. <em>(<a href="https://www.artsy.net/jobs#engineering">Totally related BTW, we’re hiring</a>.)</em></p>

<p>For programming work I have a few techniques for trying to accomplish a lot of shallow tasks across many repos.</p>

<p>Start off by making yourself accountable to someone. For my OSS, this tends to either be <a href="https://github.com/orta/cocoapods-fix-react-native#contributing-back">setting expectations</a>
in README or using <a href="https://github.com/danger/danger-js/blob/master/VISION.md#danger-for-js">a VISION</a> file. For Artsy work we have product managers and engineers who own the
projects I’m contributing to. For this blog post, it’s my <a href="http://artsy.github.io/author/chris/">buddy Chris</a>.</p>

<p>I would then strive to get <em>anything</em> out, this could be a work-in-progress PR or via declaratively via
<a href="https://tom.preston-werner.com/2010/08/23/readme-driven-development.html">README-driven-development</a>. Part of this is because you might end up being dragged off into something else,
and another is that you’re less likely to grok the domain better than your reviewers. Whilst not every change is an
improvement, every improvement adds up - even in small increments.</p>

<p>One way to instantly get rich domain knowledge is by pairing with someone who is more involved. This is a perfect
way to understand how decisions were made and provides great insight into how someone works on a project. While
pairing, you might also find additional ways to improve the daily workflow for someone else too!</p>

<p>Trying to have a shallow and wide understanding of many systems means accepting that you can’t know the finer
details about how everything works. You want to know when really big interesting things are happening, but most work
should be iterative and less relevant to external folk like you.</p>

<p>With this in mind you can change your perspective to aim for having overviews on many things, but not get bogged
down in the useful discussion.</p>

<p>Techniques for this are:</p>

<ul>
  <li>
    <p>Making a custom stream of updates and not being too concerned about reading every single one of them. For Artsy,
with many contributors and contexts - I create slack channels like: <code class="language-plaintext highlighter-rouge">#front-end-ios-notifs</code>,
<code class="language-plaintext highlighter-rouge">#front-end-web-notifs</code>, <code class="language-plaintext highlighter-rouge">#orta-misc-notifs</code> and business specific ones like <code class="language-plaintext highlighter-rouge">#consignments-notifs</code> that contain
PR or Issue information creation from GitHub but nothing with more details. I do the same but smaller for Danger
and CocoaPods.</p>
  </li>
  <li>
    <p>I set <a href="https://get.slack.help/hc/en-us/articles/201398467-Set-up-keyword-notifications">Slack keywords</a> to key GitHub repo names, or internal facing app names that I care about. This
means I don’t have to monitor every channel.</p>
  </li>
  <li>
    <p>I don’t read my email. All 13,489 of them right now. I read the subjects and decide if it’s worth reading. Every
few months I declare inbox zero so others are less distracted by the number.</p>
  </li>
</ul>

<p>The tricky thing with this sort of work is trying not to be a blocker for someone else. A lot of this is about being
cautious about what you strive to help with, and about finding ways to boost others asynchronously. Am I good at
this? Sometimes. It’s easier in OSS thanks to the the limited liability clauses, but in work-work that can be hard.</p>

<p>When my contributions are larger and I know the domain well, for example in a front-end JavaScript project, I am
willing to take longer than I’d like to ensure that it is reference level quality. A recent example came up in a
retrospective last month when an engineering team at Artsy said that one of <a href="https://github.com/artsy/emission/tree/master/src/lib/Components/Consignments">my projects</a> was a key
reference for testing and React Native form handling for them. Pulling off this can definitely take longer than
expected, but if you’re not going to be the one maintaining it then holding yourself to a higher standard is worth
it.</p>

<h2 id="deep-automation">Deep Automation</h2>

<p>Remove as much ambiguity as possible for discussion. Project tools like <a href="https://prettier.io">prettier</a> really help focus code review
away from the petty formatting issues. Linters like <a href="https://github.com/palantir/tslint">tslint</a>, <a href="https://eslint.org">eslint</a> and <a href="https://www.github.com/bbatsov/rubocop">rubocop</a> remove another series of
discussion points. When you find yourself surprised by a cultural rule for a codebase, add <a href="https://danger.systems">a danger</a> rule
so you and others have it codified. Use tools like <a href="https://github.com/typicode/husky">husky</a> and <a href="https://github.com/okonet/lint-staged">lint-staged</a> to get that feedback when you’re
still in a development context. Danger can even run as a <a href="http://danger.systems/js/tutorials/fast-feedback.html">git-hook/husky task</a> too, so that feedback
can be <em>blazing</em> too.</p>

<p>You can automate via tools, sure, but you can also encourage independent work via documentation.(TO DO: saves your
time, but isn’t “automation”) If something is confusing enough that, as an outsider, you don’t get it without
asking, you should start adding documentation. I can’t tell you what that looks like because it’s different
per-project, but at least try to make it so the next person doesn’t need to ask.</p>

<p>I strive to use my time on a project to encourage more consolidation, in the case of front-end that’s moving closer
to <a href="https://www.youtube.com/watch?v=1Z3loALSVQM">the Artsy omakase</a>. In the case of servers that could be encouraging new APIs to use GraphQL, or to adopt
some of our newer ideas about schema management.</p>

<h2 id="impact-per-keystroke">Impact per Keystroke</h2>

<p>I’m a firm believer in customising your environment. Does that suck for pair programming? Yes. Can we deal with it?
Yes. I’m gong to assume you’re on a Mac. An out of the box Mac comes with some solid developer tools, and Apple are
good at <a href="http://artsy.github.io/blog/2017/02/05/Retrospective-Swift-at-Artsy/#Developer.Experience">taking</a> some of the communities good ideas and giving it to everyone.</p>

<p>However, there’s definitely space for independent apps. Here’s a list of apps broken into genres. You should be
running at least one from each genre, and have it’s features deeply committed to memory. The ones in bold are what I
use.</p>

<ul>
  <li>Window Management: <a href="https://manytricks.com/moom/"><strong>Moom</strong></a>, <a href="http://magnet.crowdcafe.com">Magnet</a>,
<a href="https://www.spectacleapp.com">Spectacles</a>, <a href="http://mizage.com/divvy/">Divvy</a></li>
  <li>Effective Keyboard Shortcuts: <a href="https://shortcatapp.com"><strong>Shortcat</strong></a>, <a href="https://keytty.com">Keytty</a>,
<a href="https://vimium.github.io">Vimium</a>/<a href="https://github.com/guyht/vimari"><strong>Vimari</strong></a></li>
  <li>Clipboard Manager: <a href="https://www.alfredapp.com"><strong>Alfred</strong></a>, <a href="https://tapbots.com/pastebot/">Pastebot</a>,
<a href="http://www.keyboardmaestro.com/main/">Keyboard Meastro</a></li>
  <li>Recently changed files: <a href="http://www.ironicsoftware.com/fresh/"><strong>Fresh</strong></a>,
<a href="http://www.ironicsoftware.com/fresh/"><strong>Alfred</strong></a></li>
  <li>Text Snippets: <a href="https://www.alfredapp.com"><strong>Alfred</strong></a>, <a href="https://textexpander.com/">TextExpander</a>, macOS System
Settings</li>
  <li>Terminal: <a href="https://iterm2.com"><strong>iTerm 2</strong></a>, <a href="https://hyper.is">Hyper</a></li>
  <li>Learning Keyboard Shortcuts: <a href="https://www.mediaatelier.com/CheatSheet/"><strong>CheatSheet</strong></a></li>
  <li>Shell: <a href="https://github.com/robbyrussell/oh-my-zsh">Oh my ZSH</a>, <strong><a href="http://fishshell.com">Fish</a> +
<a href="https://fisherman.github.io">Fisherman</a></strong></li>
  <li><em>Simple</em> Note Taking: <a href="http://brettterpstra.com/projects/nvalt/"><strong>nvalt</strong></a>,
<a href="https://culturedcode.com/things/"><strong>Things</strong></a>, Notes.app, <a href="https://evernote.com">Evernote</a></li>
</ul>

<p>Use native apps by default, they are better for your time. Native apps will usually conform to the <a href="https://developer.apple.com/design/human-interface-guidelines/macos/overview/themes/">Human Interface
Guidelines</a>, which means logical shortcuts and great accessibility support. This is good because tools like
<a href="https://shortcatapp.com">Shortcat</a> rely on that.</p>

<p>Electron-y apps made the most sense when there is a big
<a href="https://unix.stackexchange.com/questions/137820/whats-the-difference-of-the-userland-vs-the-kernel">user-land</a>
customization scene. So, basically if there’s a community around extending the app (<a href="https://hyper.is">Hyper</a> is a
reasonable example, <a href="https://code.visualstudio.com">Visual Studio Code</a> and <a href="https://atom.io">Atom</a> are the best
example) then Electron apps make sense.</p>

<p>Some highlights for non-native apps are <a href="https://mailplaneapp.com">Mailplane</a> and
<a href="https://code.visualstudio.com">Visual Studio Code</a>.</p>

<p>Every second you’re at a computer you should be feeling like it’s 1-2-3 hotkeys away from whatever you want to do
next. For example:</p>

<ul>
  <li>Your terminal should be a <a href="https://www.youtube.com/watch?v=ETskRNFeuGM">single keypress away</a></li>
  <li><a href="https://github.com/orta/keyboard_shortcuts#using-a-mac">Learn the keys for OS X</a> so you can jump/delete words</li>
  <li><a href="https://www.youtube.com/watch?v=4CRbJwOctMo">Resize/move windows with modal commands</a></li>
  <li><a href="https://www.neat.io/bee/">Making a new Jira ticket with a hotkey</a></li>
  <li><a href="/images/context-switching/sketch.mov">Open any recent file per-app</a></li>
  <li><a href="https://krausefx.com/blog/use-custom-shortcuts-for-every-application">Use a shortcut for every Mac app you use regularly</a></li>
</ul>

<p>App-wise there’s always more all of us can do, but constant improvement is key to getting there.</p>

<p>I think it’s worth stressing here that I believe in paying for my tools. I want to support independent devs, and my
time is worth orders of magnitude more than the cost of entry for this software. There may be similar versions of
what I noted above for free, they could be open source too - but I’d rather have more people working on our tools
full-time than people doing it in their spare-time.</p>

<h2 id="terminal-context-switching">Terminal Context Switching</h2>

<p>macOS’s UNIX underpinnings mean that a lot of common GUI activities have a CLI counter-part. To handle regular
context switching in the terminal you’ll need to customise the shell to give you information as you arrive in a new
context. Things that I find useful in a shell are:</p>

<ul>
  <li>What folder am I in?</li>
  <li>Is it a git repo?</li>
  <li>What branch am I on, or are there existing changes?</li>
  <li>Did the last command fail?</li>
  <li>Sometimes, what version of node/ruby is setup for this project?</li>
</ul>

<p>I think it’s also really useful to be able to jump between many development folders, you can use
<a href="https://github.com/rupa/z"><strong>z</strong></a>, <a href="https://github.com/wting/autojump">j</a> or
<a href="https://github.com/iridakos/goto">goto</a> for this. Or set up some custom
<a href="https://shapeshed.com/unix-alias/">aliases</a> for the most common folders.</p>

<p>As you’ll be spending a good chunk of time, it’s worth feeling comfortable that you know a few of the flags for
<code class="language-plaintext highlighter-rouge">cd</code>, <code class="language-plaintext highlighter-rouge">ls</code>, <code class="language-plaintext highlighter-rouge">mkdir</code>, <code class="language-plaintext highlighter-rouge">rm</code>, <code class="language-plaintext highlighter-rouge">cat</code>, <code class="language-plaintext highlighter-rouge">touch</code> and <code class="language-plaintext highlighter-rouge">grep</code>. Ideally, you have tab completion set up, and
<a href="https://stackoverflow.com/questions/6205157/iterm-2-how-to-set-keyboard-shortcuts-to-jump-to-beginning-end-of-line#10485061">natural keybindings</a>
set up in your terminal input.</p>

<h2 id="regular-re-tooling">Regular Re-tooling</h2>

<p>Take the time every few years to re-think your previous decisions, I try to start from scratch every 2-3 years, I’m
writing this on a MacBook that’s a week old and I’ve still not installed something from all of the above categories.
It’s a good time to re-evaluate your software priorities as your personal/professional aims/responsibilities change.</p>

<p>A pattern I aim to strive for with tools is:</p>

<ul>
  <li>Start with overkill to learn what you need.</li>
  <li>Migrate to smaller and simpler once you know what you want.</li>
</ul>

<h2 id="small-and-often">Small and Often</h2>

<p>It’s not a very traditional way to work as a programmer, but it fits my personality type and can really rack up the
commits and contributions across the board. Being able to quickly jump contexts makes a lot more sense in the node
ecosystem - where the boundaries between projects can be as small as per-function.</p>

<p>Working this way can make it really hard to monitor what you’ve done on a regular basis, a technique I’ve used to
stay on top of is <a href="https://github.com/kamranahmedse/git-standup">git-standup</a> and a dev folder structure that corresponds to <a href="https://twitter.com/orta/status/1028764128310185984">areas of work</a>. For
example, here’s what a week roughly looks like on a slow week for Danger/Peril for me:</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>~/dev/projects/danger
❯ git standup <span class="nt">-m</span> 7 <span class="nt">-d</span> 7
/Users/orta/dev/projects/danger/hazmat/peril
c1d6893 - Update danger <span class="o">(</span>2 days ago<span class="o">)</span> &lt;Orta Therox&gt;
/Users/orta/dev/projects/danger/danger-js
a90d74c - Version bump, and peril fix <span class="o">(</span>2 days ago<span class="o">)</span> &lt;Orta Therox&gt;
f4836a1 - Version bump <span class="o">(</span>2 days ago<span class="o">)</span> &lt;Orta Therox&gt;
fbbcc1c - Adds a create/update label <span class="k">function </span>to the github utils func <span class="o">(</span>2 days ago<span class="o">)</span> &lt;Orta Therox&gt;
702e51d - More dep updates <span class="o">(</span>4 days ago<span class="o">)</span> &lt;Orta Therox&gt;
</code></pre></div></div>

<p>Working this way requires trust from others that you’re doing things that are valuable, which can be tricky when
your responses to “what did you get up to yesterday” end up being a bit ephemeral. Tools like <code class="language-plaintext highlighter-rouge">git-standup</code> help on
the code front, and <a href="https://www.rescuetime.com">RescueTime</a> can help you understand how much time you’ve spent in greenhouse.</p>

<p>It’s your time, you should use it fastly.</p>

<p>Do you have any useful ideas for speeding up context switching? I’m open to improvements.</p>

]]></content>
  </entry>
  
</feed>
